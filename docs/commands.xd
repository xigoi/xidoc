[inject head.xd]
[style
  [rule h3;
    [: font-size; inherit]
  ]
  [rule table;
    [: border-collapse; collapse]
  ]
  [rule td,th;
    [: border; 1px solid #888]
    [: padding; 0rem 1rem]
    [: width; 50%]
    [: overflow-x; auto]
  ]
]
[def cmd; name signature explanation;
  [html-add-attrs #[arg name];
    [section [ms [color #666; [(]][color #ff4; [arg name]] [arg signature][color #666; [)]]];
      [p [arg explanation]]
    ]
  ]
]
[def cmd-nilad; name explanation;
  [section [ms [color #666; [(]][color #ff4; [arg name]][color #666; [)]]];
    [p [arg explanation]]
  ]
]
[def param; name; [ms [arg name]]]
[def cmd-ref; name; [link [ms [color #ff4; [arg name]]]; #[arg name]]]
[def ex; xidoc;
  [<table>
    [<tr> [<th> Example][<th> Output]]
    [<tr>
      [<td> [ms [arg-raw xidoc]]]
      [<td> [arg xidoc]]
    ]
  ]
]
[def math-cmd; name args;
  [<tr> #[() $][arg name];
    [<td> [ms [color #666; [(]][color #ff4; [arg name]] [arg args][color #666; [)]]]]
    [<td> [render [(]$$ [(][arg-expand name] [arg-expand args] [)] [)]]]
  ]
]

[section Top-level commands;
  [cmd ; whitespace;
    The empty command. Returns the whitespace inside the brackets, allowing it to be “escaped” in commands that strip whitespace.
  ]
  [cmd #; anything;
    Comment. Always returns nothing, ignoring what's inside.
    [ex I [# don't] like xidoc.]
  ]
  [cmd $; latex;
    Renders [LaTeX] inline math.
    [ex Einstein's famous equation is [$ E = m c^2].]
  ]
  [cmd $$; latex;
    Renders [LaTeX] block math.
    [ex [$$ (A+B)^n = \sum_{k=0}^n {n \choose k} A^{n-k} B^k]]
  ]
  [cmd $$&; latex;
    Renders [LaTeX] aligned block math (with the [ms align] environment).
    [ex [$$& ((f \circ g) \circ h)(x) &= f(g(h(x))) \\ &= (f \circ (g \circ h))(x)]]
  ]
  [cmd-nilad (;
    Returns a left square bracket.
  ]
  [cmd (); text;
    Wraps [param text] in square brackets.
    [ex [() this-is-not-a-command]]
  ]
  [cmd-nilad );
    Returns a right square bracket.
  ]
  [cmd-nilad --;
    Returns an en dash: [ms –]
  ]
  [cmd-nilad ---;
    Returns an em dash: [ms —]
  ]
  [cmd-nilad [;];
    Returns a semicolon. Useful for “escaping” semicolons in commands that take multiple arguments.
    [ex [list This[;] is[;] only[;] one[;] item]]
  ]
  [cmd add-to-head; directive;
    Adds the [param directive] to the head of the document. Returns nothing.
  ]
  [cmd arg; parameter;
    Inside a command definition ([cmd-ref def]), returns the argument given to the [param parameter].
  ]
  [cmd bf; text;
    Renders [param text] in bold face.
    [ex xidoc is [bf awesome]!]
  ]
  [cmd color; color text;
    Colors the [param text] in the given CSS-style [param color].
    [ex You can use [color red; names] or [color #00f; codes]!]
  ]
  [cmd def; name[;] ?params[;] body;
    Defines a command with the given [param name] that expands to [param body]. If [param params], which should be space-separated words, are given, the command can take arguments, which can be accessed using the [cmd-ref arg] command.
  ]
  [cmd dfn; ?name[;] text;
    Renders a mathematical definition paragraph with an optional [param name].
  ]
  [cmd example; ?name[;] text;
    Renders a mathematical example paragraph with an optional [param name].
  ]
  [cmd exercise; ?name[;] text;
    Renders a mathematical exercise paragraph with an optional [param name].
  ]
  [cmd html-add-attrs; attrs[;] cmd;
    If the target is HTML, adds the given [param attributes] to the tag produced by [param cmd]. Supports the [ms .foo] and [ms #foo] syntax for specifying classes and IDs.
  ]
  [cmd if-html; text;
    Evaluates [param text] only if the target is HTML, otherwise returns nothing.
    [ex [if-html You can see this only if you're in HTML!]]
  ]
  [cmd if-latex; text;
    Evaluates [param text] only if the target is [LaTeX], otherwise returns nothing.
    [ex [if-latex You can see this only if you're in [LaTeX]!]]
  ]
  [cmd include; file[;] *(name[;] value);
    Renders the content of [param file] as a separate document and pastes it. You can give arguments to the subdocument, which can be retrieved with the [cmd-ref template-arg] command.
  ]
  [cmd inject; file;
    Pastes the content of [param file] and renders it.
  ]
  [cmd it; text;
    Renders [param text] in italics.
    [ex xidoc is [it fantastic!]]
  ]
  [cmd lang; language[;] text;
    Renders [param text] in the specified [param language].
  ]
  [cmd link; ?text[;] address;
    Adds a link to the given [param address] with an optional [param text] visually replacing the address.
    [ex [link xidoc; http://xidoc.nim.town/] is made in [link Nim; https://nim-lang.org/].]
  ]
  [cmd list; *items;
    Creates an unordered list of [param items].
    [ex Supported targets: [list HTML; [LaTeX]]]
  ]
  [cmd ms; text;
    Renders [param text] in monospace.
    [ex In HTML, this will produce [ms <code>]. In [LaTeX], this will produce [ms \texttt].]
  ]
  [cmd p; text;
    Creates a paragraph with the given [param text].
  ]
  [cmd pass; code;
    Directly produces the given [param code] without escaping it. Useful if you want to go outside the capabilities of xidoc. The [param code] is still expanded so you can parametrize it, see the [cmd-ref pass-raw] command if you don't want this.
    [ex [pass <em>Haha!</em> I'm in! <code>'; DROP TABLE xidoc;</code> Oh no, this is a static site…]]
  ]
  [cmd pass-raw; code;
    Directly produces the given [param code] without escaping it. Useful if you want to go outside the capabilities of xidoc. Works as a combination of [cmd-ref pass] and [cmd-ref raw].
  ]
  [cmd proof; ?name[;] text;
    Renders a mathematical proof paragraph with an optional [param name].
  ]
  [cmd props; *properties;
    Creates a list of mathematical [param properties]. Currently the same as [cmd-ref list].
  ]
  [cmd raw; text;
    Returns the given [param text] without expanding it.
    [ex [raw [I can use [as many brackets [as I want]], but [they] still have to [[be balanced!]]].]]
  ]
  [cmd section; ?title[;] text;
    Creates a section with the given [param title] and [param text] (or without a title if not given). If it's inside another section, it will be a subsection. If it's inside a subsection, it will be a subsubsection. In HTML, this nesting can continue further.
  ]
  [cmd set-doc-lang; language;
    Sets the global [param language] of the document. Returns nothing.
  ]
  [cmd set-math-renderer; renderer;
    Determines how [LaTeX] math will be rendered in HTML. The options are:
    [list
      [ms katex-jsdelivr] — uses [link KaTeX; https://katex.org/], loaded on the client side from [link jsDelivr; https://www.jsdelivr.com/]. Currently the default.;
      [ms katex-duktape] — uses [link KaTeX; https://katex.org/], rendered during compilation. The stylesheets will still be fetched on the client side using [link jsDelivr; https://www.jsdelivr.com/].;
    ]
  ]
  [cmd solution; ?name[;] text;
    Renders a paragraph with the solution to a mathematical problem with an optional [param name].
  ]
  [cmd spoiler; visible[;] secret;
    Hides the [param secret] text until the [param visible] text is clicked. Works only in environments that support interactivity.
    [ex [spoiler In the series [it The Simpsons], the surname of the main characters is; [it Simpson]]]
  ]
  [cmd spoiler-solution; ?name[;] text;
    Renders a paragraph with the solution to a mathematical problem with an optional [param name]. In environments that support interactivity, the [param text] is hidden inside a spoiler (see the [cmd-ref spoiler] command).
  ]
  [cmd style; stylesheet;
    Styles an HTML document using xidoc's custom syntax for CSS.
  ]
  [cmd template-arg; name;
    In a document included with [cmd-ref include], returns the given argument passed to [cmd-ref include].
  ]
  [cmd theorem; ?name[;] text;
    Renders a mathematical theorem paragraph with an optional [param name].
  ]
  [cmd term; phrase;
    Introduces [param phrase] as a new term. Useful in definitions.
    [ex A [term group] is a monoid where every element has an inverse.]
  ]
  [cmd title; title;
    Renders the given [param title] and sets it as the title of the document.
  ]
]
[section CSS commands;
  [p xidoc includes a simple set of commands that can be used to generate CSS without having to embed a completely different syntax in your document. It can be included using the [cmd-ref style] command. (If you prefer normal CSS, use [ms [raw [add-to-head [<style> …]]]].)]
  [cmd :; property[;] value;
    Creates a CSS declaration: [ms property: value;].
  ]
  [cmd rule; selector[;] declarations;
    Creates a CSS rule: [ms selector { declarations }].
  ]
  [cmd var; name[;] ?value;
    If a [param value] is given, declares a CSS variable: [ms --name: value;]. If used outside a [cmd-ref rule], it's assigned to [ms :root]. If used without a [param value], it gets the value of the given variable: [ms var(--name)].
  ]
]
[section Math commands;
  [p These commands are available in [LaTeX] math. That is, inside the [cmd-ref $], [cmd-ref $$] and [cmd-ref $$&] commands. They are meant to make certain common combinations of [LaTeX] commands easier to type.]
  [<table>
    [<tr> [<th> Command][<th> Output]]
    [math-cmd /; q]
    [math-cmd /; p[;] q]
    [math-cmd .; \frac{p}{q}]
    [math-cmd (); \frac{p}{q}]
    [math-cmd {}; \frac{p}{q}]
    [math-cmd <>; \frac{p}{q}]
    [math-cmd dd; x]
    [math-cmd dv; x]
    [math-cmd dv; f[;] x]
    [math-cmd dv^; 2[;] x]
    [math-cmd dv^; 2[;] f[;] x]
    [math-cmd pdv; x]
    [math-cmd pdv; f[;] x]
    [math-cmd pdv^; 2[;] x]
    [math-cmd pdv^; 2[;] f[;] x]
    [math-cmd mat; a&b\\c&d]
    [math-cmd .mat; a&b\\c&d]
    [math-cmd (mat); a&b\\c&d]
    [math-cmd |mat|; a&b\\c&d]
  ]
]
