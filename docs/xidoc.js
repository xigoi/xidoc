/* Generated by the Nim Compiler v1.6.6 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI486539647 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1207959649 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1207959646 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1207959643 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1124079026 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1124078973 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1577058382 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1577058314 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1593835527 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1593835526 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1593835523 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1593835524 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555115 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1124077139 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1677721607 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1124076840 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1124076718 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1929379923 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI654311762 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1124075463 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1325403138 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI654311921 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1124075351 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI654311910 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1207959555 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1140856318 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1140856504 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1140856072 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1140856320 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1140856075 = {size: 0, kind: 19, base: null, node: null, finalizer: null};
var NTI1140856069 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1140856070 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1140856071 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1140856319 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1140850710 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1140850708 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI1140850703 = {size: 0, kind: 20, base: null, node: null, finalizer: null};
var NTI1140850694 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1140850700 = {size: 0, kind: 19, base: null, node: null, finalizer: null};
var NTI1140850695 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1140850697 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1140850701 = {size: 0, kind: 19, base: null, node: null, finalizer: null};
var NTI1140850702 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1140850696 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1140851221 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1140850693 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1879048532 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1224736771 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1207959616 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1207959665 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1207959609 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1207959606 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1207959603 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1207959561 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI654312627 = {size: 0, kind: 19, base: null, node: null, finalizer: null};
var NTI1325400067 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1006632980 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1879048225 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1207959558 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1207959559 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555132 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1191182340 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1342177382 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1342177359 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1342177358 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1342177362 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1342177354 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1342177351 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1358954537 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1392508932 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1392508965 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1392508963 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1358954539 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1358954538 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1325400345 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1325400356 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1325400354 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1409286196 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1409286194 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1056964611 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI1207959594 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1207959591 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1207959588 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1325400336 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1207959567 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1207959572 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1207959565 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1207959556 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1207959557 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1879048211 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI2030043189 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI654311904 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979720637 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33554466 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI1207959629 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI939524099 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI1979719351 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979720563 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1979720018 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979719932 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979719301 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979719119 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979719180 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979719025 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979717886 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI704643079 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI1979718671 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI654311786 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI654311798 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI385876137 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI1979718616 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979711495 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1979717916 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979717910 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979717694 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979718047 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979717439 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979717505 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979717608 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1996489512 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555126 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555121 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1979716893 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979716297 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979716558 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979716552 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979716392 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979716359 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979715913 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979716125 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979716119 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979716079 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979716020 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979715951 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979715924 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979716512 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979716461 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979716758 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979716752 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979716346 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979716352 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1979716972 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979716870 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979717019 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979715875 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979715881 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1979717118 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979717199 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979715648 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979715693 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979715779 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI2030043394 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI2030043302 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979714835 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979714957 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979714896 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979715023 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979715084 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979715584 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979714731 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979714458 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979713865 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979714126 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979714120 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979713960 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979713927 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979713478 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979713701 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979713695 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979713636 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979713585 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979713516 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979713489 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979714080 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979714029 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979714326 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979714320 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979713914 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979713920 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1979714537 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI2013266111 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979713429 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979713435 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1979714610 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979713420 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI2013265923 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI33555088 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI33555081 = {size: 0, kind: 20, base: null, node: null, finalizer: null};
var NTI2013265927 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI2013265924 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555124 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI2013265977 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979712741 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979713002 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979712996 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979712836 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979712803 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979712373 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979712577 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979712571 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979712519 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1660944992 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979712411 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979712384 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979712956 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979712905 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979713202 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979713196 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979712790 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979712796 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1979713386 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979712324 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1979712330 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI452985127 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1996489346 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI2030043532 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33555129 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI2030044254 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI721420349 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555114 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555125 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI2030043142 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI2030043589 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33554456 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI872415304 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI872415311 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555128 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555130 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555165 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554440 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555164 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555112 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555113 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555120 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555122 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI2030044192 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33554438 = {size: 0,kind: 2,base: null,node: null,finalizer: null};
var NTI2030043366 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI2030044158 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI2030043171 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI2030043157 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI2030043268 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33554439 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI2030043157 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI2030043157, name: "success", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI2030043157, name: "failure", len: 0, sons: null}}};
NTI2030043157.node = NNI2030043157;
NTI2030043171.base = NTI33554439;
var NNI2030043268 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI2030043157, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI33554439, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI2030043171, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI2030043268.node = NNI2030043268;
NTI2030044158.base = NTI33554439;
var NNI2030043366 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI2030043157, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI33554438, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI2030043171, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI2030043366.node = NNI2030043366;
NTI2030044192.base = NTI33554439;
var NNI33555122 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555122.node = NNI33555122;
var NNI33555120 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555120.node = NNI33555120;
var NNI33555113 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555113.node = NNI33555113;
NTI33555164.base = NTI33555112;
NTI33555165.base = NTI33555112;
var NNI33555112 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555164, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554440, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554439, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554439, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555165, name: "up", sons: null}]};
NTI33555112.node = NNI33555112;
var NNI33555083 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555083.node = NNI33555083;
NTI33555112.base = NTI33555083;
NTI33555113.base = NTI33555112;
NTI33555120.base = NTI33555113;
NTI33555122.base = NTI33555120;
var NNI33555130 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555130.node = NNI33555130;
NTI33555130.base = NTI33555113;
var NNI33555128 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555128.node = NNI33555128;
NTI33555128.base = NTI33555113;
var NNI872415311 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI872415304, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554456, name: "b", sons: null}]};
NTI872415311.node = NNI872415311;
NTI2030043589.base = NTI33554439;
var NNI2030043142 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554456, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554456, name: "Field1", sons: null}]};
NTI2030043142.node = NNI2030043142;
var NNI33555125 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555125.node = NNI33555125;
var NNI33555114 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555114.node = NNI33555114;
NTI33555114.base = NTI33555112;
NTI33555125.base = NTI33555114;
var NNI721420349 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554456, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554456, name: "b", sons: null}]};
NTI721420349.node = NNI721420349;
NTI2030044254.base = NTI33554439;
var NNI33555129 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555129.node = NNI33555129;
NTI33555129.base = NTI33555113;
NTI2030043532.base = NTI33554439;
var NNI1996489346 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554438, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554438, name: "b", sons: null}]};
NTI1996489346.node = NNI1996489346;
NTI452985127.base = NTI33554439;
NTI1979712324.base = NTI33554439;
var NNI1979712330 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI2030043157, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI1979712324, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI2030043171, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI1979712330.node = NNI1979712330;
NTI1979713386.base = NTI33554439;
NTI1979712790.base = NTI1979712324;
var NNI1979712796 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI2030043157, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI1979712790, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI2030043171, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI1979712796.node = NNI1979712796;
NTI1979713196.base = NTI1979712324;
NTI1979713202.base = NTI33554439;
NTI1979712905.base = NTI1979712324;
NTI1979712956.base = NTI33554439;
NTI1979712384.base = NTI33554439;
NTI1979712411.base = NTI33554439;
NTI1660944992.base = NTI33554439;
NTI1979712519.base = NTI33554439;
NTI1979712571.base = NTI33554439;
NTI1979712577.base = NTI33554439;
NTI1979712373.base = NTI33554439;
NTI1979712803.base = NTI1979712324;
NTI1979712836.base = NTI33554439;
NTI1979712996.base = NTI1979712324;
NTI1979713002.base = NTI33554439;
NTI1979712741.base = NTI33554439;
NTI2013265977.base = NTI33554439;
var NNI33555124 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555124.node = NNI33555124;
NTI33555124.base = NTI33555113;
NTI2013265927.base = NTI33554439;
NTI33555081.base = NTI33555088;
var NNI2013265923 = {kind: 2, offset: 0, typ: null, name: null, len: 9, sons: {"0": {kind: 1, offset: 0, typ: NTI2013265923, name: "trfNone", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI2013265923, name: "trfAlnum", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI2013265923, name: "trfOperator", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI2013265923, name: "trfBigOperator", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI2013265923, name: "trfWord", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI2013265923, name: "trfFraction", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI2013265923, name: "trfSub", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI2013265923, name: "trfSup", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI2013265923, name: "trfPunctuation", len: 0, sons: null}}};
NTI2013265923.node = NNI2013265923;
var NNI2013265924 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "rows", len: 0, typ: NTI2013265927, name: "rows", sons: null}, 
{kind: 1, offset: "baseline", len: 0, typ: NTI33554456, name: "baseline", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI33555081, name: "width", sons: null}, 
{kind: 1, offset: "flag", len: 0, typ: NTI2013265923, name: "flag", sons: null}]};
NTI2013265924.node = NNI2013265924;
var NNI1979713420 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI2030043157, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI2013265924, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI2030043171, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI1979713420.node = NNI1979713420;
NTI1979714610.base = NTI33554439;
NTI1979713429.base = NTI2013265924;
var NNI1979713435 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI2030043157, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI1979713429, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI2030043171, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI1979713435.node = NNI1979713435;
NTI2013266111.base = NTI2013265924;
NTI1979714537.base = NTI33554439;
NTI1979713914.base = NTI1979713429;
var NNI1979713920 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI2030043157, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI1979713914, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI2030043171, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI1979713920.node = NNI1979713920;
NTI1979714320.base = NTI1979713429;
NTI1979714326.base = NTI33554439;
NTI1979714029.base = NTI1979713429;
NTI1979714080.base = NTI33554439;
NTI1979713489.base = NTI2013265924;
NTI1979713516.base = NTI33554439;
NTI1979713585.base = NTI2013265924;
NTI1979713636.base = NTI33554439;
NTI1979713695.base = NTI2013265924;
NTI1979713701.base = NTI33554439;
NTI1979713478.base = NTI2013265924;
NTI1979713927.base = NTI1979713429;
NTI1979713960.base = NTI33554439;
NTI1979714120.base = NTI1979713429;
NTI1979714126.base = NTI33554439;
NTI1979713865.base = NTI33554439;
NTI1979714458.base = NTI2013265924;
NTI1979714731.base = NTI33554439;
NTI1979715584.base = NTI33554439;
NTI1979715084.base = NTI33554439;
NTI1979715023.base = NTI33554439;
NTI1979714896.base = NTI33554439;
NTI1979714957.base = NTI33554439;
NTI1979714835.base = NTI33554439;
NTI2030043302.base = NTI33554439;
NTI2030043394.base = NTI33554439;
NTI1979715779.base = NTI33554439;
NTI1979715693.base = NTI33554439;
NTI1979715648.base = NTI33554439;
NTI1979717199.base = NTI33554439;
NTI1979717118.base = NTI33554439;
NTI1979715875.base = NTI33554438;
var NNI1979715881 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI2030043157, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI1979715875, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI2030043171, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI1979715881.node = NNI1979715881;
NTI1979717019.base = NTI33554439;
NTI1979716870.base = NTI33554438;
NTI1979716972.base = NTI33554439;
NTI1979716346.base = NTI1979715875;
var NNI1979716352 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI2030043157, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI1979716346, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI2030043171, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI1979716352.node = NNI1979716352;
NTI1979716752.base = NTI1979715875;
NTI1979716758.base = NTI33554439;
NTI1979716461.base = NTI1979715875;
NTI1979716512.base = NTI33554439;
NTI1979715924.base = NTI33554438;
NTI1979715951.base = NTI33554439;
NTI1979716020.base = NTI33554438;
NTI1979716079.base = NTI33554439;
NTI1979716119.base = NTI33554438;
NTI1979716125.base = NTI33554439;
NTI1979715913.base = NTI33554438;
NTI1979716359.base = NTI1979715875;
NTI1979716392.base = NTI33554439;
NTI1979716552.base = NTI1979715875;
NTI1979716558.base = NTI33554439;
NTI1979716297.base = NTI33554439;
NTI1979716893.base = NTI33554438;
var NNI33555121 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555121.node = NNI33555121;
NTI33555121.base = NTI33555120;
var NNI33555126 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555126.node = NNI33555126;
NTI33555126.base = NTI33555125;
var NNI1996489512 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554439, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554439, name: "Field1", sons: null}]};
NTI1996489512.node = NNI1996489512;
NTI1979717608.base = NTI33554439;
NTI1979717505.base = NTI33554439;
NTI1979717439.base = NTI33554439;
NTI1979718047.base = NTI33554439;
NTI1979717694.base = NTI33554439;
NTI1979717910.base = NTI2013265924;
NTI1979717916.base = NTI33554439;
var NNI1979711495 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554439, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554439, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554439, name: "Field2", sons: null}]};
NTI1979711495.node = NNI1979711495;
NTI1979718616.base = NTI385876137;
NTI654311798.base = NTI33554439;
NTI654311786.base = NTI33554439;
NTI1979718671.base = NTI704643079;
NTI1979717886.base = NTI2013265924;
NTI1979719025.base = NTI33554439;
NTI1979719180.base = NTI33554439;
NTI1979719119.base = NTI33554439;
NTI1979719301.base = NTI33554439;
NTI1979719932.base = NTI33554439;
NTI1979720018.base = NTI33554439;
var NNI1979720563 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI2013265924, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI2013265924, name: "Field1", sons: null}]};
NTI1979720563.node = NNI1979720563;
NTI1979719351.base = NTI939524099;
var NNI1207959629 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "val", len: 0, typ: NTI33554439, name: "val", sons: null}, 
{kind: 1, offset: "has", len: 0, typ: NTI33554466, name: "has", sons: null}]};
NTI1207959629.node = NNI1207959629;
NTI1979720637.base = NTI33554439;
NTI654311904.base = NTI33554439;
var NNI2030043189 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554456, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554456, name: "Field1", sons: null}]};
NTI2030043189.node = NNI2030043189;
var NNI1207959556 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI1207959556, name: "String", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1207959556, name: "Markup", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1207959556, name: "List", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI1207959556, name: "Optional", len: 0, sons: null}}};
NTI1207959556.node = NNI1207959556;
NTI1207959565.base = NTI1207959557;
NTI1207959567.base = NTI1207959557;
var NNI1207959572 = {kind: 1, offset: "val", len: 0, typ: NTI1207959567, name: "val", sons: null};
NTI1207959572.node = NNI1207959572;
var NNI1207959557 = {kind: 3, offset: "typ", len: 4, typ: NTI1207959556, name: "typ", sons: [[setConstr(0, 1), {kind: 1, offset: "str", len: 0, typ: NTI33554439, name: "str", sons: null}], 
[setConstr(2), {kind: 1, offset: "list", len: 0, typ: NTI1207959565, name: "list", sons: null}], 
[setConstr(3), {kind: 1, offset: "opt", len: 0, typ: NTI1207959572, name: "opt", sons: null}]]};
NTI1207959557.node = NNI1207959557;
NTI1879048211.base = NTI1207959557;
var NNI1207959594 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1056964611, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554439, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554439, name: "Field2", sons: null}]};
NTI1207959594.node = NNI1207959594;
NTI1207959591.base = NTI1207959594;
var NNI1207959588 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI1207959591, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI33554456, name: "counter", sons: null}]};
NTI1207959588.node = NNI1207959588;
NTI1409286196.base = NTI33554456;
var NNI1409286194 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI33554439, name: "name", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI33554456, name: "top", sons: null}, 
{kind: 1, offset: "max", len: 0, typ: NTI33554456, name: "max", sons: null}, 
{kind: 1, offset: "frames", len: 0, typ: NTI1409286196, name: "frames", sons: null}]};
NTI1409286194.node = NNI1409286194;
var NNI1358954538 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI1358954538, name: "cftOpen", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1358954538, name: "cftClose", len: 0, sons: null}}};
NTI1358954538.node = NNI1358954538;
var NNI1358954539 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI1358954539, name: "ckVal", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1358954539, name: "ckPushed", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1358954539, name: "ckAction", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI1358954539, name: "ckRef", len: 0, sons: null}}};
NTI1358954539.node = NNI1358954539;
var NNI1325400345 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "cft", len: 0, typ: NTI1358954538, name: "cft", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554439, name: "name", sons: null}, 
{kind: 1, offset: "si", len: 0, typ: NTI33554456, name: "si", sons: null}, 
{kind: 1, offset: "ck", len: 0, typ: NTI1358954539, name: "ck", sons: null}, 
{kind: 1, offset: "sPushed", len: 0, typ: NTI33554439, name: "sPushed", sons: null}]};
NTI1325400345.node = NNI1325400345;
NTI1325400356.base = NTI1325400345;
var NNI1325400354 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI33554439, name: "name", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI33554456, name: "top", sons: null}, 
{kind: 1, offset: "max", len: 0, typ: NTI33554456, name: "max", sons: null}, 
{kind: 1, offset: "frames", len: 0, typ: NTI1325400356, name: "frames", sons: null}]};
NTI1325400354.node = NNI1325400354;
var NNI1392508932 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "ip", len: 0, typ: NTI33554456, name: "ip", sons: null}, 
{kind: 1, offset: "si", len: 0, typ: NTI33554456, name: "si", sons: null}, 
{kind: 1, offset: "rp", len: 0, typ: NTI33554456, name: "rp", sons: null}, 
{kind: 1, offset: "cp", len: 0, typ: NTI33554456, name: "cp", sons: null}, 
{kind: 1, offset: "pp", len: 0, typ: NTI33554456, name: "pp", sons: null}]};
NTI1392508932.node = NNI1392508932;
NTI1392508965.base = NTI1392508932;
var NNI1392508963 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI33554439, name: "name", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI33554456, name: "top", sons: null}, 
{kind: 1, offset: "max", len: 0, typ: NTI33554456, name: "max", sons: null}, 
{kind: 1, offset: "frames", len: 0, typ: NTI1392508965, name: "frames", sons: null}]};
NTI1392508963.node = NNI1392508963;
var NNI1325400336 = {kind: 2, len: 8, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "ip", len: 0, typ: NTI33554456, name: "ip", sons: null}, 
{kind: 1, offset: "si", len: 0, typ: NTI33554456, name: "si", sons: null}, 
{kind: 1, offset: "simax", len: 0, typ: NTI33554456, name: "simax", sons: null}, 
{kind: 1, offset: "refs", len: 0, typ: NTI1207959588, name: "refs", sons: null}, 
{kind: 1, offset: "retStack", len: 0, typ: NTI1409286194, name: "retStack", sons: null}, 
{kind: 1, offset: "capStack", len: 0, typ: NTI1325400354, name: "capStack", sons: null}, 
{kind: 1, offset: "backStack", len: 0, typ: NTI1392508963, name: "backStack", sons: null}, 
{kind: 1, offset: "precStack", len: 0, typ: NTI1409286194, name: "precStack", sons: null}]};
NTI1325400336.node = NNI1325400336;
var NNI1358954537 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "matchLen", len: 0, typ: NTI33554456, name: "matchLen", sons: null}, 
{kind: 1, offset: "matchMax", len: 0, typ: NTI33554456, name: "matchMax", sons: null}]};
NTI1358954537.node = NNI1358954537;
NTI1358954537.base = NTI33555114;
var NNI1342177359 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "ck", len: 0, typ: NTI1358954539, name: "ck", sons: null}, 
{kind: 1, offset: "si", len: 0, typ: NTI33554456, name: "si", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554439, name: "name", sons: null}, 
{kind: 1, offset: "len", len: 0, typ: NTI33554456, name: "len", sons: null}, 
{kind: 1, offset: "s", len: 0, typ: NTI33554439, name: "s", sons: null}]};
NTI1342177359.node = NNI1342177359;
NTI1342177358.base = NTI1342177359;
NTI1342177362.base = NTI1342177358;
var NNI1342177354 = {kind: 1, offset: "capList", len: 0, typ: NTI1342177362, name: "capList", sons: null};
NTI1342177354.node = NNI1342177354;
var NNI1342177351 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "ok", len: 0, typ: NTI33554466, name: "ok", sons: null}, 
{kind: 1, offset: "matchLen", len: 0, typ: NTI33554456, name: "matchLen", sons: null}, 
{kind: 1, offset: "matchMax", len: 0, typ: NTI33554456, name: "matchMax", sons: null}, 
{kind: 1, offset: "cs", len: 0, typ: NTI1342177354, name: "cs", sons: null}]};
NTI1342177351.node = NNI1342177351;
NTI1342177382.base = NTI1342177358;
var NNI1191182340 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1191182340.node = NNI1191182340;
NTI1191182340.base = NTI33555114;
var NNI33555132 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555132.node = NNI33555132;
NTI33555132.base = NTI33555113;
var NNI1207959558 = {kind: 2, offset: 0, typ: null, name: null, len: 5, sons: {"0": {kind: 1, offset: 0, typ: NTI1207959558, name: "ptkOne", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1207959558, name: "ptkOptional", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1207959558, name: "ptkMultiple", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI1207959558, name: "ptkRaw", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI1207959558, name: "ptkLiteral", len: 0, sons: null}}};
NTI1207959558.node = NNI1207959558;
var NNI1207959559 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "kind", len: 0, typ: NTI1207959558, name: "kind", sons: null}, 
{kind: 1, offset: "base", len: 0, typ: NTI1207959556, name: "base", sons: null}]};
NTI1207959559.node = NNI1207959559;
var NNI1879048225 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "val", len: 0, typ: NTI33554456, name: "val", sons: null}, 
{kind: 1, offset: "has", len: 0, typ: NTI33554466, name: "has", sons: null}]};
NTI1879048225.node = NNI1879048225;
var NNI1006632980 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1006632980.node = NNI1006632980;
NTI1006632980.base = NTI33555113;
var NNI1325400067 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI1325400067, name: "xnkString", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1325400067, name: "xnkWhitespace", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1325400067, name: "xnkCommand", len: 0, sons: null}}};
NTI1325400067.node = NNI1325400067;
NTI654312627.base = NTI33554438;
var NNI1207959609 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1056964611, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554439, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI1207959665, name: "Field2", sons: null}]};
NTI1207959609.node = NNI1207959609;
NTI1207959606.base = NTI1207959609;
var NNI1207959603 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI1207959606, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI33554456, name: "counter", sons: null}]};
NTI1207959603.node = NNI1207959603;
var NNI1224736771 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI1224736771, name: "lEnglish", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1224736771, name: "lCzech", len: 0, sons: null}}};
NTI1224736771.node = NNI1224736771;
var NNI1207959616 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "val", len: 0, typ: NTI1224736771, name: "val", sons: null}, 
{kind: 1, offset: "has", len: 0, typ: NTI33554466, name: "has", sons: null}]};
NTI1207959616.node = NNI1207959616;
var NNI1207959561 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "args", len: 0, typ: NTI1207959588, name: "args", sons: null}, 
{kind: 1, offset: "cmdArg", len: 0, typ: NTI33554439, name: "cmdArg", sons: null}, 
{kind: 1, offset: "cmdName", len: 0, typ: NTI33554439, name: "cmdName", sons: null}, 
{kind: 1, offset: "commands", len: 0, typ: NTI1207959603, name: "commands", sons: null}, 
{kind: 1, offset: "lang", len: 0, typ: NTI1207959616, name: "lang", sons: null}, 
{kind: 1, offset: "path", len: 0, typ: NTI1207959629, name: "path", sons: null}]};
NTI1207959561.node = NNI1207959561;
NTI1879048532.base = NTI1207959557;
var NNI1140850693 = {kind: 2, offset: 0, typ: null, name: null, len: 33, sons: {"0": {kind: 1, offset: 0, typ: NTI1140850693, name: "pkEmpty", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1140850693, name: "pkAny", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1140850693, name: "pkAnyRune", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI1140850693, name: "pkNewLine", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI1140850693, name: "pkLetter", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI1140850693, name: "pkLower", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI1140850693, name: "pkUpper", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI1140850693, name: "pkTitle", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI1140850693, name: "pkWhitespace", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI1140850693, name: "pkTerminal", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI1140850693, name: "pkTerminalIgnoreCase", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI1140850693, name: "pkTerminalIgnoreStyle", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI1140850693, name: "pkChar", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI1140850693, name: "pkCharChoice", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI1140850693, name: "pkNonTerminal", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI1140850693, name: "pkSequence", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI1140850693, name: "pkOrderedChoice", len: 0, sons: null}, 
"17": {kind: 1, offset: 17, typ: NTI1140850693, name: "pkGreedyRep", len: 0, sons: null}, 
"18": {kind: 1, offset: 18, typ: NTI1140850693, name: "pkGreedyRepChar", len: 0, sons: null}, 
"19": {kind: 1, offset: 19, typ: NTI1140850693, name: "pkGreedyRepSet", len: 0, sons: null}, 
"20": {kind: 1, offset: 20, typ: NTI1140850693, name: "pkGreedyAny", len: 0, sons: null}, 
"21": {kind: 1, offset: 21, typ: NTI1140850693, name: "pkOption", len: 0, sons: null}, 
"22": {kind: 1, offset: 22, typ: NTI1140850693, name: "pkAndPredicate", len: 0, sons: null}, 
"23": {kind: 1, offset: 23, typ: NTI1140850693, name: "pkNotPredicate", len: 0, sons: null}, 
"24": {kind: 1, offset: 24, typ: NTI1140850693, name: "pkCapture", len: 0, sons: null}, 
"25": {kind: 1, offset: 25, typ: NTI1140850693, name: "pkBackRef", len: 0, sons: null}, 
"26": {kind: 1, offset: 26, typ: NTI1140850693, name: "pkBackRefIgnoreCase", len: 0, sons: null}, 
"27": {kind: 1, offset: 27, typ: NTI1140850693, name: "pkBackRefIgnoreStyle", len: 0, sons: null}, 
"28": {kind: 1, offset: 28, typ: NTI1140850693, name: "pkSearch", len: 0, sons: null}, 
"29": {kind: 1, offset: 29, typ: NTI1140850693, name: "pkCapturedSearch", len: 0, sons: null}, 
"30": {kind: 1, offset: 30, typ: NTI1140850693, name: "pkRule", len: 0, sons: null}, 
"31": {kind: 1, offset: 31, typ: NTI1140850693, name: "pkList", len: 0, sons: null}, 
"32": {kind: 1, offset: 32, typ: NTI1140850693, name: "pkStartAnchor", len: 0, sons: null}}};
NTI1140850693.node = NNI1140850693;
var NNI1140851221 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554456, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554456, name: "Field1", sons: null}]};
NTI1140851221.node = NNI1140851221;
NTI1140850701.base = NTI33554438;
NTI1140850702.base = NTI1140850701;
var NNI1140850694 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI1140850694, name: "ntDeclared", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1140850694, name: "ntUsed", len: 0, sons: null}}};
NTI1140850694.node = NNI1140850694;
NTI1140850700.base = NTI1140850694;
var NNI1140850695 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI33554439, name: "name", sons: null}, 
{kind: 1, offset: "line", len: 0, typ: NTI33554456, name: "line", sons: null}, 
{kind: 1, offset: "col", len: 0, typ: NTI33554456, name: "col", sons: null}, 
{kind: 1, offset: "flags", len: 0, typ: NTI1140850700, name: "flags", sons: null}, 
{kind: 1, offset: "rule", len: 0, typ: NTI1140850696, name: "rule", sons: null}]};
NTI1140850695.node = NNI1140850695;
NTI1140850697.base = NTI1140850695;
NTI1140850703.base = NTI1140850708;
NTI1140850710.base = NTI1140850696;
var NNI1140850696 = {kind: 3, offset: "kind", len: 33, typ: NTI1140850693, name: "kind", sons: [[setConstr([0, 8]), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}], 
[setConstr(9, 10, 11), {kind: 1, offset: "term", len: 0, typ: NTI33554439, name: "term", sons: null}], 
[setConstr(12, 18), {kind: 1, offset: "ch", len: 0, typ: NTI33554438, name: "ch", sons: null}], 
[setConstr(13, 19), {kind: 1, offset: "charChoice", len: 0, typ: NTI1140850702, name: "charChoice", sons: null}], 
[setConstr(14), {kind: 1, offset: "nt", len: 0, typ: NTI1140850697, name: "nt", sons: null}], 
[setConstr([25, 27]), {kind: 1, offset: "index", len: 0, typ: NTI1140850703, name: "index", sons: null}], 
[setConstr(33), {kind: 1, offset: "sons", len: 0, typ: NTI1140850710, name: "sons", sons: null}]]};
NTI1140850696.node = NNI1140850696;
var NNI1140856070 = {kind: 2, offset: 0, typ: null, name: null, len: 26, sons: {"0": {kind: 1, offset: 0, typ: NTI1140856070, name: "tkInvalid", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1140856070, name: "tkEof", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1140856070, name: "tkAny", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI1140856070, name: "tkAnyRune", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI1140856070, name: "tkIdentifier", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI1140856070, name: "tkStringLit", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI1140856070, name: "tkCharSet", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI1140856070, name: "tkParLe", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI1140856070, name: "tkParRi", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI1140856070, name: "tkCurlyLe", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI1140856070, name: "tkCurlyRi", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI1140856070, name: "tkCurlyAt", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI1140856070, name: "tkEmptyCurl", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI1140856070, name: "tkArrow", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI1140856070, name: "tkBar", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI1140856070, name: "tkStar", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI1140856070, name: "tkPlus", len: 0, sons: null}, 
"17": {kind: 1, offset: 17, typ: NTI1140856070, name: "tkAmp", len: 0, sons: null}, 
"18": {kind: 1, offset: 18, typ: NTI1140856070, name: "tkNot", len: 0, sons: null}, 
"19": {kind: 1, offset: 19, typ: NTI1140856070, name: "tkOption", len: 0, sons: null}, 
"20": {kind: 1, offset: 20, typ: NTI1140856070, name: "tkAt", len: 0, sons: null}, 
"21": {kind: 1, offset: 21, typ: NTI1140856070, name: "tkBuiltin", len: 0, sons: null}, 
"22": {kind: 1, offset: 22, typ: NTI1140856070, name: "tkEscaped", len: 0, sons: null}, 
"23": {kind: 1, offset: 23, typ: NTI1140856070, name: "tkBackref", len: 0, sons: null}, 
"24": {kind: 1, offset: 24, typ: NTI1140856070, name: "tkDollar", len: 0, sons: null}, 
"25": {kind: 1, offset: 25, typ: NTI1140856070, name: "tkHat", len: 0, sons: null}}};
NTI1140856070.node = NNI1140856070;
var NNI1140856069 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI1140856069, name: "modNone", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1140856069, name: "modVerbatim", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1140856069, name: "modIgnoreCase", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI1140856069, name: "modIgnoreStyle", len: 0, sons: null}}};
NTI1140856069.node = NNI1140856069;
NTI1140856075.base = NTI33554438;
var NNI1140856071 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "kind", len: 0, typ: NTI1140856070, name: "kind", sons: null}, 
{kind: 1, offset: "modifier", len: 0, typ: NTI1140856069, name: "modifier", sons: null}, 
{kind: 1, offset: "literal", len: 0, typ: NTI33554439, name: "literal", sons: null}, 
{kind: 1, offset: "charset", len: 0, typ: NTI1140856075, name: "charset", sons: null}, 
{kind: 1, offset: "index", len: 0, typ: NTI33554456, name: "index", sons: null}]};
NTI1140856071.node = NNI1140856071;
NTI1140856320.base = NTI1140850697;
var NNI1140856319 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "tok", len: 0, typ: NTI1140856071, name: "tok", sons: null}, 
{kind: 1, offset: "nonterms", len: 0, typ: NTI1140856320, name: "nonterms", sons: null}, 
{kind: 1, offset: "modifier", len: 0, typ: NTI1140856069, name: "modifier", sons: null}, 
{kind: 1, offset: "captures", len: 0, typ: NTI33554456, name: "captures", sons: null}, 
{kind: 1, offset: "identIsVerbatim", len: 0, typ: NTI33554466, name: "identIsVerbatim", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI1140850696, name: "skip", sons: null}]};
NTI1140856319.node = NNI1140856319;
var NNI1140856072 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "bufpos", len: 0, typ: NTI33554456, name: "bufpos", sons: null}, 
{kind: 1, offset: "buf", len: 0, typ: NTI33554439, name: "buf", sons: null}, 
{kind: 1, offset: "lineNumber", len: 0, typ: NTI33554456, name: "lineNumber", sons: null}, 
{kind: 1, offset: "lineStart", len: 0, typ: NTI33554456, name: "lineStart", sons: null}, 
{kind: 1, offset: "colOffset", len: 0, typ: NTI33554456, name: "colOffset", sons: null}, 
{kind: 1, offset: "filename", len: 0, typ: NTI33554439, name: "filename", sons: null}]};
NTI1140856072.node = NNI1140856072;
NTI1140856319.base = NTI1140856072;
NTI1140856504.base = NTI1140850697;
var NNI1140856318 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1140856318.node = NNI1140856318;
NTI1140856318.base = NTI33555125;
var NNI1207959555 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI1207959555, name: "html", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1207959555, name: "latex", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1207959555, name: "gemtext", len: 0, sons: null}}};
NTI1207959555.node = NNI1207959555;
NTI654311910.base = NTI33554439;
var NNI1124075351 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "val", len: 0, typ: NTI654311910, name: "val", sons: null}, 
{kind: 1, offset: "has", len: 0, typ: NTI33554466, name: "has", sons: null}]};
NTI1124075351.node = NNI1124075351;
NTI654311921.base = NTI33554439;
NTI1325403138.base = NTI33554439;
var NNI1124075463 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554439, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554439, name: "Field1", sons: null}]};
NTI1124075463.node = NNI1124075463;
NTI654311762.base = NTI33554439;
var NNI1929379923 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "val", len: 0, typ: NTI33554466, name: "val", sons: null}, 
{kind: 1, offset: "has", len: 0, typ: NTI33554466, name: "has", sons: null}]};
NTI1929379923.node = NNI1929379923;
NTI1124076718.base = NTI1207959557;
NTI1124076840.base = NTI1207959557;
var NNI1677721607 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554456, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554456, name: "Field1", sons: null}]};
NTI1677721607.node = NNI1677721607;
NTI1124077139.base = NTI33554439;
var NNI33555115 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555115.node = NNI33555115;
NTI33555115.base = NTI33555114;
var NNI1593835523 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI1593835523, name: "kClosure", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1593835523, name: "kNoconv", len: 0, sons: null}}};
NTI1593835523.node = NNI1593835523;
var NNI1593835524 = {kind: 3, offset: "kind", len: 2, typ: NTI1593835523, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "fun1", len: 0, typ: NTI1593835526, name: "fun1", sons: null}], 
[setConstr(1), {kind: 1, offset: "fun2", len: 0, typ: NTI1593835527, name: "fun2", sons: null}]]};
NTI1593835524.node = NNI1593835524;
var NNI1577058314 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1577058314.node = NNI1577058314;
NTI1577058382.base = NTI1577058314;
NTI1124078973.base = NTI1207959557;
NTI1124079026.base = NTI1207959557;
var NNI1207959649 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1056964611, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554456, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554439, name: "Field2", sons: null}]};
NTI1207959649.node = NNI1207959649;
NTI1207959646.base = NTI1207959649;
var NNI1207959643 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI1207959646, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI33554456, name: "counter", sons: null}, 
{kind: 1, offset: "first", len: 0, typ: NTI33554456, name: "first", sons: null}, 
{kind: 1, offset: "last", len: 0, typ: NTI33554456, name: "last", sons: null}]};
NTI1207959643.node = NNI1207959643;
var NNI486539647 = {kind: 3, offset: "success", len: 2, typ: NTI33554466, name: "success", sons: [[setConstr(1), {kind: 1, offset: "markup", len: 0, typ: NTI33554440, name: "markup", sons: null}], 
[setConstr(0), {kind: 1, offset: "err", len: 0, typ: NTI33554440, name: "err", sons: null}]]};
NTI486539647.node = NNI486539647;

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557140, src_33557141, ti_33557142) {
  var result_33557151 = null;

    switch (ti_33557142.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557131(ti_33557142))) {
      result_33557151 = src_33557141;
      }
      else {
        result_33557151 = [src_33557141[0], src_33557141[1]];
      }
      
      break;
    case 19:
            if (dest_33557140 === null || dest_33557140 === undefined) {
        dest_33557140 = {};
      }
      else {
        for (var key in dest_33557140) { delete dest_33557140[key]; }
      }
      for (var key in src_33557141) { dest_33557140[key] = src_33557141[key]; }
      result_33557151 = dest_33557140;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557142.base == null))) {
      result_33557151 = nimCopy(dest_33557140, src_33557141, ti_33557142.base);
      }
      else {
      if ((ti_33557142.kind == 17)) {
      result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {m_type: ti_33557142} : dest_33557140;
      }
      else {
        result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {} : dest_33557140;
      }
      }
      nimCopyAux(result_33557151, src_33557141, ti_33557142.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_33557141 === null) {
        result_33557151 = null;
      }
      else {
        if (dest_33557140 === null || dest_33557140 === undefined || dest_33557140.length != src_33557141.length) {
          dest_33557140 = new Array(src_33557141.length);
        }
        result_33557151 = dest_33557140;
        for (var i = 0; i < src_33557141.length; ++i) {
          result_33557151[i] = nimCopy(result_33557151[i], src_33557141[i], ti_33557142.base);
        }
      }
    
      break;
    case 28:
            if (src_33557141 !== null) {
        result_33557151 = src_33557141.slice(0);
      }
    
      break;
    default: 
      result_33557151 = src_33557141;
      break;
    }

  return result_33557151;

}

function makeNimstrLit(c_33556801) {
      var result = [];
  for (var i = 0; i < c_33556801.length; ++i) {
    result[i] = c_33556801.charCodeAt(i);
  }
  return result;
  

  
}

function mnewString(len_33556893) {
        return new Array(len_33556893);
  

  
}

function toJSStr(s_33556807) {
                    var Temporary5;
            var Temporary7;

  var result_33556808 = null;

    var res_33556842 = newSeq_33556825((s_33556807).length);
    var i_33556843 = 0;
    var j_33556844 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_33556843 < (s_33556807).length)) break Label2;
          var c_33556845 = s_33556807[i_33556843];
          if ((c_33556845 < 128)) {
          res_33556842[j_33556844] = String.fromCharCode(c_33556845);
          i_33556843 += 1;
          }
          else {
            var helper_33556857 = newSeq_33556825(0);
            Label3: do {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556858 = c_33556845.toString(16);
                  if ((((code_33556858) == null ? 0 : (code_33556858).length) == 1)) {
                  helper_33556857.push("%0");;
                  }
                  else {
                  helper_33556857.push("%");;
                  }
                  
                  helper_33556857.push(code_33556858);;
                  i_33556843 += 1;
                    if (((s_33556807).length <= i_33556843)) Temporary5 = true; else {                      Temporary5 = (s_33556807[i_33556843] < 128);                    }                  if (Temporary5) {
                  break Label3;
                  }
                  
                  c_33556845 = s_33556807[i_33556843];
                }
            } while (false);
++excHandler;
            Temporary7 = framePtr;
            try {
            res_33556842[j_33556844] = decodeURIComponent(helper_33556857.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            framePtr = Temporary7;
            res_33556842[j_33556844] = helper_33556857.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Temporary7;
            }
          }
          
          j_33556844 += 1;
        }
    } while (false);
    if (res_33556842.length < j_33556844) { for (var i = res_33556842.length ; i < j_33556844 ; ++i) res_33556842.push(null); }
               else { res_33556842.length = j_33556844; };
    result_33556808 = res_33556842.join("");

  return result_33556808;

}

function raiseException(e_33556667, ename_33556668) {
    e_33556667.name = ename_33556668;
    if ((excHandler == 0)) {
    unhandledException(e_33556667);
    }
    
    throw e_33556667;

  
}

function addInt(a_33556940, b_33556941) {
        var result = a_33556940 + b_33556941;
    checkOverflowInt(result);
    return result;
  

  
}

function chckRange(i_33557189, a_33557190, b_33557191) {
      var Temporary1;

  var result_33557192 = 0;

  BeforeRet: do {
      if (!(a_33557190 <= i_33557189)) Temporary1 = false; else {        Temporary1 = (i_33557189 <= b_33557191);      }    if (Temporary1) {
    result_33557192 = i_33557189;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_33557192;

}

function chckIndx(i_33557184, a_33557185, b_33557186) {
      var Temporary1;

  var result_33557187 = 0;

  BeforeRet: do {
      if (!(a_33557185 <= i_33557184)) Temporary1 = false; else {        Temporary1 = (i_33557184 <= b_33557186);      }    if (Temporary1) {
    result_33557187 = i_33557184;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_33557184, a_33557185, b_33557186);
    }
    
  } while (false);

  return result_33557187;

}

function subInt(a_33556944, b_33556945) {
        var result = a_33556944 - b_33556945;
    checkOverflowInt(result);
    return result;
  

  
}

function cstrToNimstr(c_33556804) {
      var ln = c_33556804.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_33556804.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_33556804.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}

function addChar(x_33557255, c_33557256) {
    x_33557255.push(c_33557256);

  
}
var ConstSet2 = setConstr([48, 57]);

function mulInt(a_33556948, b_33556949) {
        var result = a_33556948 * b_33556949;
    checkOverflowInt(result);
    return result;
  

  
}
var ConstSet3 = setConstr(0, 125);
var ConstSet4 = setConstr([48, 57]);
var ConstSet5 = setConstr([65, 90]);

function nimMax(a_33556998, b_33556999) {
    var Temporary1;

  var result_33557000 = 0;

  BeforeRet: do {
    if ((b_33556999 <= a_33556998)) {
    Temporary1 = a_33556998;
    }
    else {
    Temporary1 = b_33556999;
    }
    
    result_33557000 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_33557000;

}

function nimMin(a_33556994, b_33556995) {
    var Temporary1;

  var result_33556996 = 0;

  BeforeRet: do {
    if ((a_33556994 <= b_33556995)) {
    Temporary1 = a_33556994;
    }
    else {
    Temporary1 = b_33556995;
    }
    
    result_33556996 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_33556996;

}
var ConstSet6 = setConstr([97, 122], [65, 90], [48, 57], [128, 255], 95);
var ConstSet7 = setConstr(1);

function raiseFieldError2(f_33556778, discVal_33556779) {
    raiseException({message: (f_33556778 || []).concat(discVal_33556779 || [],makeNimstrLit("\'") || []), parent: null, m_type: NTI33555129, name: null, trace: [], up: null}, "FieldDefect");

  
}

function nimBoolToStr(x_33556514) {
  var result_33556515 = [];

    if (x_33556514) {
    result_33556515 = nimCopy(null, makeNimstrLit("true"), NTI33554439);
    }
    else {
      result_33556515 = nimCopy(null, makeNimstrLit("false"), NTI33554439);
    }
    

  return result_33556515;

}

function reprDiscriminant(e_33557409, typ_33557410) {
    var Temporary1;

  var result_33557411 = [];

    switch (typ_33557410.kind) {
    case 14:
      Temporary1 = reprEnum(e_33557409, typ_33557410);
      break;
    case 1:
      Temporary1 = nimBoolToStr(!((e_33557409 == 0)));
      break;
    default: 
      Temporary1 = HEX24_335544323(e_33557409);
      break;
    }
    result_33557411 = nimCopy(null, Temporary1, NTI33554439);

  return result_33557411;

}
var ConstSet8 = setConstr(1);

function nimCharToStr(x_33556517) {
  var result_33556518 = [];

    result_33556518 = nimCopy(null, mnewString(1), NTI33554439);
    result_33556518[0] = x_33556517;

  return result_33556518;

}
var ConstSet9 = setConstr(1);
var ConstSet10 = setConstr(0);
var ConstSet11 = setConstr(1);
var ConstSet12 = setConstr(1);
var ConstSet13 = setConstr(0);
var ConstSet14 = setConstr(0);
var ConstSet15 = setConstr(1);
var ConstSet16 = setConstr(0);
var ConstSet17 = setConstr(1);
var ConstSet18 = setConstr(0);
var ConstSet19 = setConstr(1);
var ConstSet20 = setConstr(0);
var ConstSet21 = setConstr(1);

function eqStrings(a_33556931, b_33556932) {
        if (a_33556931 == b_33556932) return true;
    if (a_33556931 === null && b_33556932.length == 0) return true;
    if (b_33556932 === null && a_33556931.length == 0) return true;
    if ((!a_33556931) || (!b_33556932)) return false;
    var alen = a_33556931.length;
    if (alen != b_33556932.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_33556931[i] != b_33556932[i]) return false;
    return true;
  

  
}
var ConstSet22 = setConstr(0);
var ConstSet23 = setConstr(1);
var ConstSet24 = setConstr(0);
var ConstSet25 = setConstr(1);
var ConstSet26 = setConstr(0);
var ConstSet27 = setConstr(1);
var ConstSet28 = setConstr(1);
var ConstSet29 = setConstr(1);
var ConstSet30 = setConstr(0);
var ConstSet31 = setConstr(1);
var ConstSet32 = setConstr(0);
var ConstSet33 = setConstr(1);
var ConstSet34 = setConstr(1);
var ConstSet35 = setConstr(0);
var ConstSet36 = setConstr(0);
var ConstSet37 = setConstr(1);
var ConstSet38 = setConstr(0);
var ConstSet39 = setConstr(1);
var ConstSet40 = setConstr(0);
var ConstSet41 = setConstr(1);
var ConstSet42 = setConstr(0);
var ConstSet43 = setConstr(1);
var ConstSet44 = setConstr(0);
var ConstSet45 = setConstr(1);
var ConstSet46 = setConstr(0);
var ConstSet47 = setConstr(1);
var ConstSet48 = setConstr(0);
var ConstSet49 = setConstr(1);
var ConstSet50 = setConstr(1);
var ConstSet51 = setConstr(2, 3, 8);
var ConstSet52 = setConstr(1, 4);
var ConstSet53 = setConstr(1);
var ConstSet54 = setConstr(1);
var ConstSet55 = setConstr(0);
var ConstSet56 = setConstr(1);
var ConstSet57 = setConstr(1);
      var fontExceptions_1996488836 = [[{Field0: 104, Field1: makeNimstrLit("\xE2\x84\x8E")}], [], [{Field0: 66, Field1: makeNimstrLit("\xE2\x84\xAC")}, {Field0: 69, Field1: makeNimstrLit("\xE2\x84\xB0")}, {Field0: 70, Field1: makeNimstrLit("\xE2\x84\xB1")}, {Field0: 72, Field1: makeNimstrLit("\xE2\x84\x8B")}, {Field0: 73, Field1: makeNimstrLit("\xE2\x84\x90")}, {Field0: 76, Field1: makeNimstrLit("\xE2\x84\x92")}, {Field0: 77, Field1: makeNimstrLit("\xE2\x84\xB3")}, {Field0: 82, Field1: makeNimstrLit("\xE2\x84\x9B")}, {Field0: 101, Field1: makeNimstrLit("\xE2\x84\xAF")}, {Field0: 103, Field1: makeNimstrLit("\xE2\x84\x8A")}, {Field0: 111, Field1: makeNimstrLit("\xE2\x84\xB4")}], [{Field0: 67, Field1: makeNimstrLit("\xE2\x84\xAD")}, {Field0: 72, Field1: makeNimstrLit("\xE2\x84\x8C")}, {Field0: 73, Field1: makeNimstrLit("\xE2\x84\x91")}, {Field0: 82, Field1: makeNimstrLit("\xE2\x84\x9C")}, {Field0: 90, Field1: makeNimstrLit("\xE2\x84\xA8")}], [{Field0: 67, Field1: makeNimstrLit("\xE2\x84\x82")}, {Field0: 72, Field1: makeNimstrLit("\xE2\x84\x8D")}, {Field0: 78, Field1: makeNimstrLit("\xE2\x84\x95")}, {Field0: 80, Field1: makeNimstrLit("\xE2\x84\x99")}, {Field0: 81, Field1: makeNimstrLit("\xE2\x84\x9A")}, {Field0: 82, Field1: makeNimstrLit("\xE2\x84\x9D")}, {Field0: 90, Field1: makeNimstrLit("\xE2\x84\xA4")}]];
    var fontStarts_1996488815 = new Int32Array([119860, 119808, 119964, 120068, 120120]);
    var fontsByName_1996488814 = [{Field0: makeNimstrLit("\\mathit"), Field1: 0}, {Field0: makeNimstrLit("\\mathbf"), Field1: 1}, {Field0: makeNimstrLit("\\mathcal"), Field1: 2}, {Field0: makeNimstrLit("\\mathfrak"), Field1: 3}, {Field0: makeNimstrLit("\\mathbb"), Field1: 4}];
var ConstSet58 = setConstr(1);
var ConstSet59 = setConstr(1);
var ConstSet60 = setConstr(0);
var ConstSet61 = setConstr(1);
var ConstSet62 = setConstr(1);
var ConstSet63 = setConstr(0);
var ConstSet64 = setConstr(1);
var ConstSet65 = setConstr(1);
var ConstSet66 = setConstr(0);
var ConstSet67 = setConstr(1);
var ConstSet68 = setConstr(1);
var ConstSet69 = setConstr(0);
var ConstSet70 = setConstr(1);
var ConstSet71 = setConstr(1);
var ConstSet72 = setConstr(0);
    var delimiters_1996488813 = [{Field0: makeNimstrLit("("), Field1: {rows: [makeNimstrLit("(")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\lparen"), Field1: {rows: [makeNimstrLit("(")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit(")"), Field1: {rows: [makeNimstrLit(")")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\rparen"), Field1: {rows: [makeNimstrLit(")")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("["), Field1: {rows: [makeNimstrLit("[")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\lbrack"), Field1: {rows: [makeNimstrLit("[")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("]"), Field1: {rows: [makeNimstrLit("]")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\rbrack"), Field1: {rows: [makeNimstrLit("]")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\{"), Field1: {rows: [makeNimstrLit("{")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\lbrace"), Field1: {rows: [makeNimstrLit("{")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\}"), Field1: {rows: [makeNimstrLit("}")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\rbrace"), Field1: {rows: [makeNimstrLit("}")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x9F\xA8"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA8")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\langle"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA8")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\lang"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA8")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x9F\xA9"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA9")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\rangle"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA9")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\rang"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA9")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("|"), Field1: {rows: [makeNimstrLit("\xE2\x88\xA3")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\vert"), Field1: {rows: [makeNimstrLit("\xE2\x88\xA3")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\|"), Field1: {rows: [makeNimstrLit("\xE2\x88\xA5")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\Vert"), Field1: {rows: [makeNimstrLit("\xE2\x88\xA5")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x8C\x88"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x88")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\lceil"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x88")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x8C\x89"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x89")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\rceil"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x89")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x8C\x8A"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x8A")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\lfloor"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x8A")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x8C\x8B"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x8B")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\rfloor"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x8B")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x9F\xA6"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\llbracket"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x9F\xA7"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA7")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\rrbracket"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA7")], baseline: 0, width: 1, flag: 0}}];
var ConstSet73 = setConstr(1);
var ConstSet74 = setConstr(0);
var ConstSet75 = setConstr(1);
var ConstSet76 = setConstr(1);
var ConstSet77 = setConstr(0);
var ConstSet78 = setConstr(0);
var ConstSet79 = setConstr(1);
var ConstSet80 = setConstr(0);
var ConstSet81 = setConstr(1);
var ConstSet82 = setConstr(1);
var ConstSet83 = setConstr(0);
var ConstSet84 = setConstr(1);
var ConstSet85 = setConstr(0);
var ConstSet86 = setConstr(1);
var ConstSet87 = setConstr(1);
var ConstSet88 = setConstr(0);
var ConstSet89 = setConstr(0);
var ConstSet90 = setConstr(1);
var ConstSet91 = setConstr(0);
var ConstSet92 = setConstr(1);
var ConstSet93 = setConstr(0);
var ConstSet94 = setConstr(1);
var ConstSet95 = setConstr(0);
var ConstSet96 = setConstr(1);
var ConstSet97 = setConstr(0);
var ConstSet98 = setConstr(1);
var ConstSet99 = setConstr(0);
var ConstSet100 = setConstr(1);
var ConstSet101 = setConstr(0);
var ConstSet102 = setConstr(1);
var ConstSet103 = setConstr(1);

function divInt(a_33556952, b_33556953) {
        if (b_33556953 == 0) raiseDivByZero();
    if (b_33556953 == -1 && a_33556952 == 2147483647) raiseOverflow();
    return Math.trunc(a_33556952 / b_33556953);
  

  
}

function modInt(a_33556956, b_33556957) {
        if (b_33556957 == 0) raiseDivByZero();
    if (b_33556957 == -1 && a_33556956 == 2147483647) raiseOverflow();
    return Math.trunc(a_33556956 % b_33556957);
  

  
}
        var commands_1996491897 = {data: [{Field0: 773313536, Field1: makeNimstrLit("between"), Field2: {rows: [makeNimstrLit("\xE2\x89\xAC")], baseline: 0, width: 1, flag: 2}}, {Field0: -1275910144, Field1: makeNimstrLit("varsupsetneq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x8B")], baseline: 0, width: 1, flag: 2}}, {Field0: -1044255742, Field1: makeNimstrLit("boxdot"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA1")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1805090809, Field1: makeNimstrLit("Complex"), Field2: {rows: [makeNimstrLit("C")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1296414729, Field1: makeNimstrLit("ddag"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA1")], baseline: 0, width: 1, flag: 0}}, {Field0: -2143612919, Field1: makeNimstrLit("Box"), Field2: {rows: [makeNimstrLit("\xE2\x96\xA1")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 690548749, Field1: makeNimstrLit("tau"), Field2: {rows: [makeNimstrLit("\xCF\x84")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -949300208, Field1: makeNimstrLit("rho"), Field2: {rows: [makeNimstrLit("\xCF\x81")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 374125587, Field1: makeNimstrLit("nearrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x97")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1939687445, Field1: makeNimstrLit("hookrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\xAA")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -262745065, Field1: makeNimstrLit("bigstar"), Field2: {rows: [makeNimstrLit("\xE2\x98\x85")], baseline: 0, width: 1, flag: 0}}, {Field0: 638361624, Field1: makeNimstrLit("smallint"), Field2: {rows: [makeNimstrLit("\xE2\x88\xAB")], baseline: 0, width: 1, flag: 3}}, {Field0: 1181947928, Field1: makeNimstrLit("searrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x98")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1376556004, Field1: makeNimstrLit("LaTeX"), Field2: {rows: [makeNimstrLit("L T X"), makeNimstrLit(" A E ")], baseline: 0, width: 5, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1177595934, Field1: makeNimstrLit("oint"), Field2: {rows: [makeNimstrLit("\xE2\x88\xAE")], baseline: 0, width: 1, flag: 3}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -522425310, Field1: makeNimstrLit("geq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA5")], baseline: 0, width: 1, flag: 2}}, {Field0: 482634787, Field1: makeNimstrLit("neg"), Field2: {rows: [makeNimstrLit("\xC2\xAC")], baseline: 0, width: 1, flag: 2}}, {Field0: 699467812, Field1: makeNimstrLit("nvdash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xAC")], baseline: 0, width: 1, flag: 2}}, {Field0: 385061925, Field1: makeNimstrLit("nabla"), Field2: {rows: [makeNimstrLit("\xE2\x88\x87")], baseline: 0, width: 1, flag: 0}}, {Field0: 1299890214, Field1: makeNimstrLit("subset"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x82")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1847849000, Field1: makeNimstrLit("varUpsilon"), Field2: {rows: [makeNimstrLit("\xCE\xA5")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -2128973781, Field1: makeNimstrLit("i"), Field2: {rows: [makeNimstrLit("\xC4\xB1")], baseline: 0, width: 1, flag: 1}}, {Field0: 1474680876, Field1: makeNimstrLit("uarr"), Field2: {rows: [makeNimstrLit("\xE2\x86\x91")], baseline: 0, width: 1, flag: 2}}, {Field0: -1454298068, Field1: makeNimstrLit("nprec"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x80")], baseline: 0, width: 1, flag: 2}}, {Field0: 598008878, Field1: makeNimstrLit("eqsim"), Field2: {rows: [makeNimstrLit("\xE2\x89\x82")], baseline: 0, width: 1, flag: 2}}, {Field0: 1714570287, Field1: makeNimstrLit("emptyset"), Field2: {rows: [makeNimstrLit("\xE2\x88\x85")], baseline: 0, width: 1, flag: 2}}, {Field0: 1088214061, Field1: makeNimstrLit("nu"), Field2: {rows: [makeNimstrLit("\xCE\xBD")], baseline: 0, width: 1, flag: 1}}, {Field0: 181399601, Field1: makeNimstrLit("circledcirc"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x9A")], baseline: 0, width: 1, flag: 2}}, {Field0: 444384306, Field1: makeNimstrLit("rightsquigarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x9D")], baseline: 0, width: 1, flag: 2}}, {Field0: 174735408, Field1: makeNimstrLit("textdaggerdbl"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA1")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -612250570, Field1: makeNimstrLit("Gamma"), Field2: {rows: [makeNimstrLit("\xCE\x93")], baseline: 0, width: 1, flag: 1}}, {Field0: 340107318, Field1: makeNimstrLit("argmin"), Field2: {rows: [makeNimstrLit("arg\xE2\x80\x89min")], baseline: 0, width: 7, flag: 4}}, {Field0: -1880859592, Field1: makeNimstrLit("Phi"), Field2: {rows: [makeNimstrLit("\xCE\xA6")], baseline: 0, width: 1, flag: 1}}, {Field0: -601339847, Field1: makeNimstrLit("prec"), Field2: {rows: [makeNimstrLit("\xE2\x89\xBA")], baseline: 0, width: 1, flag: 2}}, {Field0: 644534329, Field1: makeNimstrLit("omega"), Field2: {rows: [makeNimstrLit("\xCF\x89")], baseline: 0, width: 1, flag: 1}}, {Field0: 299158587, Field1: makeNimstrLit("looparrowright"), Field2: {rows: [makeNimstrLit("\xE2\x86\xAC")], baseline: 0, width: 1, flag: 2}}, {Field0: 1695671356, Field1: makeNimstrLit("mid"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA3")], baseline: 0, width: 1, flag: 2}}, {Field0: -1661594566, Field1: makeNimstrLit("lozenge"), Field2: {rows: [makeNimstrLit("\xE2\x97\x8A")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -965019585, Field1: makeNimstrLit("dotsb"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xAF")], baseline: 0, width: 1, flag: 0}}, {Field0: -353695681, Field1: makeNimstrLit("cos"), Field2: {rows: [makeNimstrLit("cos")], baseline: 0, width: 3, flag: 4}}, {Field0: -337936319, Field1: makeNimstrLit("xi"), Field2: {rows: [makeNimstrLit("\xCE\xBE")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -482070460, Field1: makeNimstrLit("triangleq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x9C")], baseline: 0, width: 1, flag: 2}}, {Field0: 1865025605, Field1: makeNimstrLit("upharpoonright"), Field2: {rows: [makeNimstrLit("\xE2\x86\xBE")], baseline: 0, width: 1, flag: 2}}, {Field0: -99402684, Field1: makeNimstrLit("llbracket"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -595749816, Field1: makeNimstrLit("Rrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x9B")], baseline: 0, width: 1, flag: 2}}, {Field0: 444818505, Field1: makeNimstrLit("twoheadleftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x9E")], baseline: 0, width: 1, flag: 2}}, {Field0: 949833801, Field1: makeNimstrLit("dashv"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA3")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 731926604, Field1: makeNimstrLit("Rho"), Field2: {rows: [makeNimstrLit("P")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -152946609, Field1: makeNimstrLit("Lrarr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: 999038032, Field1: makeNimstrLit("models"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA8")], baseline: 0, width: 1, flag: 2}}, {Field0: 856149071, Field1: makeNimstrLit("liminf"), Field2: {rows: [makeNimstrLit("lim inf")], baseline: 0, width: 7, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 260524116, Field1: makeNimstrLit("div"), Field2: {rows: [makeNimstrLit("\xC3\xB7")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1743740842, Field1: makeNimstrLit("varsigma"), Field2: {rows: [makeNimstrLit("\xCF\x82")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 152217691, Field1: makeNimstrLit("to"), Field2: {rows: [makeNimstrLit("\xE2\x86\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: -232435621, Field1: makeNimstrLit("leftrightarrows"), Field2: {rows: [makeNimstrLit("\xE2\x87\x86")], baseline: 0, width: 1, flag: 2}}, {Field0: -1894549413, Field1: makeNimstrLit("gimel"), Field2: {rows: [makeNimstrLit("\xE2\x84\xB7")], baseline: 0, width: 1, flag: 1}}, {Field0: -977484706, Field1: makeNimstrLit("textunderscore"), Field2: {rows: [makeNimstrLit("_")], baseline: 0, width: 1, flag: 0}}, {Field0: -653542309, Field1: makeNimstrLit("hom"), Field2: {rows: [makeNimstrLit("hom")], baseline: 0, width: 3, flag: 4}}, {Field0: -836744096, Field1: makeNimstrLit("leftleftarrows"), Field2: {rows: [makeNimstrLit("\xE2\x87\x87")], baseline: 0, width: 1, flag: 2}}, {Field0: 778788961, Field1: makeNimstrLit("bigvee"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x81")], baseline: 0, width: 1, flag: 3}}, {Field0: 213332064, Field1: makeNimstrLit("precsim"), Field2: {rows: [makeNimstrLit("\xE2\x89\xBE")], baseline: 0, width: 1, flag: 2}}, {Field0: 727641187, Field1: makeNimstrLit("minuscoloncolon"), Field2: {rows: [makeNimstrLit("::: :, \xE2\x88\x92\xE2\x88\xB7")], baseline: 0, width: 9, flag: 2}}, {Field0: -561121181, Field1: makeNimstrLit("backsim"), Field2: {rows: [makeNimstrLit("\xE2\x88\xBD")], baseline: 0, width: 1, flag: 2}}, {Field0: 282381413, Field1: makeNimstrLit("gneq"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: 460405857, Field1: makeNimstrLit("Vert"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA5")], baseline: 0, width: 1, flag: 0}}, {Field0: 1072275553, Field1: makeNimstrLit("AA"), Field2: {rows: [makeNimstrLit("\xC3\x85")], baseline: 0, width: 1, flag: 1}}, {Field0: 259182696, Field1: makeNimstrLit("gt"), Field2: {rows: [makeNimstrLit(">")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1338973290, Field1: makeNimstrLit("vdots"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xAE")], baseline: 0, width: 1, flag: 0}}, {Field0: 749951083, Field1: makeNimstrLit("eta"), Field2: {rows: [makeNimstrLit("\xCE\xB7")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1938319251, Field1: makeNimstrLit("oiiint"), Field2: {rows: [makeNimstrLit("\xE2\x88\xB0")], baseline: 0, width: 1, flag: 3}}, {Field0: 1672714350, Field1: makeNimstrLit("unrhd"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB5")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -587095952, Field1: makeNimstrLit("ntrianglelefteq"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xAC")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1364552818, Field1: makeNimstrLit("notin"), Field2: {rows: [makeNimstrLit("\xE2\x88\x89")], baseline: 0, width: 1, flag: 2}}, {Field0: -718976910, Field1: makeNimstrLit("Sigma"), Field2: {rows: [makeNimstrLit("\xCE\xA3")], baseline: 0, width: 1, flag: 1}}, {Field0: -331592588, Field1: makeNimstrLit("lbrace"), Field2: {rows: [makeNimstrLit("{")], baseline: 0, width: 1, flag: 0}}, {Field0: -2046516107, Field1: makeNimstrLit("rArr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: -1988400011, Field1: makeNimstrLit("gnapprox"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x8A")], baseline: 0, width: 1, flag: 2}}, {Field0: 1748272243, Field1: makeNimstrLit("o"), Field2: {rows: [makeNimstrLit("\xC3\xB8")], baseline: 0, width: 1, flag: 1}}, {Field0: 312313973, Field1: makeNimstrLit("dotsi"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xAF")], baseline: 0, width: 1, flag: 0}}, {Field0: 19161209, Field1: makeNimstrLit("ddagger"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA1")], baseline: 0, width: 1, flag: 0}}, {Field0: -1893200774, Field1: makeNimstrLit("ln"), Field2: {rows: [makeNimstrLit("ln")], baseline: 0, width: 2, flag: 4}}, {Field0: -100797317, Field1: makeNimstrLit("downdownarrows"), Field2: {rows: [makeNimstrLit("\xE2\x87\x8A")], baseline: 0, width: 1, flag: 2}}, {Field0: -1755413380, Field1: makeNimstrLit("subsetneqq"), Field2: {rows: [makeNimstrLit("\xE2\xAB\x8B")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -2084440962, Field1: makeNimstrLit("parallel"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA5")], baseline: 0, width: 1, flag: 2}}, {Field0: 977130622, Field1: makeNimstrLit("gamma"), Field2: {rows: [makeNimstrLit("\xCE\xB3")], baseline: 0, width: 1, flag: 1}}, {Field0: 1135297664, Field1: makeNimstrLit("uArr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x91")], baseline: 0, width: 1, flag: 2}}, {Field0: -296721281, Field1: makeNimstrLit("ddots"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xB1")], baseline: 0, width: 1, flag: 0}}, {Field0: -222212994, Field1: makeNimstrLit("clubs"), Field2: {rows: [makeNimstrLit("\xE2\x99\xA3")], baseline: 0, width: 1, flag: 0}}, {Field0: -1164247933, Field1: makeNimstrLit("boxplus"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x9E")], baseline: 0, width: 1, flag: 2}}, {Field0: 1514094724, Field1: makeNimstrLit("dagger"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA0")], baseline: 0, width: 1, flag: 0}}, {Field0: 1311469697, Field1: makeNimstrLit("cotg"), Field2: {rows: [makeNimstrLit("cotg")], baseline: 0, width: 4, flag: 4}}, {Field0: 490725510, Field1: makeNimstrLit("because"), Field2: {rows: [makeNimstrLit("\xE2\x88\xB5")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 966588552, Field1: makeNimstrLit("leftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x90")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -999892852, Field1: makeNimstrLit("ne"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA0")], baseline: 0, width: 1, flag: 2}}, {Field0: -1858303860, Field1: makeNimstrLit("iota"), Field2: {rows: [makeNimstrLit("\xCE\xB9")], baseline: 0, width: 1, flag: 1}}, {Field0: 1746366604, Field1: makeNimstrLit("rq"), Field2: {rows: [makeNimstrLit("\xE2\x80\xB2")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 732241043, Field1: makeNimstrLit("doteq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x90")], baseline: 0, width: 1, flag: 2}}, {Field0: 58222740, Field1: makeNimstrLit("sh"), Field2: {rows: [makeNimstrLit("sh")], baseline: 0, width: 2, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -797167466, Field1: makeNimstrLit("gtreqqless"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x8C")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1089103717, Field1: makeNimstrLit("blacktriangleleft"), Field2: {rows: [makeNimstrLit("\xE2\x97\x80")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1035649181, Field1: makeNimstrLit("Z"), Field2: {rows: [makeNimstrLit("Z")], baseline: 0, width: 1, flag: 1}}, {Field0: -2091908962, Field1: makeNimstrLit("gtreqless"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x9B")], baseline: 0, width: 1, flag: 2}}, {Field0: 965928095, Field1: makeNimstrLit("Delta"), Field2: {rows: [makeNimstrLit("\xCE\x94")], baseline: 0, width: 1, flag: 1}}, {Field0: -420720480, Field1: makeNimstrLit("textasciitilde"), Field2: {rows: [makeNimstrLit("~")], baseline: 0, width: 1, flag: 0}}, {Field0: -778712927, Field1: makeNimstrLit("Join"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: -1789499230, Field1: makeNimstrLit("Leftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x90")], baseline: 0, width: 1, flag: 2}}, {Field0: 1590319267, Field1: makeNimstrLit("ominus"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x96")], baseline: 0, width: 1, flag: 2}}, {Field0: 1997743268, Field1: makeNimstrLit("lt"), Field2: {rows: [makeNimstrLit("<")], baseline: 0, width: 1, flag: 2}}, {Field0: -1355677533, Field1: makeNimstrLit("reals"), Field2: {rows: [makeNimstrLit("R")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -523187031, Field1: makeNimstrLit("iint"), Field2: {rows: [makeNimstrLit("\xE2\x88\xAC")], baseline: 0, width: 1, flag: 3}}, {Field0: -1036495703, Field1: makeNimstrLit("bigsqcup"), Field2: {rows: [makeNimstrLit("\xE2\xA8\x86")], baseline: 0, width: 1, flag: 3}}, {Field0: 128442538, Field1: makeNimstrLit("cosh"), Field2: {rows: [makeNimstrLit("cosh")], baseline: 0, width: 4, flag: 4}}, {Field0: -2114553684, Field1: makeNimstrLit("textellipsis"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1448098991, Field1: makeNimstrLit("lessapprox"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x85")], baseline: 0, width: 1, flag: 2}}, {Field0: -1900930897, Field1: makeNimstrLit("precnapprox"), Field2: {rows: [makeNimstrLit("\xE2\xAA\xB9")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1279032140, Field1: makeNimstrLit("mapsto"), Field2: {rows: [makeNimstrLit("\xE2\x86\xA6")], baseline: 0, width: 1, flag: 2}}, {Field0: 659410101, Field1: makeNimstrLit("biguplus"), Field2: {rows: [makeNimstrLit("\xE2\xA8\x84")], baseline: 0, width: 1, flag: 3}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 561724599, Field1: makeNimstrLit("lesseqqgtr"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x8B")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1809787065, Field1: makeNimstrLit("amalg"), Field2: {rows: [makeNimstrLit("\xE2\xA8\xBF")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -37402437, Field1: makeNimstrLit("sum"), Field2: {rows: [makeNimstrLit("\xE2\x88\x91")], baseline: 0, width: 1, flag: 3}}, {Field0: 1885254844, Field1: makeNimstrLit("lor"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA8")], baseline: 0, width: 1, flag: 2}}, {Field0: -1271205699, Field1: makeNimstrLit("harr"), Field2: {rows: [makeNimstrLit("\xE2\x86\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: -9535301, Field1: makeNimstrLit("rrbracket"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xA7")], baseline: 0, width: 1, flag: 0}}, {Field0: 784871615, Field1: makeNimstrLit("nleftrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\xAE")], baseline: 0, width: 1, flag: 2}}, {Field0: 1326387387, Field1: makeNimstrLit("csc"), Field2: {rows: [makeNimstrLit("csc")], baseline: 0, width: 3, flag: 4}}, {Field0: -1490766655, Field1: makeNimstrLit("textquoteleft"), Field2: {rows: [makeNimstrLit("\xE2\x80\x98")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -422736700, Field1: makeNimstrLit("oslash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x98")], baseline: 0, width: 1, flag: 2}}, {Field0: 1286160581, Field1: makeNimstrLit("bigcirc"), Field2: {rows: [makeNimstrLit("\xE2\x97\xAF")], baseline: 0, width: 1, flag: 2}}, {Field0: 239622342, Field1: makeNimstrLit("twoheadrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\xA0")], baseline: 0, width: 1, flag: 2}}, {Field0: -142582585, Field1: makeNimstrLit("land"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA7")], baseline: 0, width: 1, flag: 2}}, {Field0: -108495675, Field1: makeNimstrLit("upuparrows"), Field2: {rows: [makeNimstrLit("\xE2\x87\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: 1882464453, Field1: makeNimstrLit("pitchfork"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: 695680199, Field1: makeNimstrLit("nsucc"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x81")], baseline: 0, width: 1, flag: 2}}, {Field0: 1379611846, Field1: makeNimstrLit("nsupseteq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x89")], baseline: 0, width: 1, flag: 2}}, {Field0: 1519946951, Field1: makeNimstrLit("dotso"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: 1121218765, Field1: makeNimstrLit("rightthreetimes"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x8C")], baseline: 0, width: 1, flag: 2}}, {Field0: -1661306674, Field1: makeNimstrLit("Bumpeq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x8E")], baseline: 0, width: 1, flag: 2}}, {Field0: -1584718641, Field1: makeNimstrLit("Doteq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x91")], baseline: 0, width: 1, flag: 2}}, {Field0: 2014841039, Field1: makeNimstrLit("succneqq"), Field2: {rows: [makeNimstrLit("\xE2\xAA\xB6")], baseline: 0, width: 1, flag: 2}}, {Field0: -159647535, Field1: makeNimstrLit("upsilon"), Field2: {rows: [makeNimstrLit("\xCF\x85")], baseline: 0, width: 1, flag: 1}}, {Field0: 1363198162, Field1: makeNimstrLit("curlyeqsucc"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x9F")], baseline: 0, width: 1, flag: 2}}, {Field0: -884689710, Field1: makeNimstrLit("vartheta"), Field2: {rows: [makeNimstrLit("\xCF\x91")], baseline: 0, width: 1, flag: 1}}, {Field0: -1843728178, Field1: makeNimstrLit("colon"), Field2: {rows: [makeNimstrLit(":")], baseline: 0, width: 1, flag: 0}}, {Field0: -1445616431, Field1: makeNimstrLit("surd"), Field2: {rows: [makeNimstrLit("\xE2\x88\x9A")], baseline: 0, width: 1, flag: 0}}, {Field0: 457960649, Field1: makeNimstrLit("textbackslash"), Field2: {rows: [makeNimstrLit("\\")], baseline: 0, width: 1, flag: 0}}, {Field0: -435545897, Field1: makeNimstrLit("longrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xB6")], baseline: 0, width: 1, flag: 2}}, {Field0: -1222909744, Field1: makeNimstrLit("sect"), Field2: {rows: [makeNimstrLit("\xC2\xA7")], baseline: 0, width: 1, flag: 0}}, {Field0: -2121057065, Field1: makeNimstrLit("sin"), Field2: {rows: [makeNimstrLit("sin")], baseline: 0, width: 3, flag: 4}}, {Field0: -1726815019, Field1: makeNimstrLit("cth"), Field2: {rows: [makeNimstrLit("cth")], baseline: 0, width: 3, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 979290334, Field1: makeNimstrLit("dots"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1312209120, Field1: makeNimstrLit("ldotp"), Field2: {rows: [makeNimstrLit(".")], baseline: 0, width: 1, flag: 2}}, {Field0: 861523169, Field1: makeNimstrLit("approxcolon"), Field2: {rows: [makeNimstrLit("\xE2\x89\x88:")], baseline: 0, width: 2, flag: 2}}, {Field0: 2048828642, Field1: makeNimstrLit("upharpoonleft"), Field2: {rows: [makeNimstrLit("\xE2\x86\xBF")], baseline: 0, width: 1, flag: 2}}, {Field0: -1199991581, Field1: makeNimstrLit("tg"), Field2: {rows: [makeNimstrLit("tg")], baseline: 0, width: 2, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1893927147, Field1: makeNimstrLit("gtrdot"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x97")], baseline: 0, width: 1, flag: 2}}, {Field0: -1959936789, Field1: makeNimstrLit("succeq"), Field2: {rows: [makeNimstrLit("\xE2\xAA\xB0")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 2132660463, Field1: makeNimstrLit("lrarr"), Field2: {rows: [makeNimstrLit("\xE2\x86\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: 488165615, Field1: makeNimstrLit("top"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA4")], baseline: 0, width: 1, flag: 0}}, {Field0: -606145295, Field1: makeNimstrLit("ll"), Field2: {rows: [makeNimstrLit("\xE2\x89\xAA")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1807494389, Field1: makeNimstrLit("diamonds"), Field2: {rows: [makeNimstrLit("\xE2\x99\xA2")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 192740599, Field1: makeNimstrLit("succapprox"), Field2: {rows: [makeNimstrLit("\xE2\xAA\xB8")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -560628486, Field1: makeNimstrLit("min"), Field2: {rows: [makeNimstrLit("min")], baseline: 0, width: 3, flag: 4}}, {Field0: 1285704955, Field1: makeNimstrLit("longleftrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xB7")], baseline: 0, width: 1, flag: 2}}, {Field0: 1234765051, Field1: makeNimstrLit("inf"), Field2: {rows: [makeNimstrLit("inf")], baseline: 0, width: 3, flag: 4}}, {Field0: -978306819, Field1: makeNimstrLit("projlim"), Field2: {rows: [makeNimstrLit("proj lim")], baseline: 0, width: 8, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1846918907, Field1: makeNimstrLit("impliedby"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xB8")], baseline: 0, width: 1, flag: 2}}, {Field0: -1475488507, Field1: makeNimstrLit("Lleftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x9A")], baseline: 0, width: 1, flag: 2}}, {Field0: 1549492486, Field1: makeNimstrLit("equalscolon"), Field2: {rows: [makeNimstrLit("\xE2\x89\x95")], baseline: 0, width: 1, flag: 2}}, {Field0: -1609219833, Field1: makeNimstrLit("blacksquare"), Field2: {rows: [makeNimstrLit("\xE2\x96\xA0")], baseline: 0, width: 1, flag: 0}}, {Field0: 1089001737, Field1: makeNimstrLit("Supset"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x91")], baseline: 0, width: 1, flag: 2}}, {Field0: -989102838, Field1: makeNimstrLit("preceq"), Field2: {rows: [makeNimstrLit("\xE2\xAA\xAF")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1645364493, Field1: makeNimstrLit("rightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: -1458530034, Field1: makeNimstrLit("vartriangleright"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB3")], baseline: 0, width: 1, flag: 2}}, {Field0: 1612016911, Field1: makeNimstrLit("bigoplus"), Field2: {rows: [makeNimstrLit("\xE2\xA8\x81")], baseline: 0, width: 1, flag: 3}}, {Field0: 491266320, Field1: makeNimstrLit("lessdot"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x96")], baseline: 0, width: 1, flag: 2}}, {Field0: 131900689, Field1: makeNimstrLit("in"), Field2: {rows: [makeNimstrLit("\xE2\x88\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: -359701233, Field1: makeNimstrLit("dag"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA0")], baseline: 0, width: 1, flag: 0}}, {Field0: -187569904, Field1: makeNimstrLit("cot"), Field2: {rows: [makeNimstrLit("cot")], baseline: 0, width: 3, flag: 4}}, {Field0: -1545899756, Field1: makeNimstrLit("Game"), Field2: {rows: [makeNimstrLit("\xE2\x85\x81")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1835041046, Field1: makeNimstrLit("ntrianglerighteq"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xAD")], baseline: 0, width: 1, flag: 2}}, {Field0: 1895304471, Field1: makeNimstrLit("gg"), Field2: {rows: [makeNimstrLit("\xE2\x89\xAB")], baseline: 0, width: 1, flag: 2}}, {Field0: -1002856168, Field1: makeNimstrLit("exists"), Field2: {rows: [makeNimstrLit("\xE2\x88\x83")], baseline: 0, width: 1, flag: 2}}, {Field0: 1855977753, Field1: makeNimstrLit("barwedge"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xBC")], baseline: 0, width: 1, flag: 2}}, {Field0: -13362922, Field1: makeNimstrLit("varPhi"), Field2: {rows: [makeNimstrLit("\xCE\xA6")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1924908771, Field1: makeNimstrLit("Colonsim"), Field2: {rows: [makeNimstrLit("\xE2\x88\xB7\xE2\x88\xBC")], baseline: 0, width: 2, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1350079776, Field1: makeNimstrLit("ctg"), Field2: {rows: [makeNimstrLit("ctg")], baseline: 0, width: 3, flag: 4}}, {Field0: -419504863, Field1: makeNimstrLit("rightarrowtail"), Field2: {rows: [makeNimstrLit("\xE2\x86\xA3")], baseline: 0, width: 1, flag: 2}}, {Field0: -1088790238, Field1: makeNimstrLit("pm"), Field2: {rows: [makeNimstrLit("\xC2\xB1")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1071612201, Field1: makeNimstrLit("oiint"), Field2: {rows: [makeNimstrLit("\xE2\x88\xAF")], baseline: 0, width: 1, flag: 3}}, {Field0: -1023749846, Field1: makeNimstrLit("leq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA4")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -2009879247, Field1: makeNimstrLit("unlhd"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB4")], baseline: 0, width: 1, flag: 2}}, {Field0: 627659057, Field1: makeNimstrLit("Lambda"), Field2: {rows: [makeNimstrLit("\xCE\x9B")], baseline: 0, width: 1, flag: 1}}, {Field0: -1787755213, Field1: makeNimstrLit("oplus"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x95")], baseline: 0, width: 1, flag: 2}}, {Field0: -184680143, Field1: makeNimstrLit("triangleright"), Field2: {rows: [makeNimstrLit("\xE2\x96\xB9")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1440444105, Field1: makeNimstrLit("bigwedge"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x80")], baseline: 0, width: 1, flag: 3}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -760926919, Field1: makeNimstrLit("diagdown"), Field2: {rows: [makeNimstrLit("\xE2\x95\xB2")], baseline: 0, width: 1, flag: 0}}, {Field0: 535853370, Field1: makeNimstrLit("iiint"), Field2: {rows: [makeNimstrLit("\xE2\x88\xAD")], baseline: 0, width: 1, flag: 3}}, {Field0: 1989892411, Field1: makeNimstrLit("cap"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA9")], baseline: 0, width: 1, flag: 2}}, {Field0: -1078095557, Field1: makeNimstrLit("ngeqslant"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB1")], baseline: 0, width: 1, flag: 2}}, {Field0: -407561924, Field1: makeNimstrLit("arcsin"), Field2: {rows: [makeNimstrLit("arcsin")], baseline: 0, width: 6, flag: 4}}, {Field0: -490111682, Field1: makeNimstrLit("curlywedge"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x8F")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1772874048, Field1: makeNimstrLit("mod"), Field2: {rows: [makeNimstrLit("bmod")], baseline: 0, width: 4, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1858042554, Field1: makeNimstrLit("square"), Field2: {rows: [makeNimstrLit("\xE2\x96\xA1")], baseline: 0, width: 1, flag: 0}}, {Field0: -1357095609, Field1: makeNimstrLit("uparrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x91")], baseline: 0, width: 1, flag: 2}}, {Field0: -52651705, Field1: makeNimstrLit("Diamond"), Field2: {rows: [makeNimstrLit("\xE2\x97\x8A")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -817700533, Field1: makeNimstrLit("sqsupseteq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: -1135570613, Field1: makeNimstrLit("multimap"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB8")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -30619314, Field1: makeNimstrLit("therefore"), Field2: {rows: [makeNimstrLit("\xE2\x88\xB4")], baseline: 0, width: 1, flag: 2}}, {Field0: 55854415, Field1: makeNimstrLit("smallsmile"), Field2: {rows: [makeNimstrLit("\xE2\x8C\xA3")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 468669778, Field1: makeNimstrLit("isin"), Field2: {rows: [makeNimstrLit("\xE2\x88\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: -1293458094, Field1: makeNimstrLit("restriction"), Field2: {rows: [makeNimstrLit("\xE2\x86\xBE")], baseline: 0, width: 1, flag: 2}}, {Field0: 179645778, Field1: makeNimstrLit("Longleftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xB8")], baseline: 0, width: 1, flag: 2}}, {Field0: -970868397, Field1: makeNimstrLit("sube"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x86")], baseline: 0, width: 1, flag: 2}}, {Field0: 125073749, Field1: makeNimstrLit("nsupseteqq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x89")], baseline: 0, width: 1, flag: 2}}, {Field0: 353154387, Field1: makeNimstrLit("ntriangleleft"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xAA")], baseline: 0, width: 1, flag: 2}}, {Field0: -1536889512, Field1: makeNimstrLit("succsim"), Field2: {rows: [makeNimstrLit("\xE2\x89\xBF")], baseline: 0, width: 1, flag: 2}}, {Field0: -1381979816, Field1: makeNimstrLit("neq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA0")], baseline: 0, width: 1, flag: 2}}, {Field0: 9375058, Field1: makeNimstrLit("Re"), Field2: {rows: [makeNimstrLit("\xE2\x84\x9C")], baseline: 0, width: 1, flag: 1}}, {Field0: -1778153125, Field1: makeNimstrLit("And"), Field2: {rows: [makeNimstrLit("&")], baseline: 0, width: 1, flag: 2}}, {Field0: 2108854619, Field1: makeNimstrLit("aleph"), Field2: {rows: [makeNimstrLit("\xE2\x84\xB5")], baseline: 0, width: 1, flag: 1}}, {Field0: -727795363, Field1: makeNimstrLit("boxtimes"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA0")], baseline: 0, width: 1, flag: 2}}, {Field0: 1245973854, Field1: makeNimstrLit("Larr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x90")], baseline: 0, width: 1, flag: 2}}, {Field0: -1574408866, Field1: makeNimstrLit("lArr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x90")], baseline: 0, width: 1, flag: 2}}, {Field0: -722184869, Field1: makeNimstrLit("AE"), Field2: {rows: [makeNimstrLit("\xC3\x86")], baseline: 0, width: 1, flag: 1}}, {Field0: -996418216, Field1: makeNimstrLit("infin"), Field2: {rows: [makeNimstrLit("\xE2\x88\x9E")], baseline: 0, width: 1, flag: 0}}, {Field0: 940000598, Field1: makeNimstrLit("Dagger"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA1")], baseline: 0, width: 1, flag: 0}}, {Field0: 432784739, Field1: makeNimstrLit("varDelta"), Field2: {rows: [makeNimstrLit("\xCE\x94")], baseline: 0, width: 1, flag: 1}}, {Field0: 1717310812, Field1: makeNimstrLit("yen"), Field2: {rows: [makeNimstrLit("\xC2\xA5")], baseline: 0, width: 1, flag: 0}}, {Field0: 1287358821, Field1: makeNimstrLit("varTheta"), Field2: {rows: [makeNimstrLit("\xCE\x98")], baseline: 0, width: 1, flag: 1}}, {Field0: -140368539, Field1: makeNimstrLit("blacktriangle"), Field2: {rows: [makeNimstrLit("\xE2\x96\xB2")], baseline: 0, width: 1, flag: 0}}, {Field0: 1128273242, Field1: makeNimstrLit("degree"), Field2: {rows: [makeNimstrLit("\xC2\xB0")], baseline: 0, width: 1, flag: 0}}, {Field0: 1182784865, Field1: makeNimstrLit("sup"), Field2: {rows: [makeNimstrLit("sup")], baseline: 0, width: 3, flag: 4}}, {Field0: 118212969, Field1: makeNimstrLit("eth"), Field2: {rows: [makeNimstrLit("\xC3\xB0")], baseline: 0, width: 1, flag: 1}}, {Field0: -970887830, Field1: makeNimstrLit("nsucceq"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xA1")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -69842580, Field1: makeNimstrLit("flat"), Field2: {rows: [makeNimstrLit("\xE2\x99\xAD")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1415733615, Field1: makeNimstrLit("colonsim"), Field2: {rows: [makeNimstrLit(":\xE2\x88\xBC")], baseline: 0, width: 2, flag: 2}}, {Field0: 1135244656, Field1: makeNimstrLit("nsim"), Field2: {rows: [makeNimstrLit("\xE2\x89\x81")], baseline: 0, width: 1, flag: 2}}, {Field0: -857002639, Field1: makeNimstrLit("Lsh"), Field2: {rows: [makeNimstrLit("\xE2\x86\xB0")], baseline: 0, width: 1, flag: 2}}, {Field0: 1069478258, Field1: makeNimstrLit("vert"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA3")], baseline: 0, width: 1, flag: 0}}, {Field0: 1989233008, Field1: makeNimstrLit("thetasym"), Field2: {rows: [makeNimstrLit("\xCF\x91")], baseline: 0, width: 1, flag: 1}}, {Field0: 1164383599, Field1: makeNimstrLit("ldots"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 222810489, Field1: makeNimstrLit("sim"), Field2: {rows: [makeNimstrLit("\xE2\x88\xBC")], baseline: 0, width: 1, flag: 2}}, {Field0: 1532834170, Field1: makeNimstrLit("nparallel"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA6")], baseline: 0, width: 1, flag: 2}}, {Field0: 597902715, Field1: makeNimstrLit("ge"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA5")], baseline: 0, width: 1, flag: 2}}, {Field0: -1771227780, Field1: makeNimstrLit("centerdot"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x85")], baseline: 0, width: 1, flag: 2}}, {Field0: 742864253, Field1: makeNimstrLit("sqsupset"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x90")], baseline: 0, width: 1, flag: 2}}, {Field0: -1658382981, Field1: makeNimstrLit("Epsilon"), Field2: {rows: [makeNimstrLit("E")], baseline: 0, width: 1, flag: 1}}, {Field0: -650839681, Field1: makeNimstrLit("thickapprox"), Field2: {rows: [makeNimstrLit("\xE2\x89\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: -1698018951, Field1: makeNimstrLit("Chi"), Field2: {rows: [makeNimstrLit("X")], baseline: 0, width: 1, flag: 1}}, {Field0: 428323201, Field1: makeNimstrLit("longmapsto"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xBC")], baseline: 0, width: 1, flag: 2}}, {Field0: 1829878146, Field1: makeNimstrLit("textregistered"), Field2: {rows: [makeNimstrLit("\xC2\xAE")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -967296636, Field1: makeNimstrLit("lbrack"), Field2: {rows: [makeNimstrLit("[")], baseline: 0, width: 1, flag: 0}}, {Field0: -862051963, Field1: makeNimstrLit("nleq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB0")], baseline: 0, width: 1, flag: 2}}, {Field0: 1726809478, Field1: makeNimstrLit("colonminus"), Field2: {rows: [makeNimstrLit(":\xE2\x88\x92")], baseline: 0, width: 2, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1240069752, Field1: makeNimstrLit("divideontimes"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x87")], baseline: 0, width: 1, flag: 2}}, {Field0: -1122236023, Field1: makeNimstrLit("perp"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA5")], baseline: 0, width: 1, flag: 2}}, {Field0: 448181641, Field1: makeNimstrLit("prime"), Field2: {rows: [makeNimstrLit("\xE2\x80\xB2")], baseline: 0, width: 1, flag: 0}}, {Field0: -1049345653, Field1: makeNimstrLit("supsetneq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x8B")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -186772081, Field1: makeNimstrLit("lnot"), Field2: {rows: [makeNimstrLit("\xC2\xAC")], baseline: 0, width: 1, flag: 2}}, {Field0: 1143282064, Field1: makeNimstrLit("doublecup"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: -1355421295, Field1: makeNimstrLit("forall"), Field2: {rows: [makeNimstrLit("\xE2\x88\x80")], baseline: 0, width: 1, flag: 2}}, {Field0: 780416399, Field1: makeNimstrLit("leftharpoondown"), Field2: {rows: [makeNimstrLit("\xE2\x86\xBD")], baseline: 0, width: 1, flag: 2}}, {Field0: 851116435, Field1: makeNimstrLit("coloneqq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: -2076267116, Field1: makeNimstrLit("leadsto"), Field2: {rows: [makeNimstrLit("\xE2\x87\x9D")], baseline: 0, width: 1, flag: 2}}, {Field0: -1095375470, Field1: makeNimstrLit("ncong"), Field2: {rows: [makeNimstrLit("\xE2\x89\x86")], baseline: 0, width: 1, flag: 2}}, {Field0: 1902103956, Field1: makeNimstrLit("varPi"), Field2: {rows: [makeNimstrLit("\xCE\xA0")], baseline: 0, width: 1, flag: 1}}, {Field0: -1114860145, Field1: makeNimstrLit("chi"), Field2: {rows: [makeNimstrLit("\xCF\x87")], baseline: 0, width: 1, flag: 1}}, {Field0: -137865835, Field1: makeNimstrLit("maltese"), Field2: {rows: [makeNimstrLit("\xE2\x9C\xA0")], baseline: 0, width: 1, flag: 0}}, {Field0: 1222922649, Field1: makeNimstrLit("dblcolon"), Field2: {rows: [makeNimstrLit("\xE2\x88\xB7")], baseline: 0, width: 1, flag: 2}}, {Field0: 142935450, Field1: makeNimstrLit("succ"), Field2: {rows: [makeNimstrLit("\xE2\x89\xBB")], baseline: 0, width: 1, flag: 2}}, {Field0: -235331173, Field1: makeNimstrLit("smallsetminus"), Field2: {rows: [makeNimstrLit("\xE2\x88\x96")], baseline: 0, width: 1, flag: 2}}, {Field0: 153636250, Field1: makeNimstrLit("det"), Field2: {rows: [makeNimstrLit("det")], baseline: 0, width: 3, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -534911583, Field1: makeNimstrLit("dashleftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\xA0")], baseline: 0, width: 1, flag: 2}}, {Field0: 331403682, Field1: makeNimstrLit("leqq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA6")], baseline: 0, width: 1, flag: 2}}, {Field0: 309436835, Field1: makeNimstrLit("textquoteright"), Field2: {rows: [makeNimstrLit("\xE2\x80\x99")], baseline: 0, width: 1, flag: 0}}, {Field0: 183010724, Field1: makeNimstrLit("doteqdot"), Field2: {rows: [makeNimstrLit("\xE2\x89\x91")], baseline: 0, width: 1, flag: 2}}, {Field0: -140396123, Field1: makeNimstrLit("geqslant"), Field2: {rows: [makeNimstrLit("\xE2\xA9\xBE")], baseline: 0, width: 1, flag: 2}}, {Field0: -822921819, Field1: makeNimstrLit("textquotedblleft"), Field2: {rows: [makeNimstrLit("\xE2\x80\x9C")], baseline: 0, width: 1, flag: 0}}, {Field0: 1216695713, Field1: makeNimstrLit("diagup"), Field2: {rows: [makeNimstrLit("\xE2\x95\xB1")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 2022730153, Field1: makeNimstrLit("beta"), Field2: {rows: [makeNimstrLit("\xCE\xB2")], baseline: 0, width: 1, flag: 1}}, {Field0: 923832745, Field1: makeNimstrLit("aa"), Field2: {rows: [makeNimstrLit("\xC3\xA5")], baseline: 0, width: 1, flag: 1}}, {Field0: 483458475, Field1: makeNimstrLit("rbrack"), Field2: {rows: [makeNimstrLit("]")], baseline: 0, width: 1, flag: 0}}, {Field0: -701556308, Field1: makeNimstrLit("curvearrowleft"), Field2: {rows: [makeNimstrLit("\xE2\x86\xB6")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -495585874, Field1: makeNimstrLit("sigma"), Field2: {rows: [makeNimstrLit("\xCF\x83")], baseline: 0, width: 1, flag: 1}}, {Field0: 937655727, Field1: makeNimstrLit("geqq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA7")], baseline: 0, width: 1, flag: 2}}, {Field0: -1858229842, Field1: makeNimstrLit("arctan"), Field2: {rows: [makeNimstrLit("arctan")], baseline: 0, width: 6, flag: 4}}, {Field0: -212827727, Field1: makeNimstrLit("larr"), Field2: {rows: [makeNimstrLit("\xE2\x86\x90")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1177094581, Field1: makeNimstrLit("bigcup"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x83")], baseline: 0, width: 1, flag: 3}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 744779191, Field1: makeNimstrLit("le"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA4")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -189880903, Field1: makeNimstrLit("lll"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x98")], baseline: 0, width: 1, flag: 2}}, {Field0: -665286215, Field1: makeNimstrLit("varepsilon"), Field2: {rows: [makeNimstrLit("\xCE\xB5")], baseline: 0, width: 1, flag: 1}}, {Field0: 1679721915, Field1: makeNimstrLit("ratio"), Field2: {rows: [makeNimstrLit(":")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 438242753, Field1: makeNimstrLit("lfloor"), Field2: {rows: [makeNimstrLit("\xE2\x8C\x8A")], baseline: 0, width: 1, flag: 0}}, {Field0: -991056446, Field1: makeNimstrLit("smallfrown"), Field2: {rows: [makeNimstrLit("\xE2\x8C\xA2")], baseline: 0, width: 1, flag: 2}}, {Field0: -1690050109, Field1: makeNimstrLit("bullet"), Field2: {rows: [makeNimstrLit("\xE2\x88\x99")], baseline: 0, width: 1, flag: 2}}, {Field0: -1543983676, Field1: makeNimstrLit("doublecap"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: -1111792189, Field1: makeNimstrLit("varsupsetneqq"), Field2: {rows: [makeNimstrLit("\xE2\xAB\x8C")], baseline: 0, width: 1, flag: 2}}, {Field0: 1936615876, Field1: makeNimstrLit("Alpha"), Field2: {rows: [makeNimstrLit("A")], baseline: 0, width: 1, flag: 1}}, {Field0: -204029499, Field1: makeNimstrLit("epsilon"), Field2: {rows: [makeNimstrLit("\xCF\xB5")], baseline: 0, width: 1, flag: 1}}, {Field0: 2041800129, Field1: makeNimstrLit("R"), Field2: {rows: [makeNimstrLit("R")], baseline: 0, width: 1, flag: 1}}, {Field0: -1642090039, Field1: makeNimstrLit("wp"), Field2: {rows: [makeNimstrLit("\xE2\x84\x98")], baseline: 0, width: 1, flag: 1}}, {Field0: 1401058759, Field1: makeNimstrLit("arcctg"), Field2: {rows: [makeNimstrLit("arcctg")], baseline: 0, width: 6, flag: 4}}, {Field0: 1577711051, Field1: makeNimstrLit("textbraceright"), Field2: {rows: [makeNimstrLit("}")], baseline: 0, width: 1, flag: 0}}, {Field0: -769423932, Field1: makeNimstrLit("arg"), Field2: {rows: [makeNimstrLit("arg")], baseline: 0, width: 3, flag: 4}}, {Field0: 1246567885, Field1: makeNimstrLit("pounds"), Field2: {rows: [makeNimstrLit("\xC2\xA3")], baseline: 0, width: 1, flag: 0}}, {Field0: -1440281138, Field1: makeNimstrLit("otimes"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x97")], baseline: 0, width: 1, flag: 2}}, {Field0: 311781838, Field1: makeNimstrLit("copyright"), Field2: {rows: [makeNimstrLit("\xC2\xA9")], baseline: 0, width: 1, flag: 0}}, {Field0: -61369904, Field1: makeNimstrLit("intop"), Field2: {rows: [makeNimstrLit("\xE2\x88\xAB")], baseline: 0, width: 1, flag: 3}}, {Field0: 492728785, Field1: makeNimstrLit("supset"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x83")], baseline: 0, width: 1, flag: 2}}, {Field0: -610245166, Field1: makeNimstrLit("Coloneqq"), Field2: {rows: [makeNimstrLit("\xE2\x88\xB7=")], baseline: 0, width: 2, flag: 2}}, {Field0: -337772077, Field1: makeNimstrLit("nmid"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA4")], baseline: 0, width: 1, flag: 2}}, {Field0: 1533272532, Field1: makeNimstrLit("varsubsetneqq"), Field2: {rows: [makeNimstrLit("\xE2\xAB\x8B")], baseline: 0, width: 1, flag: 2}}, {Field0: -481215022, Field1: makeNimstrLit("lceil"), Field2: {rows: [makeNimstrLit("\xE2\x8C\x88")], baseline: 0, width: 1, flag: 0}}, {Field0: 2059920854, Field1: makeNimstrLit("downarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: -332135977, Field1: makeNimstrLit("exist"), Field2: {rows: [makeNimstrLit("\xE2\x88\x83")], baseline: 0, width: 1, flag: 2}}, {Field0: -883057194, Field1: makeNimstrLit("imageof"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB7")], baseline: 0, width: 1, flag: 2}}, {Field0: 1847278041, Field1: makeNimstrLit("origof"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB6")], baseline: 0, width: 1, flag: 2}}, {Field0: -2116573739, Field1: makeNimstrLit("textdegree"), Field2: {rows: [makeNimstrLit("\xC2\xB0")], baseline: 0, width: 1, flag: 0}}, {Field0: -799040039, Field1: makeNimstrLit("spadesuit"), Field2: {rows: [makeNimstrLit("\xE2\x99\xA0")], baseline: 0, width: 1, flag: 0}}, {Field0: -221915691, Field1: makeNimstrLit("exp"), Field2: {rows: [makeNimstrLit("exp")], baseline: 0, width: 3, flag: 4}}, {Field0: 665108957, Field1: makeNimstrLit("coprod"), Field2: {rows: [makeNimstrLit("\xE2\x88\x90")], baseline: 0, width: 1, flag: 3}}, {Field0: 1630840286, Field1: makeNimstrLit("mho"), Field2: {rows: [makeNimstrLit("\xE2\x84\xA7")], baseline: 0, width: 1, flag: 0}}, {Field0: -830267937, Field1: makeNimstrLit("int"), Field2: {rows: [makeNimstrLit("\xE2\x88\xAB")], baseline: 0, width: 1, flag: 3}}, {Field0: -2139331129, Field1: makeNimstrLit("limsup"), Field2: {rows: [makeNimstrLit("lim sup")], baseline: 0, width: 7, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1610263010, Field1: makeNimstrLit("leftthreetimes"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x8B")], baseline: 0, width: 1, flag: 2}}, {Field0: 1114208738, Field1: makeNimstrLit("varnothing"), Field2: {rows: [makeNimstrLit("\xE2\x88\x85")], baseline: 0, width: 1, flag: 2}}, {Field0: 1077534179, Field1: makeNimstrLit("owns"), Field2: {rows: [makeNimstrLit("\xE2\x88\x8B")], baseline: 0, width: 1, flag: 2}}, {Field0: 212498914, Field1: makeNimstrLit("Vdash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA9")], baseline: 0, width: 1, flag: 2}}, {Field0: -927282717, Field1: makeNimstrLit("gneqq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA9")], baseline: 0, width: 1, flag: 2}}, {Field0: 1208823271, Field1: makeNimstrLit("swarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x99")], baseline: 0, width: 1, flag: 2}}, {Field0: 1831684584, Field1: makeNimstrLit("lparen"), Field2: {rows: [makeNimstrLit("(")], baseline: 0, width: 1, flag: 0}}, {Field0: -1218212375, Field1: makeNimstrLit("curlyeqprec"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x9E")], baseline: 0, width: 1, flag: 2}}, {Field0: 1897493989, Field1: makeNimstrLit("Nu"), Field2: {rows: [makeNimstrLit("N")], baseline: 0, width: 1, flag: 1}}, {Field0: -695635477, Field1: makeNimstrLit("dashrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\xA2")], baseline: 0, width: 1, flag: 2}}, {Field0: -1443886612, Field1: makeNimstrLit("succnapprox"), Field2: {rows: [makeNimstrLit("\xE2\xAA\xBA")], baseline: 0, width: 1, flag: 2}}, {Field0: 1807167981, Field1: makeNimstrLit("rang"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xA9")], baseline: 0, width: 1, flag: 0}}, {Field0: 1580248552, Field1: makeNimstrLit("lambda"), Field2: {rows: [makeNimstrLit("\xCE\xBB")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -133512720, Field1: makeNimstrLit("iff"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xBA")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 371297779, Field1: makeNimstrLit("circleddash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x9D")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1649025525, Field1: makeNimstrLit("backepsilon"), Field2: {rows: [makeNimstrLit("\xE2\x88\x8D")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -102348297, Field1: makeNimstrLit("circ"), Field2: {rows: [makeNimstrLit("\xE2\x88\x98")], baseline: 0, width: 1, flag: 2}}, {Field0: 738677240, Field1: makeNimstrLit("Leftrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: -991826440, Field1: makeNimstrLit("nwarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x96")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1333410309, Field1: makeNimstrLit("hookleftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\xA9")], baseline: 0, width: 1, flag: 2}}, {Field0: -879801861, Field1: makeNimstrLit("risingdotseq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 383633919, Field1: makeNimstrLit("preccurlyeq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xBC")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 317083140, Field1: makeNimstrLit("bigodot"), Field2: {rows: [makeNimstrLit("\xE2\xA8\x80")], baseline: 0, width: 1, flag: 3}}, {Field0: 1446722052, Field1: makeNimstrLit("sqcap"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: -1995516410, Field1: makeNimstrLit("gets"), Field2: {rows: [makeNimstrLit("\xE2\x86\x90")], baseline: 0, width: 1, flag: 2}}, {Field0: -1374693881, Field1: makeNimstrLit("P"), Field2: {rows: [makeNimstrLit("\xC2\xB6")], baseline: 0, width: 1, flag: 0}}, {Field0: -943235580, Field1: makeNimstrLit("ker"), Field2: {rows: [makeNimstrLit("ker")], baseline: 0, width: 3, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1626003955, Field1: makeNimstrLit("prod"), Field2: {rows: [makeNimstrLit("\xE2\x88\x8F")], baseline: 0, width: 1, flag: 3}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1262346769, Field1: makeNimstrLit("leftarrowtail"), Field2: {rows: [makeNimstrLit("\xE2\x86\xA2")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1225410029, Field1: makeNimstrLit("checkmark"), Field2: {rows: [makeNimstrLit("\xE2\x9C\x93")], baseline: 0, width: 1, flag: 0}}, {Field0: -926707180, Field1: makeNimstrLit("image"), Field2: {rows: [makeNimstrLit("\xE2\x84\x91")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -925142501, Field1: makeNimstrLit("curvearrowright"), Field2: {rows: [makeNimstrLit("\xE2\x86\xB7")], baseline: 0, width: 1, flag: 2}}, {Field0: -110310885, Field1: makeNimstrLit("equiv"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA1")], baseline: 0, width: 1, flag: 2}}, {Field0: 286669341, Field1: makeNimstrLit("Eqcolon"), Field2: {rows: [makeNimstrLit("::: :, \xE2\x88\x92\xE2\x88\xB7")], baseline: 0, width: 9, flag: 2}}, {Field0: -1745527269, Field1: makeNimstrLit("bot"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA5")], baseline: 0, width: 1, flag: 0}}, {Field0: 1511302685, Field1: makeNimstrLit("mathsterling"), Field2: {rows: [makeNimstrLit("\xC2\xA3")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1146067423, Field1: makeNimstrLit("hbar"), Field2: {rows: [makeNimstrLit("\xE2\x84\x8F")], baseline: 0, width: 1, flag: 1}}, {Field0: -2105364958, Field1: makeNimstrLit("subseteqq"), Field2: {rows: [makeNimstrLit("\xE2\xAB\x85")], baseline: 0, width: 1, flag: 2}}, {Field0: 891442723, Field1: makeNimstrLit("Theta"), Field2: {rows: [makeNimstrLit("\xCE\x98")], baseline: 0, width: 1, flag: 1}}, {Field0: -77740508, Field1: makeNimstrLit("backsimeq"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x8D")], baseline: 0, width: 1, flag: 2}}, {Field0: 1783373347, Field1: makeNimstrLit("backprime"), Field2: {rows: [makeNimstrLit("\xE2\x80\xB5")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1891844648, Field1: makeNimstrLit("Zeta"), Field2: {rows: [makeNimstrLit("Z")], baseline: 0, width: 1, flag: 1}}, {Field0: 656361001, Field1: makeNimstrLit("darr"), Field2: {rows: [makeNimstrLit("\xE2\x86\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: -1435107798, Field1: makeNimstrLit("succnsim"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xA9")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 26894892, Field1: makeNimstrLit("Iota"), Field2: {rows: [makeNimstrLit("I")], baseline: 0, width: 1, flag: 1}}, {Field0: 1836716588, Field1: makeNimstrLit("zeta"), Field2: {rows: [makeNimstrLit("\xCE\xB6")], baseline: 0, width: 1, flag: 1}}, {Field0: -1691615698, Field1: makeNimstrLit("Longleftrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xBA")], baseline: 0, width: 1, flag: 2}}, {Field0: 891450927, Field1: makeNimstrLit("rightleftharpoons"), Field2: {rows: [makeNimstrLit("\xE2\x87\x8C")], baseline: 0, width: 1, flag: 2}}, {Field0: -1635509713, Field1: makeNimstrLit("Kappa"), Field2: {rows: [makeNimstrLit("K")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1001673268, Field1: makeNimstrLit("blacktriangleright"), Field2: {rows: [makeNimstrLit("\xE2\x96\xB6")], baseline: 0, width: 1, flag: 0}}, {Field0: 1501875765, Field1: makeNimstrLit("Tau"), Field2: {rows: [makeNimstrLit("T")], baseline: 0, width: 1, flag: 1}}, {Field0: 1552782902, Field1: makeNimstrLit("frown"), Field2: {rows: [makeNimstrLit("\xE2\x8C\xA2")], baseline: 0, width: 1, flag: 2}}, {Field0: -1521156553, Field1: makeNimstrLit("nleqslant"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB0")], baseline: 0, width: 1, flag: 2}}, {Field0: -326324681, Field1: makeNimstrLit("varXi"), Field2: {rows: [makeNimstrLit("\xCE\x9E")], baseline: 0, width: 1, flag: 1}}, {Field0: -898344391, Field1: makeNimstrLit("j"), Field2: {rows: [makeNimstrLit("\xC8\xB7")], baseline: 0, width: 1, flag: 1}}, {Field0: -503503303, Field1: makeNimstrLit("sdot"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x85")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1284465212, Field1: makeNimstrLit("infty"), Field2: {rows: [makeNimstrLit("\xE2\x88\x9E")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1178661438, Field1: makeNimstrLit("alef"), Field2: {rows: [makeNimstrLit("\xE2\x84\xB5")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1269727808, Field1: makeNimstrLit("textbardbl"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA5")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -2085733821, Field1: makeNimstrLit("times"), Field2: {rows: [makeNimstrLit("\xC3\x97")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 561956424, Field1: makeNimstrLit("eqslantgtr"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x96")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 919873098, Field1: makeNimstrLit("leftharpoonup"), Field2: {rows: [makeNimstrLit("\xE2\x86\xBC")], baseline: 0, width: 1, flag: 2}}, {Field0: 468909643, Field1: makeNimstrLit("supe"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x87")], baseline: 0, width: 1, flag: 2}}, {Field0: -1482317238, Field1: makeNimstrLit("nsubseteqq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: 1515227725, Field1: makeNimstrLit("Cap"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: -1300055474, Field1: makeNimstrLit("circlearrowright"), Field2: {rows: [makeNimstrLit("\xE2\x86\xBB")], baseline: 0, width: 1, flag: 2}}, {Field0: -2128052658, Field1: makeNimstrLit("Harr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: 1337989708, Field1: makeNimstrLit("nshortmid"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA4")], baseline: 0, width: 1, flag: 2}}, {Field0: -1105456559, Field1: makeNimstrLit("sqsubseteq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x91")], baseline: 0, width: 1, flag: 2}}, {Field0: -2146981297, Field1: makeNimstrLit("ngeq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB1")], baseline: 0, width: 1, flag: 2}}, {Field0: -1793030581, Field1: makeNimstrLit("KaTeX"), Field2: {rows: [makeNimstrLit("K T X"), makeNimstrLit(" A E ")], baseline: 0, width: 5, flag: 0}}, {Field0: 1056518736, Field1: makeNimstrLit("measuredangle"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA1")], baseline: 0, width: 1, flag: 0}}, {Field0: -507666860, Field1: makeNimstrLit("textsterling"), Field2: {rows: [makeNimstrLit("\xC2\xA3")], baseline: 0, width: 1, flag: 0}}, {Field0: 1070808661, Field1: makeNimstrLit("lg"), Field2: {rows: [makeNimstrLit("lg")], baseline: 0, width: 2, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1870681688, Field1: makeNimstrLit("heartsuit"), Field2: {rows: [makeNimstrLit("\xE2\x99\xA1")], baseline: 0, width: 1, flag: 0}}, {Field0: 19948121, Field1: makeNimstrLit("sqsubset"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x8F")], baseline: 0, width: 1, flag: 2}}, {Field0: 193524313, Field1: makeNimstrLit("gvertneqq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA9")], baseline: 0, width: 1, flag: 2}}, {Field0: 2123680347, Field1: makeNimstrLit("ast"), Field2: {rows: [makeNimstrLit("\xE2\x88\x97")], baseline: 0, width: 1, flag: 2}}, {Field0: -1287315876, Field1: makeNimstrLit("Omega"), Field2: {rows: [makeNimstrLit("\xCE\xA9")], baseline: 0, width: 1, flag: 1}}, {Field0: 1827362397, Field1: makeNimstrLit("veebar"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xBB")], baseline: 0, width: 1, flag: 2}}, {Field0: 699052638, Field1: makeNimstrLit("jmath"), Field2: {rows: [makeNimstrLit("\xC8\xB7")], baseline: 0, width: 1, flag: 1}}, {Field0: -1798255009, Field1: makeNimstrLit("ngtr"), Field2: {rows: [makeNimstrLit("\xE2\x89\xAF")], baseline: 0, width: 1, flag: 2}}, {Field0: -1932101027, Field1: makeNimstrLit("textbraceleft"), Field2: {rows: [makeNimstrLit("{")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1924743581, Field1: makeNimstrLit("Im"), Field2: {rows: [makeNimstrLit("\xE2\x84\x91")], baseline: 0, width: 1, flag: 1}}, {Field0: 1990097508, Field1: makeNimstrLit("vartriangleleft"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB2")], baseline: 0, width: 1, flag: 2}}, {Field0: -414576028, Field1: makeNimstrLit("lim"), Field2: {rows: [makeNimstrLit("lim")], baseline: 0, width: 3, flag: 4}}, {Field0: -1006869914, Field1: makeNimstrLit("sec"), Field2: {rows: [makeNimstrLit("sec")], baseline: 0, width: 3, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1552102808, Field1: makeNimstrLit("hearts"), Field2: {rows: [makeNimstrLit("\xE2\x99\xA1")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1000346218, Field1: makeNimstrLit("wedge"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA7")], baseline: 0, width: 1, flag: 2}}, {Field0: 587550314, Field1: makeNimstrLit("rfloor"), Field2: {rows: [makeNimstrLit("\xE2\x8C\x8B")], baseline: 0, width: 1, flag: 0}}, {Field0: 729784939, Field1: makeNimstrLit("Reals"), Field2: {rows: [makeNimstrLit("R")], baseline: 0, width: 1, flag: 1}}, {Field0: 152785517, Field1: makeNimstrLit("vDash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA8")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 793982576, Field1: makeNimstrLit("gcd"), Field2: {rows: [makeNimstrLit("gcd")], baseline: 0, width: 3, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 458373746, Field1: makeNimstrLit("Rightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: -468514189, Field1: makeNimstrLit("nLeftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x8D")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1771689589, Field1: makeNimstrLit("textasciicircum"), Field2: {rows: [makeNimstrLit("^")], baseline: 0, width: 1, flag: 0}}, {Field0: 1260526198, Field1: makeNimstrLit("trianglerighteq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB5")], baseline: 0, width: 1, flag: 2}}, {Field0: 208938615, Field1: makeNimstrLit("theta"), Field2: {rows: [makeNimstrLit("\xCE\xB8")], baseline: 0, width: 1, flag: 1}}, {Field0: 910490232, Field1: makeNimstrLit("coloneq"), Field2: {rows: [makeNimstrLit(":\xE2\x88\x92")], baseline: 0, width: 2, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1997622910, Field1: makeNimstrLit("leqslant"), Field2: {rows: [makeNimstrLit("\xE2\xA9\xBD")], baseline: 0, width: 1, flag: 2}}, {Field0: -918172033, Field1: makeNimstrLit("looparrowleft"), Field2: {rows: [makeNimstrLit("\xE2\x86\xAB")], baseline: 0, width: 1, flag: 2}}, {Field0: 1684372096, Field1: makeNimstrLit("precneqq"), Field2: {rows: [makeNimstrLit("\xE2\xAA\xB5")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -425875838, Field1: makeNimstrLit("nsubseteq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: -1122263421, Field1: makeNimstrLit("imath"), Field2: {rows: [makeNimstrLit("\xEE\x84\xB1")], baseline: 0, width: 1, flag: 1}}, {Field0: 1607821956, Field1: makeNimstrLit("Vvdash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xAA")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1635205767, Field1: makeNimstrLit("bigotimes"), Field2: {rows: [makeNimstrLit("\xE2\xA8\x82")], baseline: 0, width: 1, flag: 3}}, {Field0: 2111140487, Field1: makeNimstrLit("eqcirc"), Field2: {rows: [makeNimstrLit("\xE2\x89\x96")], baseline: 0, width: 1, flag: 2}}, {Field0: 860426889, Field1: makeNimstrLit("shortparallel"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA5")], baseline: 0, width: 1, flag: 2}}, {Field0: 1892319880, Field1: makeNimstrLit("omicron"), Field2: {rows: [makeNimstrLit("\xCE\xBF")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1703044749, Field1: makeNimstrLit("nshortparallel"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA6")], baseline: 0, width: 1, flag: 2}}, {Field0: 845622926, Field1: makeNimstrLit("beth"), Field2: {rows: [makeNimstrLit("\xE2\x84\xB6")], baseline: 0, width: 1, flag: 1}}, {Field0: 1257085583, Field1: makeNimstrLit("gtrsim"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB3")], baseline: 0, width: 1, flag: 2}}, {Field0: -1417107824, Field1: makeNimstrLit("lesssim"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB2")], baseline: 0, width: 1, flag: 2}}, {Field0: 1990401680, Field1: makeNimstrLit("varSigma"), Field2: {rows: [makeNimstrLit("\xCE\xA3")], baseline: 0, width: 1, flag: 1}}, {Field0: 382401167, Field1: makeNimstrLit("textdagger"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA0")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -143540585, Field1: makeNimstrLit("eqslantless"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x95")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -315963751, Field1: makeNimstrLit("Psi"), Field2: {rows: [makeNimstrLit("\xCE\xA8")], baseline: 0, width: 1, flag: 1}}, {Field0: -49342823, Field1: makeNimstrLit("spades"), Field2: {rows: [makeNimstrLit("\xE2\x99\xA0")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1618291044, Field1: makeNimstrLit("natnums"), Field2: {rows: [makeNimstrLit("N")], baseline: 0, width: 1, flag: 1}}, {Field0: -188891491, Field1: makeNimstrLit("varpropto"), Field2: {rows: [makeNimstrLit("\xE2\x88\x9D")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1256799583, Field1: makeNimstrLit("Coloneq"), Field2: {rows: [makeNimstrLit("\xE2\x88\xB7\xE2\x88\x92")], baseline: 0, width: 2, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1476694365, Field1: makeNimstrLit("rightleftarrows"), Field2: {rows: [makeNimstrLit("\xE2\x87\x84")], baseline: 0, width: 1, flag: 2}}, {Field0: 90499748, Field1: makeNimstrLit("gtrapprox"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x86")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1630717273, Field1: makeNimstrLit("textless"), Field2: {rows: [makeNimstrLit("<")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 626711210, Field1: makeNimstrLit("dotsm"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xAF")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -282832210, Field1: makeNimstrLit("mathellipsis"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1055529648, Field1: makeNimstrLit("colonapprox"), Field2: {rows: [makeNimstrLit(":\xE2\x89\x88")], baseline: 0, width: 2, flag: 2}}, {Field0: 1306761904, Field1: makeNimstrLit("lq"), Field2: {rows: [makeNimstrLit("\xE2\x80\x98")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 198273717, Field1: makeNimstrLit("textendash"), Field2: {rows: [makeNimstrLit("\xE2\x80\x93")], baseline: 0, width: 1, flag: 0}}, {Field0: -436731210, Field1: makeNimstrLit("lhd"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB2")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 867351226, Field1: makeNimstrLit("vdash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA2")], baseline: 0, width: 1, flag: 2}}, {Field0: 77870779, Field1: makeNimstrLit("Finv"), Field2: {rows: [makeNimstrLit("\xE2\x84\xB2")], baseline: 0, width: 1, flag: 1}}, {Field0: -1633238340, Field1: makeNimstrLit("sqcup"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1012737726, Field1: makeNimstrLit("setminus"), Field2: {rows: [makeNimstrLit("\xE2\x88\x96")], baseline: 0, width: 1, flag: 2}}, {Field0: 1166910142, Field1: makeNimstrLit("O"), Field2: {rows: [makeNimstrLit("\xC3\x98")], baseline: 0, width: 1, flag: 1}}, {Field0: -788264256, Field1: makeNimstrLit("lrArr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: 1404075712, Field1: makeNimstrLit("succcurlyeq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xBD")], baseline: 0, width: 1, flag: 2}}, {Field0: -708164930, Field1: makeNimstrLit("real"), Field2: {rows: [makeNimstrLit("\xE2\x84\x9C")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1582218556, Field1: makeNimstrLit("rbrace"), Field2: {rows: [makeNimstrLit("}")], baseline: 0, width: 1, flag: 0}}, {Field0: -1623751995, Field1: makeNimstrLit("rhd"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB3")], baseline: 0, width: 1, flag: 2}}, {Field0: 2118272708, Field1: makeNimstrLit("rangle"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xA9")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 2128061129, Field1: makeNimstrLit("implies"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xB9")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -128053556, Field1: makeNimstrLit("rarr"), Field2: {rows: [makeNimstrLit("\xE2\x86\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: 1485563597, Field1: makeNimstrLit("intercal"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xBA")], baseline: 0, width: 1, flag: 2}}, {Field0: -1783832884, Field1: makeNimstrLit("tan"), Field2: {rows: [makeNimstrLit("tan")], baseline: 0, width: 3, flag: 4}}, {Field0: -508692785, Field1: makeNimstrLit("natural"), Field2: {rows: [makeNimstrLit("\xE2\x99\xAE")], baseline: 0, width: 1, flag: 0}}, {Field0: -1571214640, Field1: makeNimstrLit("simeq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x83")], baseline: 0, width: 1, flag: 2}}, {Field0: 1649711825, Field1: makeNimstrLit("sphericalangle"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA2")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 968579795, Field1: makeNimstrLit("arctg"), Field2: {rows: [makeNimstrLit("arctg")], baseline: 0, width: 5, flag: 4}}, {Field0: -2087052588, Field1: makeNimstrLit("S"), Field2: {rows: [makeNimstrLit("\xC2\xA7")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1940638425, Field1: makeNimstrLit("triangledown"), Field2: {rows: [makeNimstrLit("\xE2\x96\xBD")], baseline: 0, width: 1, flag: 0}}, {Field0: 444881626, Field1: makeNimstrLit("nRightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x8F")], baseline: 0, width: 1, flag: 2}}, {Field0: 151659227, Field1: makeNimstrLit("complement"), Field2: {rows: [makeNimstrLit("\xE2\x88\x81")], baseline: 0, width: 1, flag: 2}}, {Field0: -1693292837, Field1: makeNimstrLit("downharpoonleft"), Field2: {rows: [makeNimstrLit("\xE2\x87\x83")], baseline: 0, width: 1, flag: 2}}, {Field0: -4439333, Field1: makeNimstrLit("nLeftrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x8E")], baseline: 0, width: 1, flag: 2}}, {Field0: -1212450082, Field1: makeNimstrLit("ch"), Field2: {rows: [makeNimstrLit("ch")], baseline: 0, width: 2, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1868119328, Field1: makeNimstrLit("nrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x9B")], baseline: 0, width: 1, flag: 2}}, {Field0: -318407968, Field1: makeNimstrLit("thicksim"), Field2: {rows: [makeNimstrLit("\xE2\x88\xBC")], baseline: 0, width: 1, flag: 2}}, {Field0: 345991905, Field1: makeNimstrLit("Pi"), Field2: {rows: [makeNimstrLit("\xCE\xA0")], baseline: 0, width: 1, flag: 1}}, {Field0: 631217891, Field1: makeNimstrLit("eqcolon"), Field2: {rows: [makeNimstrLit(">>> >, \xE2\x88\xB9")], baseline: 0, width: 8, flag: 2}}, {Field0: 1697382115, Field1: makeNimstrLit("varkappa"), Field2: {rows: [makeNimstrLit("\xCF\xB0")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 497549031, Field1: makeNimstrLit("ell"), Field2: {rows: [makeNimstrLit("\xE2\x84\x93")], baseline: 0, width: 1, flag: 1}}, {Field0: -1187357976, Field1: makeNimstrLit("mu"), Field2: {rows: [makeNimstrLit("\xCE\xBC")], baseline: 0, width: 1, flag: 1}}, {Field0: -1972195609, Field1: makeNimstrLit("dim"), Field2: {rows: [makeNimstrLit("dim")], baseline: 0, width: 3, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1516935444, Field1: makeNimstrLit("lnapprox"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x89")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1945859345, Field1: makeNimstrLit("OE"), Field2: {rows: [makeNimstrLit("\xC5\x92")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1631707890, Field1: makeNimstrLit("textbar"), Field2: {rows: [makeNimstrLit("|")], baseline: 0, width: 1, flag: 0}}, {Field0: 156381939, Field1: makeNimstrLit("TeX"), Field2: {rows: [makeNimstrLit("T X"), makeNimstrLit(" E ")], baseline: 0, width: 3, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -737534219, Field1: makeNimstrLit("ltimes"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x89")], baseline: 0, width: 1, flag: 2}}, {Field0: -567946507, Field1: makeNimstrLit("Rarr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: -189001994, Field1: makeNimstrLit("vartriangle"), Field2: {rows: [makeNimstrLit("\xE2\x96\xB3")], baseline: 0, width: 1, flag: 2}}, {Field0: 1167593205, Field1: makeNimstrLit("varPsi"), Field2: {rows: [makeNimstrLit("\xCE\xA8")], baseline: 0, width: 1, flag: 1}}, {Field0: 820849399, Field1: makeNimstrLit("psi"), Field2: {rows: [makeNimstrLit("\xCF\x88")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -728388867, Field1: makeNimstrLit("npreceq"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xA0")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1786403073, Field1: makeNimstrLit("lneqq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA8")], baseline: 0, width: 1, flag: 2}}, {Field0: -44866816, Field1: makeNimstrLit("Eta"), Field2: {rows: [makeNimstrLit("H")], baseline: 0, width: 1, flag: 1}}, {Field0: -1857517823, Field1: makeNimstrLit("gtrless"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB7")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 233755396, Field1: makeNimstrLit("Bbbk"), Field2: {rows: [makeNimstrLit("k")], baseline: 0, width: 1, flag: 1}}, {Field0: -1970031867, Field1: makeNimstrLit("vee"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA8")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 839637767, Field1: makeNimstrLit("lang"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xA8")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1432461559, Field1: makeNimstrLit("vcentcolon"), Field2: {rows: [makeNimstrLit(":")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -944697589, Field1: makeNimstrLit("varrho"), Field2: {rows: [makeNimstrLit("\xCF\xB1")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1484265230, Field1: makeNimstrLit("varpi"), Field2: {rows: [makeNimstrLit("\xCF\x96")], baseline: 0, width: 1, flag: 1}}, {Field0: 93506319, Field1: makeNimstrLit("hslash"), Field2: {rows: [makeNimstrLit("\xE2\x84\x8F")], baseline: 0, width: 1, flag: 1}}, {Field0: 723635984, Field1: makeNimstrLit("sinh"), Field2: {rows: [makeNimstrLit("sinh")], baseline: 0, width: 4, flag: 4}}, {Field0: -808573167, Field1: makeNimstrLit("mp"), Field2: {rows: [makeNimstrLit("\xE2\x88\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: -831156463, Field1: makeNimstrLit("nVdash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xAE")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1011195116, Field1: makeNimstrLit("leftrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -316506345, Field1: makeNimstrLit("rceil"), Field2: {rows: [makeNimstrLit("\xE2\x8C\x89")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1905710309, Field1: makeNimstrLit("Rsh"), Field2: {rows: [makeNimstrLit("\xE2\x86\xB1")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1628249312, Field1: makeNimstrLit("Colonapprox"), Field2: {rows: [makeNimstrLit("\xE2\x88\xB7\xE2\x89\x88")], baseline: 0, width: 2, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -2032217310, Field1: makeNimstrLit("shortmid"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA3")], baseline: 0, width: 1, flag: 2}}, {Field0: -1282881757, Field1: makeNimstrLit("wr"), Field2: {rows: [makeNimstrLit("\xE2\x89\x80")], baseline: 0, width: 1, flag: 2}}, {Field0: 201751332, Field1: makeNimstrLit("circledR"), Field2: {rows: [makeNimstrLit("\xC2\xAE")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1853396185, Field1: makeNimstrLit("ni"), Field2: {rows: [makeNimstrLit("\xE2\x88\x8B")], baseline: 0, width: 1, flag: 2}}, {Field0: -1194945752, Field1: makeNimstrLit("Updownarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x95")], baseline: 0, width: 1, flag: 2}}, {Field0: -2121473240, Field1: makeNimstrLit("cosec"), Field2: {rows: [makeNimstrLit("cosec")], baseline: 0, width: 5, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -418823380, Field1: makeNimstrLit("delta"), Field2: {rows: [makeNimstrLit("\xCE\xB4")], baseline: 0, width: 1, flag: 1}}, {Field0: 64160556, Field1: makeNimstrLit("diamondsuit"), Field2: {rows: [makeNimstrLit("\xE2\x99\xA2")], baseline: 0, width: 1, flag: 0}}, {Field0: 1405992750, Field1: makeNimstrLit("eqqcolon"), Field2: {rows: [makeNimstrLit("\xE2\x89\x95")], baseline: 0, width: 1, flag: 2}}, {Field0: 1068375855, Field1: makeNimstrLit("Uarr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x91")], baseline: 0, width: 1, flag: 2}}, {Field0: 1201711918, Field1: makeNimstrLit("lvertneqq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA8")], baseline: 0, width: 1, flag: 2}}, {Field0: 129810225, Field1: makeNimstrLit("sub"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x82")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -616156365, Field1: makeNimstrLit("Upsilon"), Field2: {rows: [makeNimstrLit("\xCE\xA5")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 965596985, Field1: makeNimstrLit("Cup"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: 377626426, Field1: makeNimstrLit("dotplus"), Field2: {rows: [makeNimstrLit("\xE2\x88\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1447029955, Field1: makeNimstrLit("alpha"), Field2: {rows: [makeNimstrLit("\xCE\xB1")], baseline: 0, width: 1, flag: 1}}, {Field0: 1388739390, Field1: makeNimstrLit("cdot"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x85")], baseline: 0, width: 1, flag: 2}}, {Field0: -1317677249, Field1: makeNimstrLit("weierp"), Field2: {rows: [makeNimstrLit("\xE2\x84\x98")], baseline: 0, width: 1, flag: 1}}, {Field0: 126402368, Field1: makeNimstrLit("boxminus"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x9F")], baseline: 0, width: 1, flag: 2}}, {Field0: 927969088, Field1: makeNimstrLit("supseteqq"), Field2: {rows: [makeNimstrLit("\xE2\xAB\x86")], baseline: 0, width: 1, flag: 2}}, {Field0: -978777278, Field1: makeNimstrLit("propto"), Field2: {rows: [makeNimstrLit("\xE2\x88\x9D")], baseline: 0, width: 1, flag: 2}}, {Field0: 2044716865, Field1: makeNimstrLit("ss"), Field2: {rows: [makeNimstrLit("\xC3\x9F")], baseline: 0, width: 1, flag: 1}}, {Field0: -838084796, Field1: makeNimstrLit("lessgtr"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB6")], baseline: 0, width: 1, flag: 2}}, {Field0: -829358270, Field1: makeNimstrLit("textquotedblright"), Field2: {rows: [makeNimstrLit("\xE2\x80\x9D")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -389900469, Field1: makeNimstrLit("textdollar"), Field2: {rows: [makeNimstrLit("$")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 598895437, Field1: makeNimstrLit("minuscolon"), Field2: {rows: [makeNimstrLit("\xE2\x88\xB9")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1181199183, Field1: makeNimstrLit("triangleleft"), Field2: {rows: [makeNimstrLit("\xE2\x97\x83")], baseline: 0, width: 1, flag: 0}}, {Field0: -582685872, Field1: makeNimstrLit("Darr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: -1009115312, Field1: makeNimstrLit("minuso"), Field2: {rows: [makeNimstrLit("\xE2\xA6\xB5")], baseline: 0, width: 1, flag: 0}}, {Field0: 499530577, Field1: makeNimstrLit("plim"), Field2: {rows: [makeNimstrLit("plim")], baseline: 0, width: 4, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -114982060, Field1: makeNimstrLit("nleftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x9A")], baseline: 0, width: 1, flag: 2}}, {Field0: -1058309292, Field1: makeNimstrLit("smile"), Field2: {rows: [makeNimstrLit("\xE2\x8C\xA3")], baseline: 0, width: 1, flag: 2}}, {Field0: 437992278, Field1: makeNimstrLit("precapprox"), Field2: {rows: [makeNimstrLit("\xE2\xAA\xB7")], baseline: 0, width: 1, flag: 2}}, {Field0: 1034010455, Field1: makeNimstrLit("hArr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: 1814794072, Field1: makeNimstrLit("nexists"), Field2: {rows: [makeNimstrLit("\xE2\x88\x84")], baseline: 0, width: 1, flag: 2}}, {Field0: -848168103, Field1: makeNimstrLit("simcoloncolon"), Field2: {rows: [makeNimstrLit("\xE2\x88\xBC\xE2\x88\xB7")], baseline: 0, width: 2, flag: 2}}, {Field0: -2083237030, Field1: makeNimstrLit("trianglelefteq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB4")], baseline: 0, width: 1, flag: 2}}, {Field0: 624996184, Field1: makeNimstrLit("nVDash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xAF")], baseline: 0, width: 1, flag: 2}}, {Field0: -508762280, Field1: makeNimstrLit("varGamma"), Field2: {rows: [makeNimstrLit("\xCE\x93")], baseline: 0, width: 1, flag: 1}}, {Field0: -582062244, Field1: makeNimstrLit("pi"), Field2: {rows: [makeNimstrLit("\xCF\x80")], baseline: 0, width: 1, flag: 1}}, {Field0: 485069654, Field1: makeNimstrLit("triangle"), Field2: {rows: [makeNimstrLit("\xE2\x96\xB3")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1089835168, Field1: makeNimstrLit("approxeq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x8A")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1376821406, Field1: makeNimstrLit("bigtriangledown"), Field2: {rows: [makeNimstrLit("\xE2\x96\xBD")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1165389980, Field1: makeNimstrLit("downharpoonright"), Field2: {rows: [makeNimstrLit("\xE2\x87\x82")], baseline: 0, width: 1, flag: 2}}, {Field0: -498708635, Field1: makeNimstrLit("supseteq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x87")], baseline: 0, width: 1, flag: 2}}, {Field0: 1390254950, Field1: makeNimstrLit("varOmega"), Field2: {rows: [makeNimstrLit("\xCE\xA9")], baseline: 0, width: 1, flag: 1}}, {Field0: 113278823, Field1: makeNimstrLit("cup"), Field2: {rows: [makeNimstrLit("\xE2\x88\xAA")], baseline: 0, width: 1, flag: 2}}, {Field0: 775896934, Field1: makeNimstrLit("cnums"), Field2: {rows: [makeNimstrLit("C")], baseline: 0, width: 1, flag: 1}}, {Field0: -1421636764, Field1: makeNimstrLit("angle"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA0")], baseline: 0, width: 1, flag: 0}}, {Field0: 1368969066, Field1: makeNimstrLit("Omicron"), Field2: {rows: [makeNimstrLit("O")], baseline: 0, width: 1, flag: 1}}, {Field0: -1825022101, Field1: makeNimstrLit("dotsc"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: 1049816935, Field1: makeNimstrLit("sharp"), Field2: {rows: [makeNimstrLit("\xE2\x99\xAF")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -660215953, Field1: makeNimstrLit("blacktriangledown"), Field2: {rows: [makeNimstrLit("\xE2\x96\xBC")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 701244274, Field1: makeNimstrLit("empty"), Field2: {rows: [makeNimstrLit("\xE2\x88\x85")], baseline: 0, width: 1, flag: 2}}, {Field0: -164919438, Field1: makeNimstrLit("gnsim"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xA7")], baseline: 0, width: 1, flag: 2}}, {Field0: -1450188941, Field1: makeNimstrLit("star"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x86")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1706303621, Field1: makeNimstrLit("dArr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -250139779, Field1: makeNimstrLit("textemdash"), Field2: {rows: [makeNimstrLit("\xE2\x80\x94")], baseline: 0, width: 1, flag: 0}}, {Field0: 1726374782, Field1: makeNimstrLit("circledS"), Field2: {rows: [makeNimstrLit("\xE2\x93\x88")], baseline: 0, width: 1, flag: 0}}, {Field0: 268964735, Field1: makeNimstrLit("circledast"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x9B")], baseline: 0, width: 1, flag: 2}}, {Field0: -722765953, Field1: makeNimstrLit("fallingdotseq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 978164610, Field1: makeNimstrLit("nless"), Field2: {rows: [makeNimstrLit("\xE2\x89\xAE")], baseline: 0, width: 1, flag: 2}}, {Field0: 1202677635, Field1: makeNimstrLit("rparen"), Field2: {rows: [makeNimstrLit(")")], baseline: 0, width: 1, flag: 0}}, {Field0: 1073095556, Field1: makeNimstrLit("phi"), Field2: {rows: [makeNimstrLit("\xCF\x95")], baseline: 0, width: 1, flag: 1}}, {Field0: -902326395, Field1: makeNimstrLit("arccos"), Field2: {rows: [makeNimstrLit("arccos")], baseline: 0, width: 6, flag: 4}}, {Field0: 104139654, Field1: makeNimstrLit("doublebarwedge"), Field2: {rows: [makeNimstrLit("\xE2\xA9\x9E")], baseline: 0, width: 1, flag: 2}}, {Field0: -296343675, Field1: makeNimstrLit("tanh"), Field2: {rows: [makeNimstrLit("tanh")], baseline: 0, width: 4, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1878301815, Field1: makeNimstrLit("rightharpoonup"), Field2: {rows: [makeNimstrLit("\xE2\x87\x80")], baseline: 0, width: 1, flag: 2}}, {Field0: 1586769802, Field1: makeNimstrLit("llless"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x98")], baseline: 0, width: 1, flag: 2}}, {Field0: 1991520139, Field1: makeNimstrLit("alefsym"), Field2: {rows: [makeNimstrLit("\xE2\x84\xB5")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 773731214, Field1: makeNimstrLit("subsetneq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x8A")], baseline: 0, width: 1, flag: 2}}, {Field0: 1642151823, Field1: makeNimstrLit("supsetneqq"), Field2: {rows: [makeNimstrLit("\xE2\xAB\x8C")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -399796335, Field1: makeNimstrLit("curlyvee"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x8E")], baseline: 0, width: 1, flag: 2}}, {Field0: 1863581586, Field1: makeNimstrLit("clubsuit"), Field2: {rows: [makeNimstrLit("\xE2\x99\xA3")], baseline: 0, width: 1, flag: 0}}, {Field0: 1089098643, Field1: makeNimstrLit("circeq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x97")], baseline: 0, width: 1, flag: 2}}, {Field0: -983711852, Field1: makeNimstrLit("bumpeq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x8F")], baseline: 0, width: 1, flag: 2}}, {Field0: 626165651, Field1: makeNimstrLit("cdots"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xAF")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -135784553, Field1: makeNimstrLit("rightrightarrows"), Field2: {rows: [makeNimstrLit("\xE2\x87\x89")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -347878501, Field1: makeNimstrLit("rightharpoondown"), Field2: {rows: [makeNimstrLit("\xE2\x87\x81")], baseline: 0, width: 1, flag: 2}}, {Field0: 1961500571, Field1: makeNimstrLit("Subset"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x90")], baseline: 0, width: 1, flag: 2}}, {Field0: -1325636708, Field1: makeNimstrLit("partial"), Field2: {rows: [makeNimstrLit("\xE2\x88\x82")], baseline: 0, width: 1, flag: 1}}, {Field0: -1030514789, Field1: makeNimstrLit("max"), Field2: {rows: [makeNimstrLit("max")], baseline: 0, width: 3, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -647533664, Field1: makeNimstrLit("circlearrowleft"), Field2: {rows: [makeNimstrLit("\xE2\x86\xBA")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 2088133539, Field1: makeNimstrLit("notni"), Field2: {rows: [makeNimstrLit("\xE2\x88\x8C")], baseline: 0, width: 1, flag: 2}}, {Field0: -1130670173, Field1: makeNimstrLit("Uparrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x91")], baseline: 0, width: 1, flag: 2}}, {Field0: 1251576741, Field1: makeNimstrLit("asymp"), Field2: {rows: [makeNimstrLit("\xE2\x89\x8D")], baseline: 0, width: 1, flag: 2}}, {Field0: -949496923, Field1: makeNimstrLit("varLambda"), Field2: {rows: [makeNimstrLit("\xCE\x9B")], baseline: 0, width: 1, flag: 1}}, {Field0: 508142500, Field1: makeNimstrLit("textgreater"), Field2: {rows: [makeNimstrLit(">")], baseline: 0, width: 1, flag: 0}}, {Field0: -1519553629, Field1: makeNimstrLit("blacklozenge"), Field2: {rows: [makeNimstrLit("\xE2\xA7\xAB")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -902478933, Field1: makeNimstrLit("longleftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xB5")], baseline: 0, width: 1, flag: 2}}, {Field0: 2018705324, Field1: makeNimstrLit("digamma"), Field2: {rows: [makeNimstrLit("\xCF\x9D")], baseline: 0, width: 1, flag: 1}}, {Field0: -1187603539, Field1: makeNimstrLit("bigcap"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x82")], baseline: 0, width: 1, flag: 3}}, {Field0: 1543318445, Field1: makeNimstrLit("daleth"), Field2: {rows: [makeNimstrLit("\xE2\x84\xB8")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -433189967, Field1: makeNimstrLit("N"), Field2: {rows: [makeNimstrLit("N")], baseline: 0, width: 1, flag: 1}}, {Field0: 924587953, Field1: makeNimstrLit("diamond"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x84")], baseline: 0, width: 1, flag: 0}}, {Field0: 1813402546, Field1: makeNimstrLit("coth"), Field2: {rows: [makeNimstrLit("coth")], baseline: 0, width: 4, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -817291339, Field1: makeNimstrLit("updownarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x95")], baseline: 0, width: 1, flag: 2}}, {Field0: -769796170, Field1: makeNimstrLit("kappa"), Field2: {rows: [makeNimstrLit("\xCE\xBA")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1976659016, Field1: makeNimstrLit("rtimes"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x8A")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1928334405, Field1: makeNimstrLit("varsubsetneq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x8A")], baseline: 0, width: 1, flag: 2}}, {Field0: -31274052, Field1: makeNimstrLit("Eqqcolon"), Field2: {rows: [makeNimstrLit("=\xE2\x88\xB7")], baseline: 0, width: 2, flag: 2}}, {Field0: 1465733053, Field1: makeNimstrLit("approx"), Field2: {rows: [makeNimstrLit("\xE2\x89\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: -166071362, Field1: makeNimstrLit("subseteq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x86")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1005448255, Field1: makeNimstrLit("ae"), Field2: {rows: [makeNimstrLit("\xC3\xA6")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -774891575, Field1: makeNimstrLit("Downarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 886597579, Field1: makeNimstrLit("deg"), Field2: {rows: [makeNimstrLit("deg")], baseline: 0, width: 3, flag: 4}}, {Field0: 747939788, Field1: makeNimstrLit("argmax"), Field2: {rows: [makeNimstrLit("arg\xE2\x80\x89max")], baseline: 0, width: 7, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 2054813647, Field1: makeNimstrLit("bigtriangleup"), Field2: {rows: [makeNimstrLit("\xE2\x96\xB3")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -288939055, Field1: makeNimstrLit("gggtr"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x99")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -996883499, Field1: makeNimstrLit("nleqq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB0")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1772959704, Field1: makeNimstrLit("lneq"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x87")], baseline: 0, width: 1, flag: 2}}, {Field0: 1375335385, Field1: makeNimstrLit("leftrightsquigarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\xAD")], baseline: 0, width: 1, flag: 2}}, {Field0: 1312613338, Field1: makeNimstrLit("nvDash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xAD")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 846101468, Field1: makeNimstrLit("ntriangleright"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xAB")], baseline: 0, width: 1, flag: 2}}, {Field0: -2075499555, Field1: makeNimstrLit("precnsim"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xA8")], baseline: 0, width: 1, flag: 2}}, {Field0: -2025091106, Field1: makeNimstrLit("cdotp"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x85")], baseline: 0, width: 1, flag: 2}}, {Field0: -606648354, Field1: makeNimstrLit("Longrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xB9")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1515557918, Field1: makeNimstrLit("uplus"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x8E")], baseline: 0, width: 1, flag: 2}}, {Field0: 1908426722, Field1: makeNimstrLit("Mu"), Field2: {rows: [makeNimstrLit("M")], baseline: 0, width: 1, flag: 1}}, {Field0: -2045698077, Field1: makeNimstrLit("Pr"), Field2: {rows: [makeNimstrLit("Pr")], baseline: 0, width: 2, flag: 4}}, {Field0: -757661723, Field1: makeNimstrLit("th"), Field2: {rows: [makeNimstrLit("th")], baseline: 0, width: 2, flag: 4}}, {Field0: 1227092966, Field1: makeNimstrLit("lnsim"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xA6")], baseline: 0, width: 1, flag: 2}}, {Field0: -573794331, Field1: makeNimstrLit("injlim"), Field2: {rows: [makeNimstrLit("inj\xE2\x80\x89lim")], baseline: 0, width: 7, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -810559509, Field1: makeNimstrLit("cong"), Field2: {rows: [makeNimstrLit("\xE2\x89\x85")], baseline: 0, width: 1, flag: 2}}, {Field0: 1662921708, Field1: makeNimstrLit("Xi"), Field2: {rows: [makeNimstrLit("\xCE\x9E")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -753883154, Field1: makeNimstrLit("varphi"), Field2: {rows: [makeNimstrLit("\xCF\x86")], baseline: 0, width: 1, flag: 1}}, {Field0: 783613935, Field1: makeNimstrLit("leftrightharpoons"), Field2: {rows: [makeNimstrLit("\xE2\x87\x8B")], baseline: 0, width: 1, flag: 2}}, {Field0: -826565649, Field1: makeNimstrLit("lesseqgtr"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x9A")], baseline: 0, width: 1, flag: 2}}, {Field0: -2057048081, Field1: makeNimstrLit("ggg"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x99")], baseline: 0, width: 1, flag: 2}}, {Field0: -1661005840, Field1: makeNimstrLit("simcolon"), Field2: {rows: [makeNimstrLit("\xE2\x88\xBC:")], baseline: 0, width: 2, flag: 2}}, {Field0: 816394223, Field1: makeNimstrLit("ngeqq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB1")], baseline: 0, width: 1, flag: 2}}, {Field0: 1170508784, Field1: makeNimstrLit("langle"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xA8")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1927886855, Field1: makeNimstrLit("Beta"), Field2: {rows: [makeNimstrLit("B")], baseline: 0, width: 1, flag: 1}}, {Field0: -1420442630, Field1: makeNimstrLit("bowtie"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: -1390482437, Field1: makeNimstrLit("odot"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x99")], baseline: 0, width: 1, flag: 2}}, {Field0: 1269585915, Field1: makeNimstrLit("plusmn"), Field2: {rows: [makeNimstrLit("\xC2\xB1")], baseline: 0, width: 1, flag: 2}}, {Field0: 1408007165, Field1: makeNimstrLit("oe"), Field2: {rows: [makeNimstrLit("\xC5\x93")], baseline: 0, width: 1, flag: 1}}, {Field0: 1811268606, Field1: makeNimstrLit("log"), Field2: {rows: [makeNimstrLit("log")], baseline: 0, width: 3, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}], counter: 653};
    var nonCommands_1996491921 = [{Field0: makeNimstrLit("+"), Field1: {rows: [makeNimstrLit("+")], baseline: 0, width: 1, flag: 2}}, {Field0: makeNimstrLit("-"), Field1: {rows: [makeNimstrLit("\xE2\x88\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: makeNimstrLit("*"), Field1: {rows: [makeNimstrLit("\xE2\x88\x97")], baseline: 0, width: 1, flag: 2}}, {Field0: makeNimstrLit("/"), Field1: {rows: [makeNimstrLit("/")], baseline: 0, width: 1, flag: 2}}, {Field0: makeNimstrLit("="), Field1: {rows: [makeNimstrLit("=")], baseline: 0, width: 1, flag: 2}}, {Field0: makeNimstrLit("<"), Field1: {rows: [makeNimstrLit("<")], baseline: 0, width: 1, flag: 2}}, {Field0: makeNimstrLit(">"), Field1: {rows: [makeNimstrLit(">")], baseline: 0, width: 1, flag: 2}}, {Field0: makeNimstrLit("\x1Bqualscoloncolon"), Field1: {rows: [makeNimstrLit("=\xE2\x88\xB7")], baseline: 0, width: 2, flag: 2}}, {Field0: makeNimstrLit("\x07pproxcoloncolon"), Field1: {rows: [makeNimstrLit("\xE2\x89\x88\xE2\x88\xB7")], baseline: 0, width: 2, flag: 2}}, {Field0: makeNimstrLit("\x0Doloncolonapprox"), Field1: {rows: [makeNimstrLit("\xE2\x88\xB7\xE2\x89\x88")], baseline: 0, width: 2, flag: 2}}, {Field0: makeNimstrLit("\x0Doloncolonminus"), Field1: {rows: [makeNimstrLit("\xE2\x88\xB7\xE2\x88\x92")], baseline: 0, width: 2, flag: 2}}, {Field0: makeNimstrLit("\x0Dolonequals"), Field1: {rows: [makeNimstrLit("\xE2\x89\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: makeNimstrLit("\x0Doloncolonequals"), Field1: {rows: [makeNimstrLit("\xE2\x88\xB7=")], baseline: 0, width: 2, flag: 2}}, {Field0: makeNimstrLit("\x0Doloncolonsim"), Field1: {rows: [makeNimstrLit("\xE2\x88\xB7\xE2\x88\xBC")], baseline: 0, width: 2, flag: 2}}, {Field0: makeNimstrLit("\x0Doloncolon"), Field1: {rows: [makeNimstrLit("\xE2\x88\xB7")], baseline: 0, width: 1, flag: 2}}, {Field0: makeNimstrLit("("), Field1: {rows: [makeNimstrLit("(")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit(")"), Field1: {rows: [makeNimstrLit(")")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("["), Field1: {rows: [makeNimstrLit("[")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("]"), Field1: {rows: [makeNimstrLit("]")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\{"), Field1: {rows: [makeNimstrLit("{")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\}"), Field1: {rows: [makeNimstrLit("}")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x9F\xA8"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA8")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x9F\xA9"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA9")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("|"), Field1: {rows: [makeNimstrLit("\xE2\x88\xA3")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\|"), Field1: {rows: [makeNimstrLit("\xE2\x88\xA5")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x8C\x88"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x88")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x8C\x89"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x89")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x8C\x8A"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x8A")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x8C\x8B"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x8B")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x9F\xA6"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x9F\xA7"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA7")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit(","), Field1: {rows: [makeNimstrLit(",")], baseline: 0, width: 1, flag: 8}}, {Field0: makeNimstrLit(":"), Field1: {rows: [makeNimstrLit(":")], baseline: 0, width: 1, flag: 8}}, {Field0: makeNimstrLit("\\%"), Field1: {rows: [makeNimstrLit("%")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\#"), Field1: {rows: [makeNimstrLit("#")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\&"), Field1: {rows: [makeNimstrLit("&")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\_"), Field1: {rows: [makeNimstrLit("_")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\--"), Field1: {rows: [makeNimstrLit("\xE2\x80\x93")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\---"), Field1: {rows: [makeNimstrLit("\xE2\x80\x94")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("`"), Field1: {rows: [makeNimstrLit("\xE2\x80\x98")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\""), Field1: {rows: [makeNimstrLit("\"")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\$"), Field1: {rows: [makeNimstrLit("$")], baseline: 0, width: 1, flag: 0}}];
    var simpleDiacritics_1996489023 = [{Field0: makeNimstrLit("\\acute"), Field1: {Field0: makeNimstrLit("\xCC\x81"), Field1: makeNimstrLit("\xCB\x8F")}}, {Field0: makeNimstrLit("\\bar"), Field1: {Field0: makeNimstrLit("\xCC\x84"), Field1: makeNimstrLit("_")}}, {Field0: makeNimstrLit("\\breve"), Field1: {Field0: makeNimstrLit("\xCC\x86"), Field1: makeNimstrLit("\xE2\x8F\x91")}}, {Field0: makeNimstrLit("\\check"), Field1: {Field0: makeNimstrLit("\xCC\x8C"), Field1: makeNimstrLit("\xCB\x87")}}, {Field0: makeNimstrLit("\\dot"), Field1: {Field0: makeNimstrLit("\xCC\x87"), Field1: makeNimstrLit(".")}}, {Field0: makeNimstrLit("\\ddot"), Field1: {Field0: makeNimstrLit("\xCC\x88"), Field1: makeNimstrLit("\xC2\xA8")}}, {Field0: makeNimstrLit("\\grave"), Field1: {Field0: makeNimstrLit("\xCC\x80"), Field1: makeNimstrLit("\xCB\x8E")}}, {Field0: makeNimstrLit("\\hat"), Field1: {Field0: makeNimstrLit("\xCC\x82"), Field1: makeNimstrLit("\xEA\x9E\x88")}}, {Field0: makeNimstrLit("\\not"), Field1: {Field0: makeNimstrLit("\xCC\xB8"), Field1: makeNimstrLit("/")}}, {Field0: makeNimstrLit("\\tilde"), Field1: {Field0: makeNimstrLit("\xCC\x83"), Field1: makeNimstrLit("\xCB\xB7")}}, {Field0: makeNimstrLit("\\vec"), Field1: {Field0: makeNimstrLit("\xE2\x83\x97"), Field1: makeNimstrLit("\xE2\x86\x92")}}];
var ConstSet104 = setConstr(1);
var ConstSet105 = setConstr(0);
var ConstSet106 = setConstr(1);
var ConstSet107 = setConstr(1);
var ConstSet108 = setConstr(0);
var ConstSet109 = setConstr(1);
var ConstSet110 = setConstr(1);
var ConstSet111 = setConstr(0);
var ConstSet112 = setConstr(60, 62, 94);
var ConstSet113 = setConstr(60, 62, 94);
var ConstSet114 = setConstr(45, 43, 32);
var ConstSet115 = setConstr([48, 57]);
var ConstSet116 = setConstr([48, 57]);
var ConstSet117 = setConstr([48, 57]);
var ConstSet118 = setConstr([65, 90], [97, 122]);
    var alignFuncs_2013266791 = [HEX3Aanonymous_2013266779, HEX3Aanonymous_2013266783, HEX3Aanonymous_2013266787];
var ConstSet119 = setConstr(1);
var ConstSet120 = setConstr(1);
var ConstSet121 = setConstr(0);
var ConstSet122 = setConstr(1);
var ConstSet123 = setConstr(1);
var ConstSet124 = setConstr(1);
var ConstSet125 = setConstr(1);
var ConstSet126 = setConstr(0);
var ConstSet127 = setConstr(0);
      var delimiterParts_1979712879 = {data: [{Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 132032417, Field1: makeNimstrLit("\xE2\x88\xA5"), Field2: {Field0: makeNimstrLit("\xE2\x95\x91"), Field1: makeNimstrLit("\xE2\x95\x91"), Field2: makeNimstrLit("\xE2\x95\x91")}}, {Field0: 1632932802, Field1: makeNimstrLit("["), Field2: {Field0: makeNimstrLit("\xE2\x8E\xA1"), Field1: makeNimstrLit("\xE2\x8E\xA2"), Field2: makeNimstrLit("\xE2\x8E\xA3")}}, {Field0: -289087198, Field1: makeNimstrLit("\xE2\x9F\xA7"), Field2: {Field0: makeNimstrLit("\xE2\x95\x96"), Field1: makeNimstrLit("\xE2\x95\x91"), Field2: makeNimstrLit("\xE2\x95\x9C")}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: -436772347, Field1: makeNimstrLit(")"), Field2: {Field0: makeNimstrLit("\xE2\x8E\x9E"), Field1: makeNimstrLit("\xE2\x8E\x9F"), Field2: makeNimstrLit("\xE2\x8E\xA0")}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: -1827680438, Field1: makeNimstrLit("\xE2\x8C\x88"), Field2: {Field0: makeNimstrLit("\xE2\x8E\xA1"), Field1: makeNimstrLit("\xE2\x8E\xA2"), Field2: makeNimstrLit("\xE2\x8E\xA2")}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 501150701, Field1: makeNimstrLit("("), Field2: {Field0: makeNimstrLit("\xE2\x8E\x9B"), Field1: makeNimstrLit("\xE2\x8E\x9C"), Field2: makeNimstrLit("\xE2\x8E\x9D")}}, {Field0: 243936301, Field1: makeNimstrLit("\xE2\x8C\x8A"), Field2: {Field0: makeNimstrLit("\xE2\x8E\xA2"), Field1: makeNimstrLit("\xE2\x8E\xA2"), Field2: makeNimstrLit("\xE2\x8E\xA3")}}, {Field0: 1380037103, Field1: makeNimstrLit("\xE2\x9F\xA6"), Field2: {Field0: makeNimstrLit("\xE2\x95\x93"), Field1: makeNimstrLit("\xE2\x95\x91"), Field2: makeNimstrLit("\xE2\x95\x99")}}, {Field0: 1862135120, Field1: makeNimstrLit("]"), Field2: {Field0: makeNimstrLit("\xE2\x8E\xA4"), Field1: makeNimstrLit("\xE2\x8E\xA5"), Field2: makeNimstrLit("\xE2\x8E\xA6")}}, {Field0: -696588431, Field1: makeNimstrLit("\xE2\x8C\x8B"), Field2: {Field0: makeNimstrLit("\xE2\x8E\xA5"), Field1: makeNimstrLit("\xE2\x8E\xA5"), Field2: makeNimstrLit("\xE2\x8E\xA6")}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: -1377921419, Field1: makeNimstrLit("\xE2\x88\xA3"), Field2: {Field0: makeNimstrLit("\xE2\x94\x82"), Field1: makeNimstrLit("\xE2\x94\x82"), Field2: makeNimstrLit("\xE2\x94\x82")}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: -2091933701, Field1: makeNimstrLit("\xE2\x8C\x89"), Field2: {Field0: makeNimstrLit("\xE2\x8E\xA4"), Field1: makeNimstrLit("\xE2\x8E\xA5"), Field2: makeNimstrLit("\xE2\x8E\xA5")}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}], counter: 12};
var ConstSet128 = setConstr(1);
var ConstSet129 = setConstr(1);
var ConstSet130 = setConstr(0);
var ConstSet131 = setConstr(1);
var ConstSet132 = setConstr(1);
var ConstSet133 = setConstr(0);
var ConstSet134 = setConstr(1);
var ConstSet135 = setConstr(1);
var ConstSet136 = setConstr(0);
var ConstSet137 = setConstr(1);
var ConstSet138 = setConstr(1);
var ConstSet139 = setConstr(0);
var ConstSet140 = setConstr(1);
var ConstSet141 = setConstr(0);
          var subscripts_1996490402 = {data: [{Field0: -1651658498, Field1: 45, Field2: makeNimstrLit("\xE2\x82\x8B")}, {Field0: 340567103, Field1: 101, Field2: makeNimstrLit("\xE2\x82\x91")}, {Field0: -1262851587, Field1: 109, Field2: makeNimstrLit("\xE2\x82\x98")}, {Field0: -1852580415, Field1: 961, Field2: makeNimstrLit("\xE1\xB5\xA8")}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 45316872, Field1: 54, Field2: makeNimstrLit("\xE2\x82\x86")}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: -1131254452, Field1: 55, Field2: makeNimstrLit("\xE2\x82\x87")}, {Field0: 131599437, Field1: 118, Field2: makeNimstrLit("\xE1\xB5\xA5")}, {Field0: 1651272845, Field1: 967, Field2: makeNimstrLit("\xE1\xB5\xAA")}, {Field0: -720547953, Field1: 111, Field2: makeNimstrLit("\xE2\x82\x92")}, {Field0: -130464176, Field1: 105, Field2: makeNimstrLit("\xE1\xB5\xA2")}, {Field0: -1802190319, Field1: 49, Field2: makeNimstrLit("\xE2\x82\x81")}, {Field0: -632269230, Field1: 120, Field2: makeNimstrLit("\xE2\x82\x93")}, {Field0: 922521427, Field1: 107, Field2: makeNimstrLit("\xE2\x82\x96")}, {Field0: 1876833038, Field1: 947, Field2: makeNimstrLit("\xE1\xB5\xA7")}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 96048537, Field1: 114, Field2: makeNimstrLit("\xE1\xB5\xA3")}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 1152145308, Field1: 115, Field2: makeNimstrLit("\xE2\x82\x9B")}, {Field0: 1890224028, Field1: 117, Field2: makeNimstrLit("\xE1\xB5\xA4")}, {Field0: -910705250, Field1: 32, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 889415264, Field1: 97, Field2: makeNimstrLit("\xE2\x82\x90")}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: -1778223580, Field1: 52, Field2: makeNimstrLit("\xE2\x82\x84")}, {Field0: 908899684, Field1: 104, Field2: makeNimstrLit("\xE2\x82\x95")}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 1581067563, Field1: 56, Field2: makeNimstrLit("\xE2\x82\x88")}, {Field0: 1049132588, Field1: 51, Field2: makeNimstrLit("\xE2\x82\x83")}, {Field0: -2116423573, Field1: 106, Field2: makeNimstrLit("\xE2\xB1\xBC")}, {Field0: -41588306, Field1: 48, Field2: makeNimstrLit("\xE2\x82\x80")}, {Field0: 826013230, Field1: 61, Field2: makeNimstrLit("\xE2\x82\x8C")}, {Field0: -1160343377, Field1: 112, Field2: makeNimstrLit("\xE2\x82\x9A")}, {Field0: -1380996561, Field1: 116, Field2: makeNimstrLit("\xE2\x82\x9C")}, {Field0: -21492693, Field1: 966, Field2: makeNimstrLit("\xE1\xB5\xA9")}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 2019811060, Field1: 40, Field2: makeNimstrLit("\xE2\x82\x8D")}, {Field0: -1823011404, Field1: 41, Field2: makeNimstrLit("\xE2\x82\x8E")}, {Field0: 0, Field1: 0, Field2: []}, {Field0: -369358473, Field1: 57, Field2: makeNimstrLit("\xE2\x82\x89")}, {Field0: -1629987273, Field1: 108, Field2: makeNimstrLit("\xE2\x82\x97")}, {Field0: -2070212424, Field1: 946, Field2: makeNimstrLit("\xE1\xB5\xA6")}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: -1712371396, Field1: 110, Field2: makeNimstrLit("\xE2\x82\x99")}, {Field0: -1941233091, Field1: 50, Field2: makeNimstrLit("\xE2\x82\x82")}, {Field0: 1003719038, Field1: 53, Field2: makeNimstrLit("\xE2\x82\x85")}, {Field0: -1019208771, Field1: 43, Field2: makeNimstrLit("\xE2\x82\x8A")}], counter: 38};
          var superscripts_1996490397 = {data: [{Field0: 329902878, Field1: 8722, Field2: makeNimstrLit("\xE2\x81\xBB")}, {Field0: -910705250, Field1: 32, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: -1778223580, Field1: 52, Field2: makeNimstrLit("\xE2\x81\xB4")}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 45316872, Field1: 54, Field2: makeNimstrLit("\xE2\x81\xB6")}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 1581067563, Field1: 56, Field2: makeNimstrLit("\xE2\x81\xB8")}, {Field0: 1049132588, Field1: 51, Field2: makeNimstrLit("\xC2\xB3")}, {Field0: -1131254452, Field1: 55, Field2: makeNimstrLit("\xE2\x81\xB7")}, {Field0: -41588306, Field1: 48, Field2: makeNimstrLit("\xE2\x81\xB0")}, {Field0: 826013230, Field1: 61, Field2: makeNimstrLit("\xE2\x81\xBC")}, {Field0: -130464176, Field1: 105, Field2: makeNimstrLit("\xE2\x81\xB1")}, {Field0: -1802190319, Field1: 49, Field2: makeNimstrLit("\xC2\xB9")}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 2019811060, Field1: 40, Field2: makeNimstrLit("\xE2\x81\xBD")}, {Field0: -1823011404, Field1: 41, Field2: makeNimstrLit("\xE2\x81\xBE")}, {Field0: 0, Field1: 0, Field2: []}, {Field0: -369358473, Field1: 57, Field2: makeNimstrLit("\xE2\x81\xB9")}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: -1712371396, Field1: 110, Field2: makeNimstrLit("\xE2\x81\xBF")}, {Field0: -1941233091, Field1: 50, Field2: makeNimstrLit("\xC2\xB2")}, {Field0: 1003719038, Field1: 53, Field2: makeNimstrLit("\xE2\x81\xB5")}, {Field0: -1019208771, Field1: 43, Field2: makeNimstrLit("\xE2\x81\xBA")}], counter: 18};
var ConstSet142 = setConstr(3, 4);
var ConstSet143 = setConstr(1);
var ConstSet144 = setConstr(1);
var ConstSet145 = setConstr(0);
var ConstSet146 = setConstr(0);
var ConstSet147 = setConstr(13, 10);
      var Literal_1207959700 = {kind: 4, base: 0};
      var Raw_1207959699 = {kind: 3, base: 0};
var ConstSet148 = setConstr(32, 9, 11, 13, 10, 12);
var ConstSet149 = setConstr(9, 10, 11, 12, 13, 32);
var ConstSet150 = setConstr(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255);
var ConstSet151 = setConstr(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255);
var ConstSet152 = setConstr(0, 1, 2);
var ConstSet153 = setConstr(32, 9, 11, 13, 10, 12);
var ConstSet154 = setConstr(9, 10, 11, 12, 13, 32);
var ConstSet155 = setConstr(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255);
var ConstSet156 = setConstr(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255);
var ConstSet157 = setConstr(32, 9, 11, 13, 10, 12);
var ConstSet158 = setConstr(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255);
      var xidocArgumentParser_1325404777 = {fn: fnHEX60gensym315_1325403069};

function isObj(obj_33557238, subclass_33557239) {
  var result_33557240 = false;

  BeforeRet: do {
    var x_33557241 = obj_33557238;
    if ((x_33557241 == subclass_33557239)) {
    result_33557240 = true;
    break BeforeRet;
    }
    
    Label1: do {
        Label2: while (true) {
        if (!!((x_33557241 == subclass_33557239))) break Label2;
          if ((x_33557241 == null)) {
          result_33557240 = false;
          break BeforeRet;
          }
          
          x_33557241 = x_33557241.base;
        }
    } while (false);
    result_33557240 = true;
    break BeforeRet;
  } while (false);

  return result_33557240;

}

function reraiseException() {
    if ((lastJSError == null)) {
    raiseException({message: makeNimstrLit("no exception to reraise"), parent: null, m_type: NTI33555132, name: null, trace: [], up: null}, "ReraiseDefect");
    }
    else {
      if ((excHandler == 0)) {
      if (isNimException_33556519()) {
      unhandledException(lastJSError);
      }
      
      }
      
      throw lastJSError;
    }
    

  
}
var ConstSet159 = setConstr(0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255);
var ConstSet160 = setConstr(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255);
var ConstSet161 = setConstr(0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255);
var ConstSet162 = setConstr(0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255);
var ConstSet163 = setConstr(9, 10, 11, 12, 13, 32);
var ConstSet164 = setConstr(9, 10, 11, 12, 13, 32);
var ConstSet165 = setConstr(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255);
    var xidocParser_1325402810 = {fn: fnHEX60gensym55_1325400443};
var ConstSet166 = setConstr(0, 1);
var ConstSet167 = setConstr(0);
var ConstSet168 = setConstr(0, 1);
var ConstSet169 = setConstr();
var ConstSet170 = setConstr(0);
var ConstSet171 = setConstr(2);
var ConstSet172 = setConstr(0);
var ConstSet173 = setConstr(1);
var ConstSet174 = setConstr(0, 1);
var ConstSet175 = setConstr(2);
var ConstSet176 = setConstr(2);
var ConstSet177 = setConstr(2);
var ConstSet178 = setConstr(0, 1);
var ConstSet179 = setConstr(0, 1);
var ConstSet180 = setConstr(0, 1);
var ConstSet181 = setConstr(0, 1);
var ConstSet182 = setConstr(0, 1);
var ConstSet183 = setConstr(0, 1);
var ConstSet184 = setConstr(2);
var ConstSet185 = setConstr(2);
var ConstSet186 = setConstr(2);
var ConstSet187 = setConstr(0, 1);
    var translations_1224736789 = [[makeNimstrLit("Definition"), makeNimstrLit("Definice")], [makeNimstrLit("Example"), makeNimstrLit("P\xC5\x99\xC3\xADklad")], [makeNimstrLit("Exercise"), makeNimstrLit("Cvi\xC4\x8Den\xC3\xAD")], [makeNimstrLit("en"), makeNimstrLit("cs")], [makeNimstrLit("english"), makeNimstrLit("czech")], [makeNimstrLit("Lemma"), makeNimstrLit("Lemma")], [makeNimstrLit("Proof"), makeNimstrLit("D\xC5\xAFkaz")], [makeNimstrLit("\xE2\x80\x9C$1\xE2\x80\x9D"), makeNimstrLit("\xE2\x80\x9E$1\xE2\x80\x9C")], [makeNimstrLit("Solution"), makeNimstrLit("\xC5\x98e\xC5\xA1en\xC3\xAD")], [makeNimstrLit("Theorem"), makeNimstrLit("V\xC4\x9Bta")]];
var ConstSet188 = setConstr(3);
    var toLowerRanges_939525019 = new Int32Array([65, 90, 532, 192, 214, 532, 216, 222, 532, 393, 394, 705, 433, 434, 717, 904, 906, 537, 910, 911, 563, 913, 929, 532, 931, 939, 532, 1021, 1023, 370, 1024, 1039, 580, 1040, 1071, 532, 1329, 1366, 548, 4256, 4293, 7764, 5024, 5103, 39364, 5104, 5109, 508, 7312, 7354, -2508, 7357, 7359, -2508, 7944, 7951, 492, 7960, 7965, 492, 7976, 7983, 492, 7992, 7999, 492, 8008, 8013, 492, 8040, 8047, 492, 8072, 8079, 492, 8088, 8095, 492, 8104, 8111, 492, 8120, 8121, 492, 8122, 8123, 426, 8136, 8139, 414, 8152, 8153, 492, 8154, 8155, 400, 8168, 8169, 492, 8170, 8171, 388, 8184, 8185, 372, 8186, 8187, 374, 11264, 11310, 548, 11390, 11391, -10315, 65313, 65338, 532, 66560, 66599, 540, 66736, 66771, 540, 68736, 68786, 564, 71840, 71871, 532, 93760, 93791, 532, 125184, 125217, 534]);
    var toLowerSinglets_939525020 = new Int32Array([256, 501, 258, 501, 260, 501, 262, 501, 264, 501, 266, 501, 268, 501, 270, 501, 272, 501, 274, 501, 276, 501, 278, 501, 280, 501, 282, 501, 284, 501, 286, 501, 288, 501, 290, 501, 292, 501, 294, 501, 296, 501, 298, 501, 300, 501, 302, 501, 304, 301, 306, 501, 308, 501, 310, 501, 313, 501, 315, 501, 317, 501, 319, 501, 321, 501, 323, 501, 325, 501, 327, 501, 330, 501, 332, 501, 334, 501, 336, 501, 338, 501, 340, 501, 342, 501, 344, 501, 346, 501, 348, 501, 350, 501, 352, 501, 354, 501, 356, 501, 358, 501, 360, 501, 362, 501, 364, 501, 366, 501, 368, 501, 370, 501, 372, 501, 374, 501, 376, 379, 377, 501, 379, 501, 381, 501, 385, 710, 386, 501, 388, 501, 390, 706, 391, 501, 395, 501, 398, 579, 399, 702, 400, 703, 401, 501, 403, 705, 404, 707, 406, 711, 407, 709, 408, 501, 412, 711, 413, 713, 415, 714, 416, 501, 418, 501, 420, 501, 422, 718, 423, 501, 425, 718, 428, 501, 430, 718, 431, 501, 435, 501, 437, 501, 439, 719, 440, 501, 444, 501, 452, 502, 453, 501, 455, 502, 456, 501, 458, 502, 459, 501, 461, 501, 463, 501, 465, 501, 467, 501, 469, 501, 471, 501, 473, 501, 475, 501, 478, 501, 480, 501, 482, 501, 484, 501, 486, 501, 488, 501, 490, 501, 492, 501, 494, 501, 497, 502, 498, 501, 500, 501, 502, 403, 503, 444, 504, 501, 506, 501, 508, 501, 510, 501, 512, 501, 514, 501, 516, 501, 518, 501, 520, 501, 522, 501, 524, 501, 526, 501, 528, 501, 530, 501, 532, 501, 534, 501, 536, 501, 538, 501, 540, 501, 542, 501, 544, 370, 546, 501, 548, 501, 550, 501, 552, 501, 554, 501, 556, 501, 558, 501, 560, 501, 562, 501, 570, 11295, 571, 501, 573, 337, 574, 11292, 577, 501, 579, 305, 580, 569, 581, 571, 582, 501, 584, 501, 586, 501, 588, 501, 590, 501, 880, 501, 882, 501, 886, 501, 895, 616, 902, 538, 908, 564, 975, 508, 984, 501, 986, 501, 988, 501, 990, 501, 992, 501, 994, 501, 996, 501, 998, 501, 1000, 501, 1002, 501, 1004, 501, 1006, 501, 1012, 440, 1015, 501, 1017, 493, 1018, 501, 1120, 501, 1122, 501, 1124, 501, 1126, 501, 1128, 501, 1130, 501, 1132, 501, 1134, 501, 1136, 501, 1138, 501, 1140, 501, 1142, 501, 1144, 501, 1146, 501, 1148, 501, 1150, 501, 1152, 501, 1162, 501, 1164, 501, 1166, 501, 1168, 501, 1170, 501, 1172, 501, 1174, 501, 1176, 501, 1178, 501, 1180, 501, 1182, 501, 1184, 501, 1186, 501, 1188, 501, 1190, 501, 1192, 501, 1194, 501, 1196, 501, 1198, 501, 1200, 501, 1202, 501, 1204, 501, 1206, 501, 1208, 501, 1210, 501, 1212, 501, 1214, 501, 1216, 515, 1217, 501, 1219, 501, 1221, 501, 1223, 501, 1225, 501, 1227, 501, 1229, 501, 1232, 501, 1234, 501, 1236, 501, 1238, 501, 1240, 501, 1242, 501, 1244, 501, 1246, 501, 1248, 501, 1250, 501, 1252, 501, 1254, 501, 1256, 501, 1258, 501, 1260, 501, 1262, 501, 1264, 501, 1266, 501, 1268, 501, 1270, 501, 1272, 501, 1274, 501, 1276, 501, 1278, 501, 1280, 501, 1282, 501, 1284, 501, 1286, 501, 1288, 501, 1290, 501, 1292, 501, 1294, 501, 1296, 501, 1298, 501, 1300, 501, 1302, 501, 1304, 501, 1306, 501, 1308, 501, 1310, 501, 1312, 501, 1314, 501, 1316, 501, 1318, 501, 1320, 501, 1322, 501, 1324, 501, 1326, 501, 4295, 7764, 4301, 7764, 7680, 501, 7682, 501, 7684, 501, 7686, 501, 7688, 501, 7690, 501, 7692, 501, 7694, 501, 7696, 501, 7698, 501, 7700, 501, 7702, 501, 7704, 501, 7706, 501, 7708, 501, 7710, 501, 7712, 501, 7714, 501, 7716, 501, 7718, 501, 7720, 501, 7722, 501, 7724, 501, 7726, 501, 7728, 501, 7730, 501, 7732, 501, 7734, 501, 7736, 501, 7738, 501, 7740, 501, 7742, 501, 7744, 501, 7746, 501, 7748, 501, 7750, 501, 7752, 501, 7754, 501, 7756, 501, 7758, 501, 7760, 501, 7762, 501, 7764, 501, 7766, 501, 7768, 501, 7770, 501, 7772, 501, 7774, 501, 7776, 501, 7778, 501, 7780, 501, 7782, 501, 7784, 501, 7786, 501, 7788, 501, 7790, 501, 7792, 501, 7794, 501, 7796, 501, 7798, 501, 7800, 501, 7802, 501, 7804, 501, 7806, 501, 7808, 501, 7810, 501, 7812, 501, 7814, 501, 7816, 501, 7818, 501, 7820, 501, 7822, 501, 7824, 501, 7826, 501, 7828, 501, 7838, -7115, 7840, 501, 7842, 501, 7844, 501, 7846, 501, 7848, 501, 7850, 501, 7852, 501, 7854, 501, 7856, 501, 7858, 501, 7860, 501, 7862, 501, 7864, 501, 7866, 501, 7868, 501, 7870, 501, 7872, 501, 7874, 501, 7876, 501, 7878, 501, 7880, 501, 7882, 501, 7884, 501, 7886, 501, 7888, 501, 7890, 501, 7892, 501, 7894, 501, 7896, 501, 7898, 501, 7900, 501, 7902, 501, 7904, 501, 7906, 501, 7908, 501, 7910, 501, 7912, 501, 7914, 501, 7916, 501, 7918, 501, 7920, 501, 7922, 501, 7924, 501, 7926, 501, 7928, 501, 7930, 501, 7932, 501, 7934, 501, 8025, 492, 8027, 492, 8029, 492, 8031, 492, 8124, 491, 8140, 491, 8172, 493, 8188, 491, 8486, -7017, 8490, -7883, 8491, -7762, 8498, 528, 8579, 501, 11360, 501, 11362, -10243, 11363, -3314, 11364, -10227, 11367, 501, 11369, 501, 11371, 501, 11373, -10280, 11374, -10249, 11375, -10283, 11376, -10282, 11378, 501, 11381, 501, 11392, 501, 11394, 501, 11396, 501, 11398, 501, 11400, 501, 11402, 501, 11404, 501, 11406, 501, 11408, 501, 11410, 501, 11412, 501, 11414, 501, 11416, 501, 11418, 501, 11420, 501, 11422, 501, 11424, 501, 11426, 501, 11428, 501, 11430, 501, 11432, 501, 11434, 501, 11436, 501, 11438, 501, 11440, 501, 11442, 501, 11444, 501, 11446, 501, 11448, 501, 11450, 501, 11452, 501, 11454, 501, 11456, 501, 11458, 501, 11460, 501, 11462, 501, 11464, 501, 11466, 501, 11468, 501, 11470, 501, 11472, 501, 11474, 501, 11476, 501, 11478, 501, 11480, 501, 11482, 501, 11484, 501, 11486, 501, 11488, 501, 11490, 501, 11499, 501, 11501, 501, 11506, 501, 42560, 501, 42562, 501, 42564, 501, 42566, 501, 42568, 501, 42570, 501, 42572, 501, 42574, 501, 42576, 501, 42578, 501, 42580, 501, 42582, 501, 42584, 501, 42586, 501, 42588, 501, 42590, 501, 42592, 501, 42594, 501, 42596, 501, 42598, 501, 42600, 501, 42602, 501, 42604, 501, 42624, 501, 42626, 501, 42628, 501, 42630, 501, 42632, 501, 42634, 501, 42636, 501, 42638, 501, 42640, 501, 42642, 501, 42644, 501, 42646, 501, 42648, 501, 42650, 501, 42786, 501, 42788, 501, 42790, 501, 42792, 501, 42794, 501, 42796, 501, 42798, 501, 42802, 501, 42804, 501, 42806, 501, 42808, 501, 42810, 501, 42812, 501, 42814, 501, 42816, 501, 42818, 501, 42820, 501, 42822, 501, 42824, 501, 42826, 501, 42828, 501, 42830, 501, 42832, 501, 42834, 501, 42836, 501, 42838, 501, 42840, 501, 42842, 501, 42844, 501, 42846, 501, 42848, 501, 42850, 501, 42852, 501, 42854, 501, 42856, 501, 42858, 501, 42860, 501, 42862, 501, 42873, 501, 42875, 501, 42877, -34832, 42878, 501, 42880, 501, 42882, 501, 42884, 501, 42886, 501, 42891, 501, 42893, -41780, 42896, 501, 42898, 501, 42902, 501, 42904, 501, 42906, 501, 42908, 501, 42910, 501, 42912, 501, 42914, 501, 42916, 501, 42918, 501, 42920, 501, 42922, -41808, 42923, -41819, 42924, -41815, 42925, -41805, 42926, -41808, 42928, -41758, 42929, -41782, 42930, -41761, 42931, 1428, 42932, 501, 42934, 501, 42936, 501, 42938, 501, 42940, 501, 42942, 501, 42946, 501, 42948, 452, 42949, -41807, 42950, -34884]);
    var toUpperRanges_939525021 = new Int32Array([97, 122, 468, 224, 246, 468, 248, 254, 468, 575, 576, 11315, 598, 599, 295, 650, 651, 283, 891, 893, 630, 941, 943, 463, 945, 961, 468, 963, 971, 468, 973, 974, 437, 1072, 1103, 468, 1104, 1119, 420, 1377, 1414, 452, 4304, 4346, 3508, 4349, 4351, 3508, 5112, 5117, 492, 7299, 7300, -5742, 7936, 7943, 508, 7952, 7957, 508, 7968, 7975, 508, 7984, 7991, 508, 8000, 8005, 508, 8032, 8039, 508, 8048, 8049, 574, 8050, 8053, 586, 8054, 8055, 600, 8056, 8057, 628, 8058, 8059, 612, 8060, 8061, 626, 8064, 8071, 508, 8080, 8087, 508, 8096, 8103, 508, 8112, 8113, 508, 8144, 8145, 508, 8160, 8161, 508, 11312, 11358, 452, 11520, 11557, -6764, 43888, 43967, -38364, 65345, 65370, 468, 66600, 66639, 460, 66776, 66811, 460, 68800, 68850, 436, 71872, 71903, 468, 93792, 93823, 468, 125218, 125251, 466]);
    var toUpperSinglets_939525022 = new Int32Array([181, 1243, 255, 621, 257, 499, 259, 499, 261, 499, 263, 499, 265, 499, 267, 499, 269, 499, 271, 499, 273, 499, 275, 499, 277, 499, 279, 499, 281, 499, 283, 499, 285, 499, 287, 499, 289, 499, 291, 499, 293, 499, 295, 499, 297, 499, 299, 499, 301, 499, 303, 499, 305, 268, 307, 499, 309, 499, 311, 499, 314, 499, 316, 499, 318, 499, 320, 499, 322, 499, 324, 499, 326, 499, 328, 499, 331, 499, 333, 499, 335, 499, 337, 499, 339, 499, 341, 499, 343, 499, 345, 499, 347, 499, 349, 499, 351, 499, 353, 499, 355, 499, 357, 499, 359, 499, 361, 499, 363, 499, 365, 499, 367, 499, 369, 499, 371, 499, 373, 499, 375, 499, 378, 499, 380, 499, 382, 499, 383, 200, 384, 695, 387, 499, 389, 499, 392, 499, 396, 499, 402, 499, 405, 597, 409, 499, 410, 663, 414, 630, 417, 499, 419, 499, 421, 499, 424, 499, 429, 499, 432, 499, 436, 499, 438, 499, 441, 499, 445, 499, 447, 556, 453, 499, 454, 498, 456, 499, 457, 498, 459, 499, 460, 498, 462, 499, 464, 499, 466, 499, 468, 499, 470, 499, 472, 499, 474, 499, 476, 499, 477, 421, 479, 499, 481, 499, 483, 499, 485, 499, 487, 499, 489, 499, 491, 499, 493, 499, 495, 499, 498, 499, 499, 498, 501, 499, 505, 499, 507, 499, 509, 499, 511, 499, 513, 499, 515, 499, 517, 499, 519, 499, 521, 499, 523, 499, 525, 499, 527, 499, 529, 499, 531, 499, 533, 499, 535, 499, 537, 499, 539, 499, 541, 499, 543, 499, 547, 499, 549, 499, 551, 499, 553, 499, 555, 499, 557, 499, 559, 499, 561, 499, 563, 499, 572, 499, 578, 499, 583, 499, 585, 499, 587, 499, 589, 499, 591, 499, 592, 11283, 593, 11280, 594, 11282, 595, 290, 596, 294, 601, 298, 603, 297, 604, 42819, 608, 295, 609, 42815, 611, 293, 613, 42780, 614, 42808, 616, 291, 617, 289, 618, 42808, 619, 11243, 620, 42805, 623, 289, 625, 11249, 626, 287, 629, 286, 637, 11227, 640, 282, 642, 42807, 643, 282, 647, 42782, 648, 282, 649, 431, 652, 429, 658, 281, 669, 42761, 670, 42758, 881, 499, 883, 499, 887, 499, 940, 462, 962, 469, 972, 436, 976, 438, 977, 443, 981, 453, 982, 446, 983, 492, 985, 499, 987, 499, 989, 499, 991, 499, 993, 499, 995, 499, 997, 499, 999, 499, 1001, 499, 1003, 499, 1005, 499, 1007, 499, 1008, 414, 1009, 420, 1010, 507, 1011, 384, 1013, 404, 1016, 499, 1019, 499, 1121, 499, 1123, 499, 1125, 499, 1127, 499, 1129, 499, 1131, 499, 1133, 499, 1135, 499, 1137, 499, 1139, 499, 1141, 499, 1143, 499, 1145, 499, 1147, 499, 1149, 499, 1151, 499, 1153, 499, 1163, 499, 1165, 499, 1167, 499, 1169, 499, 1171, 499, 1173, 499, 1175, 499, 1177, 499, 1179, 499, 1181, 499, 1183, 499, 1185, 499, 1187, 499, 1189, 499, 1191, 499, 1193, 499, 1195, 499, 1197, 499, 1199, 499, 1201, 499, 1203, 499, 1205, 499, 1207, 499, 1209, 499, 1211, 499, 1213, 499, 1215, 499, 1218, 499, 1220, 499, 1222, 499, 1224, 499, 1226, 499, 1228, 499, 1230, 499, 1231, 485, 1233, 499, 1235, 499, 1237, 499, 1239, 499, 1241, 499, 1243, 499, 1245, 499, 1247, 499, 1249, 499, 1251, 499, 1253, 499, 1255, 499, 1257, 499, 1259, 499, 1261, 499, 1263, 499, 1265, 499, 1267, 499, 1269, 499, 1271, 499, 1273, 499, 1275, 499, 1277, 499, 1279, 499, 1281, 499, 1283, 499, 1285, 499, 1287, 499, 1289, 499, 1291, 499, 1293, 499, 1295, 499, 1297, 499, 1299, 499, 1301, 499, 1303, 499, 1305, 499, 1307, 499, 1309, 499, 1311, 499, 1313, 499, 1315, 499, 1317, 499, 1319, 499, 1321, 499, 1323, 499, 1325, 499, 1327, 499, 7296, -5754, 7297, -5753, 7298, -5744, 7301, -5743, 7302, -5736, 7303, -5681, 7304, 35766, 7545, 35832, 7549, 4314, 7566, 35884, 7681, 499, 7683, 499, 7685, 499, 7687, 499, 7689, 499, 7691, 499, 7693, 499, 7695, 499, 7697, 499, 7699, 499, 7701, 499, 7703, 499, 7705, 499, 7707, 499, 7709, 499, 7711, 499, 7713, 499, 7715, 499, 7717, 499, 7719, 499, 7721, 499, 7723, 499, 7725, 499, 7727, 499, 7729, 499, 7731, 499, 7733, 499, 7735, 499, 7737, 499, 7739, 499, 7741, 499, 7743, 499, 7745, 499, 7747, 499, 7749, 499, 7751, 499, 7753, 499, 7755, 499, 7757, 499, 7759, 499, 7761, 499, 7763, 499, 7765, 499, 7767, 499, 7769, 499, 7771, 499, 7773, 499, 7775, 499, 7777, 499, 7779, 499, 7781, 499, 7783, 499, 7785, 499, 7787, 499, 7789, 499, 7791, 499, 7793, 499, 7795, 499, 7797, 499, 7799, 499, 7801, 499, 7803, 499, 7805, 499, 7807, 499, 7809, 499, 7811, 499, 7813, 499, 7815, 499, 7817, 499, 7819, 499, 7821, 499, 7823, 499, 7825, 499, 7827, 499, 7829, 499, 7835, 441, 7841, 499, 7843, 499, 7845, 499, 7847, 499, 7849, 499, 7851, 499, 7853, 499, 7855, 499, 7857, 499, 7859, 499, 7861, 499, 7863, 499, 7865, 499, 7867, 499, 7869, 499, 7871, 499, 7873, 499, 7875, 499, 7877, 499, 7879, 499, 7881, 499, 7883, 499, 7885, 499, 7887, 499, 7889, 499, 7891, 499, 7893, 499, 7895, 499, 7897, 499, 7899, 499, 7901, 499, 7903, 499, 7905, 499, 7907, 499, 7909, 499, 7911, 499, 7913, 499, 7915, 499, 7917, 499, 7919, 499, 7921, 499, 7923, 499, 7925, 499, 7927, 499, 7929, 499, 7931, 499, 7933, 499, 7935, 499, 8017, 508, 8019, 508, 8021, 508, 8023, 508, 8115, 509, 8126, -6705, 8131, 509, 8165, 507, 8179, 509, 8526, 472, 8580, 499, 11361, 499, 11365, -10295, 11366, -10292, 11368, 499, 11370, 499, 11372, 499, 11379, 499, 11382, 499, 11393, 499, 11395, 499, 11397, 499, 11399, 499, 11401, 499, 11403, 499, 11405, 499, 11407, 499, 11409, 499, 11411, 499, 11413, 499, 11415, 499, 11417, 499, 11419, 499, 11421, 499, 11423, 499, 11425, 499, 11427, 499, 11429, 499, 11431, 499, 11433, 499, 11435, 499, 11437, 499, 11439, 499, 11441, 499, 11443, 499, 11445, 499, 11447, 499, 11449, 499, 11451, 499, 11453, 499, 11455, 499, 11457, 499, 11459, 499, 11461, 499, 11463, 499, 11465, 499, 11467, 499, 11469, 499, 11471, 499, 11473, 499, 11475, 499, 11477, 499, 11479, 499, 11481, 499, 11483, 499, 11485, 499, 11487, 499, 11489, 499, 11491, 499, 11500, 499, 11502, 499, 11507, 499, 11559, -6764, 11565, -6764, 42561, 499, 42563, 499, 42565, 499, 42567, 499, 42569, 499, 42571, 499, 42573, 499, 42575, 499, 42577, 499, 42579, 499, 42581, 499, 42583, 499, 42585, 499, 42587, 499, 42589, 499, 42591, 499, 42593, 499, 42595, 499, 42597, 499, 42599, 499, 42601, 499, 42603, 499, 42605, 499, 42625, 499, 42627, 499, 42629, 499, 42631, 499, 42633, 499, 42635, 499, 42637, 499, 42639, 499, 42641, 499, 42643, 499, 42645, 499, 42647, 499, 42649, 499, 42651, 499, 42787, 499, 42789, 499, 42791, 499, 42793, 499, 42795, 499, 42797, 499, 42799, 499, 42803, 499, 42805, 499, 42807, 499, 42809, 499, 42811, 499, 42813, 499, 42815, 499, 42817, 499, 42819, 499, 42821, 499, 42823, 499, 42825, 499, 42827, 499, 42829, 499, 42831, 499, 42833, 499, 42835, 499, 42837, 499, 42839, 499, 42841, 499, 42843, 499, 42845, 499, 42847, 499, 42849, 499, 42851, 499, 42853, 499, 42855, 499, 42857, 499, 42859, 499, 42861, 499, 42863, 499, 42874, 499, 42876, 499, 42879, 499, 42881, 499, 42883, 499, 42885, 499, 42887, 499, 42892, 499, 42897, 499, 42899, 499, 42900, 548, 42903, 499, 42905, 499, 42907, 499, 42909, 499, 42911, 499, 42913, 499, 42915, 499, 42917, 499, 42919, 499, 42921, 499, 42933, 499, 42935, 499, 42937, 499, 42939, 499, 42941, 499, 42943, 499, 42947, 499, 43859, -428]);
    var alphaRanges_939525024 = new Int32Array([65, 90, 97, 122, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 880, 884, 886, 887, 890, 893, 904, 906, 910, 929, 931, 1013, 1015, 1153, 1162, 1327, 1329, 1366, 1376, 1416, 1488, 1514, 1519, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1765, 1766, 1774, 1775, 1786, 1788, 1810, 1839, 1869, 1957, 1994, 2026, 2036, 2037, 2048, 2069, 2112, 2136, 2144, 2154, 2208, 2228, 2230, 2237, 2308, 2361, 2392, 2401, 2417, 2432, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2486, 2489, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2784, 2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2908, 2909, 2911, 2913, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3129, 3160, 3162, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344, 3346, 3386, 3412, 3414, 3423, 3425, 3450, 3455, 3461, 3478, 3482, 3505, 3507, 3515, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3718, 3722, 3724, 3747, 3751, 3760, 3762, 3763, 3776, 3780, 3804, 3807, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4176, 4181, 4186, 4189, 4197, 4198, 4206, 4208, 4213, 4225, 4256, 4293, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992, 5007, 5024, 5109, 5112, 5117, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5873, 5880, 5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016, 6067, 6176, 6264, 6272, 6276, 6279, 6312, 6320, 6389, 6400, 6430, 6480, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6656, 6678, 6688, 6740, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141, 7168, 7203, 7245, 7247, 7258, 7293, 7296, 7304, 7312, 7354, 7357, 7359, 7401, 7404, 7406, 7411, 7413, 7414, 7424, 7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8031, 8061, 8064, 8116, 8118, 8124, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8336, 8348, 8458, 8467, 8473, 8477, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8579, 8580, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520, 11557, 11568, 11623, 11648, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 12293, 12294, 12337, 12341, 12347, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12591, 12593, 12686, 12704, 12730, 12784, 12799, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538, 42539, 42560, 42606, 42623, 42653, 42656, 42725, 42775, 42783, 42786, 42888, 42891, 42943, 42946, 42950, 42999, 43009, 43011, 43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43261, 43262, 43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43488, 43492, 43494, 43503, 43514, 43518, 43520, 43560, 43584, 43586, 43588, 43595, 43616, 43638, 43646, 43695, 43701, 43702, 43705, 43709, 43739, 43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43824, 43866, 43868, 43879, 43888, 44002, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64287, 64296, 64298, 64310, 64312, 64316, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65536, 65547, 65549, 65574, 65576, 65594, 65596, 65597, 65599, 65613, 65616, 65629, 65664, 65786, 66176, 66204, 66208, 66256, 66304, 66335, 66349, 66368, 66370, 66377, 66384, 66421, 66432, 66461, 66464, 66499, 66504, 66511, 66560, 66717, 66736, 66771, 66776, 66811, 66816, 66855, 66864, 66915, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67594, 67637, 67639, 67640, 67647, 67669, 67680, 67702, 67712, 67742, 67808, 67826, 67828, 67829, 67840, 67861, 67872, 67897, 67968, 68023, 68030, 68031, 68112, 68115, 68117, 68119, 68121, 68149, 68192, 68220, 68224, 68252, 68288, 68295, 68297, 68324, 68352, 68405, 68416, 68437, 68448, 68466, 68480, 68497, 68608, 68680, 68736, 68786, 68800, 68850, 68864, 68899, 69376, 69404, 69424, 69445, 69600, 69622, 69635, 69687, 69763, 69807, 69840, 69864, 69891, 69926, 69968, 70002, 70019, 70066, 70081, 70084, 70144, 70161, 70163, 70187, 70272, 70278, 70282, 70285, 70287, 70301, 70303, 70312, 70320, 70366, 70405, 70412, 70415, 70416, 70419, 70440, 70442, 70448, 70450, 70451, 70453, 70457, 70493, 70497, 70656, 70708, 70727, 70730, 70784, 70831, 70852, 70853, 71040, 71086, 71128, 71131, 71168, 71215, 71296, 71338, 71424, 71450, 71680, 71723, 71840, 71903, 72096, 72103, 72106, 72144, 72203, 72242, 72284, 72329, 72384, 72440, 72704, 72712, 72714, 72750, 72818, 72847, 72960, 72966, 72968, 72969, 72971, 73008, 73056, 73061, 73063, 73064, 73066, 73097, 73440, 73458, 73728, 74649, 74880, 75075, 77824, 78894, 82944, 83526, 92160, 92728, 92736, 92766, 92880, 92909, 92928, 92975, 92992, 92995, 93027, 93047, 93053, 93071, 93760, 93823, 93952, 94026, 94099, 94111, 94176, 94177, 100352, 101106, 110592, 110878, 110928, 110930, 110948, 110951, 110960, 111355, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 119808, 119892, 119894, 119964, 119966, 119967, 119973, 119974, 119977, 119980, 119982, 119993, 119997, 120003, 120005, 120069, 120071, 120074, 120077, 120084, 120086, 120092, 120094, 120121, 120123, 120126, 120128, 120132, 120138, 120144, 120146, 120485, 120488, 120512, 120514, 120538, 120540, 120570, 120572, 120596, 120598, 120628, 120630, 120654, 120656, 120686, 120688, 120712, 120714, 120744, 120746, 120770, 120772, 120779, 123136, 123180, 123191, 123197, 123584, 123627, 124928, 125124, 125184, 125251, 126464, 126467, 126469, 126495, 126497, 126498, 126505, 126514, 126516, 126519, 126541, 126543, 126545, 126546, 126561, 126562, 126567, 126570, 126572, 126578, 126580, 126583, 126585, 126588, 126592, 126601, 126603, 126619, 126625, 126627, 126629, 126633, 126635, 126651, 194560, 195101]);
    var alphaSinglets_939525025 = new Int32Array([170, 181, 186, 748, 750, 895, 902, 908, 1369, 1749, 1791, 1808, 1969, 2042, 2074, 2084, 2088, 2365, 2384, 2482, 2493, 2510, 2556, 2654, 2749, 2768, 2809, 2877, 2929, 2947, 2972, 3024, 3133, 3200, 3261, 3294, 3389, 3406, 3517, 3716, 3749, 3773, 3782, 3840, 4159, 4193, 4238, 4295, 4301, 4696, 4800, 6103, 6108, 6314, 6823, 7418, 8025, 8027, 8029, 8126, 8305, 8319, 8450, 8455, 8469, 8484, 8486, 8488, 8526, 11559, 11565, 11631, 11823, 13312, 19893, 19968, 40943, 43259, 43471, 43642, 43697, 43712, 43714, 44032, 55203, 64285, 64318, 67592, 67644, 68096, 69415, 69956, 70006, 70106, 70108, 70280, 70461, 70480, 70751, 70855, 71236, 71352, 71935, 72161, 72163, 72192, 72250, 72272, 72349, 72768, 73030, 73112, 94032, 94179, 94208, 100343, 119970, 119995, 120134, 123214, 125259, 126500, 126503, 126521, 126523, 126530, 126535, 126537, 126539, 126548, 126551, 126553, 126555, 126557, 126559, 126564, 126590, 131072, 173782, 173824, 177972, 177984, 178205, 178208, 183969, 183984, 191456]);
    var spaceRanges_939525026 = new Int32Array([9, 13, 32, 32, 133, 133, 160, 160, 5760, 5760, 8192, 8202, 8232, 8233, 8239, 8239, 8287, 8287, 12288, 12288]);
var ConstSet189 = setConstr(9, 10, 11);
var ConstSet190 = setConstr(9, 10, 11);
var ConstSet191 = setConstr(9, 10, 11);
var ConstSet192 = setConstr(9, 10, 11);
var ConstSet193 = setConstr(9, 10, 11);
var ConstSet194 = setConstr(9, 10, 11);
var ConstSet195 = setConstr(9, 10, 11);
var ConstSet196 = setConstr(9, 10, 11);
var ConstSet197 = setConstr(9, 10, 11);
var ConstSet198 = setConstr(9, 10, 11);
var ConstSet199 = setConstr(9, 10, 11);
var ConstSet200 = setConstr(9, 10, 11);
var ConstSet201 = setConstr(9, 10, 11);
var ConstSet202 = setConstr(9, 10, 11);
var ConstSet203 = setConstr(9, 10, 11);
var ConstSet204 = setConstr(9, 10, 11);
var ConstSet205 = setConstr(9, 10, 11);
var ConstSet206 = setConstr(9, 10, 11);
var ConstSet207 = setConstr(9, 10, 11);
var ConstSet208 = setConstr(9, 10, 11);
var ConstSet209 = setConstr(9, 10, 11);
var ConstSet210 = setConstr(9, 10, 11);
var ConstSet211 = setConstr(9, 10, 11);
var ConstSet212 = setConstr(9, 10, 11);
var ConstSet213 = setConstr(9, 10, 11);
var ConstSet214 = setConstr(9, 10, 11);
var ConstSet215 = setConstr(9, 10, 11);
var ConstSet216 = setConstr(9, 10, 11);
var ConstSet217 = setConstr(9, 10, 11);
var ConstSet218 = setConstr(9, 10, 11);
var ConstSet219 = setConstr(9, 10, 11);
var ConstSet220 = setConstr(9, 10, 11);
var ConstSet221 = setConstr(9, 10, 11);
var ConstSet222 = setConstr(9, 10, 11);
var ConstSet223 = setConstr(9, 10, 11);
var ConstSet224 = setConstr(9, 10, 11);
var ConstSet225 = setConstr(9, 10, 11);
var ConstSet226 = setConstr(9, 10, 11);
var ConstSet227 = setConstr(9, 10, 11);
var ConstSet228 = setConstr(9, 10, 11);
var ConstSet229 = setConstr(9, 10, 11);
var ConstSet230 = setConstr(9, 10, 11);
var ConstSet231 = setConstr(9, 10, 11);
var ConstSet232 = setConstr(9, 10, 11);
var ConstSet233 = setConstr(9, 10, 11);
var ConstSet234 = setConstr(9, 10, 11);
var ConstSet235 = setConstr(9, 10, 11);
var ConstSet236 = setConstr(9, 10, 11);
var ConstSet237 = setConstr(9, 10, 11);
var ConstSet238 = setConstr(9, 10, 11);
var ConstSet239 = setConstr(9, 10, 11);
var ConstSet240 = setConstr(9, 10, 11);
var ConstSet241 = setConstr(9, 10, 11);
var ConstSet242 = setConstr(9, 10, 11);
var ConstSet243 = setConstr(9, 10, 11);
var ConstSet244 = setConstr(9, 10, 11);
var ConstSet245 = setConstr(9, 10, 11);
var ConstSet246 = setConstr(9, 10, 11);
var ConstSet247 = setConstr(9, 10, 11);
var ConstSet248 = setConstr(9, 10, 11);
var ConstSet249 = setConstr(9, 10, 11);
var ConstSet250 = setConstr(9, 10, 11);
var ConstSet251 = setConstr(9, 10, 11);
var ConstSet252 = setConstr(9, 10, 11);
var ConstSet253 = setConstr(9, 10, 11);
var ConstSet254 = setConstr(9, 10, 11);
var ConstSet255 = setConstr(9, 10, 11);
var ConstSet256 = setConstr(9, 10, 11);
var ConstSet257 = setConstr(9, 10, 11);
var ConstSet258 = setConstr(9, 10, 11);
var ConstSet259 = setConstr(9, 10, 11);
var ConstSet260 = setConstr(9, 10, 11);
var ConstSet261 = setConstr(12, 18);
var ConstSet262 = setConstr(13, 19);
var ConstSet263 = setConstr(14);
var ConstSet264 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
var ConstSet265 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
var ConstSet266 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
var ConstSet267 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
var ConstSet268 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
var ConstSet269 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
var ConstSet270 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
var ConstSet271 = setConstr(12, 18);
var ConstSet272 = setConstr(13, 19);
var ConstSet273 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
var ConstSet274 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
var ConstSet275 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
var ConstSet276 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
var ConstSet277 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
var ConstSet278 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
var ConstSet279 = setConstr([25, 27]);
var ConstSet280 = setConstr();
var ConstSet281 = setConstr(13, 10, 0);
var ConstSet282 = setConstr();
var ConstSet283 = setConstr([48, 57]);
var ConstSet284 = setConstr([65, 90], [97, 122]);

function SetMinus(a_33556919, b_33556920) {
        var result = {};
    for (var elem in a_33556919) {
      if (!b_33556920[elem]) { result[elem] = true; }
    }
    return result;
  

  
}
var ConstSet285 = setConstr([1, 255]);
var ConstSet286 = setConstr([65, 90], [97, 122]);
var ConstSet287 = setConstr([97, 122], [65, 90], [48, 57], 95);
var ConstSet288 = setConstr([48, 57]);
var ConstSet289 = setConstr([48, 57]);

function negInt(a_33556982) {
  var result_33556983 = 0;

    result_33556983 = (a_33556982 * -1);

  return result_33556983;

}
var ConstSet290 = setConstr(39, 34);
var ConstSet291 = setConstr(94, [48, 57]);

function absInt(a_33556988) {
    var Temporary1;

  var result_33556989 = 0;

    if ((a_33556988 < 0)) {
    Temporary1 = (a_33556988 * -1);
    }
    else {
    Temporary1 = a_33556988;
    }
    
    result_33556989 = Temporary1;

  return result_33556989;

}
var ConstSet292 = setConstr(21, 17, 20, 18, 19);
var ConstSet293 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
var ConstSet294 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
var ConstSet295 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
var ConstSet296 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
var ConstSet297 = setConstr(9, 10, 11);
var ConstSet298 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
var ConstSet299 = setConstr(9, 10, 11);
var ConstSet300 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
var ConstSet301 = setConstr(9, 10, 11);
var ConstSet302 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
var ConstSet303 = setConstr(12, 18);
var ConstSet304 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
var ConstSet305 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
var ConstSet306 = setConstr(9, 32);
var ConstSet307 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
var ConstSet308 = setConstr(13, 19);
var ConstSet309 = setConstr(13, 19);
var ConstSet310 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
var ConstSet311 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
var ConstSet312 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);

function SetPlus(a_33556915, b_33556916) {
        var result = {};
    for (var elem in a_33556915) { result[elem] = true; }
    for (var elem in b_33556916) { result[elem] = true; }
    return result;
  

  
}
var ConstSet313 = setConstr(13, 19);
var ConstSet314 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
var ConstSet315 = setConstr(13, 19);
var ConstSet316 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
var ConstSet317 = setConstr(13, 19);
var ConstSet318 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
var ConstSet319 = setConstr(12, 18);
var ConstSet320 = setConstr([0, 8], 9, 10, 11, 12, 18, 13, 19, 14, [25, 27]);
      var tokKindToStr_1140853911 = [makeNimstrLit("invalid"), makeNimstrLit("[EOF]"), makeNimstrLit("."), makeNimstrLit("_"), makeNimstrLit("identifier"), makeNimstrLit("string literal"), makeNimstrLit("character set"), makeNimstrLit("("), makeNimstrLit(")"), makeNimstrLit("{"), makeNimstrLit("}"), makeNimstrLit("{@}"), makeNimstrLit("{}"), makeNimstrLit("<-"), makeNimstrLit("/"), makeNimstrLit("*"), makeNimstrLit("+"), makeNimstrLit("&"), makeNimstrLit("!"), makeNimstrLit("?"), makeNimstrLit("@"), makeNimstrLit("built-in"), makeNimstrLit("escaped"), makeNimstrLit("$"), makeNimstrLit("$"), makeNimstrLit("^")];
var ConstSet321 = setConstr([48, 57]);
var ConstSet322 = setConstr([1, 47], [58, 255]);
var ConstSet323 = setConstr(32, [9, 13]);
var ConstSet324 = setConstr([1, 8], [14, 31], [33, 255]);
var ConstSet325 = setConstr([97, 122], [65, 90], 95, [48, 57]);
var ConstSet326 = setConstr([1, 47], [58, 64], [91, 94], 96, [123, 255]);
var ConstSet327 = setConstr([97, 122], [65, 90]);
var ConstSet328 = setConstr([1, 64], [91, 96], [123, 255]);
var ConstSet329 = setConstr([97, 122], [65, 90], 95);
var ConstSet330 = setConstr(12, 18);
var ConstSet331 = setConstr(13, 19);
var ConstSet332 = setConstr([97, 122], [65, 90], [48, 57], 95);
var ConstSet333 = setConstr(0);
var ConstSet334 = setConstr(0, 1);
var ConstSet335 = setConstr(0);
var ConstSet336 = setConstr(0, 1);
var ConstSet337 = setConstr(0);
      var prismCss_1124073502 = {data: [{Field0: 203983520, Field1: makeNimstrLit("okaidia"), Field2: makeNimstrLit("/* PrismJS 1.25.0\x0Ahttps://prismjs.com/download.html#themes=prism-okaidia&languages=markup+css+clike+javascript */\x0Acode[class*=language-],pre[class*=language-]{color:#f8f8f2;background:0 0;text-shadow:0 1px rgba(0,0,0,.3);font-family:Consolas,Monaco,\'Andale Mono\',\'Ubuntu Mono\',monospace;font-size:1em;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none}pre[class*=language-]{padding:1em;margin:.5em 0;overflow:auto;border-radius:.3em}:not(pre)>code[class*=language-],pre[class*=language-]{background:#272822}:not(pre)>code[class*=language-]{padding:.1em;border-radius:.3em;white-space:normal}.token.cdata,.token.comment,.token.doctype,.token.prolog{color:#8292a2}.token.punctuation{color:#f8f8f2}.token.namespace{opacity:.7}.token.constant,.token.deleted,.token.property,.token.symbol,.token.tag{color:#f92672}.token.boolean,.token.number{color:#ae81ff}.token.attr-name,.token.builtin,.token.char,.token.inserted,.token.selector,.token.string{color:#a6e22e}.language-css .token.string,.style .token.string,.token.entity,.token.operator,.token.url,.token.variable{color:#f8f8f2}.token.atrule,.token.attr-value,.token.class-name,.token.function{color:#e6db74}.token.keyword{color:#66d9ef}.token.important,.token.regex{color:#fd971f}.token.bold,.token.important{font-weight:700}.token.italic{font-style:italic}.token.entity{cursor:help}\x0A")}, {Field0: 0, Field1: [], Field2: []}, {Field0: 2098521666, Field1: makeNimstrLit("funky"), Field2: makeNimstrLit("/* PrismJS 1.25.0\x0Ahttps://prismjs.com/download.html#themes=prism-funky&languages=markup+css+clike+javascript */\x0Acode[class*=language-],pre[class*=language-]{font-family:Consolas,Monaco,\'Andale Mono\',\'Ubuntu Mono\',monospace;font-size:1em;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none}pre[class*=language-]{padding:.4em .8em;margin:.5em 0;overflow:auto;background:url(\'data:image/svg+xml;charset=utf-8,<svg%20version%3D\"1.1\"%20xmlns%3D\"http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg\"%20width%3D\"100\"%20height%3D\"100\"%20fill%3D\"rgba(0%2C0%2C0%2C.2)\">%0D%0A<polygon%20points%3D\"0%2C50%2050%2C0%200%2C0\"%20%2F>%0D%0A<polygon%20points%3D\"0%2C100%2050%2C100%20100%2C50%20100%2C0\"%20%2F>%0D%0A<%2Fsvg>\');background-size:1em 1em}code[class*=language-]{background:#000;color:#fff;box-shadow:-.3em 0 0 .3em #000,.3em 0 0 .3em #000}:not(pre)>code[class*=language-]{padding:.2em;border-radius:.3em;box-shadow:none;white-space:normal}.token.cdata,.token.comment,.token.doctype,.token.prolog{color:#aaa}.token.punctuation{color:#999}.token.namespace{opacity:.7}.token.boolean,.token.constant,.token.number,.token.property,.token.symbol,.token.tag{color:#0cf}.token.attr-name,.token.builtin,.token.char,.token.selector,.token.string{color:#ff0}.language-css .token.string,.token.entity,.token.inserted,.token.operator,.token.url,.token.variable{color:#9acd32}.token.atrule,.token.attr-value,.token.keyword{color:#ff1493}.token.important,.token.regex{color:orange}.token.bold,.token.important{font-weight:700}.token.italic{font-style:italic}.token.entity{cursor:help}.token.deleted{color:red}pre.diff-highlight.diff-highlight>code .token.deleted:not(.prefix),pre>code.diff-highlight.diff-highlight .token.deleted:not(.prefix){background-color:rgba(255,0,0,.3);display:inline}pre.diff-highlight.diff-highlight>code .token.inserted:not(.prefix),pre>code.diff-highlight.diff-highlight .token.inserted:not(.prefix){background-color:rgba(0,255,128,.3);display:inline}\x0A")}, {Field0: -1431576765, Field1: makeNimstrLit("funky-x"), Field2: makeNimstrLit("code[class*=language-],pre[class*=language-]{font-family:Consolas,Monaco,\'Andale Mono\',\'Ubuntu Mono\',monospace;font-size:1em;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none}pre[class*=language-]{padding:.4em .8em;margin:.5em 0;overflow:auto;background-color:#000}code[class*=language-]{background:#000;color:#fff;box-shadow:-.3em 0 0 .3em #000,.3em 0 0 .3em #000}:not(pre)>code[class*=language-]{padding:.2em;border-radius:.3em;box-shadow:none;white-space:normal}.token.cdata,.token.comment,.token.doctype,.token.prolog{color:#aaa}.token.punctuation{color:#999}.token.namespace{opacity:.7}.token.boolean,.token.constant,.token.number,.token.property,.token.symbol,.token.tag{color:#0cf}.token.attr-name,.token.builtin,.token.char,.token.selector,.token.string{color:#ff0}.language-css .token.string,.token.entity,.token.inserted,.token.operator,.token.url,.token.variable{color:#9acd32}.token.atrule,.token.attr-value,.token.keyword{color:#ff1493}.token.important,.token.regex{color:orange}.token.bold,.token.important{font-weight:700}.token.italic{font-style:italic}.token.entity{cursor:help}.token.deleted{color:red}pre.diff-highlight.diff-highlight>code .token.deleted:not(.prefix),pre>code.diff-highlight.diff-highlight .token.deleted:not(.prefix){background-color:rgba(255,0,0,.3);display:inline}pre.diff-highlight.diff-highlight>code .token.inserted:not(.prefix),pre>code.diff-highlight.diff-highlight .token.inserted:not(.prefix){background-color:rgba(0,255,128,.3);display:inline}\x0A")}, {Field0: 0, Field1: [], Field2: []}, {Field0: 0, Field1: [], Field2: []}, {Field0: 63010150, Field1: makeNimstrLit("coy"), Field2: makeNimstrLit("/* PrismJS 1.25.0\x0Ahttps://prismjs.com/download.html#themes=prism-coy&languages=markup+css+clike+javascript */\x0Acode[class*=language-],pre[class*=language-]{color:#000;background:0 0;font-family:Consolas,Monaco,\'Andale Mono\',\'Ubuntu Mono\',monospace;font-size:1em;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none}pre[class*=language-]{position:relative;margin:.5em 0;overflow:visible;padding:1px}pre[class*=language-]>code{position:relative;z-index:1;border-left:10px solid #358ccb;box-shadow:-1px 0 0 0 #358ccb,0 0 0 1px #dfdfdf;background-color:#fdfdfd;background-image:linear-gradient(transparent 50%,rgba(69,142,209,.04) 50%);background-size:3em 3em;background-origin:content-box;background-attachment:local}code[class*=language-]{max-height:inherit;height:inherit;padding:0 1em;display:block;overflow:auto}:not(pre)>code[class*=language-],pre[class*=language-]{background-color:#fdfdfd;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;margin-bottom:1em}:not(pre)>code[class*=language-]{position:relative;padding:.2em;border-radius:.3em;color:#c92c2c;border:1px solid rgba(0,0,0,.1);display:inline;white-space:normal}pre[class*=language-]:after,pre[class*=language-]:before{content:\'\';display:block;position:absolute;bottom:.75em;left:.18em;width:40%;height:20%;max-height:13em;box-shadow:0 13px 8px #979797;-webkit-transform:rotate(-2deg);-moz-transform:rotate(-2deg);-ms-transform:rotate(-2deg);-o-transform:rotate(-2deg);transform:rotate(-2deg)}pre[class*=language-]:after{right:.75em;left:auto;-webkit-transform:rotate(2deg);-moz-transform:rotate(2deg);-ms-transform:rotate(2deg);-o-transform:rotate(2deg);transform:rotate(2deg)}.token.block-comment,.token.cdata,.token.comment,.token.doctype,.token.prolog{color:#7d8b99}.token.punctuation{color:#5f6364}.token.boolean,.token.constant,.token.deleted,.token.function-name,.token.number,.token.property,.token.symbol,.token.tag{color:#c92c2c}.token.attr-name,.token.builtin,.token.char,.token.function,.token.inserted,.token.selector,.token.string{color:#2f9c0a}.token.entity,.token.operator,.token.url,.token.variable{color:#a67f59;background:rgba(255,255,255,.5)}.token.atrule,.token.attr-value,.token.class-name,.token.keyword{color:#1990b8}.token.important,.token.regex{color:#e90}.language-css .token.string,.style .token.string{color:#a67f59;background:rgba(255,255,255,.5)}.token.important{font-weight:400}.token.bold{font-weight:700}.token.italic{font-style:italic}.token.entity{cursor:help}.token.namespace{opacity:.7}@media screen and (max-width:767px){pre[class*=language-]:after,pre[class*=language-]:before{bottom:14px;box-shadow:none}}pre[class*=language-].line-numbers.line-numbers{padding-left:0}pre[class*=language-].line-numbers.line-numbers code{padding-left:3.8em}pre[class*=language-].line-numbers.line-numbers .line-numbers-rows{left:0}pre[class*=language-][data-line]{padding-top:0;padding-bottom:0;padding-left:0}pre[data-line] code{position:relative;padding-left:4em}pre .line-highlight{margin-top:0}\x0A")}, {Field0: 0, Field1: [], Field2: []}, {Field0: 0, Field1: [], Field2: []}, {Field0: -1356231671, Field1: makeNimstrLit("tomorrow-night"), Field2: makeNimstrLit("/* PrismJS 1.25.0\x0Ahttps://prismjs.com/download.html#themes=prism-tomorrow&languages=markup+css+clike+javascript */\x0Acode[class*=language-],pre[class*=language-]{color:#ccc;background:0 0;font-family:Consolas,Monaco,\'Andale Mono\',\'Ubuntu Mono\',monospace;font-size:1em;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none}pre[class*=language-]{padding:1em;margin:.5em 0;overflow:auto}:not(pre)>code[class*=language-],pre[class*=language-]{background:#2d2d2d}:not(pre)>code[class*=language-]{padding:.1em;border-radius:.3em;white-space:normal}.token.block-comment,.token.cdata,.token.comment,.token.doctype,.token.prolog{color:#999}.token.punctuation{color:#ccc}.token.attr-name,.token.deleted,.token.namespace,.token.tag{color:#e2777a}.token.function-name{color:#6196cc}.token.boolean,.token.function,.token.number{color:#f08d49}.token.class-name,.token.constant,.token.property,.token.symbol{color:#f8c555}.token.atrule,.token.builtin,.token.important,.token.keyword,.token.selector{color:#cc99cd}.token.attr-value,.token.char,.token.regex,.token.string,.token.variable{color:#7ec699}.token.entity,.token.operator,.token.url{color:#67cdcc}.token.bold,.token.important{font-weight:700}.token.italic{font-style:italic}.token.entity{cursor:help}.token.inserted{color:green}\x0A")}, {Field0: 0, Field1: [], Field2: []}, {Field0: 0, Field1: [], Field2: []}, {Field0: 0, Field1: [], Field2: []}, {Field0: 0, Field1: [], Field2: []}, {Field0: -1944989682, Field1: makeNimstrLit("twilight"), Field2: makeNimstrLit("/* PrismJS 1.25.0\x0Ahttps://prismjs.com/download.html#themes=prism-twilight&languages=markup+css+clike+javascript */\x0Acode[class*=language-],pre[class*=language-]{color:#fff;background:0 0;font-family:Consolas,Monaco,\'Andale Mono\',\'Ubuntu Mono\',monospace;font-size:1em;text-align:left;text-shadow:0 -.1em .2em #000;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none}:not(pre)>code[class*=language-],pre[class*=language-]{background:#141414}pre[class*=language-]{border-radius:.5em;border:.3em solid #545454;box-shadow:1px 1px .5em #000 inset;margin:.5em 0;overflow:auto;padding:1em}pre[class*=language-]::-moz-selection{background:#27292a}pre[class*=language-]::selection{background:#27292a}code[class*=language-] ::-moz-selection,code[class*=language-]::-moz-selection,pre[class*=language-] ::-moz-selection,pre[class*=language-]::-moz-selection{text-shadow:none;background:hsla(0,0%,93%,.15)}code[class*=language-] ::selection,code[class*=language-]::selection,pre[class*=language-] ::selection,pre[class*=language-]::selection{text-shadow:none;background:hsla(0,0%,93%,.15)}:not(pre)>code[class*=language-]{border-radius:.3em;border:.13em solid #545454;box-shadow:1px 1px .3em -.1em #000 inset;padding:.15em .2em .05em;white-space:normal}.token.cdata,.token.comment,.token.doctype,.token.prolog{color:#777}.token.punctuation{opacity:.7}.token.namespace{opacity:.7}.token.boolean,.token.deleted,.token.number,.token.tag{color:#ce6849}.token.builtin,.token.constant,.token.keyword,.token.property,.token.selector,.token.symbol{color:#f9ed99}.language-css .token.string,.style .token.string,.token.attr-name,.token.attr-value,.token.char,.token.entity,.token.inserted,.token.operator,.token.string,.token.url,.token.variable{color:#909e6a}.token.atrule{color:#7385a5}.token.important,.token.regex{color:#e8c062}.token.bold,.token.important{font-weight:700}.token.italic{font-style:italic}.token.entity{cursor:help}.language-markup .token.attr-name,.language-markup .token.punctuation,.language-markup .token.tag{color:#ac885c}.token{position:relative;z-index:1}.line-highlight.line-highlight{background:hsla(0,0%,33%,.25);background:linear-gradient(to right,hsla(0,0%,33%,.1) 70%,hsla(0,0%,33%,0));border-bottom:1px dashed #545454;border-top:1px dashed #545454;margin-top:.75em;z-index:0}.line-highlight.line-highlight:before,.line-highlight.line-highlight[data-end]:after{background-color:#8693a6;color:#f4f1ef}\x0A")}, {Field0: 0, Field1: [], Field2: []}, {Field0: 0, Field1: [], Field2: []}, {Field0: 0, Field1: [], Field2: []}, {Field0: 0, Field1: [], Field2: []}, {Field0: 0, Field1: [], Field2: []}, {Field0: 0, Field1: [], Field2: []}, {Field0: 0, Field1: [], Field2: []}, {Field0: 0, Field1: [], Field2: []}, {Field0: 0, Field1: [], Field2: []}, {Field0: 0, Field1: [], Field2: []}, {Field0: 0, Field1: [], Field2: []}, {Field0: 0, Field1: [], Field2: []}, {Field0: 0, Field1: [], Field2: []}, {Field0: 0, Field1: [], Field2: []}, {Field0: 767273821, Field1: makeNimstrLit("dark"), Field2: makeNimstrLit("/* PrismJS 1.25.0\x0Ahttps://prismjs.com/download.html#themes=prism-dark&languages=markup+css+clike+javascript */\x0Acode[class*=language-],pre[class*=language-]{color:#fff;background:0 0;text-shadow:0 -.1em .2em #000;font-family:Consolas,Monaco,\'Andale Mono\',\'Ubuntu Mono\',monospace;font-size:1em;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none}@media print{code[class*=language-],pre[class*=language-]{text-shadow:none}}:not(pre)>code[class*=language-],pre[class*=language-]{background:#4c3f33}pre[class*=language-]{padding:1em;margin:.5em 0;overflow:auto;border:.3em solid #7a6651;border-radius:.5em;box-shadow:1px 1px .5em #000 inset}:not(pre)>code[class*=language-]{padding:.15em .2em .05em;border-radius:.3em;border:.13em solid #7a6651;box-shadow:1px 1px .3em -.1em #000 inset;white-space:normal}.token.cdata,.token.comment,.token.doctype,.token.prolog{color:#997f66}.token.punctuation{opacity:.7}.token.namespace{opacity:.7}.token.boolean,.token.constant,.token.number,.token.property,.token.symbol,.token.tag{color:#d1939e}.token.attr-name,.token.builtin,.token.char,.token.inserted,.token.selector,.token.string{color:#bce051}.language-css .token.string,.style .token.string,.token.entity,.token.operator,.token.url,.token.variable{color:#f4b73d}.token.atrule,.token.attr-value,.token.keyword{color:#d1939e}.token.important,.token.regex{color:#e90}.token.bold,.token.important{font-weight:700}.token.italic{font-style:italic}.token.entity{cursor:help}.token.deleted{color:red}\x0A")}, {Field0: -2023672578, Field1: makeNimstrLit("solarized-light"), Field2: makeNimstrLit("/* PrismJS 1.25.0\x0Ahttps://prismjs.com/download.html#themes=prism-solarizedlight&languages=markup+css+clike+javascript */\x0Acode[class*=language-],pre[class*=language-]{color:#657b83;font-family:Consolas,Monaco,\'Andale Mono\',\'Ubuntu Mono\',monospace;font-size:1em;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none}code[class*=language-] ::-moz-selection,code[class*=language-]::-moz-selection,pre[class*=language-] ::-moz-selection,pre[class*=language-]::-moz-selection{background:#073642}code[class*=language-] ::selection,code[class*=language-]::selection,pre[class*=language-] ::selection,pre[class*=language-]::selection{background:#073642}pre[class*=language-]{padding:1em;margin:.5em 0;overflow:auto;border-radius:.3em}:not(pre)>code[class*=language-],pre[class*=language-]{background-color:#fdf6e3}:not(pre)>code[class*=language-]{padding:.1em;border-radius:.3em}.token.cdata,.token.comment,.token.doctype,.token.prolog{color:#93a1a1}.token.punctuation{color:#586e75}.token.namespace{opacity:.7}.token.boolean,.token.constant,.token.deleted,.token.number,.token.property,.token.symbol,.token.tag{color:#268bd2}.token.attr-name,.token.builtin,.token.char,.token.inserted,.token.selector,.token.string,.token.url{color:#2aa198}.token.entity{color:#657b83;background:#eee8d5}.token.atrule,.token.attr-value,.token.keyword{color:#859900}.token.class-name,.token.function{color:#b58900}.token.important,.token.regex,.token.variable{color:#cb4b16}.token.bold,.token.important{font-weight:700}.token.italic{font-style:italic}.token.entity{cursor:help}\x0A")}, {Field0: 1120495519, Field1: makeNimstrLit("default"), Field2: makeNimstrLit("/* PrismJS 1.25.0\x0Ahttps://prismjs.com/download.html#themes=prism&languages=markup+css+clike+javascript */\x0Acode[class*=language-],pre[class*=language-]{color:#000;background:0 0;text-shadow:0 1px #fff;font-family:Consolas,Monaco,\'Andale Mono\',\'Ubuntu Mono\',monospace;font-size:1em;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none}code[class*=language-] ::-moz-selection,code[class*=language-]::-moz-selection,pre[class*=language-] ::-moz-selection,pre[class*=language-]::-moz-selection{text-shadow:none;background:#b3d4fc}code[class*=language-] ::selection,code[class*=language-]::selection,pre[class*=language-] ::selection,pre[class*=language-]::selection{text-shadow:none;background:#b3d4fc}@media print{code[class*=language-],pre[class*=language-]{text-shadow:none}}pre[class*=language-]{padding:1em;margin:.5em 0;overflow:auto}:not(pre)>code[class*=language-],pre[class*=language-]{background:#f5f2f0}:not(pre)>code[class*=language-]{padding:.1em;border-radius:.3em;white-space:normal}.token.cdata,.token.comment,.token.doctype,.token.prolog{color:#708090}.token.punctuation{color:#999}.token.namespace{opacity:.7}.token.boolean,.token.constant,.token.deleted,.token.number,.token.property,.token.symbol,.token.tag{color:#905}.token.attr-name,.token.builtin,.token.char,.token.inserted,.token.selector,.token.string{color:#690}.language-css .token.string,.style .token.string,.token.entity,.token.operator,.token.url{color:#9a6e3a;background:hsla(0,0%,100%,.5)}.token.atrule,.token.attr-value,.token.keyword{color:#07a}.token.class-name,.token.function{color:#dd4a68}.token.important,.token.regex,.token.variable{color:#e90}.token.bold,.token.important{font-weight:700}.token.italic{font-style:italic}.token.entity{cursor:help}\x0A")}], counter: 9};
var ConstSet338 = setConstr(0);
var ConstSet339 = setConstr(32, 9, 11, 13, 10, 12);
var ConstSet340 = setConstr(32, 9, 11, 13, 10, 12);
var ConstSet341 = setConstr(0);
var ConstSet342 = setConstr([97, 122], [65, 90], [48, 57], 95);
var ConstSet343 = setConstr([97, 122], [65, 90], [48, 57], 95);
var ConstSet344 = setConstr([48, 57]);
var ConstSet345 = setConstr([48, 57]);
var ConstSet346 = setConstr(101, 69);
var ConstSet347 = setConstr([48, 57]);
var ConstSet348 = setConstr([48, 57]);

function nimParseBiggestFloat(s_33557273, number_33557274, number_33557274_Idx, start_33557275) {
    var Temporary1;

  var result_33557276 = 0;

  BeforeRet: do {
    var sign_33557277 = false;
    var i_33557278 = start_33557275;
    if ((s_33557273[i_33557278] == 43)) {
    i_33557278 += 1;
    }
    else {
    if ((s_33557273[i_33557278] == 45)) {
    sign_33557277 = true;
    i_33557278 += 1;
    }
    }
    if (((s_33557273[i_33557278] == 78) || (s_33557273[i_33557278] == 110))) {
    if (((s_33557273[(i_33557278 + 1)] == 65) || (s_33557273[(i_33557278 + 1)] == 97))) {
    if (((s_33557273[(i_33557278 + 2)] == 78) || (s_33557273[(i_33557278 + 2)] == 110))) {
    if (!((ConstSet342[s_33557273[(i_33557278 + 3)]] != undefined))) {
    number_33557274[number_33557274_Idx] = NaN;
    result_33557276 = ((i_33557278 + 3) - start_33557275);
    break BeforeRet;
    }
    
    }
    
    }
    
    result_33557276 = 0;
    break BeforeRet;
    }
    
    if (((s_33557273[i_33557278] == 73) || (s_33557273[i_33557278] == 105))) {
    if (((s_33557273[(i_33557278 + 1)] == 78) || (s_33557273[(i_33557278 + 1)] == 110))) {
    if (((s_33557273[(i_33557278 + 2)] == 70) || (s_33557273[(i_33557278 + 2)] == 102))) {
    if (!((ConstSet343[s_33557273[(i_33557278 + 3)]] != undefined))) {
    if (sign_33557277) {
    Temporary1 = -Infinity;
    }
    else {
    Temporary1 = Infinity;
    }
    
    number_33557274[number_33557274_Idx] = Temporary1;
    result_33557276 = ((i_33557278 + 3) - start_33557275);
    break BeforeRet;
    }
    
    }
    
    }
    
    result_33557276 = 0;
    break BeforeRet;
    }
    
    var buf_33557295 = [];
    if (sign_33557277) {
    addChar(buf_33557295, 45);;
    }
    
    Label2: do {
        Label3: while (true) {
        if (!(ConstSet344[s_33557273[i_33557278]] != undefined)) break Label3;
          addChar(buf_33557295, s_33557273[i_33557278]);;
          i_33557278 += 1;
          Label4: do {
              Label5: while (true) {
              if (!(s_33557273[i_33557278] == 95)) break Label5;
                i_33557278 += 1;
              }
          } while (false);
        }
    } while (false);
    if ((s_33557273[i_33557278] == 46)) {
    addChar(buf_33557295, s_33557273[i_33557278]);;
    i_33557278 += 1;
    Label6: do {
        Label7: while (true) {
        if (!(ConstSet345[s_33557273[i_33557278]] != undefined)) break Label7;
          addChar(buf_33557295, s_33557273[i_33557278]);;
          i_33557278 += 1;
          Label8: do {
              Label9: while (true) {
              if (!(s_33557273[i_33557278] == 95)) break Label9;
                i_33557278 += 1;
              }
          } while (false);
        }
    } while (false);
    }
    
    if (((buf_33557295).length == (sign_33557277 ? 1 : 0))) {
    result_33557276 = 0;
    break BeforeRet;
    }
    
    if ((ConstSet346[s_33557273[i_33557278]] != undefined)) {
    addChar(buf_33557295, s_33557273[i_33557278]);;
    i_33557278 += 1;
    if ((s_33557273[i_33557278] == 43)) {
    i_33557278 += 1;
    }
    else {
    if ((s_33557273[i_33557278] == 45)) {
    addChar(buf_33557295, s_33557273[i_33557278]);;
    i_33557278 += 1;
    }
    }
    if (!((ConstSet347[s_33557273[i_33557278]] != undefined))) {
    result_33557276 = 0;
    break BeforeRet;
    }
    
    Label10: do {
        Label11: while (true) {
        if (!(ConstSet348[s_33557273[i_33557278]] != undefined)) break Label11;
          addChar(buf_33557295, s_33557273[i_33557278]);;
          i_33557278 += 1;
          Label12: do {
              Label13: while (true) {
              if (!(s_33557273[i_33557278] == 95)) break Label13;
                i_33557278 += 1;
              }
          } while (false);
        }
    } while (false);
    }
    
    number_33557274[number_33557274_Idx] = parseFloatNative_33557268(buf_33557295);
    result_33557276 = (i_33557278 - start_33557275);
  } while (false);

  return result_33557276;

}
var ConstSet349 = setConstr(46, 44);
var ConstSet350 = setConstr([65, 90]);
var ConstSet351 = setConstr([97, 122]);
var ConstSet352 = setConstr(0);
var ConstSet353 = setConstr(0);
var ConstSet354 = setConstr(2);
var ConstSet355 = setConstr(47, 47);
var ConstSet356 = setConstr(47, 47);
var ConstSet357 = setConstr(47, 47);
var ConstSet358 = setConstr(47, 47);
var ConstSet359 = setConstr(47, 47);
var ConstSet360 = setConstr(47, 47);
var ConstSet361 = setConstr(47, 47);
var ConstSet362 = setConstr(47, 47);
var ConstSet363 = setConstr(47, 47);
var ConstSet364 = setConstr(47, 47);
var ConstSet365 = setConstr(47, 47);
var ConstSet366 = setConstr(47, 47);
var ConstSet367 = setConstr(47, 47);
var ConstSet368 = setConstr(2);
var ConstSet369 = setConstr(32, 9, 11, 13, 10, 12);
var ConstSet370 = setConstr(32, 9, 11, 13, 10, 12);
var ConstSet371 = setConstr(47, 47);
    var FormatOpen_452985184 = ["rb", "wb", "w+b", "r+b", "ab"];
var ConstSet372 = setConstr(0);
var ConstSet373 = setConstr(1);
var ConstSet374 = setConstr(0, 1);
var ConstSet375 = setConstr([65, 90]);
var ConstSet376 = setConstr(0);
var ConstSet377 = setConstr(0);
var ConstSet378 = setConstr(10);
var ConstSet379 = setConstr(13, 10);
var ConstSet380 = setConstr(13, 10);
var ConstSet381 = setConstr(0);
var ConstSet382 = setConstr(0);
var ConstSet383 = setConstr(0);
var ConstSet384 = setConstr(0);
              var htmlTags_1124073496 = [makeNimstrLit("!--"), makeNimstrLit("!DOCTYPE"), makeNimstrLit("a"), makeNimstrLit("abbr"), makeNimstrLit("acronym"), makeNimstrLit("address"), makeNimstrLit("applet"), makeNimstrLit("area"), makeNimstrLit("article"), makeNimstrLit("aside"), makeNimstrLit("audio"), makeNimstrLit("b"), makeNimstrLit("base"), makeNimstrLit("basefont"), makeNimstrLit("bdi"), makeNimstrLit("bdo"), makeNimstrLit("big"), makeNimstrLit("blockquote"), makeNimstrLit("body"), makeNimstrLit("br"), makeNimstrLit("button"), makeNimstrLit("canvas"), makeNimstrLit("caption"), makeNimstrLit("center"), makeNimstrLit("circle"), makeNimstrLit("cite"), makeNimstrLit("code"), makeNimstrLit("col"), makeNimstrLit("colgroup"), makeNimstrLit("data"), makeNimstrLit("datalist"), makeNimstrLit("dd"), makeNimstrLit("del"), makeNimstrLit("details"), makeNimstrLit("dfn"), makeNimstrLit("dialog"), makeNimstrLit("dir"), makeNimstrLit("div"), makeNimstrLit("dl"), makeNimstrLit("dt"), makeNimstrLit("em"), makeNimstrLit("embed"), makeNimstrLit("fieldset"), makeNimstrLit("figcaption"), makeNimstrLit("figure"), makeNimstrLit("font"), makeNimstrLit("footer"), makeNimstrLit("form"), makeNimstrLit("frame"), makeNimstrLit("frameset"), makeNimstrLit("g"), makeNimstrLit("h1"), makeNimstrLit("h2"), makeNimstrLit("h3"), makeNimstrLit("h4"), makeNimstrLit("h5"), makeNimstrLit("h6"), makeNimstrLit("head"), makeNimstrLit("header"), makeNimstrLit("hr"), makeNimstrLit("html"), makeNimstrLit("i"), makeNimstrLit("iframe"), makeNimstrLit("img"), makeNimstrLit("input"), makeNimstrLit("ins"), makeNimstrLit("kbd"), makeNimstrLit("label"), makeNimstrLit("legend"), makeNimstrLit("li"), makeNimstrLit("line"), makeNimstrLit("link"), makeNimstrLit("main"), makeNimstrLit("map"), makeNimstrLit("mark"), makeNimstrLit("meta"), makeNimstrLit("meter"), makeNimstrLit("nav"), makeNimstrLit("noframes"), makeNimstrLit("noscript"), makeNimstrLit("object"), makeNimstrLit("ol"), makeNimstrLit("optgroup"), makeNimstrLit("option"), makeNimstrLit("output"), makeNimstrLit("p"), makeNimstrLit("param"), makeNimstrLit("path"), makeNimstrLit("picture"), makeNimstrLit("polyline"), makeNimstrLit("pre"), makeNimstrLit("progress"), makeNimstrLit("q"), makeNimstrLit("rect"), makeNimstrLit("rp"), makeNimstrLit("rt"), makeNimstrLit("ruby"), makeNimstrLit("s"), makeNimstrLit("samp"), makeNimstrLit("script"), makeNimstrLit("section"), makeNimstrLit("select"), makeNimstrLit("small"), makeNimstrLit("source"), makeNimstrLit("span"), makeNimstrLit("strike"), makeNimstrLit("strong"), makeNimstrLit("style"), makeNimstrLit("sub"), makeNimstrLit("summary"), makeNimstrLit("sup"), makeNimstrLit("svg"), makeNimstrLit("table"), makeNimstrLit("tbody"), makeNimstrLit("td"), makeNimstrLit("template"), makeNimstrLit("textarea"), makeNimstrLit("tfoot"), makeNimstrLit("th"), makeNimstrLit("thead"), makeNimstrLit("time"), makeNimstrLit("title"), makeNimstrLit("tr"), makeNimstrLit("track"), makeNimstrLit("tt"), makeNimstrLit("u"), makeNimstrLit("ul"), makeNimstrLit("var"), makeNimstrLit("video"), makeNimstrLit("wbr")];
                    var htmlSelfClosingTags_1124073497 = [makeNimstrLit("area"), makeNimstrLit("base"), makeNimstrLit("br"), makeNimstrLit("circle"), makeNimstrLit("col"), makeNimstrLit("embed"), makeNimstrLit("hr"), makeNimstrLit("img"), makeNimstrLit("input"), makeNimstrLit("line"), makeNimstrLit("link"), makeNimstrLit("meta"), makeNimstrLit("param"), makeNimstrLit("polyline"), makeNimstrLit("source"), makeNimstrLit("path"), makeNimstrLit("rect"), makeNimstrLit("track"), makeNimstrLit("wbr")];
var ConstSet385 = setConstr(0);
var ConstSet386 = setConstr(0);
      var templates_486539276 = [makeNimstrLit("<!DOCTYPE html><html lang=\"$3\"><head><meta charset=\"utf-8\"><meta name=\"generator\" content=\"xidoc\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">$1</head><body>$2</body></html>"), makeNimstrLit("\\documentclass{article}\\usepackage[utf8]{inputenc}\\usepackage[$3]{babel}\\usepackage{geometry}$1\\begin{document}$2\\end{document}"), makeNimstrLit("$1$2")];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var objectID_1056964770 = [0];

function initLock_1610612796(lock_1610612797) {
  
}
var gFunsLock_1593835534 = [({})];
var gFuns_1593835535 = [[]];
initLock_1610612796(gFunsLock_1593835534[0]);
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.katex=t():e.katex=t()}("undefined"!=typeof self?self:this,(function(){return function(){"use strict";var e={d:function(t,r){for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}},t={};e.d(t,{default:function(){return Zn}});var r=function e(t,r){this.position=void 0;var n,a="KaTeX parse error: "+t,i=r&&r.loc;if(i&&i.start<=i.end){var o=i.lexer.input;n=i.start;var s=i.end;n===o.length?a+=" at end of input: ":a+=" at position "+(n+1)+": ";var l=o.slice(n,s).replace(/[^]/g,"$&\u0332");a+=(n>15?"\u2026"+o.slice(n-15,n):o.slice(0,n))+l+(s+15<o.length?o.slice(s,s+15)+"\u2026":o.slice(s))}var h=new Error(a);return h.name="ParseError",h.__proto__=e.prototype,h.position=n,h};r.prototype.__proto__=Error.prototype;var n=r,a=/([A-Z])/g,i={"&":"&amp;",">":"&gt;","<":"&lt;",'"':"&quot;","'":"&#x27;"},o=/[&><"']/g;var s=function e(t){return"ordgroup"===t.type||"color"===t.type?1===t.body.length?e(t.body[0]):t:"font"===t.type?e(t.body):t},l={contains:function(e,t){return-1!==e.indexOf(t)},deflt:function(e,t){return void 0===e?t:e},escape:function(e){return String(e).replace(o,(function(e){return i[e]}))},hyphenate:function(e){return e.replace(a,"-$1").toLowerCase()},getBaseElem:s,isCharacterBox:function(e){var t=s(e);return"mathord"===t.type||"textord"===t.type||"atom"===t.type},protocolFromUrl:function(e){var t=/^\s*([^\\/#]*?)(?::|&#0*58|&#x0*3a)/i.exec(e);return null!=t?t[1]:"_relative"}},h=function(){function e(e){this.displayMode=void 0,this.output=void 0,this.leqno=void 0,this.fleqn=void 0,this.throwOnError=void 0,this.errorColor=void 0,this.macros=void 0,this.minRuleThickness=void 0,this.colorIsTextColor=void 0,this.strict=void 0,this.trust=void 0,this.maxSize=void 0,this.maxExpand=void 0,this.globalGroup=void 0,e=e||{},this.displayMode=l.deflt(e.displayMode,!1),this.output=l.deflt(e.output,"htmlAndMathml"),this.leqno=l.deflt(e.leqno,!1),this.fleqn=l.deflt(e.fleqn,!1),this.throwOnError=l.deflt(e.throwOnError,!0),this.errorColor=l.deflt(e.errorColor,"#cc0000"),this.macros=e.macros||{},this.minRuleThickness=Math.max(0,l.deflt(e.minRuleThickness,0)),this.colorIsTextColor=l.deflt(e.colorIsTextColor,!1),this.strict=l.deflt(e.strict,"warn"),this.trust=l.deflt(e.trust,!1),this.maxSize=Math.max(0,l.deflt(e.maxSize,1/0)),this.maxExpand=Math.max(0,l.deflt(e.maxExpand,1e3)),this.globalGroup=l.deflt(e.globalGroup,!1)}var t=e.prototype;return t.reportNonstrict=function(e,t,r){var a=this.strict;if("function"==typeof a&&(a=a(e,t,r)),a&&"ignore"!==a){if(!0===a||"error"===a)throw new n("LaTeX-incompatible input and strict mode is set to 'error': "+t+" ["+e+"]",r);"warn"===a?"undefined"!=typeof console&&console.warn("LaTeX-incompatible input and strict mode is set to 'warn': "+t+" ["+e+"]"):"undefined"!=typeof console&&console.warn("LaTeX-incompatible input and strict mode is set to unrecognized '"+a+"': "+t+" ["+e+"]")}},t.useStrictBehavior=function(e,t,r){var n=this.strict;if("function"==typeof n)try{n=n(e,t,r)}catch(e){n="error"}return!(!n||"ignore"===n)&&(!0===n||"error"===n||("warn"===n?("undefined"!=typeof console&&console.warn("LaTeX-incompatible input and strict mode is set to 'warn': "+t+" ["+e+"]"),!1):("undefined"!=typeof console&&console.warn("LaTeX-incompatible input and strict mode is set to unrecognized '"+n+"': "+t+" ["+e+"]"),!1)))},t.isTrusted=function(e){e.url&&!e.protocol&&(e.protocol=l.protocolFromUrl(e.url));var t="function"==typeof this.trust?this.trust(e):this.trust;return Boolean(t)},e}(),m=function(){function e(e,t,r){this.id=void 0,this.size=void 0,this.cramped=void 0,this.id=e,this.size=t,this.cramped=r}var t=e.prototype;return t.sup=function(){return c[u[this.id]]},t.sub=function(){return c[p[this.id]]},t.fracNum=function(){return c[d[this.id]]},t.fracDen=function(){return c[f[this.id]]},t.cramp=function(){return c[g[this.id]]},t.text=function(){return c[v[this.id]]},t.isTight=function(){return this.size>=2},e}(),c=[new m(0,0,!1),new m(1,0,!0),new m(2,1,!1),new m(3,1,!0),new m(4,2,!1),new m(5,2,!0),new m(6,3,!1),new m(7,3,!0)],u=[4,5,4,5,6,7,6,7],p=[5,5,5,5,7,7,7,7],d=[2,3,4,5,6,7,6,7],f=[3,3,5,5,7,7,7,7],g=[1,1,3,3,5,5,7,7],v=[0,1,2,3,2,3,2,3],b={DISPLAY:c[0],TEXT:c[2],SCRIPT:c[4],SCRIPTSCRIPT:c[6]},y=[{name:"latin",blocks:[[256,591],[768,879]]},{name:"cyrillic",blocks:[[1024,1279]]},{name:"armenian",blocks:[[1328,1423]]},{name:"brahmic",blocks:[[2304,4255]]},{name:"georgian",blocks:[[4256,4351]]},{name:"cjk",blocks:[[12288,12543],[19968,40879],[65280,65376]]},{name:"hangul",blocks:[[44032,55215]]}];var x=[];function w(e){for(var t=0;t<x.length;t+=2)if(e>=x[t]&&e<=x[t+1])return!0;return!1}y.forEach((function(e){return e.blocks.forEach((function(e){return x.push.apply(x,e)}))}));var k=80,S={doubleleftarrow:"M262 157\nl10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3\n 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28\n 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5\nc2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5\n 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87\n-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7\n-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z\nm8 0v40h399730v-40zm0 194v40h399730v-40z",doublerightarrow:"M399738 392l\n-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5\n 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88\n-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68\n-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18\n-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782\nc-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3\n-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z",leftarrow:"M400000 241H110l3-3c68.7-52.7 113.7-120\n 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8\n-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247\nc-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208\n 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3\n 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202\n l-3-3h399890zM100 241v40h399900v-40z",leftbrace:"M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117\n-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7\n 5-6 9-10 13-.7 1-7.3 1-20 1H6z",leftbraceunder:"M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z",leftgroup:"M400000 80\nH435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0\n 435 0h399565z",leftgroupunder:"M400000 262\nH435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219\n 435 219h399565z",leftharpoon:"M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3\n-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5\n-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7\n-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z",leftharpoonplus:"M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5\n 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3\n-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7\n-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z\nm0 0v40h400000v-40z",leftharpoondown:"M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333\n 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5\n 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667\n-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z",leftharpoondownplus:"M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12\n 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7\n-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0\nv40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z",lefthook:"M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5\n-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3\n-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21\n 71.5 23h399859zM103 281v-40h399897v40z",leftlinesegment:"M40 281 V428 H0 V94 H40 V241 H400000 v40z\nM40 281 V428 H0 V94 H40 V241 H400000 v40z",leftmapsto:"M40 281 V448H0V74H40V241H400000v40z\nM40 281 V448H0V74H40V241H400000v40z",leftToFrom:"M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23\n-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8\nc28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3\n 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z",longequal:"M0 50 h400000 v40H0z m0 194h40000v40H0z\nM0 50 h400000 v40H0z m0 194h40000v40H0z",midbrace:"M200428 334\nc-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14\n-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7\n 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11\n 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z",midbraceunder:"M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z",oiintSize1:"M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6\n-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2z\nm368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.8\n60.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z",oiintSize2:"M757.8 100.1c384.7 0 451.1 137.6 451.1 230 0 91.3-66.4 228.8\n-451.1 228.8-386.3 0-452.7-137.5-452.7-228.8 0-92.4 66.4-230 452.7-230z\nm502.4 230c0-111.2-82.4-277.2-502.4-277.2s-504 166-504 277.2\nc0 110 84 276 504 276s502.4-166 502.4-276z",oiiintSize1:"M681.4 71.6c408.9 0 480.5 106.8 480.5 178.2 0 70.8-71.6 177.6\n-480.5 177.6S202.1 320.6 202.1 249.8c0-71.4 70.5-178.2 479.3-178.2z\nm525.8 178.2c0-86.4-86.8-215.4-525.7-215.4-437.9 0-524.7 129-524.7 215.4 0\n85.8 86.8 214.8 524.7 214.8 438.9 0 525.7-129 525.7-214.8z",oiiintSize2:"M1021.2 53c603.6 0 707.8 165.8 707.8 277.2 0 110-104.2 275.8\n-707.8 275.8-606 0-710.2-165.8-710.2-275.8C311 218.8 415.2 53 1021.2 53z\nm770.4 277.1c0-131.2-126.4-327.6-770.5-327.6S248.4 198.9 248.4 330.1\nc0 130 128.8 326.4 772.7 326.4s770.5-196.4 770.5-326.4z",rightarrow:"M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z",rightbrace:"M400000 542l\n-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5\ns-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1\nc124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z",rightbraceunder:"M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z",rightgroup:"M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0\n 3-1 3-3v-38c-76-158-257-219-435-219H0z",rightgroupunder:"M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18\n 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z",rightharpoon:"M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3\n-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2\n-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58\n 69.2 92 94.5zm0 0v40h399900v-40z",rightharpoonplus:"M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11\n-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7\n 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z\nm0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z",rightharpoondown:"M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8\n 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5\n-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95\n-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z",rightharpoondownplus:"M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8\n 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3\n 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3\n-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z\nm0-194v40h400000v-40zm0 0v40h400000v-40z",righthook:"M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3\n 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0\n-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21\n 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z",rightlinesegment:"M399960 241 V94 h40 V428 h-40 V281 H0 v-40z\nM399960 241 V94 h40 V428 h-40 V281 H0 v-40z",rightToFrom:"M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23\n 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32\n-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142\n-167z M100 147v40h399900v-40zM0 341v40h399900v-40z",twoheadleftarrow:"M0 167c68 40\n 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69\n-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3\n-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19\n-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101\n 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z",twoheadrightarrow:"M400000 167\nc-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3\n 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42\n 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333\n-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70\n 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z",tilde1:"M200 55.538c-77 0-168 73.953-177 73.953-3 0-7\n-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0\n 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0\n 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128\n-68.267.847-113-73.952-191-73.952z",tilde2:"M344 55.266c-142 0-300.638 81.316-311.5 86.418\n-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9\n 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114\nc1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751\n 181.476 676 181.476c-149 0-189-126.21-332-126.21z",tilde3:"M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457\n-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0\n 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697\n 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696\n -338 0-409-156.573-744-156.573z",tilde4:"M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345\n-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409\n 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9\n 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409\n -175.236-744-175.236z",vec:"M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z",widehat1:"M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z",widehat2:"M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",widehat3:"M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",widehat4:"M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",widecheck1:"M529,159h5l519,-115c5,-1,9,-5,9,-10c0,-1,-1,-2,-1,-3l-4,-22c-1,\n-5,-5,-9,-11,-9h-2l-512,92l-513,-92h-2c-5,0,-9,4,-11,9l-5,22c-1,6,2,12,8,13z",widecheck2:"M1181,220h2l1171,-176c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,153l-1167,-153h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",widecheck3:"M1181,280h2l1171,-236c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,213l-1167,-213h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",widecheck4:"M1181,340h2l1171,-296c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,273l-1167,-273h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",baraboveleftarrow:"M400000 620h-399890l3 -3c68.7 -52.7 113.7 -120 135 -202\nc4 -14.7 6 -23 6 -25c0 -7.3 -7 -11 -21 -11c-8 0 -13.2 0.8 -15.5 2.5\nc-2.3 1.7 -4.2 5.8 -5.5 12.5c-1.3 4.7 -2.7 10.3 -4 17c-12 48.7 -34.8 92 -68.5 130\ns-74.2 66.3 -121.5 85c-10 4 -16 7.7 -18 11c0 8.7 6 14.3 18 17c47.3 18.7 87.8 47\n121.5 85s56.5 81.3 68.5 130c0.7 2 1.3 5 2 9s1.2 6.7 1.5 8c0.3 1.3 1 3.3 2 6\ns2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21 -3.7 21 -11\nc0 -2 -2 -10.3 -6 -25c-20 -79.3 -65 -146.7 -135 -202l-3 -3h399890z\nM100 620v40h399900v-40z M0 241v40h399900v-40zM0 241v40h399900v-40z",rightarrowabovebar:"M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32\n-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0\n13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39\n-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5\n-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n151.7 139 205zm96 379h399894v40H0zm0 0h399904v40H0z",baraboveshortleftharpoon:"M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17\nc2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21\nc-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40\nc-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z\nM0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z",rightharpoonaboveshortbar:"M0,241 l0,40c399126,0,399993,0,399993,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z",shortbaraboveleftharpoon:"M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,\n1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,\n-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z\nM93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z",shortrightharpoonabovebar:"M53,241l0,40c398570,0,399437,0,399437,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z"},M=function(){function e(e){this.children=void 0,this.classes=void 0,this.height=void 0,this.depth=void 0,this.maxFontSize=void 0,this.style=void 0,this.children=e,this.classes=[],this.height=0,this.depth=0,this.maxFontSize=0,this.style={}}var t=e.prototype;return t.hasClass=function(e){return l.contains(this.classes,e)},t.toNode=function(){for(var e=document.createDocumentFragment(),t=0;t<this.children.length;t++)e.appendChild(this.children[t].toNode());return e},t.toMarkup=function(){for(var e="",t=0;t<this.children.length;t++)e+=this.children[t].toMarkup();return e},t.toText=function(){var e=function(e){return e.toText()};return this.children.map(e).join("")},e}(),z=function(e){return e.filter((function(e){return e})).join(" ")},A=function(e,t,r){if(this.classes=e||[],this.attributes={},this.height=0,this.depth=0,this.maxFontSize=0,this.style=r||{},t){t.style.isTight()&&this.classes.push("mtight");var n=t.getColor();n&&(this.style.color=n)}},T=function(e){var t=document.createElement(e);for(var r in t.className=z(this.classes),this.style)this.style.hasOwnProperty(r)&&(t.style[r]=this.style[r]);for(var n in this.attributes)this.attributes.hasOwnProperty(n)&&t.setAttribute(n,this.attributes[n]);for(var a=0;a<this.children.length;a++)t.appendChild(this.children[a].toNode());return t},B=function(e){var t="<"+e;this.classes.length&&(t+=' class="'+l.escape(z(this.classes))+'"');var r="";for(var n in this.style)this.style.hasOwnProperty(n)&&(r+=l.hyphenate(n)+":"+this.style[n]+";");for(var a in r&&(t+=' style="'+l.escape(r)+'"'),this.attributes)this.attributes.hasOwnProperty(a)&&(t+=" "+a+'="'+l.escape(this.attributes[a])+'"');t+=">";for(var i=0;i<this.children.length;i++)t+=this.children[i].toMarkup();return t+="</"+e+">"},N=function(){function e(e,t,r,n){this.children=void 0,this.attributes=void 0,this.classes=void 0,this.height=void 0,this.depth=void 0,this.width=void 0,this.maxFontSize=void 0,this.style=void 0,A.call(this,e,r,n),this.children=t||[]}var t=e.prototype;return t.setAttribute=function(e,t){this.attributes[e]=t},t.hasClass=function(e){return l.contains(this.classes,e)},t.toNode=function(){return T.call(this,"span")},t.toMarkup=function(){return B.call(this,"span")},e}(),q=function(){function e(e,t,r,n){this.children=void 0,this.attributes=void 0,this.classes=void 0,this.height=void 0,this.depth=void 0,this.maxFontSize=void 0,this.style=void 0,A.call(this,t,n),this.children=r||[],this.setAttribute("href",e)}var t=e.prototype;return t.setAttribute=function(e,t){this.attributes[e]=t},t.hasClass=function(e){return l.contains(this.classes,e)},t.toNode=function(){return T.call(this,"a")},t.toMarkup=function(){return B.call(this,"a")},e}(),C=function(){function e(e,t,r){this.src=void 0,this.alt=void 0,this.classes=void 0,this.height=void 0,this.depth=void 0,this.maxFontSize=void 0,this.style=void 0,this.alt=t,this.src=e,this.classes=["mord"],this.style=r}var t=e.prototype;return t.hasClass=function(e){return l.contains(this.classes,e)},t.toNode=function(){var e=document.createElement("img");for(var t in e.src=this.src,e.alt=this.alt,e.className="mord",this.style)this.style.hasOwnProperty(t)&&(e.style[t]=this.style[t]);return e},t.toMarkup=function(){var e="<img  src='"+this.src+" 'alt='"+this.alt+"' ",t="";for(var r in this.style)this.style.hasOwnProperty(r)&&(t+=l.hyphenate(r)+":"+this.style[r]+";");return t&&(e+=' style="'+l.escape(t)+'"'),e+="'/>"},e}(),I={"\xee":"\u0131\u0302","\xef":"\u0131\u0308","\xed":"\u0131\u0301","\xec":"\u0131\u0300"},R=function(){function e(e,t,r,n,a,i,o,s){this.text=void 0,this.height=void 0,this.depth=void 0,this.italic=void 0,this.skew=void 0,this.width=void 0,this.maxFontSize=void 0,this.classes=void 0,this.style=void 0,this.text=e,this.height=t||0,this.depth=r||0,this.italic=n||0,this.skew=a||0,this.width=i||0,this.classes=o||[],this.style=s||{},this.maxFontSize=0;var l=function(e){for(var t=0;t<y.length;t++)for(var r=y[t],n=0;n<r.blocks.length;n++){var a=r.blocks[n];if(e>=a[0]&&e<=a[1])return r.name}return null}(this.text.charCodeAt(0));l&&this.classes.push(l+"_fallback"),/[\xee\xef\xed\xec]/.test(this.text)&&(this.text=I[this.text])}var t=e.prototype;return t.hasClass=function(e){return l.contains(this.classes,e)},t.toNode=function(){var e=document.createTextNode(this.text),t=null;for(var r in this.italic>0&&((t=document.createElement("span")).style.marginRight=this.italic+"em"),this.classes.length>0&&((t=t||document.createElement("span")).className=z(this.classes)),this.style)this.style.hasOwnProperty(r)&&((t=t||document.createElement("span")).style[r]=this.style[r]);return t?(t.appendChild(e),t):e},t.toMarkup=function(){var e=!1,t="<span";this.classes.length&&(e=!0,t+=' class="',t+=l.escape(z(this.classes)),t+='"');var r="";for(var n in this.italic>0&&(r+="margin-right:"+this.italic+"em;"),this.style)this.style.hasOwnProperty(n)&&(r+=l.hyphenate(n)+":"+this.style[n]+";");r&&(e=!0,t+=' style="'+l.escape(r)+'"');var a=l.escape(this.text);return e?(t+=">",t+=a,t+="</span>"):a},e}(),O=function(){function e(e,t){this.children=void 0,this.attributes=void 0,this.children=e||[],this.attributes=t||{}}var t=e.prototype;return t.toNode=function(){var e=document.createElementNS("http://www.w3.org/2000/svg","svg");for(var t in this.attributes)Object.prototype.hasOwnProperty.call(this.attributes,t)&&e.setAttribute(t,this.attributes[t]);for(var r=0;r<this.children.length;r++)e.appendChild(this.children[r].toNode());return e},t.toMarkup=function(){var e='<svg xmlns="http://www.w3.org/2000/svg"';for(var t in this.attributes)Object.prototype.hasOwnProperty.call(this.attributes,t)&&(e+=" "+t+"='"+this.attributes[t]+"'");e+=">";for(var r=0;r<this.children.length;r++)e+=this.children[r].toMarkup();return e+="</svg>"},e}(),E=function(){function e(e,t){this.pathName=void 0,this.alternate=void 0,this.pathName=e,this.alternate=t}var t=e.prototype;return t.toNode=function(){var e=document.createElementNS("http://www.w3.org/2000/svg","path");return this.alternate?e.setAttribute("d",this.alternate):e.setAttribute("d",S[this.pathName]),e},t.toMarkup=function(){return this.alternate?"<path d='"+this.alternate+"'/>":"<path d='"+S[this.pathName]+"'/>"},e}(),H=function(){function e(e){this.attributes=void 0,this.attributes=e||{}}var t=e.prototype;return t.toNode=function(){var e=document.createElementNS("http://www.w3.org/2000/svg","line");for(var t in this.attributes)Object.prototype.hasOwnProperty.call(this.attributes,t)&&e.setAttribute(t,this.attributes[t]);return e},t.toMarkup=function(){var e="<line";for(var t in this.attributes)Object.prototype.hasOwnProperty.call(this.attributes,t)&&(e+=" "+t+"='"+this.attributes[t]+"'");return e+="/>"},e}();function L(e){if(e instanceof R)return e;throw new Error("Expected symbolNode but got "+String(e)+".")}var D={"AMS-Regular":{32:[0,0,0,0,.25],65:[0,.68889,0,0,.72222],66:[0,.68889,0,0,.66667],67:[0,.68889,0,0,.72222],68:[0,.68889,0,0,.72222],69:[0,.68889,0,0,.66667],70:[0,.68889,0,0,.61111],71:[0,.68889,0,0,.77778],72:[0,.68889,0,0,.77778],73:[0,.68889,0,0,.38889],74:[.16667,.68889,0,0,.5],75:[0,.68889,0,0,.77778],76:[0,.68889,0,0,.66667],77:[0,.68889,0,0,.94445],78:[0,.68889,0,0,.72222],79:[.16667,.68889,0,0,.77778],80:[0,.68889,0,0,.61111],81:[.16667,.68889,0,0,.77778],82:[0,.68889,0,0,.72222],83:[0,.68889,0,0,.55556],84:[0,.68889,0,0,.66667],85:[0,.68889,0,0,.72222],86:[0,.68889,0,0,.72222],87:[0,.68889,0,0,1],88:[0,.68889,0,0,.72222],89:[0,.68889,0,0,.72222],90:[0,.68889,0,0,.66667],107:[0,.68889,0,0,.55556],160:[0,0,0,0,.25],165:[0,.675,.025,0,.75],174:[.15559,.69224,0,0,.94666],240:[0,.68889,0,0,.55556],295:[0,.68889,0,0,.54028],710:[0,.825,0,0,2.33334],732:[0,.9,0,0,2.33334],770:[0,.825,0,0,2.33334],771:[0,.9,0,0,2.33334],989:[.08167,.58167,0,0,.77778],1008:[0,.43056,.04028,0,.66667],8245:[0,.54986,0,0,.275],8463:[0,.68889,0,0,.54028],8487:[0,.68889,0,0,.72222],8498:[0,.68889,0,0,.55556],8502:[0,.68889,0,0,.66667],8503:[0,.68889,0,0,.44445],8504:[0,.68889,0,0,.66667],8513:[0,.68889,0,0,.63889],8592:[-.03598,.46402,0,0,.5],8594:[-.03598,.46402,0,0,.5],8602:[-.13313,.36687,0,0,1],8603:[-.13313,.36687,0,0,1],8606:[.01354,.52239,0,0,1],8608:[.01354,.52239,0,0,1],8610:[.01354,.52239,0,0,1.11111],8611:[.01354,.52239,0,0,1.11111],8619:[0,.54986,0,0,1],8620:[0,.54986,0,0,1],8621:[-.13313,.37788,0,0,1.38889],8622:[-.13313,.36687,0,0,1],8624:[0,.69224,0,0,.5],8625:[0,.69224,0,0,.5],8630:[0,.43056,0,0,1],8631:[0,.43056,0,0,1],8634:[.08198,.58198,0,0,.77778],8635:[.08198,.58198,0,0,.77778],8638:[.19444,.69224,0,0,.41667],8639:[.19444,.69224,0,0,.41667],8642:[.19444,.69224,0,0,.41667],8643:[.19444,.69224,0,0,.41667],8644:[.1808,.675,0,0,1],8646:[.1808,.675,0,0,1],8647:[.1808,.675,0,0,1],8648:[.19444,.69224,0,0,.83334],8649:[.1808,.675,0,0,1],8650:[.19444,.69224,0,0,.83334],8651:[.01354,.52239,0,0,1],8652:[.01354,.52239,0,0,1],8653:[-.13313,.36687,0,0,1],8654:[-.13313,.36687,0,0,1],8655:[-.13313,.36687,0,0,1],8666:[.13667,.63667,0,0,1],8667:[.13667,.63667,0,0,1],8669:[-.13313,.37788,0,0,1],8672:[-.064,.437,0,0,1.334],8674:[-.064,.437,0,0,1.334],8705:[0,.825,0,0,.5],8708:[0,.68889,0,0,.55556],8709:[.08167,.58167,0,0,.77778],8717:[0,.43056,0,0,.42917],8722:[-.03598,.46402,0,0,.5],8724:[.08198,.69224,0,0,.77778],8726:[.08167,.58167,0,0,.77778],8733:[0,.69224,0,0,.77778],8736:[0,.69224,0,0,.72222],8737:[0,.69224,0,0,.72222],8738:[.03517,.52239,0,0,.72222],8739:[.08167,.58167,0,0,.22222],8740:[.25142,.74111,0,0,.27778],8741:[.08167,.58167,0,0,.38889],8742:[.25142,.74111,0,0,.5],8756:[0,.69224,0,0,.66667],8757:[0,.69224,0,0,.66667],8764:[-.13313,.36687,0,0,.77778],8765:[-.13313,.37788,0,0,.77778],8769:[-.13313,.36687,0,0,.77778],8770:[-.03625,.46375,0,0,.77778],8774:[.30274,.79383,0,0,.77778],8776:[-.01688,.48312,0,0,.77778],8778:[.08167,.58167,0,0,.77778],8782:[.06062,.54986,0,0,.77778],8783:[.06062,.54986,0,0,.77778],8785:[.08198,.58198,0,0,.77778],8786:[.08198,.58198,0,0,.77778],8787:[.08198,.58198,0,0,.77778],8790:[0,.69224,0,0,.77778],8791:[.22958,.72958,0,0,.77778],8796:[.08198,.91667,0,0,.77778],8806:[.25583,.75583,0,0,.77778],8807:[.25583,.75583,0,0,.77778],8808:[.25142,.75726,0,0,.77778],8809:[.25142,.75726,0,0,.77778],8812:[.25583,.75583,0,0,.5],8814:[.20576,.70576,0,0,.77778],8815:[.20576,.70576,0,0,.77778],8816:[.30274,.79383,0,0,.77778],8817:[.30274,.79383,0,0,.77778],8818:[.22958,.72958,0,0,.77778],8819:[.22958,.72958,0,0,.77778],8822:[.1808,.675,0,0,.77778],8823:[.1808,.675,0,0,.77778],8828:[.13667,.63667,0,0,.77778],8829:[.13667,.63667,0,0,.77778],8830:[.22958,.72958,0,0,.77778],8831:[.22958,.72958,0,0,.77778],8832:[.20576,.70576,0,0,.77778],8833:[.20576,.70576,0,0,.77778],8840:[.30274,.79383,0,0,.77778],8841:[.30274,.79383,0,0,.77778],8842:[.13597,.63597,0,0,.77778],8843:[.13597,.63597,0,0,.77778],8847:[.03517,.54986,0,0,.77778],8848:[.03517,.54986,0,0,.77778],8858:[.08198,.58198,0,0,.77778],8859:[.08198,.58198,0,0,.77778],8861:[.08198,.58198,0,0,.77778],8862:[0,.675,0,0,.77778],8863:[0,.675,0,0,.77778],8864:[0,.675,0,0,.77778],8865:[0,.675,0,0,.77778],8872:[0,.69224,0,0,.61111],8873:[0,.69224,0,0,.72222],8874:[0,.69224,0,0,.88889],8876:[0,.68889,0,0,.61111],8877:[0,.68889,0,0,.61111],8878:[0,.68889,0,0,.72222],8879:[0,.68889,0,0,.72222],8882:[.03517,.54986,0,0,.77778],8883:[.03517,.54986,0,0,.77778],8884:[.13667,.63667,0,0,.77778],8885:[.13667,.63667,0,0,.77778],8888:[0,.54986,0,0,1.11111],8890:[.19444,.43056,0,0,.55556],8891:[.19444,.69224,0,0,.61111],8892:[.19444,.69224,0,0,.61111],8901:[0,.54986,0,0,.27778],8903:[.08167,.58167,0,0,.77778],8905:[.08167,.58167,0,0,.77778],8906:[.08167,.58167,0,0,.77778],8907:[0,.69224,0,0,.77778],8908:[0,.69224,0,0,.77778],8909:[-.03598,.46402,0,0,.77778],8910:[0,.54986,0,0,.76042],8911:[0,.54986,0,0,.76042],8912:[.03517,.54986,0,0,.77778],8913:[.03517,.54986,0,0,.77778],8914:[0,.54986,0,0,.66667],8915:[0,.54986,0,0,.66667],8916:[0,.69224,0,0,.66667],8918:[.0391,.5391,0,0,.77778],8919:[.0391,.5391,0,0,.77778],8920:[.03517,.54986,0,0,1.33334],8921:[.03517,.54986,0,0,1.33334],8922:[.38569,.88569,0,0,.77778],8923:[.38569,.88569,0,0,.77778],8926:[.13667,.63667,0,0,.77778],8927:[.13667,.63667,0,0,.77778],8928:[.30274,.79383,0,0,.77778],8929:[.30274,.79383,0,0,.77778],8934:[.23222,.74111,0,0,.77778],8935:[.23222,.74111,0,0,.77778],8936:[.23222,.74111,0,0,.77778],8937:[.23222,.74111,0,0,.77778],8938:[.20576,.70576,0,0,.77778],8939:[.20576,.70576,0,0,.77778],8940:[.30274,.79383,0,0,.77778],8941:[.30274,.79383,0,0,.77778],8994:[.19444,.69224,0,0,.77778],8995:[.19444,.69224,0,0,.77778],9416:[.15559,.69224,0,0,.90222],9484:[0,.69224,0,0,.5],9488:[0,.69224,0,0,.5],9492:[0,.37788,0,0,.5],9496:[0,.37788,0,0,.5],9585:[.19444,.68889,0,0,.88889],9586:[.19444,.74111,0,0,.88889],9632:[0,.675,0,0,.77778],9633:[0,.675,0,0,.77778],9650:[0,.54986,0,0,.72222],9651:[0,.54986,0,0,.72222],9654:[.03517,.54986,0,0,.77778],9660:[0,.54986,0,0,.72222],9661:[0,.54986,0,0,.72222],9664:[.03517,.54986,0,0,.77778],9674:[.11111,.69224,0,0,.66667],9733:[.19444,.69224,0,0,.94445],10003:[0,.69224,0,0,.83334],10016:[0,.69224,0,0,.83334],10731:[.11111,.69224,0,0,.66667],10846:[.19444,.75583,0,0,.61111],10877:[.13667,.63667,0,0,.77778],10878:[.13667,.63667,0,0,.77778],10885:[.25583,.75583,0,0,.77778],10886:[.25583,.75583,0,0,.77778],10887:[.13597,.63597,0,0,.77778],10888:[.13597,.63597,0,0,.77778],10889:[.26167,.75726,0,0,.77778],10890:[.26167,.75726,0,0,.77778],10891:[.48256,.98256,0,0,.77778],10892:[.48256,.98256,0,0,.77778],10901:[.13667,.63667,0,0,.77778],10902:[.13667,.63667,0,0,.77778],10933:[.25142,.75726,0,0,.77778],10934:[.25142,.75726,0,0,.77778],10935:[.26167,.75726,0,0,.77778],10936:[.26167,.75726,0,0,.77778],10937:[.26167,.75726,0,0,.77778],10938:[.26167,.75726,0,0,.77778],10949:[.25583,.75583,0,0,.77778],10950:[.25583,.75583,0,0,.77778],10955:[.28481,.79383,0,0,.77778],10956:[.28481,.79383,0,0,.77778],57350:[.08167,.58167,0,0,.22222],57351:[.08167,.58167,0,0,.38889],57352:[.08167,.58167,0,0,.77778],57353:[0,.43056,.04028,0,.66667],57356:[.25142,.75726,0,0,.77778],57357:[.25142,.75726,0,0,.77778],57358:[.41951,.91951,0,0,.77778],57359:[.30274,.79383,0,0,.77778],57360:[.30274,.79383,0,0,.77778],57361:[.41951,.91951,0,0,.77778],57366:[.25142,.75726,0,0,.77778],57367:[.25142,.75726,0,0,.77778],57368:[.25142,.75726,0,0,.77778],57369:[.25142,.75726,0,0,.77778],57370:[.13597,.63597,0,0,.77778],57371:[.13597,.63597,0,0,.77778]},"Caligraphic-Regular":{32:[0,0,0,0,.25],65:[0,.68333,0,.19445,.79847],66:[0,.68333,.03041,.13889,.65681],67:[0,.68333,.05834,.13889,.52653],68:[0,.68333,.02778,.08334,.77139],69:[0,.68333,.08944,.11111,.52778],70:[0,.68333,.09931,.11111,.71875],71:[.09722,.68333,.0593,.11111,.59487],72:[0,.68333,.00965,.11111,.84452],73:[0,.68333,.07382,0,.54452],74:[.09722,.68333,.18472,.16667,.67778],75:[0,.68333,.01445,.05556,.76195],76:[0,.68333,0,.13889,.68972],77:[0,.68333,0,.13889,1.2009],78:[0,.68333,.14736,.08334,.82049],79:[0,.68333,.02778,.11111,.79611],80:[0,.68333,.08222,.08334,.69556],81:[.09722,.68333,0,.11111,.81667],82:[0,.68333,0,.08334,.8475],83:[0,.68333,.075,.13889,.60556],84:[0,.68333,.25417,0,.54464],85:[0,.68333,.09931,.08334,.62583],86:[0,.68333,.08222,0,.61278],87:[0,.68333,.08222,.08334,.98778],88:[0,.68333,.14643,.13889,.7133],89:[.09722,.68333,.08222,.08334,.66834],90:[0,.68333,.07944,.13889,.72473],160:[0,0,0,0,.25]},"Fraktur-Regular":{32:[0,0,0,0,.25],33:[0,.69141,0,0,.29574],34:[0,.69141,0,0,.21471],38:[0,.69141,0,0,.73786],39:[0,.69141,0,0,.21201],40:[.24982,.74947,0,0,.38865],41:[.24982,.74947,0,0,.38865],42:[0,.62119,0,0,.27764],43:[.08319,.58283,0,0,.75623],44:[0,.10803,0,0,.27764],45:[.08319,.58283,0,0,.75623],46:[0,.10803,0,0,.27764],47:[.24982,.74947,0,0,.50181],48:[0,.47534,0,0,.50181],49:[0,.47534,0,0,.50181],50:[0,.47534,0,0,.50181],51:[.18906,.47534,0,0,.50181],52:[.18906,.47534,0,0,.50181],53:[.18906,.47534,0,0,.50181],54:[0,.69141,0,0,.50181],55:[.18906,.47534,0,0,.50181],56:[0,.69141,0,0,.50181],57:[.18906,.47534,0,0,.50181],58:[0,.47534,0,0,.21606],59:[.12604,.47534,0,0,.21606],61:[-.13099,.36866,0,0,.75623],63:[0,.69141,0,0,.36245],65:[0,.69141,0,0,.7176],66:[0,.69141,0,0,.88397],67:[0,.69141,0,0,.61254],68:[0,.69141,0,0,.83158],69:[0,.69141,0,0,.66278],70:[.12604,.69141,0,0,.61119],71:[0,.69141,0,0,.78539],72:[.06302,.69141,0,0,.7203],73:[0,.69141,0,0,.55448],74:[.12604,.69141,0,0,.55231],75:[0,.69141,0,0,.66845],76:[0,.69141,0,0,.66602],77:[0,.69141,0,0,1.04953],78:[0,.69141,0,0,.83212],79:[0,.69141,0,0,.82699],80:[.18906,.69141,0,0,.82753],81:[.03781,.69141,0,0,.82699],82:[0,.69141,0,0,.82807],83:[0,.69141,0,0,.82861],84:[0,.69141,0,0,.66899],85:[0,.69141,0,0,.64576],86:[0,.69141,0,0,.83131],87:[0,.69141,0,0,1.04602],88:[0,.69141,0,0,.71922],89:[.18906,.69141,0,0,.83293],90:[.12604,.69141,0,0,.60201],91:[.24982,.74947,0,0,.27764],93:[.24982,.74947,0,0,.27764],94:[0,.69141,0,0,.49965],97:[0,.47534,0,0,.50046],98:[0,.69141,0,0,.51315],99:[0,.47534,0,0,.38946],100:[0,.62119,0,0,.49857],101:[0,.47534,0,0,.40053],102:[.18906,.69141,0,0,.32626],103:[.18906,.47534,0,0,.5037],104:[.18906,.69141,0,0,.52126],105:[0,.69141,0,0,.27899],106:[0,.69141,0,0,.28088],107:[0,.69141,0,0,.38946],108:[0,.69141,0,0,.27953],109:[0,.47534,0,0,.76676],110:[0,.47534,0,0,.52666],111:[0,.47534,0,0,.48885],112:[.18906,.52396,0,0,.50046],113:[.18906,.47534,0,0,.48912],114:[0,.47534,0,0,.38919],115:[0,.47534,0,0,.44266],116:[0,.62119,0,0,.33301],117:[0,.47534,0,0,.5172],118:[0,.52396,0,0,.5118],119:[0,.52396,0,0,.77351],120:[.18906,.47534,0,0,.38865],121:[.18906,.47534,0,0,.49884],122:[.18906,.47534,0,0,.39054],160:[0,0,0,0,.25],8216:[0,.69141,0,0,.21471],8217:[0,.69141,0,0,.21471],58112:[0,.62119,0,0,.49749],58113:[0,.62119,0,0,.4983],58114:[.18906,.69141,0,0,.33328],58115:[.18906,.69141,0,0,.32923],58116:[.18906,.47534,0,0,.50343],58117:[0,.69141,0,0,.33301],58118:[0,.62119,0,0,.33409],58119:[0,.47534,0,0,.50073]},"Main-Bold":{32:[0,0,0,0,.25],33:[0,.69444,0,0,.35],34:[0,.69444,0,0,.60278],35:[.19444,.69444,0,0,.95833],36:[.05556,.75,0,0,.575],37:[.05556,.75,0,0,.95833],38:[0,.69444,0,0,.89444],39:[0,.69444,0,0,.31944],40:[.25,.75,0,0,.44722],41:[.25,.75,0,0,.44722],42:[0,.75,0,0,.575],43:[.13333,.63333,0,0,.89444],44:[.19444,.15556,0,0,.31944],45:[0,.44444,0,0,.38333],46:[0,.15556,0,0,.31944],47:[.25,.75,0,0,.575],48:[0,.64444,0,0,.575],49:[0,.64444,0,0,.575],50:[0,.64444,0,0,.575],51:[0,.64444,0,0,.575],52:[0,.64444,0,0,.575],53:[0,.64444,0,0,.575],54:[0,.64444,0,0,.575],55:[0,.64444,0,0,.575],56:[0,.64444,0,0,.575],57:[0,.64444,0,0,.575],58:[0,.44444,0,0,.31944],59:[.19444,.44444,0,0,.31944],60:[.08556,.58556,0,0,.89444],61:[-.10889,.39111,0,0,.89444],62:[.08556,.58556,0,0,.89444],63:[0,.69444,0,0,.54305],64:[0,.69444,0,0,.89444],65:[0,.68611,0,0,.86944],66:[0,.68611,0,0,.81805],67:[0,.68611,0,0,.83055],68:[0,.68611,0,0,.88194],69:[0,.68611,0,0,.75555],70:[0,.68611,0,0,.72361],71:[0,.68611,0,0,.90416],72:[0,.68611,0,0,.9],73:[0,.68611,0,0,.43611],74:[0,.68611,0,0,.59444],75:[0,.68611,0,0,.90138],76:[0,.68611,0,0,.69166],77:[0,.68611,0,0,1.09166],78:[0,.68611,0,0,.9],79:[0,.68611,0,0,.86388],80:[0,.68611,0,0,.78611],81:[.19444,.68611,0,0,.86388],82:[0,.68611,0,0,.8625],83:[0,.68611,0,0,.63889],84:[0,.68611,0,0,.8],85:[0,.68611,0,0,.88472],86:[0,.68611,.01597,0,.86944],87:[0,.68611,.01597,0,1.18888],88:[0,.68611,0,0,.86944],89:[0,.68611,.02875,0,.86944],90:[0,.68611,0,0,.70277],91:[.25,.75,0,0,.31944],92:[.25,.75,0,0,.575],93:[.25,.75,0,0,.31944],94:[0,.69444,0,0,.575],95:[.31,.13444,.03194,0,.575],97:[0,.44444,0,0,.55902],98:[0,.69444,0,0,.63889],99:[0,.44444,0,0,.51111],100:[0,.69444,0,0,.63889],101:[0,.44444,0,0,.52708],102:[0,.69444,.10903,0,.35139],103:[.19444,.44444,.01597,0,.575],104:[0,.69444,0,0,.63889],105:[0,.69444,0,0,.31944],106:[.19444,.69444,0,0,.35139],107:[0,.69444,0,0,.60694],108:[0,.69444,0,0,.31944],109:[0,.44444,0,0,.95833],110:[0,.44444,0,0,.63889],111:[0,.44444,0,0,.575],112:[.19444,.44444,0,0,.63889],113:[.19444,.44444,0,0,.60694],114:[0,.44444,0,0,.47361],115:[0,.44444,0,0,.45361],116:[0,.63492,0,0,.44722],117:[0,.44444,0,0,.63889],118:[0,.44444,.01597,0,.60694],119:[0,.44444,.01597,0,.83055],120:[0,.44444,0,0,.60694],121:[.19444,.44444,.01597,0,.60694],122:[0,.44444,0,0,.51111],123:[.25,.75,0,0,.575],124:[.25,.75,0,0,.31944],125:[.25,.75,0,0,.575],126:[.35,.34444,0,0,.575],160:[0,0,0,0,.25],163:[0,.69444,0,0,.86853],168:[0,.69444,0,0,.575],172:[0,.44444,0,0,.76666],176:[0,.69444,0,0,.86944],177:[.13333,.63333,0,0,.89444],184:[.17014,0,0,0,.51111],198:[0,.68611,0,0,1.04166],215:[.13333,.63333,0,0,.89444],216:[.04861,.73472,0,0,.89444],223:[0,.69444,0,0,.59722],230:[0,.44444,0,0,.83055],247:[.13333,.63333,0,0,.89444],248:[.09722,.54167,0,0,.575],305:[0,.44444,0,0,.31944],338:[0,.68611,0,0,1.16944],339:[0,.44444,0,0,.89444],567:[.19444,.44444,0,0,.35139],710:[0,.69444,0,0,.575],711:[0,.63194,0,0,.575],713:[0,.59611,0,0,.575],714:[0,.69444,0,0,.575],715:[0,.69444,0,0,.575],728:[0,.69444,0,0,.575],729:[0,.69444,0,0,.31944],730:[0,.69444,0,0,.86944],732:[0,.69444,0,0,.575],733:[0,.69444,0,0,.575],915:[0,.68611,0,0,.69166],916:[0,.68611,0,0,.95833],920:[0,.68611,0,0,.89444],923:[0,.68611,0,0,.80555],926:[0,.68611,0,0,.76666],928:[0,.68611,0,0,.9],931:[0,.68611,0,0,.83055],933:[0,.68611,0,0,.89444],934:[0,.68611,0,0,.83055],936:[0,.68611,0,0,.89444],937:[0,.68611,0,0,.83055],8211:[0,.44444,.03194,0,.575],8212:[0,.44444,.03194,0,1.14999],8216:[0,.69444,0,0,.31944],8217:[0,.69444,0,0,.31944],8220:[0,.69444,0,0,.60278],8221:[0,.69444,0,0,.60278],8224:[.19444,.69444,0,0,.51111],8225:[.19444,.69444,0,0,.51111],8242:[0,.55556,0,0,.34444],8407:[0,.72444,.15486,0,.575],8463:[0,.69444,0,0,.66759],8465:[0,.69444,0,0,.83055],8467:[0,.69444,0,0,.47361],8472:[.19444,.44444,0,0,.74027],8476:[0,.69444,0,0,.83055],8501:[0,.69444,0,0,.70277],8592:[-.10889,.39111,0,0,1.14999],8593:[.19444,.69444,0,0,.575],8594:[-.10889,.39111,0,0,1.14999],8595:[.19444,.69444,0,0,.575],8596:[-.10889,.39111,0,0,1.14999],8597:[.25,.75,0,0,.575],8598:[.19444,.69444,0,0,1.14999],8599:[.19444,.69444,0,0,1.14999],8600:[.19444,.69444,0,0,1.14999],8601:[.19444,.69444,0,0,1.14999],8636:[-.10889,.39111,0,0,1.14999],8637:[-.10889,.39111,0,0,1.14999],8640:[-.10889,.39111,0,0,1.14999],8641:[-.10889,.39111,0,0,1.14999],8656:[-.10889,.39111,0,0,1.14999],8657:[.19444,.69444,0,0,.70277],8658:[-.10889,.39111,0,0,1.14999],8659:[.19444,.69444,0,0,.70277],8660:[-.10889,.39111,0,0,1.14999],8661:[.25,.75,0,0,.70277],8704:[0,.69444,0,0,.63889],8706:[0,.69444,.06389,0,.62847],8707:[0,.69444,0,0,.63889],8709:[.05556,.75,0,0,.575],8711:[0,.68611,0,0,.95833],8712:[.08556,.58556,0,0,.76666],8715:[.08556,.58556,0,0,.76666],8722:[.13333,.63333,0,0,.89444],8723:[.13333,.63333,0,0,.89444],8725:[.25,.75,0,0,.575],8726:[.25,.75,0,0,.575],8727:[-.02778,.47222,0,0,.575],8728:[-.02639,.47361,0,0,.575],8729:[-.02639,.47361,0,0,.575],8730:[.18,.82,0,0,.95833],8733:[0,.44444,0,0,.89444],8734:[0,.44444,0,0,1.14999],8736:[0,.69224,0,0,.72222],8739:[.25,.75,0,0,.31944],8741:[.25,.75,0,0,.575],8743:[0,.55556,0,0,.76666],8744:[0,.55556,0,0,.76666],8745:[0,.55556,0,0,.76666],8746:[0,.55556,0,0,.76666],8747:[.19444,.69444,.12778,0,.56875],8764:[-.10889,.39111,0,0,.89444],8768:[.19444,.69444,0,0,.31944],8771:[.00222,.50222,0,0,.89444],8776:[.02444,.52444,0,0,.89444],8781:[.00222,.50222,0,0,.89444],8801:[.00222,.50222,0,0,.89444],8804:[.19667,.69667,0,0,.89444],8805:[.19667,.69667,0,0,.89444],8810:[.08556,.58556,0,0,1.14999],8811:[.08556,.58556,0,0,1.14999],8826:[.08556,.58556,0,0,.89444],8827:[.08556,.58556,0,0,.89444],8834:[.08556,.58556,0,0,.89444],8835:[.08556,.58556,0,0,.89444],8838:[.19667,.69667,0,0,.89444],8839:[.19667,.69667,0,0,.89444],8846:[0,.55556,0,0,.76666],8849:[.19667,.69667,0,0,.89444],8850:[.19667,.69667,0,0,.89444],8851:[0,.55556,0,0,.76666],8852:[0,.55556,0,0,.76666],8853:[.13333,.63333,0,0,.89444],8854:[.13333,.63333,0,0,.89444],8855:[.13333,.63333,0,0,.89444],8856:[.13333,.63333,0,0,.89444],8857:[.13333,.63333,0,0,.89444],8866:[0,.69444,0,0,.70277],8867:[0,.69444,0,0,.70277],8868:[0,.69444,0,0,.89444],8869:[0,.69444,0,0,.89444],8900:[-.02639,.47361,0,0,.575],8901:[-.02639,.47361,0,0,.31944],8902:[-.02778,.47222,0,0,.575],8968:[.25,.75,0,0,.51111],8969:[.25,.75,0,0,.51111],8970:[.25,.75,0,0,.51111],8971:[.25,.75,0,0,.51111],8994:[-.13889,.36111,0,0,1.14999],8995:[-.13889,.36111,0,0,1.14999],9651:[.19444,.69444,0,0,1.02222],9657:[-.02778,.47222,0,0,.575],9661:[.19444,.69444,0,0,1.02222],9667:[-.02778,.47222,0,0,.575],9711:[.19444,.69444,0,0,1.14999],9824:[.12963,.69444,0,0,.89444],9825:[.12963,.69444,0,0,.89444],9826:[.12963,.69444,0,0,.89444],9827:[.12963,.69444,0,0,.89444],9837:[0,.75,0,0,.44722],9838:[.19444,.69444,0,0,.44722],9839:[.19444,.69444,0,0,.44722],10216:[.25,.75,0,0,.44722],10217:[.25,.75,0,0,.44722],10815:[0,.68611,0,0,.9],10927:[.19667,.69667,0,0,.89444],10928:[.19667,.69667,0,0,.89444],57376:[.19444,.69444,0,0,0]},"Main-BoldItalic":{32:[0,0,0,0,.25],33:[0,.69444,.11417,0,.38611],34:[0,.69444,.07939,0,.62055],35:[.19444,.69444,.06833,0,.94444],37:[.05556,.75,.12861,0,.94444],38:[0,.69444,.08528,0,.88555],39:[0,.69444,.12945,0,.35555],40:[.25,.75,.15806,0,.47333],41:[.25,.75,.03306,0,.47333],42:[0,.75,.14333,0,.59111],43:[.10333,.60333,.03306,0,.88555],44:[.19444,.14722,0,0,.35555],45:[0,.44444,.02611,0,.41444],46:[0,.14722,0,0,.35555],47:[.25,.75,.15806,0,.59111],48:[0,.64444,.13167,0,.59111],49:[0,.64444,.13167,0,.59111],50:[0,.64444,.13167,0,.59111],51:[0,.64444,.13167,0,.59111],52:[.19444,.64444,.13167,0,.59111],53:[0,.64444,.13167,0,.59111],54:[0,.64444,.13167,0,.59111],55:[.19444,.64444,.13167,0,.59111],56:[0,.64444,.13167,0,.59111],57:[0,.64444,.13167,0,.59111],58:[0,.44444,.06695,0,.35555],59:[.19444,.44444,.06695,0,.35555],61:[-.10889,.39111,.06833,0,.88555],63:[0,.69444,.11472,0,.59111],64:[0,.69444,.09208,0,.88555],65:[0,.68611,0,0,.86555],66:[0,.68611,.0992,0,.81666],67:[0,.68611,.14208,0,.82666],68:[0,.68611,.09062,0,.87555],69:[0,.68611,.11431,0,.75666],70:[0,.68611,.12903,0,.72722],71:[0,.68611,.07347,0,.89527],72:[0,.68611,.17208,0,.8961],73:[0,.68611,.15681,0,.47166],74:[0,.68611,.145,0,.61055],75:[0,.68611,.14208,0,.89499],76:[0,.68611,0,0,.69777],77:[0,.68611,.17208,0,1.07277],78:[0,.68611,.17208,0,.8961],79:[0,.68611,.09062,0,.85499],80:[0,.68611,.0992,0,.78721],81:[.19444,.68611,.09062,0,.85499],82:[0,.68611,.02559,0,.85944],83:[0,.68611,.11264,0,.64999],84:[0,.68611,.12903,0,.7961],85:[0,.68611,.17208,0,.88083],86:[0,.68611,.18625,0,.86555],87:[0,.68611,.18625,0,1.15999],88:[0,.68611,.15681,0,.86555],89:[0,.68611,.19803,0,.86555],90:[0,.68611,.14208,0,.70888],91:[.25,.75,.1875,0,.35611],93:[.25,.75,.09972,0,.35611],94:[0,.69444,.06709,0,.59111],95:[.31,.13444,.09811,0,.59111],97:[0,.44444,.09426,0,.59111],98:[0,.69444,.07861,0,.53222],99:[0,.44444,.05222,0,.53222],100:[0,.69444,.10861,0,.59111],101:[0,.44444,.085,0,.53222],102:[.19444,.69444,.21778,0,.4],103:[.19444,.44444,.105,0,.53222],104:[0,.69444,.09426,0,.59111],105:[0,.69326,.11387,0,.35555],106:[.19444,.69326,.1672,0,.35555],107:[0,.69444,.11111,0,.53222],108:[0,.69444,.10861,0,.29666],109:[0,.44444,.09426,0,.94444],110:[0,.44444,.09426,0,.64999],111:[0,.44444,.07861,0,.59111],112:[.19444,.44444,.07861,0,.59111],113:[.19444,.44444,.105,0,.53222],114:[0,.44444,.11111,0,.50167],115:[0,.44444,.08167,0,.48694],116:[0,.63492,.09639,0,.385],117:[0,.44444,.09426,0,.62055],118:[0,.44444,.11111,0,.53222],119:[0,.44444,.11111,0,.76777],120:[0,.44444,.12583,0,.56055],121:[.19444,.44444,.105,0,.56166],122:[0,.44444,.13889,0,.49055],126:[.35,.34444,.11472,0,.59111],160:[0,0,0,0,.25],168:[0,.69444,.11473,0,.59111],176:[0,.69444,0,0,.94888],184:[.17014,0,0,0,.53222],198:[0,.68611,.11431,0,1.02277],216:[.04861,.73472,.09062,0,.88555],223:[.19444,.69444,.09736,0,.665],230:[0,.44444,.085,0,.82666],248:[.09722,.54167,.09458,0,.59111],305:[0,.44444,.09426,0,.35555],338:[0,.68611,.11431,0,1.14054],339:[0,.44444,.085,0,.82666],567:[.19444,.44444,.04611,0,.385],710:[0,.69444,.06709,0,.59111],711:[0,.63194,.08271,0,.59111],713:[0,.59444,.10444,0,.59111],714:[0,.69444,.08528,0,.59111],715:[0,.69444,0,0,.59111],728:[0,.69444,.10333,0,.59111],729:[0,.69444,.12945,0,.35555],730:[0,.69444,0,0,.94888],732:[0,.69444,.11472,0,.59111],733:[0,.69444,.11472,0,.59111],915:[0,.68611,.12903,0,.69777],916:[0,.68611,0,0,.94444],920:[0,.68611,.09062,0,.88555],923:[0,.68611,0,0,.80666],926:[0,.68611,.15092,0,.76777],928:[0,.68611,.17208,0,.8961],931:[0,.68611,.11431,0,.82666],933:[0,.68611,.10778,0,.88555],934:[0,.68611,.05632,0,.82666],936:[0,.68611,.10778,0,.88555],937:[0,.68611,.0992,0,.82666],8211:[0,.44444,.09811,0,.59111],8212:[0,.44444,.09811,0,1.18221],8216:[0,.69444,.12945,0,.35555],8217:[0,.69444,.12945,0,.35555],8220:[0,.69444,.16772,0,.62055],8221:[0,.69444,.07939,0,.62055]},"Main-Italic":{32:[0,0,0,0,.25],33:[0,.69444,.12417,0,.30667],34:[0,.69444,.06961,0,.51444],35:[.19444,.69444,.06616,0,.81777],37:[.05556,.75,.13639,0,.81777],38:[0,.69444,.09694,0,.76666],39:[0,.69444,.12417,0,.30667],40:[.25,.75,.16194,0,.40889],41:[.25,.75,.03694,0,.40889],42:[0,.75,.14917,0,.51111],43:[.05667,.56167,.03694,0,.76666],44:[.19444,.10556,0,0,.30667],45:[0,.43056,.02826,0,.35778],46:[0,.10556,0,0,.30667],47:[.25,.75,.16194,0,.51111],48:[0,.64444,.13556,0,.51111],49:[0,.64444,.13556,0,.51111],50:[0,.64444,.13556,0,.51111],51:[0,.64444,.13556,0,.51111],52:[.19444,.64444,.13556,0,.51111],53:[0,.64444,.13556,0,.51111],54:[0,.64444,.13556,0,.51111],55:[.19444,.64444,.13556,0,.51111],56:[0,.64444,.13556,0,.51111],57:[0,.64444,.13556,0,.51111],58:[0,.43056,.0582,0,.30667],59:[.19444,.43056,.0582,0,.30667],61:[-.13313,.36687,.06616,0,.76666],63:[0,.69444,.1225,0,.51111],64:[0,.69444,.09597,0,.76666],65:[0,.68333,0,0,.74333],66:[0,.68333,.10257,0,.70389],67:[0,.68333,.14528,0,.71555],68:[0,.68333,.09403,0,.755],69:[0,.68333,.12028,0,.67833],70:[0,.68333,.13305,0,.65277],71:[0,.68333,.08722,0,.77361],72:[0,.68333,.16389,0,.74333],73:[0,.68333,.15806,0,.38555],74:[0,.68333,.14028,0,.525],75:[0,.68333,.14528,0,.76888],76:[0,.68333,0,0,.62722],77:[0,.68333,.16389,0,.89666],78:[0,.68333,.16389,0,.74333],79:[0,.68333,.09403,0,.76666],80:[0,.68333,.10257,0,.67833],81:[.19444,.68333,.09403,0,.76666],82:[0,.68333,.03868,0,.72944],83:[0,.68333,.11972,0,.56222],84:[0,.68333,.13305,0,.71555],85:[0,.68333,.16389,0,.74333],86:[0,.68333,.18361,0,.74333],87:[0,.68333,.18361,0,.99888],88:[0,.68333,.15806,0,.74333],89:[0,.68333,.19383,0,.74333],90:[0,.68333,.14528,0,.61333],91:[.25,.75,.1875,0,.30667],93:[.25,.75,.10528,0,.30667],94:[0,.69444,.06646,0,.51111],95:[.31,.12056,.09208,0,.51111],97:[0,.43056,.07671,0,.51111],98:[0,.69444,.06312,0,.46],99:[0,.43056,.05653,0,.46],100:[0,.69444,.10333,0,.51111],101:[0,.43056,.07514,0,.46],102:[.19444,.69444,.21194,0,.30667],103:[.19444,.43056,.08847,0,.46],104:[0,.69444,.07671,0,.51111],105:[0,.65536,.1019,0,.30667],106:[.19444,.65536,.14467,0,.30667],107:[0,.69444,.10764,0,.46],108:[0,.69444,.10333,0,.25555],109:[0,.43056,.07671,0,.81777],110:[0,.43056,.07671,0,.56222],111:[0,.43056,.06312,0,.51111],112:[.19444,.43056,.06312,0,.51111],113:[.19444,.43056,.08847,0,.46],114:[0,.43056,.10764,0,.42166],115:[0,.43056,.08208,0,.40889],116:[0,.61508,.09486,0,.33222],117:[0,.43056,.07671,0,.53666],118:[0,.43056,.10764,0,.46],119:[0,.43056,.10764,0,.66444],120:[0,.43056,.12042,0,.46389],121:[.19444,.43056,.08847,0,.48555],122:[0,.43056,.12292,0,.40889],126:[.35,.31786,.11585,0,.51111],160:[0,0,0,0,.25],168:[0,.66786,.10474,0,.51111],176:[0,.69444,0,0,.83129],184:[.17014,0,0,0,.46],198:[0,.68333,.12028,0,.88277],216:[.04861,.73194,.09403,0,.76666],223:[.19444,.69444,.10514,0,.53666],230:[0,.43056,.07514,0,.71555],248:[.09722,.52778,.09194,0,.51111],338:[0,.68333,.12028,0,.98499],339:[0,.43056,.07514,0,.71555],710:[0,.69444,.06646,0,.51111],711:[0,.62847,.08295,0,.51111],713:[0,.56167,.10333,0,.51111],714:[0,.69444,.09694,0,.51111],715:[0,.69444,0,0,.51111],728:[0,.69444,.10806,0,.51111],729:[0,.66786,.11752,0,.30667],730:[0,.69444,0,0,.83129],732:[0,.66786,.11585,0,.51111],733:[0,.69444,.1225,0,.51111],915:[0,.68333,.13305,0,.62722],916:[0,.68333,0,0,.81777],920:[0,.68333,.09403,0,.76666],923:[0,.68333,0,0,.69222],926:[0,.68333,.15294,0,.66444],928:[0,.68333,.16389,0,.74333],931:[0,.68333,.12028,0,.71555],933:[0,.68333,.11111,0,.76666],934:[0,.68333,.05986,0,.71555],936:[0,.68333,.11111,0,.76666],937:[0,.68333,.10257,0,.71555],8211:[0,.43056,.09208,0,.51111],8212:[0,.43056,.09208,0,1.02222],8216:[0,.69444,.12417,0,.30667],8217:[0,.69444,.12417,0,.30667],8220:[0,.69444,.1685,0,.51444],8221:[0,.69444,.06961,0,.51444],8463:[0,.68889,0,0,.54028]},"Main-Regular":{32:[0,0,0,0,.25],33:[0,.69444,0,0,.27778],34:[0,.69444,0,0,.5],35:[.19444,.69444,0,0,.83334],36:[.05556,.75,0,0,.5],37:[.05556,.75,0,0,.83334],38:[0,.69444,0,0,.77778],39:[0,.69444,0,0,.27778],40:[.25,.75,0,0,.38889],41:[.25,.75,0,0,.38889],42:[0,.75,0,0,.5],43:[.08333,.58333,0,0,.77778],44:[.19444,.10556,0,0,.27778],45:[0,.43056,0,0,.33333],46:[0,.10556,0,0,.27778],47:[.25,.75,0,0,.5],48:[0,.64444,0,0,.5],49:[0,.64444,0,0,.5],50:[0,.64444,0,0,.5],51:[0,.64444,0,0,.5],52:[0,.64444,0,0,.5],53:[0,.64444,0,0,.5],54:[0,.64444,0,0,.5],55:[0,.64444,0,0,.5],56:[0,.64444,0,0,.5],57:[0,.64444,0,0,.5],58:[0,.43056,0,0,.27778],59:[.19444,.43056,0,0,.27778],60:[.0391,.5391,0,0,.77778],61:[-.13313,.36687,0,0,.77778],62:[.0391,.5391,0,0,.77778],63:[0,.69444,0,0,.47222],64:[0,.69444,0,0,.77778],65:[0,.68333,0,0,.75],66:[0,.68333,0,0,.70834],67:[0,.68333,0,0,.72222],68:[0,.68333,0,0,.76389],69:[0,.68333,0,0,.68056],70:[0,.68333,0,0,.65278],71:[0,.68333,0,0,.78472],72:[0,.68333,0,0,.75],73:[0,.68333,0,0,.36111],74:[0,.68333,0,0,.51389],75:[0,.68333,0,0,.77778],76:[0,.68333,0,0,.625],77:[0,.68333,0,0,.91667],78:[0,.68333,0,0,.75],79:[0,.68333,0,0,.77778],80:[0,.68333,0,0,.68056],81:[.19444,.68333,0,0,.77778],82:[0,.68333,0,0,.73611],83:[0,.68333,0,0,.55556],84:[0,.68333,0,0,.72222],85:[0,.68333,0,0,.75],86:[0,.68333,.01389,0,.75],87:[0,.68333,.01389,0,1.02778],88:[0,.68333,0,0,.75],89:[0,.68333,.025,0,.75],90:[0,.68333,0,0,.61111],91:[.25,.75,0,0,.27778],92:[.25,.75,0,0,.5],93:[.25,.75,0,0,.27778],94:[0,.69444,0,0,.5],95:[.31,.12056,.02778,0,.5],97:[0,.43056,0,0,.5],98:[0,.69444,0,0,.55556],99:[0,.43056,0,0,.44445],100:[0,.69444,0,0,.55556],101:[0,.43056,0,0,.44445],102:[0,.69444,.07778,0,.30556],103:[.19444,.43056,.01389,0,.5],104:[0,.69444,0,0,.55556],105:[0,.66786,0,0,.27778],106:[.19444,.66786,0,0,.30556],107:[0,.69444,0,0,.52778],108:[0,.69444,0,0,.27778],109:[0,.43056,0,0,.83334],110:[0,.43056,0,0,.55556],111:[0,.43056,0,0,.5],112:[.19444,.43056,0,0,.55556],113:[.19444,.43056,0,0,.52778],114:[0,.43056,0,0,.39167],115:[0,.43056,0,0,.39445],116:[0,.61508,0,0,.38889],117:[0,.43056,0,0,.55556],118:[0,.43056,.01389,0,.52778],119:[0,.43056,.01389,0,.72222],120:[0,.43056,0,0,.52778],121:[.19444,.43056,.01389,0,.52778],122:[0,.43056,0,0,.44445],123:[.25,.75,0,0,.5],124:[.25,.75,0,0,.27778],125:[.25,.75,0,0,.5],126:[.35,.31786,0,0,.5],160:[0,0,0,0,.25],163:[0,.69444,0,0,.76909],167:[.19444,.69444,0,0,.44445],168:[0,.66786,0,0,.5],172:[0,.43056,0,0,.66667],176:[0,.69444,0,0,.75],177:[.08333,.58333,0,0,.77778],182:[.19444,.69444,0,0,.61111],184:[.17014,0,0,0,.44445],198:[0,.68333,0,0,.90278],215:[.08333,.58333,0,0,.77778],216:[.04861,.73194,0,0,.77778],223:[0,.69444,0,0,.5],230:[0,.43056,0,0,.72222],247:[.08333,.58333,0,0,.77778],248:[.09722,.52778,0,0,.5],305:[0,.43056,0,0,.27778],338:[0,.68333,0,0,1.01389],339:[0,.43056,0,0,.77778],567:[.19444,.43056,0,0,.30556],710:[0,.69444,0,0,.5],711:[0,.62847,0,0,.5],713:[0,.56778,0,0,.5],714:[0,.69444,0,0,.5],715:[0,.69444,0,0,.5],728:[0,.69444,0,0,.5],729:[0,.66786,0,0,.27778],730:[0,.69444,0,0,.75],732:[0,.66786,0,0,.5],733:[0,.69444,0,0,.5],915:[0,.68333,0,0,.625],916:[0,.68333,0,0,.83334],920:[0,.68333,0,0,.77778],923:[0,.68333,0,0,.69445],926:[0,.68333,0,0,.66667],928:[0,.68333,0,0,.75],931:[0,.68333,0,0,.72222],933:[0,.68333,0,0,.77778],934:[0,.68333,0,0,.72222],936:[0,.68333,0,0,.77778],937:[0,.68333,0,0,.72222],8211:[0,.43056,.02778,0,.5],8212:[0,.43056,.02778,0,1],8216:[0,.69444,0,0,.27778],8217:[0,.69444,0,0,.27778],8220:[0,.69444,0,0,.5],8221:[0,.69444,0,0,.5],8224:[.19444,.69444,0,0,.44445],8225:[.19444,.69444,0,0,.44445],8230:[0,.123,0,0,1.172],8242:[0,.55556,0,0,.275],8407:[0,.71444,.15382,0,.5],8463:[0,.68889,0,0,.54028],8465:[0,.69444,0,0,.72222],8467:[0,.69444,0,.11111,.41667],8472:[.19444,.43056,0,.11111,.63646],8476:[0,.69444,0,0,.72222],8501:[0,.69444,0,0,.61111],8592:[-.13313,.36687,0,0,1],8593:[.19444,.69444,0,0,.5],8594:[-.13313,.36687,0,0,1],8595:[.19444,.69444,0,0,.5],8596:[-.13313,.36687,0,0,1],8597:[.25,.75,0,0,.5],8598:[.19444,.69444,0,0,1],8599:[.19444,.69444,0,0,1],8600:[.19444,.69444,0,0,1],8601:[.19444,.69444,0,0,1],8614:[.011,.511,0,0,1],8617:[.011,.511,0,0,1.126],8618:[.011,.511,0,0,1.126],8636:[-.13313,.36687,0,0,1],8637:[-.13313,.36687,0,0,1],8640:[-.13313,.36687,0,0,1],8641:[-.13313,.36687,0,0,1],8652:[.011,.671,0,0,1],8656:[-.13313,.36687,0,0,1],8657:[.19444,.69444,0,0,.61111],8658:[-.13313,.36687,0,0,1],8659:[.19444,.69444,0,0,.61111],8660:[-.13313,.36687,0,0,1],8661:[.25,.75,0,0,.61111],8704:[0,.69444,0,0,.55556],8706:[0,.69444,.05556,.08334,.5309],8707:[0,.69444,0,0,.55556],8709:[.05556,.75,0,0,.5],8711:[0,.68333,0,0,.83334],8712:[.0391,.5391,0,0,.66667],8715:[.0391,.5391,0,0,.66667],8722:[.08333,.58333,0,0,.77778],8723:[.08333,.58333,0,0,.77778],8725:[.25,.75,0,0,.5],8726:[.25,.75,0,0,.5],8727:[-.03472,.46528,0,0,.5],8728:[-.05555,.44445,0,0,.5],8729:[-.05555,.44445,0,0,.5],8730:[.2,.8,0,0,.83334],8733:[0,.43056,0,0,.77778],8734:[0,.43056,0,0,1],8736:[0,.69224,0,0,.72222],8739:[.25,.75,0,0,.27778],8741:[.25,.75,0,0,.5],8743:[0,.55556,0,0,.66667],8744:[0,.55556,0,0,.66667],8745:[0,.55556,0,0,.66667],8746:[0,.55556,0,0,.66667],8747:[.19444,.69444,.11111,0,.41667],8764:[-.13313,.36687,0,0,.77778],8768:[.19444,.69444,0,0,.27778],8771:[-.03625,.46375,0,0,.77778],8773:[-.022,.589,0,0,1],8776:[-.01688,.48312,0,0,.77778],8781:[-.03625,.46375,0,0,.77778],8784:[-.133,.673,0,0,.778],8801:[-.03625,.46375,0,0,.77778],8804:[.13597,.63597,0,0,.77778],8805:[.13597,.63597,0,0,.77778],8810:[.0391,.5391,0,0,1],8811:[.0391,.5391,0,0,1],8826:[.0391,.5391,0,0,.77778],8827:[.0391,.5391,0,0,.77778],8834:[.0391,.5391,0,0,.77778],8835:[.0391,.5391,0,0,.77778],8838:[.13597,.63597,0,0,.77778],8839:[.13597,.63597,0,0,.77778],8846:[0,.55556,0,0,.66667],8849:[.13597,.63597,0,0,.77778],8850:[.13597,.63597,0,0,.77778],8851:[0,.55556,0,0,.66667],8852:[0,.55556,0,0,.66667],8853:[.08333,.58333,0,0,.77778],8854:[.08333,.58333,0,0,.77778],8855:[.08333,.58333,0,0,.77778],8856:[.08333,.58333,0,0,.77778],8857:[.08333,.58333,0,0,.77778],8866:[0,.69444,0,0,.61111],8867:[0,.69444,0,0,.61111],8868:[0,.69444,0,0,.77778],8869:[0,.69444,0,0,.77778],8872:[.249,.75,0,0,.867],8900:[-.05555,.44445,0,0,.5],8901:[-.05555,.44445,0,0,.27778],8902:[-.03472,.46528,0,0,.5],8904:[.005,.505,0,0,.9],8942:[.03,.903,0,0,.278],8943:[-.19,.313,0,0,1.172],8945:[-.1,.823,0,0,1.282],8968:[.25,.75,0,0,.44445],8969:[.25,.75,0,0,.44445],8970:[.25,.75,0,0,.44445],8971:[.25,.75,0,0,.44445],8994:[-.14236,.35764,0,0,1],8995:[-.14236,.35764,0,0,1],9136:[.244,.744,0,0,.412],9137:[.244,.745,0,0,.412],9651:[.19444,.69444,0,0,.88889],9657:[-.03472,.46528,0,0,.5],9661:[.19444,.69444,0,0,.88889],9667:[-.03472,.46528,0,0,.5],9711:[.19444,.69444,0,0,1],9824:[.12963,.69444,0,0,.77778],9825:[.12963,.69444,0,0,.77778],9826:[.12963,.69444,0,0,.77778],9827:[.12963,.69444,0,0,.77778],9837:[0,.75,0,0,.38889],9838:[.19444,.69444,0,0,.38889],9839:[.19444,.69444,0,0,.38889],10216:[.25,.75,0,0,.38889],10217:[.25,.75,0,0,.38889],10222:[.244,.744,0,0,.412],10223:[.244,.745,0,0,.412],10229:[.011,.511,0,0,1.609],10230:[.011,.511,0,0,1.638],10231:[.011,.511,0,0,1.859],10232:[.024,.525,0,0,1.609],10233:[.024,.525,0,0,1.638],10234:[.024,.525,0,0,1.858],10236:[.011,.511,0,0,1.638],10815:[0,.68333,0,0,.75],10927:[.13597,.63597,0,0,.77778],10928:[.13597,.63597,0,0,.77778],57376:[.19444,.69444,0,0,0]},"Math-BoldItalic":{32:[0,0,0,0,.25],48:[0,.44444,0,0,.575],49:[0,.44444,0,0,.575],50:[0,.44444,0,0,.575],51:[.19444,.44444,0,0,.575],52:[.19444,.44444,0,0,.575],53:[.19444,.44444,0,0,.575],54:[0,.64444,0,0,.575],55:[.19444,.44444,0,0,.575],56:[0,.64444,0,0,.575],57:[.19444,.44444,0,0,.575],65:[0,.68611,0,0,.86944],66:[0,.68611,.04835,0,.8664],67:[0,.68611,.06979,0,.81694],68:[0,.68611,.03194,0,.93812],69:[0,.68611,.05451,0,.81007],70:[0,.68611,.15972,0,.68889],71:[0,.68611,0,0,.88673],72:[0,.68611,.08229,0,.98229],73:[0,.68611,.07778,0,.51111],74:[0,.68611,.10069,0,.63125],75:[0,.68611,.06979,0,.97118],76:[0,.68611,0,0,.75555],77:[0,.68611,.11424,0,1.14201],78:[0,.68611,.11424,0,.95034],79:[0,.68611,.03194,0,.83666],80:[0,.68611,.15972,0,.72309],81:[.19444,.68611,0,0,.86861],82:[0,.68611,.00421,0,.87235],83:[0,.68611,.05382,0,.69271],84:[0,.68611,.15972,0,.63663],85:[0,.68611,.11424,0,.80027],86:[0,.68611,.25555,0,.67778],87:[0,.68611,.15972,0,1.09305],88:[0,.68611,.07778,0,.94722],89:[0,.68611,.25555,0,.67458],90:[0,.68611,.06979,0,.77257],97:[0,.44444,0,0,.63287],98:[0,.69444,0,0,.52083],99:[0,.44444,0,0,.51342],100:[0,.69444,0,0,.60972],101:[0,.44444,0,0,.55361],102:[.19444,.69444,.11042,0,.56806],103:[.19444,.44444,.03704,0,.5449],104:[0,.69444,0,0,.66759],105:[0,.69326,0,0,.4048],106:[.19444,.69326,.0622,0,.47083],107:[0,.69444,.01852,0,.6037],108:[0,.69444,.0088,0,.34815],109:[0,.44444,0,0,1.0324],110:[0,.44444,0,0,.71296],111:[0,.44444,0,0,.58472],112:[.19444,.44444,0,0,.60092],113:[.19444,.44444,.03704,0,.54213],114:[0,.44444,.03194,0,.5287],115:[0,.44444,0,0,.53125],116:[0,.63492,0,0,.41528],117:[0,.44444,0,0,.68102],118:[0,.44444,.03704,0,.56666],119:[0,.44444,.02778,0,.83148],120:[0,.44444,0,0,.65903],121:[.19444,.44444,.03704,0,.59028],122:[0,.44444,.04213,0,.55509],160:[0,0,0,0,.25],915:[0,.68611,.15972,0,.65694],916:[0,.68611,0,0,.95833],920:[0,.68611,.03194,0,.86722],923:[0,.68611,0,0,.80555],926:[0,.68611,.07458,0,.84125],928:[0,.68611,.08229,0,.98229],931:[0,.68611,.05451,0,.88507],933:[0,.68611,.15972,0,.67083],934:[0,.68611,0,0,.76666],936:[0,.68611,.11653,0,.71402],937:[0,.68611,.04835,0,.8789],945:[0,.44444,0,0,.76064],946:[.19444,.69444,.03403,0,.65972],947:[.19444,.44444,.06389,0,.59003],948:[0,.69444,.03819,0,.52222],949:[0,.44444,0,0,.52882],950:[.19444,.69444,.06215,0,.50833],951:[.19444,.44444,.03704,0,.6],952:[0,.69444,.03194,0,.5618],953:[0,.44444,0,0,.41204],954:[0,.44444,0,0,.66759],955:[0,.69444,0,0,.67083],956:[.19444,.44444,0,0,.70787],957:[0,.44444,.06898,0,.57685],958:[.19444,.69444,.03021,0,.50833],959:[0,.44444,0,0,.58472],960:[0,.44444,.03704,0,.68241],961:[.19444,.44444,0,0,.6118],962:[.09722,.44444,.07917,0,.42361],963:[0,.44444,.03704,0,.68588],964:[0,.44444,.13472,0,.52083],965:[0,.44444,.03704,0,.63055],966:[.19444,.44444,0,0,.74722],967:[.19444,.44444,0,0,.71805],968:[.19444,.69444,.03704,0,.75833],969:[0,.44444,.03704,0,.71782],977:[0,.69444,0,0,.69155],981:[.19444,.69444,0,0,.7125],982:[0,.44444,.03194,0,.975],1009:[.19444,.44444,0,0,.6118],1013:[0,.44444,0,0,.48333],57649:[0,.44444,0,0,.39352],57911:[.19444,.44444,0,0,.43889]},"Math-Italic":{32:[0,0,0,0,.25],48:[0,.43056,0,0,.5],49:[0,.43056,0,0,.5],50:[0,.43056,0,0,.5],51:[.19444,.43056,0,0,.5],52:[.19444,.43056,0,0,.5],53:[.19444,.43056,0,0,.5],54:[0,.64444,0,0,.5],55:[.19444,.43056,0,0,.5],56:[0,.64444,0,0,.5],57:[.19444,.43056,0,0,.5],65:[0,.68333,0,.13889,.75],66:[0,.68333,.05017,.08334,.75851],67:[0,.68333,.07153,.08334,.71472],68:[0,.68333,.02778,.05556,.82792],69:[0,.68333,.05764,.08334,.7382],70:[0,.68333,.13889,.08334,.64306],71:[0,.68333,0,.08334,.78625],72:[0,.68333,.08125,.05556,.83125],73:[0,.68333,.07847,.11111,.43958],74:[0,.68333,.09618,.16667,.55451],75:[0,.68333,.07153,.05556,.84931],76:[0,.68333,0,.02778,.68056],77:[0,.68333,.10903,.08334,.97014],78:[0,.68333,.10903,.08334,.80347],79:[0,.68333,.02778,.08334,.76278],80:[0,.68333,.13889,.08334,.64201],81:[.19444,.68333,0,.08334,.79056],82:[0,.68333,.00773,.08334,.75929],83:[0,.68333,.05764,.08334,.6132],84:[0,.68333,.13889,.08334,.58438],85:[0,.68333,.10903,.02778,.68278],86:[0,.68333,.22222,0,.58333],87:[0,.68333,.13889,0,.94445],88:[0,.68333,.07847,.08334,.82847],89:[0,.68333,.22222,0,.58056],90:[0,.68333,.07153,.08334,.68264],97:[0,.43056,0,0,.52859],98:[0,.69444,0,0,.42917],99:[0,.43056,0,.05556,.43276],100:[0,.69444,0,.16667,.52049],101:[0,.43056,0,.05556,.46563],102:[.19444,.69444,.10764,.16667,.48959],103:[.19444,.43056,.03588,.02778,.47697],104:[0,.69444,0,0,.57616],105:[0,.65952,0,0,.34451],106:[.19444,.65952,.05724,0,.41181],107:[0,.69444,.03148,0,.5206],108:[0,.69444,.01968,.08334,.29838],109:[0,.43056,0,0,.87801],110:[0,.43056,0,0,.60023],111:[0,.43056,0,.05556,.48472],112:[.19444,.43056,0,.08334,.50313],113:[.19444,.43056,.03588,.08334,.44641],114:[0,.43056,.02778,.05556,.45116],115:[0,.43056,0,.05556,.46875],116:[0,.61508,0,.08334,.36111],117:[0,.43056,0,.02778,.57246],118:[0,.43056,.03588,.02778,.48472],119:[0,.43056,.02691,.08334,.71592],120:[0,.43056,0,.02778,.57153],121:[.19444,.43056,.03588,.05556,.49028],122:[0,.43056,.04398,.05556,.46505],160:[0,0,0,0,.25],915:[0,.68333,.13889,.08334,.61528],916:[0,.68333,0,.16667,.83334],920:[0,.68333,.02778,.08334,.76278],923:[0,.68333,0,.16667,.69445],926:[0,.68333,.07569,.08334,.74236],928:[0,.68333,.08125,.05556,.83125],931:[0,.68333,.05764,.08334,.77986],933:[0,.68333,.13889,.05556,.58333],934:[0,.68333,0,.08334,.66667],936:[0,.68333,.11,.05556,.61222],937:[0,.68333,.05017,.08334,.7724],945:[0,.43056,.0037,.02778,.6397],946:[.19444,.69444,.05278,.08334,.56563],947:[.19444,.43056,.05556,0,.51773],948:[0,.69444,.03785,.05556,.44444],949:[0,.43056,0,.08334,.46632],950:[.19444,.69444,.07378,.08334,.4375],951:[.19444,.43056,.03588,.05556,.49653],952:[0,.69444,.02778,.08334,.46944],953:[0,.43056,0,.05556,.35394],954:[0,.43056,0,0,.57616],955:[0,.69444,0,0,.58334],956:[.19444,.43056,0,.02778,.60255],957:[0,.43056,.06366,.02778,.49398],958:[.19444,.69444,.04601,.11111,.4375],959:[0,.43056,0,.05556,.48472],960:[0,.43056,.03588,0,.57003],961:[.19444,.43056,0,.08334,.51702],962:[.09722,.43056,.07986,.08334,.36285],963:[0,.43056,.03588,0,.57141],964:[0,.43056,.1132,.02778,.43715],965:[0,.43056,.03588,.02778,.54028],966:[.19444,.43056,0,.08334,.65417],967:[.19444,.43056,0,.05556,.62569],968:[.19444,.69444,.03588,.11111,.65139],969:[0,.43056,.03588,0,.62245],977:[0,.69444,0,.08334,.59144],981:[.19444,.69444,0,.08334,.59583],982:[0,.43056,.02778,0,.82813],1009:[.19444,.43056,0,.08334,.51702],1013:[0,.43056,0,.05556,.4059],57649:[0,.43056,0,.02778,.32246],57911:[.19444,.43056,0,.08334,.38403]},"SansSerif-Bold":{32:[0,0,0,0,.25],33:[0,.69444,0,0,.36667],34:[0,.69444,0,0,.55834],35:[.19444,.69444,0,0,.91667],36:[.05556,.75,0,0,.55],37:[.05556,.75,0,0,1.02912],38:[0,.69444,0,0,.83056],39:[0,.69444,0,0,.30556],40:[.25,.75,0,0,.42778],41:[.25,.75,0,0,.42778],42:[0,.75,0,0,.55],43:[.11667,.61667,0,0,.85556],44:[.10556,.13056,0,0,.30556],45:[0,.45833,0,0,.36667],46:[0,.13056,0,0,.30556],47:[.25,.75,0,0,.55],48:[0,.69444,0,0,.55],49:[0,.69444,0,0,.55],50:[0,.69444,0,0,.55],51:[0,.69444,0,0,.55],52:[0,.69444,0,0,.55],53:[0,.69444,0,0,.55],54:[0,.69444,0,0,.55],55:[0,.69444,0,0,.55],56:[0,.69444,0,0,.55],57:[0,.69444,0,0,.55],58:[0,.45833,0,0,.30556],59:[.10556,.45833,0,0,.30556],61:[-.09375,.40625,0,0,.85556],63:[0,.69444,0,0,.51945],64:[0,.69444,0,0,.73334],65:[0,.69444,0,0,.73334],66:[0,.69444,0,0,.73334],67:[0,.69444,0,0,.70278],68:[0,.69444,0,0,.79445],69:[0,.69444,0,0,.64167],70:[0,.69444,0,0,.61111],71:[0,.69444,0,0,.73334],72:[0,.69444,0,0,.79445],73:[0,.69444,0,0,.33056],74:[0,.69444,0,0,.51945],75:[0,.69444,0,0,.76389],76:[0,.69444,0,0,.58056],77:[0,.69444,0,0,.97778],78:[0,.69444,0,0,.79445],79:[0,.69444,0,0,.79445],80:[0,.69444,0,0,.70278],81:[.10556,.69444,0,0,.79445],82:[0,.69444,0,0,.70278],83:[0,.69444,0,0,.61111],84:[0,.69444,0,0,.73334],85:[0,.69444,0,0,.76389],86:[0,.69444,.01528,0,.73334],87:[0,.69444,.01528,0,1.03889],88:[0,.69444,0,0,.73334],89:[0,.69444,.0275,0,.73334],90:[0,.69444,0,0,.67223],91:[.25,.75,0,0,.34306],93:[.25,.75,0,0,.34306],94:[0,.69444,0,0,.55],95:[.35,.10833,.03056,0,.55],97:[0,.45833,0,0,.525],98:[0,.69444,0,0,.56111],99:[0,.45833,0,0,.48889],100:[0,.69444,0,0,.56111],101:[0,.45833,0,0,.51111],102:[0,.69444,.07639,0,.33611],103:[.19444,.45833,.01528,0,.55],104:[0,.69444,0,0,.56111],105:[0,.69444,0,0,.25556],106:[.19444,.69444,0,0,.28611],107:[0,.69444,0,0,.53056],108:[0,.69444,0,0,.25556],109:[0,.45833,0,0,.86667],110:[0,.45833,0,0,.56111],111:[0,.45833,0,0,.55],112:[.19444,.45833,0,0,.56111],113:[.19444,.45833,0,0,.56111],114:[0,.45833,.01528,0,.37222],115:[0,.45833,0,0,.42167],116:[0,.58929,0,0,.40417],117:[0,.45833,0,0,.56111],118:[0,.45833,.01528,0,.5],119:[0,.45833,.01528,0,.74445],120:[0,.45833,0,0,.5],121:[.19444,.45833,.01528,0,.5],122:[0,.45833,0,0,.47639],126:[.35,.34444,0,0,.55],160:[0,0,0,0,.25],168:[0,.69444,0,0,.55],176:[0,.69444,0,0,.73334],180:[0,.69444,0,0,.55],184:[.17014,0,0,0,.48889],305:[0,.45833,0,0,.25556],567:[.19444,.45833,0,0,.28611],710:[0,.69444,0,0,.55],711:[0,.63542,0,0,.55],713:[0,.63778,0,0,.55],728:[0,.69444,0,0,.55],729:[0,.69444,0,0,.30556],730:[0,.69444,0,0,.73334],732:[0,.69444,0,0,.55],733:[0,.69444,0,0,.55],915:[0,.69444,0,0,.58056],916:[0,.69444,0,0,.91667],920:[0,.69444,0,0,.85556],923:[0,.69444,0,0,.67223],926:[0,.69444,0,0,.73334],928:[0,.69444,0,0,.79445],931:[0,.69444,0,0,.79445],933:[0,.69444,0,0,.85556],934:[0,.69444,0,0,.79445],936:[0,.69444,0,0,.85556],937:[0,.69444,0,0,.79445],8211:[0,.45833,.03056,0,.55],8212:[0,.45833,.03056,0,1.10001],8216:[0,.69444,0,0,.30556],8217:[0,.69444,0,0,.30556],8220:[0,.69444,0,0,.55834],8221:[0,.69444,0,0,.55834]},"SansSerif-Italic":{32:[0,0,0,0,.25],33:[0,.69444,.05733,0,.31945],34:[0,.69444,.00316,0,.5],35:[.19444,.69444,.05087,0,.83334],36:[.05556,.75,.11156,0,.5],37:[.05556,.75,.03126,0,.83334],38:[0,.69444,.03058,0,.75834],39:[0,.69444,.07816,0,.27778],40:[.25,.75,.13164,0,.38889],41:[.25,.75,.02536,0,.38889],42:[0,.75,.11775,0,.5],43:[.08333,.58333,.02536,0,.77778],44:[.125,.08333,0,0,.27778],45:[0,.44444,.01946,0,.33333],46:[0,.08333,0,0,.27778],47:[.25,.75,.13164,0,.5],48:[0,.65556,.11156,0,.5],49:[0,.65556,.11156,0,.5],50:[0,.65556,.11156,0,.5],51:[0,.65556,.11156,0,.5],52:[0,.65556,.11156,0,.5],53:[0,.65556,.11156,0,.5],54:[0,.65556,.11156,0,.5],55:[0,.65556,.11156,0,.5],56:[0,.65556,.11156,0,.5],57:[0,.65556,.11156,0,.5],58:[0,.44444,.02502,0,.27778],59:[.125,.44444,.02502,0,.27778],61:[-.13,.37,.05087,0,.77778],63:[0,.69444,.11809,0,.47222],64:[0,.69444,.07555,0,.66667],65:[0,.69444,0,0,.66667],66:[0,.69444,.08293,0,.66667],67:[0,.69444,.11983,0,.63889],68:[0,.69444,.07555,0,.72223],69:[0,.69444,.11983,0,.59722],70:[0,.69444,.13372,0,.56945],71:[0,.69444,.11983,0,.66667],72:[0,.69444,.08094,0,.70834],73:[0,.69444,.13372,0,.27778],74:[0,.69444,.08094,0,.47222],75:[0,.69444,.11983,0,.69445],76:[0,.69444,0,0,.54167],77:[0,.69444,.08094,0,.875],78:[0,.69444,.08094,0,.70834],79:[0,.69444,.07555,0,.73611],80:[0,.69444,.08293,0,.63889],81:[.125,.69444,.07555,0,.73611],82:[0,.69444,.08293,0,.64584],83:[0,.69444,.09205,0,.55556],84:[0,.69444,.13372,0,.68056],85:[0,.69444,.08094,0,.6875],86:[0,.69444,.1615,0,.66667],87:[0,.69444,.1615,0,.94445],88:[0,.69444,.13372,0,.66667],89:[0,.69444,.17261,0,.66667],90:[0,.69444,.11983,0,.61111],91:[.25,.75,.15942,0,.28889],93:[.25,.75,.08719,0,.28889],94:[0,.69444,.0799,0,.5],95:[.35,.09444,.08616,0,.5],97:[0,.44444,.00981,0,.48056],98:[0,.69444,.03057,0,.51667],99:[0,.44444,.08336,0,.44445],100:[0,.69444,.09483,0,.51667],101:[0,.44444,.06778,0,.44445],102:[0,.69444,.21705,0,.30556],103:[.19444,.44444,.10836,0,.5],104:[0,.69444,.01778,0,.51667],105:[0,.67937,.09718,0,.23889],106:[.19444,.67937,.09162,0,.26667],107:[0,.69444,.08336,0,.48889],108:[0,.69444,.09483,0,.23889],109:[0,.44444,.01778,0,.79445],110:[0,.44444,.01778,0,.51667],111:[0,.44444,.06613,0,.5],112:[.19444,.44444,.0389,0,.51667],113:[.19444,.44444,.04169,0,.51667],114:[0,.44444,.10836,0,.34167],115:[0,.44444,.0778,0,.38333],116:[0,.57143,.07225,0,.36111],117:[0,.44444,.04169,0,.51667],118:[0,.44444,.10836,0,.46111],119:[0,.44444,.10836,0,.68334],120:[0,.44444,.09169,0,.46111],121:[.19444,.44444,.10836,0,.46111],122:[0,.44444,.08752,0,.43472],126:[.35,.32659,.08826,0,.5],160:[0,0,0,0,.25],168:[0,.67937,.06385,0,.5],176:[0,.69444,0,0,.73752],184:[.17014,0,0,0,.44445],305:[0,.44444,.04169,0,.23889],567:[.19444,.44444,.04169,0,.26667],710:[0,.69444,.0799,0,.5],711:[0,.63194,.08432,0,.5],713:[0,.60889,.08776,0,.5],714:[0,.69444,.09205,0,.5],715:[0,.69444,0,0,.5],728:[0,.69444,.09483,0,.5],729:[0,.67937,.07774,0,.27778],730:[0,.69444,0,0,.73752],732:[0,.67659,.08826,0,.5],733:[0,.69444,.09205,0,.5],915:[0,.69444,.13372,0,.54167],916:[0,.69444,0,0,.83334],920:[0,.69444,.07555,0,.77778],923:[0,.69444,0,0,.61111],926:[0,.69444,.12816,0,.66667],928:[0,.69444,.08094,0,.70834],931:[0,.69444,.11983,0,.72222],933:[0,.69444,.09031,0,.77778],934:[0,.69444,.04603,0,.72222],936:[0,.69444,.09031,0,.77778],937:[0,.69444,.08293,0,.72222],8211:[0,.44444,.08616,0,.5],8212:[0,.44444,.08616,0,1],8216:[0,.69444,.07816,0,.27778],8217:[0,.69444,.07816,0,.27778],8220:[0,.69444,.14205,0,.5],8221:[0,.69444,.00316,0,.5]},"SansSerif-Regular":{32:[0,0,0,0,.25],33:[0,.69444,0,0,.31945],34:[0,.69444,0,0,.5],35:[.19444,.69444,0,0,.83334],36:[.05556,.75,0,0,.5],37:[.05556,.75,0,0,.83334],38:[0,.69444,0,0,.75834],39:[0,.69444,0,0,.27778],40:[.25,.75,0,0,.38889],41:[.25,.75,0,0,.38889],42:[0,.75,0,0,.5],43:[.08333,.58333,0,0,.77778],44:[.125,.08333,0,0,.27778],45:[0,.44444,0,0,.33333],46:[0,.08333,0,0,.27778],47:[.25,.75,0,0,.5],48:[0,.65556,0,0,.5],49:[0,.65556,0,0,.5],50:[0,.65556,0,0,.5],51:[0,.65556,0,0,.5],52:[0,.65556,0,0,.5],53:[0,.65556,0,0,.5],54:[0,.65556,0,0,.5],55:[0,.65556,0,0,.5],56:[0,.65556,0,0,.5],57:[0,.65556,0,0,.5],58:[0,.44444,0,0,.27778],59:[.125,.44444,0,0,.27778],61:[-.13,.37,0,0,.77778],63:[0,.69444,0,0,.47222],64:[0,.69444,0,0,.66667],65:[0,.69444,0,0,.66667],66:[0,.69444,0,0,.66667],67:[0,.69444,0,0,.63889],68:[0,.69444,0,0,.72223],69:[0,.69444,0,0,.59722],70:[0,.69444,0,0,.56945],71:[0,.69444,0,0,.66667],72:[0,.69444,0,0,.70834],73:[0,.69444,0,0,.27778],74:[0,.69444,0,0,.47222],75:[0,.69444,0,0,.69445],76:[0,.69444,0,0,.54167],77:[0,.69444,0,0,.875],78:[0,.69444,0,0,.70834],79:[0,.69444,0,0,.73611],80:[0,.69444,0,0,.63889],81:[.125,.69444,0,0,.73611],82:[0,.69444,0,0,.64584],83:[0,.69444,0,0,.55556],84:[0,.69444,0,0,.68056],85:[0,.69444,0,0,.6875],86:[0,.69444,.01389,0,.66667],87:[0,.69444,.01389,0,.94445],88:[0,.69444,0,0,.66667],89:[0,.69444,.025,0,.66667],90:[0,.69444,0,0,.61111],91:[.25,.75,0,0,.28889],93:[.25,.75,0,0,.28889],94:[0,.69444,0,0,.5],95:[.35,.09444,.02778,0,.5],97:[0,.44444,0,0,.48056],98:[0,.69444,0,0,.51667],99:[0,.44444,0,0,.44445],100:[0,.69444,0,0,.51667],101:[0,.44444,0,0,.44445],102:[0,.69444,.06944,0,.30556],103:[.19444,.44444,.01389,0,.5],104:[0,.69444,0,0,.51667],105:[0,.67937,0,0,.23889],106:[.19444,.67937,0,0,.26667],107:[0,.69444,0,0,.48889],108:[0,.69444,0,0,.23889],109:[0,.44444,0,0,.79445],110:[0,.44444,0,0,.51667],111:[0,.44444,0,0,.5],112:[.19444,.44444,0,0,.51667],113:[.19444,.44444,0,0,.51667],114:[0,.44444,.01389,0,.34167],115:[0,.44444,0,0,.38333],116:[0,.57143,0,0,.36111],117:[0,.44444,0,0,.51667],118:[0,.44444,.01389,0,.46111],119:[0,.44444,.01389,0,.68334],120:[0,.44444,0,0,.46111],121:[.19444,.44444,.01389,0,.46111],122:[0,.44444,0,0,.43472],126:[.35,.32659,0,0,.5],160:[0,0,0,0,.25],168:[0,.67937,0,0,.5],176:[0,.69444,0,0,.66667],184:[.17014,0,0,0,.44445],305:[0,.44444,0,0,.23889],567:[.19444,.44444,0,0,.26667],710:[0,.69444,0,0,.5],711:[0,.63194,0,0,.5],713:[0,.60889,0,0,.5],714:[0,.69444,0,0,.5],715:[0,.69444,0,0,.5],728:[0,.69444,0,0,.5],729:[0,.67937,0,0,.27778],730:[0,.69444,0,0,.66667],732:[0,.67659,0,0,.5],733:[0,.69444,0,0,.5],915:[0,.69444,0,0,.54167],916:[0,.69444,0,0,.83334],920:[0,.69444,0,0,.77778],923:[0,.69444,0,0,.61111],926:[0,.69444,0,0,.66667],928:[0,.69444,0,0,.70834],931:[0,.69444,0,0,.72222],933:[0,.69444,0,0,.77778],934:[0,.69444,0,0,.72222],936:[0,.69444,0,0,.77778],937:[0,.69444,0,0,.72222],8211:[0,.44444,.02778,0,.5],8212:[0,.44444,.02778,0,1],8216:[0,.69444,0,0,.27778],8217:[0,.69444,0,0,.27778],8220:[0,.69444,0,0,.5],8221:[0,.69444,0,0,.5]},"Script-Regular":{32:[0,0,0,0,.25],65:[0,.7,.22925,0,.80253],66:[0,.7,.04087,0,.90757],67:[0,.7,.1689,0,.66619],68:[0,.7,.09371,0,.77443],69:[0,.7,.18583,0,.56162],70:[0,.7,.13634,0,.89544],71:[0,.7,.17322,0,.60961],72:[0,.7,.29694,0,.96919],73:[0,.7,.19189,0,.80907],74:[.27778,.7,.19189,0,1.05159],75:[0,.7,.31259,0,.91364],76:[0,.7,.19189,0,.87373],77:[0,.7,.15981,0,1.08031],78:[0,.7,.3525,0,.9015],79:[0,.7,.08078,0,.73787],80:[0,.7,.08078,0,1.01262],81:[0,.7,.03305,0,.88282],82:[0,.7,.06259,0,.85],83:[0,.7,.19189,0,.86767],84:[0,.7,.29087,0,.74697],85:[0,.7,.25815,0,.79996],86:[0,.7,.27523,0,.62204],87:[0,.7,.27523,0,.80532],88:[0,.7,.26006,0,.94445],89:[0,.7,.2939,0,.70961],90:[0,.7,.24037,0,.8212],160:[0,0,0,0,.25]},"Size1-Regular":{32:[0,0,0,0,.25],40:[.35001,.85,0,0,.45834],41:[.35001,.85,0,0,.45834],47:[.35001,.85,0,0,.57778],91:[.35001,.85,0,0,.41667],92:[.35001,.85,0,0,.57778],93:[.35001,.85,0,0,.41667],123:[.35001,.85,0,0,.58334],125:[.35001,.85,0,0,.58334],160:[0,0,0,0,.25],710:[0,.72222,0,0,.55556],732:[0,.72222,0,0,.55556],770:[0,.72222,0,0,.55556],771:[0,.72222,0,0,.55556],8214:[-99e-5,.601,0,0,.77778],8593:[1e-5,.6,0,0,.66667],8595:[1e-5,.6,0,0,.66667],8657:[1e-5,.6,0,0,.77778],8659:[1e-5,.6,0,0,.77778],8719:[.25001,.75,0,0,.94445],8720:[.25001,.75,0,0,.94445],8721:[.25001,.75,0,0,1.05556],8730:[.35001,.85,0,0,1],8739:[-.00599,.606,0,0,.33333],8741:[-.00599,.606,0,0,.55556],8747:[.30612,.805,.19445,0,.47222],8748:[.306,.805,.19445,0,.47222],8749:[.306,.805,.19445,0,.47222],8750:[.30612,.805,.19445,0,.47222],8896:[.25001,.75,0,0,.83334],8897:[.25001,.75,0,0,.83334],8898:[.25001,.75,0,0,.83334],8899:[.25001,.75,0,0,.83334],8968:[.35001,.85,0,0,.47222],8969:[.35001,.85,0,0,.47222],8970:[.35001,.85,0,0,.47222],8971:[.35001,.85,0,0,.47222],9168:[-99e-5,.601,0,0,.66667],10216:[.35001,.85,0,0,.47222],10217:[.35001,.85,0,0,.47222],10752:[.25001,.75,0,0,1.11111],10753:[.25001,.75,0,0,1.11111],10754:[.25001,.75,0,0,1.11111],10756:[.25001,.75,0,0,.83334],10758:[.25001,.75,0,0,.83334]},"Size2-Regular":{32:[0,0,0,0,.25],40:[.65002,1.15,0,0,.59722],41:[.65002,1.15,0,0,.59722],47:[.65002,1.15,0,0,.81111],91:[.65002,1.15,0,0,.47222],92:[.65002,1.15,0,0,.81111],93:[.65002,1.15,0,0,.47222],123:[.65002,1.15,0,0,.66667],125:[.65002,1.15,0,0,.66667],160:[0,0,0,0,.25],710:[0,.75,0,0,1],732:[0,.75,0,0,1],770:[0,.75,0,0,1],771:[0,.75,0,0,1],8719:[.55001,1.05,0,0,1.27778],8720:[.55001,1.05,0,0,1.27778],8721:[.55001,1.05,0,0,1.44445],8730:[.65002,1.15,0,0,1],8747:[.86225,1.36,.44445,0,.55556],8748:[.862,1.36,.44445,0,.55556],8749:[.862,1.36,.44445,0,.55556],8750:[.86225,1.36,.44445,0,.55556],8896:[.55001,1.05,0,0,1.11111],8897:[.55001,1.05,0,0,1.11111],8898:[.55001,1.05,0,0,1.11111],8899:[.55001,1.05,0,0,1.11111],8968:[.65002,1.15,0,0,.52778],8969:[.65002,1.15,0,0,.52778],8970:[.65002,1.15,0,0,.52778],8971:[.65002,1.15,0,0,.52778],10216:[.65002,1.15,0,0,.61111],10217:[.65002,1.15,0,0,.61111],10752:[.55001,1.05,0,0,1.51112],10753:[.55001,1.05,0,0,1.51112],10754:[.55001,1.05,0,0,1.51112],10756:[.55001,1.05,0,0,1.11111],10758:[.55001,1.05,0,0,1.11111]},"Size3-Regular":{32:[0,0,0,0,.25],40:[.95003,1.45,0,0,.73611],41:[.95003,1.45,0,0,.73611],47:[.95003,1.45,0,0,1.04445],91:[.95003,1.45,0,0,.52778],92:[.95003,1.45,0,0,1.04445],93:[.95003,1.45,0,0,.52778],123:[.95003,1.45,0,0,.75],125:[.95003,1.45,0,0,.75],160:[0,0,0,0,.25],710:[0,.75,0,0,1.44445],732:[0,.75,0,0,1.44445],770:[0,.75,0,0,1.44445],771:[0,.75,0,0,1.44445],8730:[.95003,1.45,0,0,1],8968:[.95003,1.45,0,0,.58334],8969:[.95003,1.45,0,0,.58334],8970:[.95003,1.45,0,0,.58334],8971:[.95003,1.45,0,0,.58334],10216:[.95003,1.45,0,0,.75],10217:[.95003,1.45,0,0,.75]},"Size4-Regular":{32:[0,0,0,0,.25],40:[1.25003,1.75,0,0,.79167],41:[1.25003,1.75,0,0,.79167],47:[1.25003,1.75,0,0,1.27778],91:[1.25003,1.75,0,0,.58334],92:[1.25003,1.75,0,0,1.27778],93:[1.25003,1.75,0,0,.58334],123:[1.25003,1.75,0,0,.80556],125:[1.25003,1.75,0,0,.80556],160:[0,0,0,0,.25],710:[0,.825,0,0,1.8889],732:[0,.825,0,0,1.8889],770:[0,.825,0,0,1.8889],771:[0,.825,0,0,1.8889],8730:[1.25003,1.75,0,0,1],8968:[1.25003,1.75,0,0,.63889],8969:[1.25003,1.75,0,0,.63889],8970:[1.25003,1.75,0,0,.63889],8971:[1.25003,1.75,0,0,.63889],9115:[.64502,1.155,0,0,.875],9116:[1e-5,.6,0,0,.875],9117:[.64502,1.155,0,0,.875],9118:[.64502,1.155,0,0,.875],9119:[1e-5,.6,0,0,.875],9120:[.64502,1.155,0,0,.875],9121:[.64502,1.155,0,0,.66667],9122:[-99e-5,.601,0,0,.66667],9123:[.64502,1.155,0,0,.66667],9124:[.64502,1.155,0,0,.66667],9125:[-99e-5,.601,0,0,.66667],9126:[.64502,1.155,0,0,.66667],9127:[1e-5,.9,0,0,.88889],9128:[.65002,1.15,0,0,.88889],9129:[.90001,0,0,0,.88889],9130:[0,.3,0,0,.88889],9131:[1e-5,.9,0,0,.88889],9132:[.65002,1.15,0,0,.88889],9133:[.90001,0,0,0,.88889],9143:[.88502,.915,0,0,1.05556],10216:[1.25003,1.75,0,0,.80556],10217:[1.25003,1.75,0,0,.80556],57344:[-.00499,.605,0,0,1.05556],57345:[-.00499,.605,0,0,1.05556],57680:[0,.12,0,0,.45],57681:[0,.12,0,0,.45],57682:[0,.12,0,0,.45],57683:[0,.12,0,0,.45]},"Typewriter-Regular":{32:[0,0,0,0,.525],33:[0,.61111,0,0,.525],34:[0,.61111,0,0,.525],35:[0,.61111,0,0,.525],36:[.08333,.69444,0,0,.525],37:[.08333,.69444,0,0,.525],38:[0,.61111,0,0,.525],39:[0,.61111,0,0,.525],40:[.08333,.69444,0,0,.525],41:[.08333,.69444,0,0,.525],42:[0,.52083,0,0,.525],43:[-.08056,.53055,0,0,.525],44:[.13889,.125,0,0,.525],45:[-.08056,.53055,0,0,.525],46:[0,.125,0,0,.525],47:[.08333,.69444,0,0,.525],48:[0,.61111,0,0,.525],49:[0,.61111,0,0,.525],50:[0,.61111,0,0,.525],51:[0,.61111,0,0,.525],52:[0,.61111,0,0,.525],53:[0,.61111,0,0,.525],54:[0,.61111,0,0,.525],55:[0,.61111,0,0,.525],56:[0,.61111,0,0,.525],57:[0,.61111,0,0,.525],58:[0,.43056,0,0,.525],59:[.13889,.43056,0,0,.525],60:[-.05556,.55556,0,0,.525],61:[-.19549,.41562,0,0,.525],62:[-.05556,.55556,0,0,.525],63:[0,.61111,0,0,.525],64:[0,.61111,0,0,.525],65:[0,.61111,0,0,.525],66:[0,.61111,0,0,.525],67:[0,.61111,0,0,.525],68:[0,.61111,0,0,.525],69:[0,.61111,0,0,.525],70:[0,.61111,0,0,.525],71:[0,.61111,0,0,.525],72:[0,.61111,0,0,.525],73:[0,.61111,0,0,.525],74:[0,.61111,0,0,.525],75:[0,.61111,0,0,.525],76:[0,.61111,0,0,.525],77:[0,.61111,0,0,.525],78:[0,.61111,0,0,.525],79:[0,.61111,0,0,.525],80:[0,.61111,0,0,.525],81:[.13889,.61111,0,0,.525],82:[0,.61111,0,0,.525],83:[0,.61111,0,0,.525],84:[0,.61111,0,0,.525],85:[0,.61111,0,0,.525],86:[0,.61111,0,0,.525],87:[0,.61111,0,0,.525],88:[0,.61111,0,0,.525],89:[0,.61111,0,0,.525],90:[0,.61111,0,0,.525],91:[.08333,.69444,0,0,.525],92:[.08333,.69444,0,0,.525],93:[.08333,.69444,0,0,.525],94:[0,.61111,0,0,.525],95:[.09514,0,0,0,.525],96:[0,.61111,0,0,.525],97:[0,.43056,0,0,.525],98:[0,.61111,0,0,.525],99:[0,.43056,0,0,.525],100:[0,.61111,0,0,.525],101:[0,.43056,0,0,.525],102:[0,.61111,0,0,.525],103:[.22222,.43056,0,0,.525],104:[0,.61111,0,0,.525],105:[0,.61111,0,0,.525],106:[.22222,.61111,0,0,.525],107:[0,.61111,0,0,.525],108:[0,.61111,0,0,.525],109:[0,.43056,0,0,.525],110:[0,.43056,0,0,.525],111:[0,.43056,0,0,.525],112:[.22222,.43056,0,0,.525],113:[.22222,.43056,0,0,.525],114:[0,.43056,0,0,.525],115:[0,.43056,0,0,.525],116:[0,.55358,0,0,.525],117:[0,.43056,0,0,.525],118:[0,.43056,0,0,.525],119:[0,.43056,0,0,.525],120:[0,.43056,0,0,.525],121:[.22222,.43056,0,0,.525],122:[0,.43056,0,0,.525],123:[.08333,.69444,0,0,.525],124:[.08333,.69444,0,0,.525],125:[.08333,.69444,0,0,.525],126:[0,.61111,0,0,.525],127:[0,.61111,0,0,.525],160:[0,0,0,0,.525],176:[0,.61111,0,0,.525],184:[.19445,0,0,0,.525],305:[0,.43056,0,0,.525],567:[.22222,.43056,0,0,.525],711:[0,.56597,0,0,.525],713:[0,.56555,0,0,.525],714:[0,.61111,0,0,.525],715:[0,.61111,0,0,.525],728:[0,.61111,0,0,.525],730:[0,.61111,0,0,.525],770:[0,.61111,0,0,.525],771:[0,.61111,0,0,.525],776:[0,.61111,0,0,.525],915:[0,.61111,0,0,.525],916:[0,.61111,0,0,.525],920:[0,.61111,0,0,.525],923:[0,.61111,0,0,.525],926:[0,.61111,0,0,.525],928:[0,.61111,0,0,.525],931:[0,.61111,0,0,.525],933:[0,.61111,0,0,.525],934:[0,.61111,0,0,.525],936:[0,.61111,0,0,.525],937:[0,.61111,0,0,.525],8216:[0,.61111,0,0,.525],8217:[0,.61111,0,0,.525],8242:[0,.61111,0,0,.525],9251:[.11111,.21944,0,0,.525]}},P={slant:[.25,.25,.25],space:[0,0,0],stretch:[0,0,0],shrink:[0,0,0],xHeight:[.431,.431,.431],quad:[1,1.171,1.472],extraSpace:[0,0,0],num1:[.677,.732,.925],num2:[.394,.384,.387],num3:[.444,.471,.504],denom1:[.686,.752,1.025],denom2:[.345,.344,.532],sup1:[.413,.503,.504],sup2:[.363,.431,.404],sup3:[.289,.286,.294],sub1:[.15,.143,.2],sub2:[.247,.286,.4],supDrop:[.386,.353,.494],subDrop:[.05,.071,.1],delim1:[2.39,1.7,1.98],delim2:[1.01,1.157,1.42],axisHeight:[.25,.25,.25],defaultRuleThickness:[.04,.049,.049],bigOpSpacing1:[.111,.111,.111],bigOpSpacing2:[.166,.166,.166],bigOpSpacing3:[.2,.2,.2],bigOpSpacing4:[.6,.611,.611],bigOpSpacing5:[.1,.143,.143],sqrtRuleThickness:[.04,.04,.04],ptPerEm:[10,10,10],doubleRuleSep:[.2,.2,.2],arrayRuleWidth:[.04,.04,.04],fboxsep:[.3,.3,.3],fboxrule:[.04,.04,.04]},F={"\xc5":"A","\xd0":"D","\xde":"o","\xe5":"a","\xf0":"d","\xfe":"o","\u0410":"A","\u0411":"B","\u0412":"B","\u0413":"F","\u0414":"A","\u0415":"E","\u0416":"K","\u0417":"3","\u0418":"N","\u0419":"N","\u041a":"K","\u041b":"N","\u041c":"M","\u041d":"H","\u041e":"O","\u041f":"N","\u0420":"P","\u0421":"C","\u0422":"T","\u0423":"y","\u0424":"O","\u0425":"X","\u0426":"U","\u0427":"h","\u0428":"W","\u0429":"W","\u042a":"B","\u042b":"X","\u042c":"B","\u042d":"3","\u042e":"X","\u042f":"R","\u0430":"a","\u0431":"b","\u0432":"a","\u0433":"r","\u0434":"y","\u0435":"e","\u0436":"m","\u0437":"e","\u0438":"n","\u0439":"n","\u043a":"n","\u043b":"n","\u043c":"m","\u043d":"n","\u043e":"o","\u043f":"n","\u0440":"p","\u0441":"c","\u0442":"o","\u0443":"y","\u0444":"b","\u0445":"x","\u0446":"n","\u0447":"n","\u0448":"w","\u0449":"w","\u044a":"a","\u044b":"m","\u044c":"a","\u044d":"e","\u044e":"m","\u044f":"r"};function V(e,t,r){if(!D[t])throw new Error("Font metrics not found for font: "+t+".");var n=e.charCodeAt(0),a=D[t][n];if(!a&&e[0]in F&&(n=F[e[0]].charCodeAt(0),a=D[t][n]),a||"text"!==r||w(n)&&(a=D[t][77]),a)return{depth:a[0],height:a[1],italic:a[2],skew:a[3],width:a[4]}}var G={};var U={bin:1,close:1,inner:1,open:1,punct:1,rel:1},Y={"accent-token":1,mathord:1,"op-token":1,spacing:1,textord:1},W={math:{},text:{}},X=W;function _(e,t,r,n,a,i){W[e][a]={font:t,group:r,replace:n},i&&n&&(W[e][n]=W[e][a])}var j="math",$="text",Z="main",K="ams",J="accent-token",Q="bin",ee="close",te="inner",re="mathord",ne="op-token",ae="open",ie="punct",oe="rel",se="spacing",le="textord";_(j,Z,oe,"\u2261","\\equiv",!0),_(j,Z,oe,"\u227a","\\prec",!0),_(j,Z,oe,"\u227b","\\succ",!0),_(j,Z,oe,"\u223c","\\sim",!0),_(j,Z,oe,"\u22a5","\\perp"),_(j,Z,oe,"\u2aaf","\\preceq",!0),_(j,Z,oe,"\u2ab0","\\succeq",!0),_(j,Z,oe,"\u2243","\\simeq",!0),_(j,Z,oe,"\u2223","\\mid",!0),_(j,Z,oe,"\u226a","\\ll",!0),_(j,Z,oe,"\u226b","\\gg",!0),_(j,Z,oe,"\u224d","\\asymp",!0),_(j,Z,oe,"\u2225","\\parallel"),_(j,Z,oe,"\u22c8","\\bowtie",!0),_(j,Z,oe,"\u2323","\\smile",!0),_(j,Z,oe,"\u2291","\\sqsubseteq",!0),_(j,Z,oe,"\u2292","\\sqsupseteq",!0),_(j,Z,oe,"\u2250","\\doteq",!0),_(j,Z,oe,"\u2322","\\frown",!0),_(j,Z,oe,"\u220b","\\ni",!0),_(j,Z,oe,"\u221d","\\propto",!0),_(j,Z,oe,"\u22a2","\\vdash",!0),_(j,Z,oe,"\u22a3","\\dashv",!0),_(j,Z,oe,"\u220b","\\owns"),_(j,Z,ie,".","\\ldotp"),_(j,Z,ie,"\u22c5","\\cdotp"),_(j,Z,le,"#","\\#"),_($,Z,le,"#","\\#"),_(j,Z,le,"&","\\&"),_($,Z,le,"&","\\&"),_(j,Z,le,"\u2135","\\aleph",!0),_(j,Z,le,"\u2200","\\forall",!0),_(j,Z,le,"\u210f","\\hbar",!0),_(j,Z,le,"\u2203","\\exists",!0),_(j,Z,le,"\u2207","\\nabla",!0),_(j,Z,le,"\u266d","\\flat",!0),_(j,Z,le,"\u2113","\\ell",!0),_(j,Z,le,"\u266e","\\natural",!0),_(j,Z,le,"\u2663","\\clubsuit",!0),_(j,Z,le,"\u2118","\\wp",!0),_(j,Z,le,"\u266f","\\sharp",!0),_(j,Z,le,"\u2662","\\diamondsuit",!0),_(j,Z,le,"\u211c","\\Re",!0),_(j,Z,le,"\u2661","\\heartsuit",!0),_(j,Z,le,"\u2111","\\Im",!0),_(j,Z,le,"\u2660","\\spadesuit",!0),_(j,Z,le,"\xa7","\\S",!0),_($,Z,le,"\xa7","\\S"),_(j,Z,le,"\xb6","\\P",!0),_($,Z,le,"\xb6","\\P"),_(j,Z,le,"\u2020","\\dag"),_($,Z,le,"\u2020","\\dag"),_($,Z,le,"\u2020","\\textdagger"),_(j,Z,le,"\u2021","\\ddag"),_($,Z,le,"\u2021","\\ddag"),_($,Z,le,"\u2021","\\textdaggerdbl"),_(j,Z,ee,"\u23b1","\\rmoustache",!0),_(j,Z,ae,"\u23b0","\\lmoustache",!0),_(j,Z,ee,"\u27ef","\\rgroup",!0),_(j,Z,ae,"\u27ee","\\lgroup",!0),_(j,Z,Q,"\u2213","\\mp",!0),_(j,Z,Q,"\u2296","\\ominus",!0),_(j,Z,Q,"\u228e","\\uplus",!0),_(j,Z,Q,"\u2293","\\sqcap",!0),_(j,Z,Q,"\u2217","\\ast"),_(j,Z,Q,"\u2294","\\sqcup",!0),_(j,Z,Q,"\u25ef","\\bigcirc",!0),_(j,Z,Q,"\u2219","\\bullet"),_(j,Z,Q,"\u2021","\\ddagger"),_(j,Z,Q,"\u2240","\\wr",!0),_(j,Z,Q,"\u2a3f","\\amalg"),_(j,Z,Q,"&","\\And"),_(j,Z,oe,"\u27f5","\\longleftarrow",!0),_(j,Z,oe,"\u21d0","\\Leftarrow",!0),_(j,Z,oe,"\u27f8","\\Longleftarrow",!0),_(j,Z,oe,"\u27f6","\\longrightarrow",!0),_(j,Z,oe,"\u21d2","\\Rightarrow",!0),_(j,Z,oe,"\u27f9","\\Longrightarrow",!0),_(j,Z,oe,"\u2194","\\leftrightarrow",!0),_(j,Z,oe,"\u27f7","\\longleftrightarrow",!0),_(j,Z,oe,"\u21d4","\\Leftrightarrow",!0),_(j,Z,oe,"\u27fa","\\Longleftrightarrow",!0),_(j,Z,oe,"\u21a6","\\mapsto",!0),_(j,Z,oe,"\u27fc","\\longmapsto",!0),_(j,Z,oe,"\u2197","\\nearrow",!0),_(j,Z,oe,"\u21a9","\\hookleftarrow",!0),_(j,Z,oe,"\u21aa","\\hookrightarrow",!0),_(j,Z,oe,"\u2198","\\searrow",!0),_(j,Z,oe,"\u21bc","\\leftharpoonup",!0),_(j,Z,oe,"\u21c0","\\rightharpoonup",!0),_(j,Z,oe,"\u2199","\\swarrow",!0),_(j,Z,oe,"\u21bd","\\leftharpoondown",!0),_(j,Z,oe,"\u21c1","\\rightharpoondown",!0),_(j,Z,oe,"\u2196","\\nwarrow",!0),_(j,Z,oe,"\u21cc","\\rightleftharpoons",!0),_(j,K,oe,"\u226e","\\nless",!0),_(j,K,oe,"\ue010","\\@nleqslant"),_(j,K,oe,"\ue011","\\@nleqq"),_(j,K,oe,"\u2a87","\\lneq",!0),_(j,K,oe,"\u2268","\\lneqq",!0),_(j,K,oe,"\ue00c","\\@lvertneqq"),_(j,K,oe,"\u22e6","\\lnsim",!0),_(j,K,oe,"\u2a89","\\lnapprox",!0),_(j,K,oe,"\u2280","\\nprec",!0),_(j,K,oe,"\u22e0","\\npreceq",!0),_(j,K,oe,"\u22e8","\\precnsim",!0),_(j,K,oe,"\u2ab9","\\precnapprox",!0),_(j,K,oe,"\u2241","\\nsim",!0),_(j,K,oe,"\ue006","\\@nshortmid"),_(j,K,oe,"\u2224","\\nmid",!0),_(j,K,oe,"\u22ac","\\nvdash",!0),_(j,K,oe,"\u22ad","\\nvDash",!0),_(j,K,oe,"\u22ea","\\ntriangleleft"),_(j,K,oe,"\u22ec","\\ntrianglelefteq",!0),_(j,K,oe,"\u228a","\\subsetneq",!0),_(j,K,oe,"\ue01a","\\@varsubsetneq"),_(j,K,oe,"\u2acb","\\subsetneqq",!0),_(j,K,oe,"\ue017","\\@varsubsetneqq"),_(j,K,oe,"\u226f","\\ngtr",!0),_(j,K,oe,"\ue00f","\\@ngeqslant"),_(j,K,oe,"\ue00e","\\@ngeqq"),_(j,K,oe,"\u2a88","\\gneq",!0),_(j,K,oe,"\u2269","\\gneqq",!0),_(j,K,oe,"\ue00d","\\@gvertneqq"),_(j,K,oe,"\u22e7","\\gnsim",!0),_(j,K,oe,"\u2a8a","\\gnapprox",!0),_(j,K,oe,"\u2281","\\nsucc",!0),_(j,K,oe,"\u22e1","\\nsucceq",!0),_(j,K,oe,"\u22e9","\\succnsim",!0),_(j,K,oe,"\u2aba","\\succnapprox",!0),_(j,K,oe,"\u2246","\\ncong",!0),_(j,K,oe,"\ue007","\\@nshortparallel"),_(j,K,oe,"\u2226","\\nparallel",!0),_(j,K,oe,"\u22af","\\nVDash",!0),_(j,K,oe,"\u22eb","\\ntriangleright"),_(j,K,oe,"\u22ed","\\ntrianglerighteq",!0),_(j,K,oe,"\ue018","\\@nsupseteqq"),_(j,K,oe,"\u228b","\\supsetneq",!0),_(j,K,oe,"\ue01b","\\@varsupsetneq"),_(j,K,oe,"\u2acc","\\supsetneqq",!0),_(j,K,oe,"\ue019","\\@varsupsetneqq"),_(j,K,oe,"\u22ae","\\nVdash",!0),_(j,K,oe,"\u2ab5","\\precneqq",!0),_(j,K,oe,"\u2ab6","\\succneqq",!0),_(j,K,oe,"\ue016","\\@nsubseteqq"),_(j,K,Q,"\u22b4","\\unlhd"),_(j,K,Q,"\u22b5","\\unrhd"),_(j,K,oe,"\u219a","\\nleftarrow",!0),_(j,K,oe,"\u219b","\\nrightarrow",!0),_(j,K,oe,"\u21cd","\\nLeftarrow",!0),_(j,K,oe,"\u21cf","\\nRightarrow",!0),_(j,K,oe,"\u21ae","\\nleftrightarrow",!0),_(j,K,oe,"\u21ce","\\nLeftrightarrow",!0),_(j,K,oe,"\u25b3","\\vartriangle"),_(j,K,le,"\u210f","\\hslash"),_(j,K,le,"\u25bd","\\triangledown"),_(j,K,le,"\u25ca","\\lozenge"),_(j,K,le,"\u24c8","\\circledS"),_(j,K,le,"\xae","\\circledR"),_($,K,le,"\xae","\\circledR"),_(j,K,le,"\u2221","\\measuredangle",!0),_(j,K,le,"\u2204","\\nexists"),_(j,K,le,"\u2127","\\mho"),_(j,K,le,"\u2132","\\Finv",!0),_(j,K,le,"\u2141","\\Game",!0),_(j,K,le,"\u2035","\\backprime"),_(j,K,le,"\u25b2","\\blacktriangle"),_(j,K,le,"\u25bc","\\blacktriangledown"),_(j,K,le,"\u25a0","\\blacksquare"),_(j,K,le,"\u29eb","\\blacklozenge"),_(j,K,le,"\u2605","\\bigstar"),_(j,K,le,"\u2222","\\sphericalangle",!0),_(j,K,le,"\u2201","\\complement",!0),_(j,K,le,"\xf0","\\eth",!0),_($,Z,le,"\xf0","\xf0"),_(j,K,le,"\u2571","\\diagup"),_(j,K,le,"\u2572","\\diagdown"),_(j,K,le,"\u25a1","\\square"),_(j,K,le,"\u25a1","\\Box"),_(j,K,le,"\u25ca","\\Diamond"),_(j,K,le,"\xa5","\\yen",!0),_($,K,le,"\xa5","\\yen",!0),_(j,K,le,"\u2713","\\checkmark",!0),_($,K,le,"\u2713","\\checkmark"),_(j,K,le,"\u2136","\\beth",!0),_(j,K,le,"\u2138","\\daleth",!0),_(j,K,le,"\u2137","\\gimel",!0),_(j,K,le,"\u03dd","\\digamma",!0),_(j,K,le,"\u03f0","\\varkappa"),_(j,K,ae,"\u250c","\\@ulcorner",!0),_(j,K,ee,"\u2510","\\@urcorner",!0),_(j,K,ae,"\u2514","\\@llcorner",!0),_(j,K,ee,"\u2518","\\@lrcorner",!0),_(j,K,oe,"\u2266","\\leqq",!0),_(j,K,oe,"\u2a7d","\\leqslant",!0),_(j,K,oe,"\u2a95","\\eqslantless",!0),_(j,K,oe,"\u2272","\\lesssim",!0),_(j,K,oe,"\u2a85","\\lessapprox",!0),_(j,K,oe,"\u224a","\\approxeq",!0),_(j,K,Q,"\u22d6","\\lessdot"),_(j,K,oe,"\u22d8","\\lll",!0),_(j,K,oe,"\u2276","\\lessgtr",!0),_(j,K,oe,"\u22da","\\lesseqgtr",!0),_(j,K,oe,"\u2a8b","\\lesseqqgtr",!0),_(j,K,oe,"\u2251","\\doteqdot"),_(j,K,oe,"\u2253","\\risingdotseq",!0),_(j,K,oe,"\u2252","\\fallingdotseq",!0),_(j,K,oe,"\u223d","\\backsim",!0),_(j,K,oe,"\u22cd","\\backsimeq",!0),_(j,K,oe,"\u2ac5","\\subseteqq",!0),_(j,K,oe,"\u22d0","\\Subset",!0),_(j,K,oe,"\u228f","\\sqsubset",!0),_(j,K,oe,"\u227c","\\preccurlyeq",!0),_(j,K,oe,"\u22de","\\curlyeqprec",!0),_(j,K,oe,"\u227e","\\precsim",!0),_(j,K,oe,"\u2ab7","\\precapprox",!0),_(j,K,oe,"\u22b2","\\vartriangleleft"),_(j,K,oe,"\u22b4","\\trianglelefteq"),_(j,K,oe,"\u22a8","\\vDash",!0),_(j,K,oe,"\u22aa","\\Vvdash",!0),_(j,K,oe,"\u2323","\\smallsmile"),_(j,K,oe,"\u2322","\\smallfrown"),_(j,K,oe,"\u224f","\\bumpeq",!0),_(j,K,oe,"\u224e","\\Bumpeq",!0),_(j,K,oe,"\u2267","\\geqq",!0),_(j,K,oe,"\u2a7e","\\geqslant",!0),_(j,K,oe,"\u2a96","\\eqslantgtr",!0),_(j,K,oe,"\u2273","\\gtrsim",!0),_(j,K,oe,"\u2a86","\\gtrapprox",!0),_(j,K,Q,"\u22d7","\\gtrdot"),_(j,K,oe,"\u22d9","\\ggg",!0),_(j,K,oe,"\u2277","\\gtrless",!0),_(j,K,oe,"\u22db","\\gtreqless",!0),_(j,K,oe,"\u2a8c","\\gtreqqless",!0),_(j,K,oe,"\u2256","\\eqcirc",!0),_(j,K,oe,"\u2257","\\circeq",!0),_(j,K,oe,"\u225c","\\triangleq",!0),_(j,K,oe,"\u223c","\\thicksim"),_(j,K,oe,"\u2248","\\thickapprox"),_(j,K,oe,"\u2ac6","\\supseteqq",!0),_(j,K,oe,"\u22d1","\\Supset",!0),_(j,K,oe,"\u2290","\\sqsupset",!0),_(j,K,oe,"\u227d","\\succcurlyeq",!0),_(j,K,oe,"\u22df","\\curlyeqsucc",!0),_(j,K,oe,"\u227f","\\succsim",!0),_(j,K,oe,"\u2ab8","\\succapprox",!0),_(j,K,oe,"\u22b3","\\vartriangleright"),_(j,K,oe,"\u22b5","\\trianglerighteq"),_(j,K,oe,"\u22a9","\\Vdash",!0),_(j,K,oe,"\u2223","\\shortmid"),_(j,K,oe,"\u2225","\\shortparallel"),_(j,K,oe,"\u226c","\\between",!0),_(j,K,oe,"\u22d4","\\pitchfork",!0),_(j,K,oe,"\u221d","\\varpropto"),_(j,K,oe,"\u25c0","\\blacktriangleleft"),_(j,K,oe,"\u2234","\\therefore",!0),_(j,K,oe,"\u220d","\\backepsilon"),_(j,K,oe,"\u25b6","\\blacktriangleright"),_(j,K,oe,"\u2235","\\because",!0),_(j,K,oe,"\u22d8","\\llless"),_(j,K,oe,"\u22d9","\\gggtr"),_(j,K,Q,"\u22b2","\\lhd"),_(j,K,Q,"\u22b3","\\rhd"),_(j,K,oe,"\u2242","\\eqsim",!0),_(j,Z,oe,"\u22c8","\\Join"),_(j,K,oe,"\u2251","\\Doteq",!0),_(j,K,Q,"\u2214","\\dotplus",!0),_(j,K,Q,"\u2216","\\smallsetminus"),_(j,K,Q,"\u22d2","\\Cap",!0),_(j,K,Q,"\u22d3","\\Cup",!0),_(j,K,Q,"\u2a5e","\\doublebarwedge",!0),_(j,K,Q,"\u229f","\\boxminus",!0),_(j,K,Q,"\u229e","\\boxplus",!0),_(j,K,Q,"\u22c7","\\divideontimes",!0),_(j,K,Q,"\u22c9","\\ltimes",!0),_(j,K,Q,"\u22ca","\\rtimes",!0),_(j,K,Q,"\u22cb","\\leftthreetimes",!0),_(j,K,Q,"\u22cc","\\rightthreetimes",!0),_(j,K,Q,"\u22cf","\\curlywedge",!0),_(j,K,Q,"\u22ce","\\curlyvee",!0),_(j,K,Q,"\u229d","\\circleddash",!0),_(j,K,Q,"\u229b","\\circledast",!0),_(j,K,Q,"\u22c5","\\centerdot"),_(j,K,Q,"\u22ba","\\intercal",!0),_(j,K,Q,"\u22d2","\\doublecap"),_(j,K,Q,"\u22d3","\\doublecup"),_(j,K,Q,"\u22a0","\\boxtimes",!0),_(j,K,oe,"\u21e2","\\dashrightarrow",!0),_(j,K,oe,"\u21e0","\\dashleftarrow",!0),_(j,K,oe,"\u21c7","\\leftleftarrows",!0),_(j,K,oe,"\u21c6","\\leftrightarrows",!0),_(j,K,oe,"\u21da","\\Lleftarrow",!0),_(j,K,oe,"\u219e","\\twoheadleftarrow",!0),_(j,K,oe,"\u21a2","\\leftarrowtail",!0),_(j,K,oe,"\u21ab","\\looparrowleft",!0),_(j,K,oe,"\u21cb","\\leftrightharpoons",!0),_(j,K,oe,"\u21b6","\\curvearrowleft",!0),_(j,K,oe,"\u21ba","\\circlearrowleft",!0),_(j,K,oe,"\u21b0","\\Lsh",!0),_(j,K,oe,"\u21c8","\\upuparrows",!0),_(j,K,oe,"\u21bf","\\upharpoonleft",!0),_(j,K,oe,"\u21c3","\\downharpoonleft",!0),_(j,Z,oe,"\u22b6","\\origof",!0),_(j,Z,oe,"\u22b7","\\imageof",!0),_(j,K,oe,"\u22b8","\\multimap",!0),_(j,K,oe,"\u21ad","\\leftrightsquigarrow",!0),_(j,K,oe,"\u21c9","\\rightrightarrows",!0),_(j,K,oe,"\u21c4","\\rightleftarrows",!0),_(j,K,oe,"\u21a0","\\twoheadrightarrow",!0),_(j,K,oe,"\u21a3","\\rightarrowtail",!0),_(j,K,oe,"\u21ac","\\looparrowright",!0),_(j,K,oe,"\u21b7","\\curvearrowright",!0),_(j,K,oe,"\u21bb","\\circlearrowright",!0),_(j,K,oe,"\u21b1","\\Rsh",!0),_(j,K,oe,"\u21ca","\\downdownarrows",!0),_(j,K,oe,"\u21be","\\upharpoonright",!0),_(j,K,oe,"\u21c2","\\downharpoonright",!0),_(j,K,oe,"\u21dd","\\rightsquigarrow",!0),_(j,K,oe,"\u21dd","\\leadsto"),_(j,K,oe,"\u21db","\\Rrightarrow",!0),_(j,K,oe,"\u21be","\\restriction"),_(j,Z,le,"\u2018",""),_(j,Z,le,"$","\\$"),_($,Z,le,"$","\\$"),_($,Z,le,"$","\\textdollar"),_(j,Z,le,"%","\\%"),_($,Z,le,"%","\\%"),_(j,Z,le,"_","\\_"),_($,Z,le,"_","\\_"),_($,Z,le,"_","\\textunderscore"),_(j,Z,le,"\u2220","\\angle",!0),_(j,Z,le,"\u221e","\\infty",!0),_(j,Z,le,"\u2032","\\prime"),_(j,Z,le,"\u25b3","\\triangle"),_(j,Z,le,"\u0393","\\Gamma",!0),_(j,Z,le,"\u0394","\\Delta",!0),_(j,Z,le,"\u0398","\\Theta",!0),_(j,Z,le,"\u039b","\\Lambda",!0),_(j,Z,le,"\u039e","\\Xi",!0),_(j,Z,le,"\u03a0","\\Pi",!0),_(j,Z,le,"\u03a3","\\Sigma",!0),_(j,Z,le,"\u03a5","\\Upsilon",!0),_(j,Z,le,"\u03a6","\\Phi",!0),_(j,Z,le,"\u03a8","\\Psi",!0),_(j,Z,le,"\u03a9","\\Omega",!0),_(j,Z,le,"A","\u0391"),_(j,Z,le,"B","\u0392"),_(j,Z,le,"E","\u0395"),_(j,Z,le,"Z","\u0396"),_(j,Z,le,"H","\u0397"),_(j,Z,le,"I","\u0399"),_(j,Z,le,"K","\u039a"),_(j,Z,le,"M","\u039c"),_(j,Z,le,"N","\u039d"),_(j,Z,le,"O","\u039f"),_(j,Z,le,"P","\u03a1"),_(j,Z,le,"T","\u03a4"),_(j,Z,le,"X","\u03a7"),_(j,Z,le,"\xac","\\neg",!0),_(j,Z,le,"\xac","\\lnot"),_(j,Z,le,"\u22a4","\\top"),_(j,Z,le,"\u22a5","\\bot"),_(j,Z,le,"\u2205","\\emptyset"),_(j,K,le,"\u2205","\\varnothing"),_(j,Z,re,"\u03b1","\\alpha",!0),_(j,Z,re,"\u03b2","\\beta",!0),_(j,Z,re,"\u03b3","\\gamma",!0),_(j,Z,re,"\u03b4","\\delta",!0),_(j,Z,re,"\u03f5","\\epsilon",!0),_(j,Z,re,"\u03b6","\\zeta",!0),_(j,Z,re,"\u03b7","\\eta",!0),_(j,Z,re,"\u03b8","\\theta",!0),_(j,Z,re,"\u03b9","\\iota",!0),_(j,Z,re,"\u03ba","\\kappa",!0),_(j,Z,re,"\u03bb","\\lambda",!0),_(j,Z,re,"\u03bc","\\mu",!0),_(j,Z,re,"\u03bd","\\nu",!0),_(j,Z,re,"\u03be","\\xi",!0),_(j,Z,re,"\u03bf","\\omicron",!0),_(j,Z,re,"\u03c0","\\pi",!0),_(j,Z,re,"\u03c1","\\rho",!0),_(j,Z,re,"\u03c3","\\sigma",!0),_(j,Z,re,"\u03c4","\\tau",!0),_(j,Z,re,"\u03c5","\\upsilon",!0),_(j,Z,re,"\u03d5","\\phi",!0),_(j,Z,re,"\u03c7","\\chi",!0),_(j,Z,re,"\u03c8","\\psi",!0),_(j,Z,re,"\u03c9","\\omega",!0),_(j,Z,re,"\u03b5","\\varepsilon",!0),_(j,Z,re,"\u03d1","\\vartheta",!0),_(j,Z,re,"\u03d6","\\varpi",!0),_(j,Z,re,"\u03f1","\\varrho",!0),_(j,Z,re,"\u03c2","\\varsigma",!0),_(j,Z,re,"\u03c6","\\varphi",!0),_(j,Z,Q,"\u2217","*",!0),_(j,Z,Q,"+","+"),_(j,Z,Q,"\u2212","-",!0),_(j,Z,Q,"\u22c5","\\cdot",!0),_(j,Z,Q,"\u2218","\\circ"),_(j,Z,Q,"\xf7","\\div",!0),_(j,Z,Q,"\xb1","\\pm",!0),_(j,Z,Q,"\xd7","\\times",!0),_(j,Z,Q,"\u2229","\\cap",!0),_(j,Z,Q,"\u222a","\\cup",!0),_(j,Z,Q,"\u2216","\\setminus"),_(j,Z,Q,"\u2227","\\land"),_(j,Z,Q,"\u2228","\\lor"),_(j,Z,Q,"\u2227","\\wedge",!0),_(j,Z,Q,"\u2228","\\vee",!0),_(j,Z,le,"\u221a","\\surd"),_(j,Z,ae,"\u27e8","\\langle",!0),_(j,Z,ae,"\u2223","\\lvert"),_(j,Z,ae,"\u2225","\\lVert"),_(j,Z,ee,"?","?"),_(j,Z,ee,"!","!"),_(j,Z,ee,"\u27e9","\\rangle",!0),_(j,Z,ee,"\u2223","\\rvert"),_(j,Z,ee,"\u2225","\\rVert"),_(j,Z,oe,"=","="),_(j,Z,oe,":",":"),_(j,Z,oe,"\u2248","\\approx",!0),_(j,Z,oe,"\u2245","\\cong",!0),_(j,Z,oe,"\u2265","\\ge"),_(j,Z,oe,"\u2265","\\geq",!0),_(j,Z,oe,"\u2190","\\gets"),_(j,Z,oe,">","\\gt",!0),_(j,Z,oe,"\u2208","\\in",!0),_(j,Z,oe,"\ue020","\\@not"),_(j,Z,oe,"\u2282","\\subset",!0),_(j,Z,oe,"\u2283","\\supset",!0),_(j,Z,oe,"\u2286","\\subseteq",!0),_(j,Z,oe,"\u2287","\\supseteq",!0),_(j,K,oe,"\u2288","\\nsubseteq",!0),_(j,K,oe,"\u2289","\\nsupseteq",!0),_(j,Z,oe,"\u22a8","\\models"),_(j,Z,oe,"\u2190","\\leftarrow",!0),_(j,Z,oe,"\u2264","\\le"),_(j,Z,oe,"\u2264","\\leq",!0),_(j,Z,oe,"<","\\lt",!0),_(j,Z,oe,"\u2192","\\rightarrow",!0),_(j,Z,oe,"\u2192","\\to"),_(j,K,oe,"\u2271","\\ngeq",!0),_(j,K,oe,"\u2270","\\nleq",!0),_(j,Z,se,"\xa0","\\ "),_(j,Z,se,"\xa0","\\space"),_(j,Z,se,"\xa0","\\nobreakspace"),_($,Z,se,"\xa0","\\ "),_($,Z,se,"\xa0"," "),_($,Z,se,"\xa0","\\space"),_($,Z,se,"\xa0","\\nobreakspace"),_(j,Z,se,null,"\\nobreak"),_(j,Z,se,null,"\\allowbreak"),_(j,Z,ie,",",","),_(j,Z,ie,";",";"),_(j,K,Q,"\u22bc","\\barwedge",!0),_(j,K,Q,"\u22bb","\\veebar",!0),_(j,Z,Q,"\u2299","\\odot",!0),_(j,Z,Q,"\u2295","\\oplus",!0),_(j,Z,Q,"\u2297","\\otimes",!0),_(j,Z,le,"\u2202","\\partial",!0),_(j,Z,Q,"\u2298","\\oslash",!0),_(j,K,Q,"\u229a","\\circledcirc",!0),_(j,K,Q,"\u22a1","\\boxdot",!0),_(j,Z,Q,"\u25b3","\\bigtriangleup"),_(j,Z,Q,"\u25bd","\\bigtriangledown"),_(j,Z,Q,"\u2020","\\dagger"),_(j,Z,Q,"\u22c4","\\diamond"),_(j,Z,Q,"\u22c6","\\star"),_(j,Z,Q,"\u25c3","\\triangleleft"),_(j,Z,Q,"\u25b9","\\triangleright"),_(j,Z,ae,"{","\\{"),_($,Z,le,"{","\\{"),_($,Z,le,"{","\\textbraceleft"),_(j,Z,ee,"}","\\}"),_($,Z,le,"}","\\}"),_($,Z,le,"}","\\textbraceright"),_(j,Z,ae,"{","\\lbrace"),_(j,Z,ee,"}","\\rbrace"),_(j,Z,ae,"[","\\lbrack",!0),_($,Z,le,"[","\\lbrack",!0),_(j,Z,ee,"]","\\rbrack",!0),_($,Z,le,"]","\\rbrack",!0),_(j,Z,ae,"(","\\lparen",!0),_(j,Z,ee,")","\\rparen",!0),_($,Z,le,"<","\\textless",!0),_($,Z,le,">","\\textgreater",!0),_(j,Z,ae,"\u230a","\\lfloor",!0),_(j,Z,ee,"\u230b","\\rfloor",!0),_(j,Z,ae,"\u2308","\\lceil",!0),_(j,Z,ee,"\u2309","\\rceil",!0),_(j,Z,le,"\\","\\backslash"),_(j,Z,le,"\u2223","|"),_(j,Z,le,"\u2223","\\vert"),_($,Z,le,"|","\\textbar",!0),_(j,Z,le,"\u2225","\\|"),_(j,Z,le,"\u2225","\\Vert"),_($,Z,le,"\u2225","\\textbardbl"),_($,Z,le,"~","\\textasciitilde"),_($,Z,le,"\\","\\textbackslash"),_($,Z,le,"^","\\textasciicircum"),_(j,Z,oe,"\u2191","\\uparrow",!0),_(j,Z,oe,"\u21d1","\\Uparrow",!0),_(j,Z,oe,"\u2193","\\downarrow",!0),_(j,Z,oe,"\u21d3","\\Downarrow",!0),_(j,Z,oe,"\u2195","\\updownarrow",!0),_(j,Z,oe,"\u21d5","\\Updownarrow",!0),_(j,Z,ne,"\u2210","\\coprod"),_(j,Z,ne,"\u22c1","\\bigvee"),_(j,Z,ne,"\u22c0","\\bigwedge"),_(j,Z,ne,"\u2a04","\\biguplus"),_(j,Z,ne,"\u22c2","\\bigcap"),_(j,Z,ne,"\u22c3","\\bigcup"),_(j,Z,ne,"\u222b","\\int"),_(j,Z,ne,"\u222b","\\intop"),_(j,Z,ne,"\u222c","\\iint"),_(j,Z,ne,"\u222d","\\iiint"),_(j,Z,ne,"\u220f","\\prod"),_(j,Z,ne,"\u2211","\\sum"),_(j,Z,ne,"\u2a02","\\bigotimes"),_(j,Z,ne,"\u2a01","\\bigoplus"),_(j,Z,ne,"\u2a00","\\bigodot"),_(j,Z,ne,"\u222e","\\oint"),_(j,Z,ne,"\u222f","\\oiint"),_(j,Z,ne,"\u2230","\\oiiint"),_(j,Z,ne,"\u2a06","\\bigsqcup"),_(j,Z,ne,"\u222b","\\smallint"),_($,Z,te,"\u2026","\\textellipsis"),_(j,Z,te,"\u2026","\\mathellipsis"),_($,Z,te,"\u2026","\\ldots",!0),_(j,Z,te,"\u2026","\\ldots",!0),_(j,Z,te,"\u22ef","\\@cdots",!0),_(j,Z,te,"\u22f1","\\ddots",!0),_(j,Z,le,"\u22ee","\\varvdots"),_(j,Z,J,"\u02ca","\\acute"),_(j,Z,J,"\u02cb","\\grave"),_(j,Z,J,"\xa8","\\ddot"),_(j,Z,J,"~","\\tilde"),_(j,Z,J,"\u02c9","\\bar"),_(j,Z,J,"\u02d8","\\breve"),_(j,Z,J,"\u02c7","\\check"),_(j,Z,J,"^","\\hat"),_(j,Z,J,"\u20d7","\\vec"),_(j,Z,J,"\u02d9","\\dot"),_(j,Z,J,"\u02da","\\mathring"),_(j,Z,re,"\ue131","\\@imath"),_(j,Z,re,"\ue237","\\@jmath"),_(j,Z,le,"\u0131","\u0131"),_(j,Z,le,"\u0237","\u0237"),_($,Z,le,"\u0131","\\i",!0),_($,Z,le,"\u0237","\\j",!0),_($,Z,le,"\xdf","\\ss",!0),_($,Z,le,"\xe6","\\ae",!0),_($,Z,le,"\u0153","\\oe",!0),_($,Z,le,"\xf8","\\o",!0),_($,Z,le,"\xc6","\\AE",!0),_($,Z,le,"\u0152","\\OE",!0),_($,Z,le,"\xd8","\\O",!0),_($,Z,J,"\u02ca","\\'"),_($,Z,J,"\u02cb","\\"),_($,Z,J,"\u02c6","\\^"),_($,Z,J,"\u02dc","\\~"),_($,Z,J,"\u02c9","\\="),_($,Z,J,"\u02d8","\\u"),_($,Z,J,"\u02d9","\\."),_($,Z,J,"\xb8","\\c"),_($,Z,J,"\u02da","\\r"),_($,Z,J,"\u02c7","\\v"),_($,Z,J,"\xa8",'\\"'),_($,Z,J,"\u02dd","\\H"),_($,Z,J,"\u25ef","\\textcircled");var he={"--":!0,"---":!0,"`":!0,"''":!0};_($,Z,le,"\u2013","--",!0),_($,Z,le,"\u2013","\\textendash"),_($,Z,le,"\u2014","---",!0),_($,Z,le,"\u2014","\\textemdash"),_($,Z,le,"\u2018","",!0),_($,Z,le,"\u2018","\\textquoteleft"),_($,Z,le,"\u2019","'",!0),_($,Z,le,"\u2019","\\textquoteright"),_($,Z,le,"\u201c","",!0),_($,Z,le,"\u201c","\\textquotedblleft"),_($,Z,le,"\u201d","''",!0),_($,Z,le,"\u201d","\\textquotedblright"),_(j,Z,le,"\xb0","\\degree",!0),_($,Z,le,"\xb0","\\degree"),_($,Z,le,"\xb0","\\textdegree",!0),_(j,Z,le,"\xa3","\\pounds"),_(j,Z,le,"\xa3","\\mathsterling",!0),_($,Z,le,"\xa3","\\pounds"),_($,Z,le,"\xa3","\\textsterling",!0),_(j,K,le,"\u2720","\\maltese"),_($,K,le,"\u2720","\\maltese");for(var me='0123456789/@."',ce=0;ce<me.length;ce++){var ue=me.charAt(ce);_(j,Z,le,ue,ue)}for(var pe='0123456789!@*()-=+";:?/.,',de=0;de<pe.length;de++){var fe=pe.charAt(de);_($,Z,le,fe,fe)}for(var ge="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",ve=0;ve<ge.length;ve++){var be=ge.charAt(ve);_(j,Z,re,be,be),_($,Z,le,be,be)}_(j,K,le,"C","\u2102"),_($,K,le,"C","\u2102"),_(j,K,le,"H","\u210d"),_($,K,le,"H","\u210d"),_(j,K,le,"N","\u2115"),_($,K,le,"N","\u2115"),_(j,K,le,"P","\u2119"),_($,K,le,"P","\u2119"),_(j,K,le,"Q","\u211a"),_($,K,le,"Q","\u211a"),_(j,K,le,"R","\u211d"),_($,K,le,"R","\u211d"),_(j,K,le,"Z","\u2124"),_($,K,le,"Z","\u2124"),_(j,Z,re,"h","\u210e"),_($,Z,re,"h","\u210e");for(var ye="",xe=0;xe<ge.length;xe++){var we=ge.charAt(xe);_(j,Z,re,we,ye=String.fromCharCode(55349,56320+xe)),_($,Z,le,we,ye),_(j,Z,re,we,ye=String.fromCharCode(55349,56372+xe)),_($,Z,le,we,ye),_(j,Z,re,we,ye=String.fromCharCode(55349,56424+xe)),_($,Z,le,we,ye),_(j,Z,re,we,ye=String.fromCharCode(55349,56580+xe)),_($,Z,le,we,ye),_(j,Z,re,we,ye=String.fromCharCode(55349,56736+xe)),_($,Z,le,we,ye),_(j,Z,re,we,ye=String.fromCharCode(55349,56788+xe)),_($,Z,le,we,ye),_(j,Z,re,we,ye=String.fromCharCode(55349,56840+xe)),_($,Z,le,we,ye),_(j,Z,re,we,ye=String.fromCharCode(55349,56944+xe)),_($,Z,le,we,ye),xe<26&&(_(j,Z,re,we,ye=String.fromCharCode(55349,56632+xe)),_($,Z,le,we,ye),_(j,Z,re,we,ye=String.fromCharCode(55349,56476+xe)),_($,Z,le,we,ye))}_(j,Z,re,"k",ye=String.fromCharCode(55349,56668)),_($,Z,le,"k",ye);for(var ke=0;ke<10;ke++){var Se=ke.toString();_(j,Z,re,Se,ye=String.fromCharCode(55349,57294+ke)),_($,Z,le,Se,ye),_(j,Z,re,Se,ye=String.fromCharCode(55349,57314+ke)),_($,Z,le,Se,ye),_(j,Z,re,Se,ye=String.fromCharCode(55349,57324+ke)),_($,Z,le,Se,ye),_(j,Z,re,Se,ye=String.fromCharCode(55349,57334+ke)),_($,Z,le,Se,ye)}for(var Me="\xd0\xde\xfe",ze=0;ze<Me.length;ze++){var Ae=Me.charAt(ze);_(j,Z,re,Ae,Ae),_($,Z,le,Ae,Ae)}var Te=[["mathbf","textbf","Main-Bold"],["mathbf","textbf","Main-Bold"],["mathnormal","textit","Math-Italic"],["mathnormal","textit","Math-Italic"],["boldsymbol","boldsymbol","Main-BoldItalic"],["boldsymbol","boldsymbol","Main-BoldItalic"],["mathscr","textscr","Script-Regular"],["","",""],["","",""],["","",""],["mathfrak","textfrak","Fraktur-Regular"],["mathfrak","textfrak","Fraktur-Regular"],["mathbb","textbb","AMS-Regular"],["mathbb","textbb","AMS-Regular"],["","",""],["","",""],["mathsf","textsf","SansSerif-Regular"],["mathsf","textsf","SansSerif-Regular"],["mathboldsf","textboldsf","SansSerif-Bold"],["mathboldsf","textboldsf","SansSerif-Bold"],["mathitsf","textitsf","SansSerif-Italic"],["mathitsf","textitsf","SansSerif-Italic"],["","",""],["","",""],["mathtt","texttt","Typewriter-Regular"],["mathtt","texttt","Typewriter-Regular"]],Be=[["mathbf","textbf","Main-Bold"],["","",""],["mathsf","textsf","SansSerif-Regular"],["mathboldsf","textboldsf","SansSerif-Bold"],["mathtt","texttt","Typewriter-Regular"]],Ne=[[1,1,1],[2,1,1],[3,1,1],[4,2,1],[5,2,1],[6,3,1],[7,4,2],[8,6,3],[9,7,6],[10,8,7],[11,10,9]],qe=[.5,.6,.7,.8,.9,1,1.2,1.44,1.728,2.074,2.488],Ce=function(e,t){return t.size<2?e:Ne[e-1][t.size-1]},Ie=function(){function e(t){this.style=void 0,this.color=void 0,this.size=void 0,this.textSize=void 0,this.phantom=void 0,this.font=void 0,this.fontFamily=void 0,this.fontWeight=void 0,this.fontShape=void 0,this.sizeMultiplier=void 0,this.maxSize=void 0,this.minRuleThickness=void 0,this._fontMetrics=void 0,this.style=t.style,this.color=t.color,this.size=t.size||e.BASESIZE,this.textSize=t.textSize||this.size,this.phantom=!!t.phantom,this.font=t.font||"",this.fontFamily=t.fontFamily||"",this.fontWeight=t.fontWeight||"",this.fontShape=t.fontShape||"",this.sizeMultiplier=qe[this.size-1],this.maxSize=t.maxSize,this.minRuleThickness=t.minRuleThickness,this._fontMetrics=void 0}var t=e.prototype;return t.extend=function(t){var r={style:this.style,size:this.size,textSize:this.textSize,color:this.color,phantom:this.phantom,font:this.font,fontFamily:this.fontFamily,fontWeight:this.fontWeight,fontShape:this.fontShape,maxSize:this.maxSize,minRuleThickness:this.minRuleThickness};for(var n in t)t.hasOwnProperty(n)&&(r[n]=t[n]);return new e(r)},t.havingStyle=function(e){return this.style===e?this:this.extend({style:e,size:Ce(this.textSize,e)})},t.havingCrampedStyle=function(){return this.havingStyle(this.style.cramp())},t.havingSize=function(e){return this.size===e&&this.textSize===e?this:this.extend({style:this.style.text(),size:e,textSize:e,sizeMultiplier:qe[e-1]})},t.havingBaseStyle=function(t){t=t||this.style.text();var r=Ce(e.BASESIZE,t);return this.size===r&&this.textSize===e.BASESIZE&&this.style===t?this:this.extend({style:t,size:r})},t.havingBaseSizing=function(){var e;switch(this.style.id){case 4:case 5:e=3;break;case 6:case 7:e=1;break;default:e=6}return this.extend({style:this.style.text(),size:e})},t.withColor=function(e){return this.extend({color:e})},t.withPhantom=function(){return this.extend({phantom:!0})},t.withFont=function(e){return this.extend({font:e})},t.withTextFontFamily=function(e){return this.extend({fontFamily:e,font:""})},t.withTextFontWeight=function(e){return this.extend({fontWeight:e,font:""})},t.withTextFontShape=function(e){return this.extend({fontShape:e,font:""})},t.sizingClasses=function(e){return e.size!==this.size?["sizing","reset-size"+e.size,"size"+this.size]:[]},t.baseSizingClasses=function(){return this.size!==e.BASESIZE?["sizing","reset-size"+this.size,"size"+e.BASESIZE]:[]},t.fontMetrics=function(){return this._fontMetrics||(this._fontMetrics=function(e){var t;if(!G[t=e>=5?0:e>=3?1:2]){var r=G[t]={cssEmPerMu:P.quad[t]/18};for(var n in P)P.hasOwnProperty(n)&&(r[n]=P[n][t])}return G[t]}(this.size)),this._fontMetrics},t.getColor=function(){return this.phantom?"transparent":this.color},e}();Ie.BASESIZE=6;var Re=Ie,Oe={pt:1,mm:7227/2540,cm:7227/254,in:72.27,bp:1.00375,pc:12,dd:1238/1157,cc:14856/1157,nd:685/642,nc:1370/107,sp:1/65536,px:1.00375},Ee={ex:!0,em:!0,mu:!0},He=function(e){return"string"!=typeof e&&(e=e.unit),e in Oe||e in Ee||"ex"===e},Le=function(e,t){var r;if(e.unit in Oe)r=Oe[e.unit]/t.fontMetrics().ptPerEm/t.sizeMultiplier;else if("mu"===e.unit)r=t.fontMetrics().cssEmPerMu;else{var a;if(a=t.style.isTight()?t.havingStyle(t.style.text()):t,"ex"===e.unit)r=a.fontMetrics().xHeight;else{if("em"!==e.unit)throw new n("Invalid unit: '"+e.unit+"'");r=a.fontMetrics().quad}a!==t&&(r*=a.sizeMultiplier/t.sizeMultiplier)}return Math.min(e.number*r,t.maxSize)},De=function(e,t,r){return X[r][e]&&X[r][e].replace&&(e=X[r][e].replace),{value:e,metrics:V(e,t,r)}},Pe=function(e,t,r,n,a){var i,o=De(e,t,r),s=o.metrics;if(e=o.value,s){var l=s.italic;("text"===r||n&&"mathit"===n.font)&&(l=0),i=new R(e,s.height,s.depth,l,s.skew,s.width,a)}else"undefined"!=typeof console&&console.warn("No character metrics for '"+e+"' in style '"+t+"' and mode '"+r+"'"),i=new R(e,0,0,0,0,0,a);if(n){i.maxFontSize=n.sizeMultiplier,n.style.isTight()&&i.classes.push("mtight");var h=n.getColor();h&&(i.style.color=h)}return i},Fe=function(e,t){if(z(e.classes)!==z(t.classes)||e.skew!==t.skew||e.maxFontSize!==t.maxFontSize)return!1;if(1===e.classes.length){var r=e.classes[0];if("mbin"===r||"mord"===r)return!1}for(var n in e.style)if(e.style.hasOwnProperty(n)&&e.style[n]!==t.style[n])return!1;for(var a in t.style)if(t.style.hasOwnProperty(a)&&e.style[a]!==t.style[a])return!1;return!0},Ve=function(e){for(var t=0,r=0,n=0,a=0;a<e.children.length;a++){var i=e.children[a];i.height>t&&(t=i.height),i.depth>r&&(r=i.depth),i.maxFontSize>n&&(n=i.maxFontSize)}e.height=t,e.depth=r,e.maxFontSize=n},Ge=function(e,t,r,n){var a=new N(e,t,r,n);return Ve(a),a},Ue=function(e,t,r,n){return new N(e,t,r,n)},Ye=function(e){var t=new M(e);return Ve(t),t},We=function(e,t,r){var n="";switch(e){case"amsrm":n="AMS";break;case"textrm":n="Main";break;case"textsf":n="SansSerif";break;case"texttt":n="Typewriter";break;default:n=e}return n+"-"+("textbf"===t&&"textit"===r?"BoldItalic":"textbf"===t?"Bold":"textit"===t?"Italic":"Regular")},Xe={mathbf:{variant:"bold",fontName:"Main-Bold"},mathrm:{variant:"normal",fontName:"Main-Regular"},textit:{variant:"italic",fontName:"Main-Italic"},mathit:{variant:"italic",fontName:"Main-Italic"},mathnormal:{variant:"italic",fontName:"Math-Italic"},mathbb:{variant:"double-struck",fontName:"AMS-Regular"},mathcal:{variant:"script",fontName:"Caligraphic-Regular"},mathfrak:{variant:"fraktur",fontName:"Fraktur-Regular"},mathscr:{variant:"script",fontName:"Script-Regular"},mathsf:{variant:"sans-serif",fontName:"SansSerif-Regular"},mathtt:{variant:"monospace",fontName:"Typewriter-Regular"}},_e={vec:["vec",.471,.714],oiintSize1:["oiintSize1",.957,.499],oiintSize2:["oiintSize2",1.472,.659],oiiintSize1:["oiiintSize1",1.304,.499],oiiintSize2:["oiiintSize2",1.98,.659]},je={fontMap:Xe,makeSymbol:Pe,mathsym:function(e,t,r,n){return void 0===n&&(n=[]),"boldsymbol"===r.font&&De(e,"Main-Bold",t).metrics?Pe(e,"Main-Bold",t,r,n.concat(["mathbf"])):"\\"===e||"main"===X[t][e].font?Pe(e,"Main-Regular",t,r,n):Pe(e,"AMS-Regular",t,r,n.concat(["amsrm"]))},makeSpan:Ge,makeSvgSpan:Ue,makeLineSpan:function(e,t,r){var n=Ge([e],[],t);return n.height=Math.max(r||t.fontMetrics().defaultRuleThickness,t.minRuleThickness),n.style.borderBottomWidth=n.height+"em",n.maxFontSize=1,n},makeAnchor:function(e,t,r,n){var a=new q(e,t,r,n);return Ve(a),a},makeFragment:Ye,wrapFragment:function(e,t){return e instanceof M?Ge([],[e],t):e},makeVList:function(e,t){for(var r=function(e){if("individualShift"===e.positionType){for(var t=e.children,r=[t[0]],n=-t[0].shift-t[0].elem.depth,a=n,i=1;i<t.length;i++){var o=-t[i].shift-a-t[i].elem.depth,s=o-(t[i-1].elem.height+t[i-1].elem.depth);a+=o,r.push({type:"kern",size:s}),r.push(t[i])}return{children:r,depth:n}}var l;if("top"===e.positionType){for(var h=e.positionData,m=0;m<e.children.length;m++){var c=e.children[m];h-="kern"===c.type?c.size:c.elem.height+c.elem.depth}l=h}else if("bottom"===e.positionType)l=-e.positionData;else{var u=e.children[0];if("elem"!==u.type)throw new Error('First child must have type "elem".');if("shift"===e.positionType)l=-u.elem.depth-e.positionData;else{if("firstBaseline"!==e.positionType)throw new Error("Invalid positionType "+e.positionType+".");l=-u.elem.depth}}return{children:e.children,depth:l}}(e),n=r.children,a=r.depth,i=0,o=0;o<n.length;o++){var s=n[o];if("elem"===s.type){var l=s.elem;i=Math.max(i,l.maxFontSize,l.height)}}i+=2;var h=Ge(["pstrut"],[]);h.style.height=i+"em";for(var m=[],c=a,u=a,p=a,d=0;d<n.length;d++){var f=n[d];if("kern"===f.type)p+=f.size;else{var g=f.elem,v=f.wrapperClasses||[],b=f.wrapperStyle||{},y=Ge(v,[h,g],void 0,b);y.style.top=-i-p-g.depth+"em",f.marginLeft&&(y.style.marginLeft=f.marginLeft),f.marginRight&&(y.style.marginRight=f.marginRight),m.push(y),p+=g.height+g.depth}c=Math.min(c,p),u=Math.max(u,p)}var x,w=Ge(["vlist"],m);if(w.style.height=u+"em",c<0){var k=Ge([],[]),S=Ge(["vlist"],[k]);S.style.height=-c+"em";var M=Ge(["vlist-s"],[new R("\u200b")]);x=[Ge(["vlist-r"],[w,M]),Ge(["vlist-r"],[S])]}else x=[Ge(["vlist-r"],[w])];var z=Ge(["vlist-t"],x);return 2===x.length&&z.classes.push("vlist-t2"),z.height=u,z.depth=-c,z},makeOrd:function(e,t,r){var a=e.mode,i=e.text,o=["mord"],s="math"===a||"text"===a&&t.font,l=s?t.font:t.fontFamily;if(55349===i.charCodeAt(0)){var h=function(e,t){var r=1024*(e.charCodeAt(0)-55296)+(e.charCodeAt(1)-56320)+65536,a="math"===t?0:1;if(119808<=r&&r<120484){var i=Math.floor((r-119808)/26);return[Te[i][2],Te[i][a]]}if(120782<=r&&r<=120831){var o=Math.floor((r-120782)/10);return[Be[o][2],Be[o][a]]}if(120485===r||120486===r)return[Te[0][2],Te[0][a]];if(120486<r&&r<120782)return["",""];throw new n("Unsupported character: "+e)}(i,a),m=h[0],c=h[1];return Pe(i,m,a,t,o.concat(c))}if(l){var u,p;if("boldsymbol"===l){var d=function(e,t,r,n,a){return"textord"!==a&&De(e,"Math-BoldItalic",t).metrics?{fontName:"Math-BoldItalic",fontClass:"boldsymbol"}:{fontName:"Main-Bold",fontClass:"mathbf"}}(i,a,0,0,r);u=d.fontName,p=[d.fontClass]}else s?(u=Xe[l].fontName,p=[l]):(u=We(l,t.fontWeight,t.fontShape),p=[l,t.fontWeight,t.fontShape]);if(De(i,u,a).metrics)return Pe(i,u,a,t,o.concat(p));if(he.hasOwnProperty(i)&&"Typewriter"===u.substr(0,10)){for(var f=[],g=0;g<i.length;g++)f.push(Pe(i[g],u,a,t,o.concat(p)));return Ye(f)}}if("mathord"===r)return Pe(i,"Math-Italic",a,t,o.concat(["mathnormal"]));if("textord"===r){var v=X[a][i]&&X[a][i].font;if("ams"===v){var b=We("amsrm",t.fontWeight,t.fontShape);return Pe(i,b,a,t,o.concat("amsrm",t.fontWeight,t.fontShape))}if("main"!==v&&v){var y=We(v,t.fontWeight,t.fontShape);return Pe(i,y,a,t,o.concat(y,t.fontWeight,t.fontShape))}var x=We("textrm",t.fontWeight,t.fontShape);return Pe(i,x,a,t,o.concat(t.fontWeight,t.fontShape))}throw new Error("unexpected type: "+r+" in makeOrd")},makeGlue:function(e,t){var r=Ge(["mspace"],[],t),n=Le(e,t);return r.style.marginRight=n+"em",r},staticSvg:function(e,t){var r=_e[e],n=r[0],a=r[1],i=r[2],o=new E(n),s=new O([o],{width:a+"em",height:i+"em",style:"width:"+a+"em",viewBox:"0 0 "+1e3*a+" "+1e3*i,preserveAspectRatio:"xMinYMin"}),l=Ue(["overlay"],[s],t);return l.height=i,l.style.height=i+"em",l.style.width=a+"em",l},svgData:_e,tryCombineChars:function(e){for(var t=0;t<e.length-1;t++){var r=e[t],n=e[t+1];r instanceof R&&n instanceof R&&Fe(r,n)&&(r.text+=n.text,r.height=Math.max(r.height,n.height),r.depth=Math.max(r.depth,n.depth),r.italic=n.italic,e.splice(t+1,1),t--)}return e}},$e={number:3,unit:"mu"},Ze={number:4,unit:"mu"},Ke={number:5,unit:"mu"},Je={mord:{mop:$e,mbin:Ze,mrel:Ke,minner:$e},mop:{mord:$e,mop:$e,mrel:Ke,minner:$e},mbin:{mord:Ze,mop:Ze,mopen:Ze,minner:Ze},mrel:{mord:Ke,mop:Ke,mopen:Ke,minner:Ke},mopen:{},mclose:{mop:$e,mbin:Ze,mrel:Ke,minner:$e},mpunct:{mord:$e,mop:$e,mrel:Ke,mopen:$e,mclose:$e,mpunct:$e,minner:$e},minner:{mord:$e,mop:$e,mbin:Ze,mrel:Ke,mopen:$e,mpunct:$e,minner:$e}},Qe={mord:{mop:$e},mop:{mord:$e,mop:$e},mbin:{},mrel:{},mopen:{},mclose:{mop:$e},mpunct:{},minner:{mop:$e}},et={},tt={},rt={};function nt(e){for(var t=e.type,r=e.names,n=e.props,a=e.handler,i=e.htmlBuilder,o=e.mathmlBuilder,s={type:t,numArgs:n.numArgs,argTypes:n.argTypes,allowedInArgument:!!n.allowedInArgument,allowedInText:!!n.allowedInText,allowedInMath:void 0===n.allowedInMath||n.allowedInMath,numOptionalArgs:n.numOptionalArgs||0,infix:!!n.infix,primitive:!!n.primitive,handler:a},l=0;l<r.length;++l)et[r[l]]=s;t&&(i&&(tt[t]=i),o&&(rt[t]=o))}function at(e){nt({type:e.type,names:[],props:{numArgs:0},handler:function(){throw new Error("Should never be called.")},htmlBuilder:e.htmlBuilder,mathmlBuilder:e.mathmlBuilder})}var it=function(e){return"ordgroup"===e.type&&1===e.body.length?e.body[0]:e},ot=function(e){return"ordgroup"===e.type?e.body:[e]},st=je.makeSpan,lt=["leftmost","mbin","mopen","mrel","mop","mpunct"],ht=["rightmost","mrel","mclose","mpunct"],mt={display:b.DISPLAY,text:b.TEXT,script:b.SCRIPT,scriptscript:b.SCRIPTSCRIPT},ct={mord:"mord",mop:"mop",mbin:"mbin",mrel:"mrel",mopen:"mopen",mclose:"mclose",mpunct:"mpunct",minner:"minner"},ut=function(e,t,r,n){void 0===n&&(n=[null,null]);for(var a=[],i=0;i<e.length;i++){var o=bt(e[i],t);if(o instanceof M){var s=o.children;a.push.apply(a,s)}else a.push(o)}if(je.tryCombineChars(a),!r)return a;var h=t;if(1===e.length){var m=e[0];"sizing"===m.type?h=t.havingSize(m.size):"styling"===m.type&&(h=t.havingStyle(mt[m.style]))}var c=st([n[0]||"leftmost"],[],t),u=st([n[1]||"rightmost"],[],t),p="root"===r;return pt(a,(function(e,t){var r=t.classes[0],n=e.classes[0];"mbin"===r&&l.contains(ht,n)?t.classes[0]="mord":"mbin"===n&&l.contains(lt,r)&&(e.classes[0]="mord")}),{node:c},u,p),pt(a,(function(e,t){var r=gt(t),n=gt(e),a=r&&n?e.hasClass("mtight")?Qe[r][n]:Je[r][n]:null;if(a)return je.makeGlue(a,h)}),{node:c},u,p),a},pt=function e(t,r,n,a,i){a&&t.push(a);for(var o=0;o<t.length;o++){var s=t[o],l=dt(s);if(l)e(l.children,r,n,null,i);else{var h=!s.hasClass("mspace");if(h){var m=r(s,n.node);m&&(n.insertAfter?n.insertAfter(m):(t.unshift(m),o++))}h?n.node=s:i&&s.hasClass("newline")&&(n.node=st(["leftmost"])),n.insertAfter=function(e){return function(r){t.splice(e+1,0,r),o++}}(o)}}a&&t.pop()},dt=function(e){return e instanceof M||e instanceof q||e instanceof N&&e.hasClass("enclosing")?e:null},ft=function e(t,r){var n=dt(t);if(n){var a=n.children;if(a.length){if("right"===r)return e(a[a.length-1],"right");if("left"===r)return e(a[0],"left")}}return t},gt=function(e,t){return e?(t&&(e=ft(e,t)),ct[e.classes[0]]||null):null},vt=function(e,t){var r=["nulldelimiter"].concat(e.baseSizingClasses());return st(t.concat(r))},bt=function(e,t,r){if(!e)return st();if(tt[e.type]){var a=tt[e.type](e,t);if(r&&t.size!==r.size){a=st(t.sizingClasses(r),[a],t);var i=t.sizeMultiplier/r.sizeMultiplier;a.height*=i,a.depth*=i}return a}throw new n("Got group of unknown type: '"+e.type+"'")};function yt(e,t){var r=st(["base"],e,t),n=st(["strut"]);return n.style.height=r.height+r.depth+"em",n.style.verticalAlign=-r.depth+"em",r.children.unshift(n),r}function xt(e,t){var r=null;1===e.length&&"tag"===e[0].type&&(r=e[0].tag,e=e[0].body);var n,a=ut(e,t,"root");2===a.length&&a[1].hasClass("tag")&&(n=a.pop());for(var i,o=[],s=[],l=0;l<a.length;l++)if(s.push(a[l]),a[l].hasClass("mbin")||a[l].hasClass("mrel")||a[l].hasClass("allowbreak")){for(var h=!1;l<a.length-1&&a[l+1].hasClass("mspace")&&!a[l+1].hasClass("newline");)l++,s.push(a[l]),a[l].hasClass("nobreak")&&(h=!0);h||(o.push(yt(s,t)),s=[])}else a[l].hasClass("newline")&&(s.pop(),s.length>0&&(o.push(yt(s,t)),s=[]),o.push(a[l]));s.length>0&&o.push(yt(s,t)),r?((i=yt(ut(r,t,!0))).classes=["tag"],o.push(i)):n&&o.push(n);var m=st(["katex-html"],o);if(m.setAttribute("aria-hidden","true"),i){var c=i.children[0];c.style.height=m.height+m.depth+"em",c.style.verticalAlign=-m.depth+"em"}return m}function wt(e){return new M(e)}var kt=function(){function e(e,t,r){this.type=void 0,this.attributes=void 0,this.children=void 0,this.classes=void 0,this.type=e,this.attributes={},this.children=t||[],this.classes=r||[]}var t=e.prototype;return t.setAttribute=function(e,t){this.attributes[e]=t},t.getAttribute=function(e){return this.attributes[e]},t.toNode=function(){var e=document.createElementNS("http://www.w3.org/1998/Math/MathML",this.type);for(var t in this.attributes)Object.prototype.hasOwnProperty.call(this.attributes,t)&&e.setAttribute(t,this.attributes[t]);this.classes.length>0&&(e.className=z(this.classes));for(var r=0;r<this.children.length;r++)e.appendChild(this.children[r].toNode());return e},t.toMarkup=function(){var e="<"+this.type;for(var t in this.attributes)Object.prototype.hasOwnProperty.call(this.attributes,t)&&(e+=" "+t+'="',e+=l.escape(this.attributes[t]),e+='"');this.classes.length>0&&(e+=' class ="'+l.escape(z(this.classes))+'"'),e+=">";for(var r=0;r<this.children.length;r++)e+=this.children[r].toMarkup();return e+="</"+this.type+">"},t.toText=function(){return this.children.map((function(e){return e.toText()})).join("")},e}(),St=function(){function e(e){this.text=void 0,this.text=e}var t=e.prototype;return t.toNode=function(){return document.createTextNode(this.text)},t.toMarkup=function(){return l.escape(this.toText())},t.toText=function(){return this.text},e}(),Mt={MathNode:kt,TextNode:St,SpaceNode:function(){function e(e){this.width=void 0,this.character=void 0,this.width=e,this.character=e>=.05555&&e<=.05556?"\u200a":e>=.1666&&e<=.1667?"\u2009":e>=.2222&&e<=.2223?"\u2005":e>=.2777&&e<=.2778?"\u2005\u200a":e>=-.05556&&e<=-.05555?"\u200a\u2063":e>=-.1667&&e<=-.1666?"\u2009\u2063":e>=-.2223&&e<=-.2222?"\u205f\u2063":e>=-.2778&&e<=-.2777?"\u2005\u2063":null}var t=e.prototype;return t.toNode=function(){if(this.character)return document.createTextNode(this.character);var e=document.createElementNS("http://www.w3.org/1998/Math/MathML","mspace");return e.setAttribute("width",this.width+"em"),e},t.toMarkup=function(){return this.character?"<mtext>"+this.character+"</mtext>":'<mspace width="'+this.width+'em"/>'},t.toText=function(){return this.character?this.character:" "},e}(),newDocumentFragment:wt},zt=function(e,t,r){return!X[t][e]||!X[t][e].replace||55349===e.charCodeAt(0)||he.hasOwnProperty(e)&&r&&(r.fontFamily&&"tt"===r.fontFamily.substr(4,2)||r.font&&"tt"===r.font.substr(4,2))||(e=X[t][e].replace),new Mt.TextNode(e)},At=function(e){return 1===e.length?e[0]:new Mt.MathNode("mrow",e)},Tt=function(e,t){if("texttt"===t.fontFamily)return"monospace";if("textsf"===t.fontFamily)return"textit"===t.fontShape&&"textbf"===t.fontWeight?"sans-serif-bold-italic":"textit"===t.fontShape?"sans-serif-italic":"textbf"===t.fontWeight?"bold-sans-serif":"sans-serif";if("textit"===t.fontShape&&"textbf"===t.fontWeight)return"bold-italic";if("textit"===t.fontShape)return"italic";if("textbf"===t.fontWeight)return"bold";var r=t.font;if(!r||"mathnormal"===r)return null;var n=e.mode;if("mathit"===r)return"italic";if("boldsymbol"===r)return"textord"===e.type?"bold":"bold-italic";if("mathbf"===r)return"bold";if("mathbb"===r)return"double-struck";if("mathfrak"===r)return"fraktur";if("mathscr"===r||"mathcal"===r)return"script";if("mathsf"===r)return"sans-serif";if("mathtt"===r)return"monospace";var a=e.text;return l.contains(["\\imath","\\jmath"],a)?null:(X[n][a]&&X[n][a].replace&&(a=X[n][a].replace),V(a,je.fontMap[r].fontName,n)?je.fontMap[r].variant:null)},Bt=function(e,t,r){if(1===e.length){var n=qt(e[0],t);return r&&n instanceof kt&&"mo"===n.type&&(n.setAttribute("lspace","0em"),n.setAttribute("rspace","0em")),[n]}for(var a,i=[],o=0;o<e.length;o++){var s=qt(e[o],t);if(s instanceof kt&&a instanceof kt){if("mtext"===s.type&&"mtext"===a.type&&s.getAttribute("mathvariant")===a.getAttribute("mathvariant")){var l;(l=a.children).push.apply(l,s.children);continue}if("mn"===s.type&&"mn"===a.type){var h;(h=a.children).push.apply(h,s.children);continue}if("mi"===s.type&&1===s.children.length&&"mn"===a.type){var m=s.children[0];if(m instanceof St&&"."===m.text){var c;(c=a.children).push.apply(c,s.children);continue}}else if("mi"===a.type&&1===a.children.length){var u=a.children[0];if(u instanceof St&&"\u0338"===u.text&&("mo"===s.type||"mi"===s.type||"mn"===s.type)){var p=s.children[0];p instanceof St&&p.text.length>0&&(p.text=p.text.slice(0,1)+"\u0338"+p.text.slice(1),i.pop())}}}i.push(s),a=s}return i},Nt=function(e,t,r){return At(Bt(e,t,r))},qt=function(e,t){if(!e)return new Mt.MathNode("mrow");if(rt[e.type])return rt[e.type](e,t);throw new n("Got group of unknown type: '"+e.type+"'")};function Ct(e,t,r,n,a){var i,o=Bt(e,r);i=1===o.length&&o[0]instanceof kt&&l.contains(["mrow","mtable"],o[0].type)?o[0]:new Mt.MathNode("mrow",o);var s=new Mt.MathNode("annotation",[new Mt.TextNode(t)]);s.setAttribute("encoding","application/x-tex");var h=new Mt.MathNode("semantics",[i,s]),m=new Mt.MathNode("math",[h]);m.setAttribute("xmlns","http://www.w3.org/1998/Math/MathML"),n&&m.setAttribute("display","block");var c=a?"katex":"katex-mathml";return je.makeSpan([c],[m])}var It=function(e){return new Re({style:e.displayMode?b.DISPLAY:b.TEXT,maxSize:e.maxSize,minRuleThickness:e.minRuleThickness})},Rt=function(e,t){if(t.displayMode){var r=["katex-display"];t.leqno&&r.push("leqno"),t.fleqn&&r.push("fleqn"),e=je.makeSpan(r,[e])}return e},Ot=function(e,t,r){var n,a=It(r);if("mathml"===r.output)return Ct(e,t,a,r.displayMode,!0);if("html"===r.output){var i=xt(e,a);n=je.makeSpan(["katex"],[i])}else{var o=Ct(e,t,a,r.displayMode,!1),s=xt(e,a);n=je.makeSpan(["katex"],[o,s])}return Rt(n,r)},Et={widehat:"^",widecheck:"\u02c7",widetilde:"~",utilde:"~",overleftarrow:"\u2190",underleftarrow:"\u2190",xleftarrow:"\u2190",overrightarrow:"\u2192",underrightarrow:"\u2192",xrightarrow:"\u2192",underbrace:"\u23df",overbrace:"\u23de",overgroup:"\u23e0",undergroup:"\u23e1",overleftrightarrow:"\u2194",underleftrightarrow:"\u2194",xleftrightarrow:"\u2194",Overrightarrow:"\u21d2",xRightarrow:"\u21d2",overleftharpoon:"\u21bc",xleftharpoonup:"\u21bc",overrightharpoon:"\u21c0",xrightharpoonup:"\u21c0",xLeftarrow:"\u21d0",xLeftrightarrow:"\u21d4",xhookleftarrow:"\u21a9",xhookrightarrow:"\u21aa",xmapsto:"\u21a6",xrightharpoondown:"\u21c1",xleftharpoondown:"\u21bd",xrightleftharpoons:"\u21cc",xleftrightharpoons:"\u21cb",xtwoheadleftarrow:"\u219e",xtwoheadrightarrow:"\u21a0",xlongequal:"=",xtofrom:"\u21c4",xrightleftarrows:"\u21c4",xrightequilibrium:"\u21cc",xleftequilibrium:"\u21cb","\\cdrightarrow":"\u2192","\\cdleftarrow":"\u2190","\\cdlongequal":"="},Ht={overrightarrow:[["rightarrow"],.888,522,"xMaxYMin"],overleftarrow:[["leftarrow"],.888,522,"xMinYMin"],underrightarrow:[["rightarrow"],.888,522,"xMaxYMin"],underleftarrow:[["leftarrow"],.888,522,"xMinYMin"],xrightarrow:[["rightarrow"],1.469,522,"xMaxYMin"],"\\cdrightarrow":[["rightarrow"],3,522,"xMaxYMin"],xleftarrow:[["leftarrow"],1.469,522,"xMinYMin"],"\\cdleftarrow":[["leftarrow"],3,522,"xMinYMin"],Overrightarrow:[["doublerightarrow"],.888,560,"xMaxYMin"],xRightarrow:[["doublerightarrow"],1.526,560,"xMaxYMin"],xLeftarrow:[["doubleleftarrow"],1.526,560,"xMinYMin"],overleftharpoon:[["leftharpoon"],.888,522,"xMinYMin"],xleftharpoonup:[["leftharpoon"],.888,522,"xMinYMin"],xleftharpoondown:[["leftharpoondown"],.888,522,"xMinYMin"],overrightharpoon:[["rightharpoon"],.888,522,"xMaxYMin"],xrightharpoonup:[["rightharpoon"],.888,522,"xMaxYMin"],xrightharpoondown:[["rightharpoondown"],.888,522,"xMaxYMin"],xlongequal:[["longequal"],.888,334,"xMinYMin"],"\\cdlongequal":[["longequal"],3,334,"xMinYMin"],xtwoheadleftarrow:[["twoheadleftarrow"],.888,334,"xMinYMin"],xtwoheadrightarrow:[["twoheadrightarrow"],.888,334,"xMaxYMin"],overleftrightarrow:[["leftarrow","rightarrow"],.888,522],overbrace:[["leftbrace","midbrace","rightbrace"],1.6,548],underbrace:[["leftbraceunder","midbraceunder","rightbraceunder"],1.6,548],underleftrightarrow:[["leftarrow","rightarrow"],.888,522],xleftrightarrow:[["leftarrow","rightarrow"],1.75,522],xLeftrightarrow:[["doubleleftarrow","doublerightarrow"],1.75,560],xrightleftharpoons:[["leftharpoondownplus","rightharpoonplus"],1.75,716],xleftrightharpoons:[["leftharpoonplus","rightharpoondownplus"],1.75,716],xhookleftarrow:[["leftarrow","righthook"],1.08,522],xhookrightarrow:[["lefthook","rightarrow"],1.08,522],overlinesegment:[["leftlinesegment","rightlinesegment"],.888,522],underlinesegment:[["leftlinesegment","rightlinesegment"],.888,522],overgroup:[["leftgroup","rightgroup"],.888,342],undergroup:[["leftgroupunder","rightgroupunder"],.888,342],xmapsto:[["leftmapsto","rightarrow"],1.5,522],xtofrom:[["leftToFrom","rightToFrom"],1.75,528],xrightleftarrows:[["baraboveleftarrow","rightarrowabovebar"],1.75,901],xrightequilibrium:[["baraboveshortleftharpoon","rightharpoonaboveshortbar"],1.75,716],xleftequilibrium:[["shortbaraboveleftharpoon","shortrightharpoonabovebar"],1.75,716]},Lt=function(e,t,r,n,a){var i,o=e.height+e.depth+r+n;if(/fbox|color|angl/.test(t)){if(i=je.makeSpan(["stretchy",t],[],a),"fbox"===t){var s=a.color&&a.getColor();s&&(i.style.borderColor=s)}}else{var l=[];/^[bx]cancel$/.test(t)&&l.push(new H({x1:"0",y1:"0",x2:"100%",y2:"100%","stroke-width":"0.046em"})),/^x?cancel$/.test(t)&&l.push(new H({x1:"0",y1:"100%",x2:"100%",y2:"0","stroke-width":"0.046em"}));var h=new O(l,{width:"100%",height:o+"em"});i=je.makeSvgSpan([],[h],a)}return i.height=o,i.style.height=o+"em",i},Dt=function(e){var t=new Mt.MathNode("mo",[new Mt.TextNode(Et[e.replace(/^\\/,"")])]);return t.setAttribute("stretchy","true"),t},Pt=function(e,t){var r=function(){var r=4e5,n=e.label.substr(1);if(l.contains(["widehat","widecheck","widetilde","utilde"],n)){var a,i,o,s="ordgroup"===(d=e.base).type?d.body.length:1;if(s>5)"widehat"===n||"widecheck"===n?(a=420,r=2364,o=.42,i=n+"4"):(a=312,r=2340,o=.34,i="tilde4");else{var h=[1,1,2,2,3,3][s];"widehat"===n||"widecheck"===n?(r=[0,1062,2364,2364,2364][h],a=[0,239,300,360,420][h],o=[0,.24,.3,.3,.36,.42][h],i=n+h):(r=[0,600,1033,2339,2340][h],a=[0,260,286,306,312][h],o=[0,.26,.286,.3,.306,.34][h],i="tilde"+h)}var m=new E(i),c=new O([m],{width:"100%",height:o+"em",viewBox:"0 0 "+r+" "+a,preserveAspectRatio:"none"});return{span:je.makeSvgSpan([],[c],t),minWidth:0,height:o}}var u,p,d,f=[],g=Ht[n],v=g[0],b=g[1],y=g[2],x=y/1e3,w=v.length;if(1===w)u=["hide-tail"],p=[g[3]];else if(2===w)u=["halfarrow-left","halfarrow-right"],p=["xMinYMin","xMaxYMin"];else{if(3!==w)throw new Error("Correct katexImagesData or update code here to support\n                    "+w+" children.");u=["brace-left","brace-center","brace-right"],p=["xMinYMin","xMidYMin","xMaxYMin"]}for(var k=0;k<w;k++){var S=new E(v[k]),M=new O([S],{width:"400em",height:x+"em",viewBox:"0 0 "+r+" "+y,preserveAspectRatio:p[k]+" slice"}),z=je.makeSvgSpan([u[k]],[M],t);if(1===w)return{span:z,minWidth:b,height:x};z.style.height=x+"em",f.push(z)}return{span:je.makeSpan(["stretchy"],f,t),minWidth:b,height:x}}(),n=r.span,a=r.minWidth,i=r.height;return n.height=i,n.style.height=i+"em",a>0&&(n.style.minWidth=a+"em"),n};function Ft(e,t){if(!e||e.type!==t)throw new Error("Expected node of type "+t+", but got "+(e?"node of type "+e.type:String(e)));return e}function Vt(e){var t=Gt(e);if(!t)throw new Error("Expected node of symbol group type, but got "+(e?"node of type "+e.type:String(e)));return t}function Gt(e){return e&&("atom"===e.type||Y.hasOwnProperty(e.type))?e:null}var Ut=function(e,t){var r,n,a;e&&"supsub"===e.type?(r=(n=Ft(e.base,"accent")).base,e.base=r,a=function(e){if(e instanceof N)return e;throw new Error("Expected span<HtmlDomNode> but got "+String(e)+".")}(bt(e,t)),e.base=n):r=(n=Ft(e,"accent")).base;var i=bt(r,t.havingCrampedStyle()),o=0;if(n.isShifty&&l.isCharacterBox(r)){var s=l.getBaseElem(r);o=L(bt(s,t.havingCrampedStyle())).skew}var h,m="\\c"===n.label,c=m?i.height+i.depth:Math.min(i.height,t.fontMetrics().xHeight);if(n.isStretchy)h=Pt(n,t),h=je.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:i},{type:"elem",elem:h,wrapperClasses:["svg-align"],wrapperStyle:o>0?{width:"calc(100% - "+2*o+"em)",marginLeft:2*o+"em"}:void 0}]},t);else{var u,p;"\\vec"===n.label?(u=je.staticSvg("vec",t),p=je.svgData.vec[1]):((u=L(u=je.makeOrd({mode:n.mode,text:n.label},t,"textord"))).italic=0,p=u.width,m&&(c+=u.depth)),h=je.makeSpan(["accent-body"],[u]);var d="\\textcircled"===n.label;d&&(h.classes.push("accent-full"),c=i.height);var f=o;d||(f-=p/2),h.style.left=f+"em","\\textcircled"===n.label&&(h.style.top=".2em"),h=je.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:i},{type:"kern",size:-c},{type:"elem",elem:h}]},t)}var g=je.makeSpan(["mord","accent"],[h],t);return a?(a.children[0]=g,a.height=Math.max(g.height,a.height),a.classes[0]="mord",a):g},Yt=function(e,t){var r=e.isStretchy?Dt(e.label):new Mt.MathNode("mo",[zt(e.label,e.mode)]),n=new Mt.MathNode("mover",[qt(e.base,t),r]);return n.setAttribute("accent","true"),n},Wt=new RegExp(["\\acute","\\grave","\\ddot","\\tilde","\\bar","\\breve","\\check","\\hat","\\vec","\\dot","\\mathring"].map((function(e){return"\\"+e})).join("|"));nt({type:"accent",names:["\\acute","\\grave","\\ddot","\\tilde","\\bar","\\breve","\\check","\\hat","\\vec","\\dot","\\mathring","\\widecheck","\\widehat","\\widetilde","\\overrightarrow","\\overleftarrow","\\Overrightarrow","\\overleftrightarrow","\\overgroup","\\overlinesegment","\\overleftharpoon","\\overrightharpoon"],props:{numArgs:1},handler:function(e,t){var r=it(t[0]),n=!Wt.test(e.funcName),a=!n||"\\widehat"===e.funcName||"\\widetilde"===e.funcName||"\\widecheck"===e.funcName;return{type:"accent",mode:e.parser.mode,label:e.funcName,isStretchy:n,isShifty:a,base:r}},htmlBuilder:Ut,mathmlBuilder:Yt}),nt({type:"accent",names:["\\'","\\","\\^","\\~","\\=","\\u","\\.",'\\"',"\\c","\\r","\\H","\\v","\\textcircled"],props:{numArgs:1,allowedInText:!0,allowedInMath:!0,argTypes:["primitive"]},handler:function(e,t){var r=t[0],n=e.parser.mode;return"math"===n&&(e.parser.settings.reportNonstrict("mathVsTextAccents","LaTeX's accent "+e.funcName+" works only in text mode"),n="text"),{type:"accent",mode:n,label:e.funcName,isStretchy:!1,isShifty:!0,base:r}},htmlBuilder:Ut,mathmlBuilder:Yt}),nt({type:"accentUnder",names:["\\underleftarrow","\\underrightarrow","\\underleftrightarrow","\\undergroup","\\underlinesegment","\\utilde"],props:{numArgs:1},handler:function(e,t){var r=e.parser,n=e.funcName,a=t[0];return{type:"accentUnder",mode:r.mode,label:n,base:a}},htmlBuilder:function(e,t){var r=bt(e.base,t),n=Pt(e,t),a="\\utilde"===e.label?.12:0,i=je.makeVList({positionType:"top",positionData:r.height,children:[{type:"elem",elem:n,wrapperClasses:["svg-align"]},{type:"kern",size:a},{type:"elem",elem:r}]},t);return je.makeSpan(["mord","accentunder"],[i],t)},mathmlBuilder:function(e,t){var r=Dt(e.label),n=new Mt.MathNode("munder",[qt(e.base,t),r]);return n.setAttribute("accentunder","true"),n}});var Xt=function(e){var t=new Mt.MathNode("mpadded",e?[e]:[]);return t.setAttribute("width","+0.6em"),t.setAttribute("lspace","0.3em"),t};nt({type:"xArrow",names:["\\xleftarrow","\\xrightarrow","\\xLeftarrow","\\xRightarrow","\\xleftrightarrow","\\xLeftrightarrow","\\xhookleftarrow","\\xhookrightarrow","\\xmapsto","\\xrightharpoondown","\\xrightharpoonup","\\xleftharpoondown","\\xleftharpoonup","\\xrightleftharpoons","\\xleftrightharpoons","\\xlongequal","\\xtwoheadrightarrow","\\xtwoheadleftarrow","\\xtofrom","\\xrightleftarrows","\\xrightequilibrium","\\xleftequilibrium","\\\\cdrightarrow","\\\\cdleftarrow","\\\\cdlongequal"],props:{numArgs:1,numOptionalArgs:1},handler:function(e,t,r){var n=e.parser,a=e.funcName;return{type:"xArrow",mode:n.mode,label:a,body:t[0],below:r[0]}},htmlBuilder:function(e,t){var r,n=t.style,a=t.havingStyle(n.sup()),i=je.wrapFragment(bt(e.body,a,t),t),o="\\x"===e.label.slice(0,2)?"x":"cd";i.classes.push(o+"-arrow-pad"),e.below&&(a=t.havingStyle(n.sub()),(r=je.wrapFragment(bt(e.below,a,t),t)).classes.push(o+"-arrow-pad"));var s,l=Pt(e,t),h=-t.fontMetrics().axisHeight+.5*l.height,m=-t.fontMetrics().axisHeight-.5*l.height-.111;if((i.depth>.25||"\\xleftequilibrium"===e.label)&&(m-=i.depth),r){var c=-t.fontMetrics().axisHeight+r.height+.5*l.height+.111;s=je.makeVList({positionType:"individualShift",children:[{type:"elem",elem:i,shift:m},{type:"elem",elem:l,shift:h},{type:"elem",elem:r,shift:c}]},t)}else s=je.makeVList({positionType:"individualShift",children:[{type:"elem",elem:i,shift:m},{type:"elem",elem:l,shift:h}]},t);return s.children[0].children[0].children[1].classes.push("svg-align"),je.makeSpan(["mrel","x-arrow"],[s],t)},mathmlBuilder:function(e,t){var r,n=Dt(e.label);if(n.setAttribute("minsize","x"===e.label.charAt(0)?"1.75em":"3.0em"),e.body){var a=Xt(qt(e.body,t));if(e.below){var i=Xt(qt(e.below,t));r=new Mt.MathNode("munderover",[n,i,a])}else r=new Mt.MathNode("mover",[n,a])}else if(e.below){var o=Xt(qt(e.below,t));r=new Mt.MathNode("munder",[n,o])}else r=Xt(),r=new Mt.MathNode("mover",[n,r]);return r}});var _t={">":"\\\\cdrightarrow","<":"\\\\cdleftarrow","=":"\\\\cdlongequal",A:"\\uparrow",V:"\\downarrow","|":"\\Vert",".":"no arrow"},jt=function(e){return"textord"===e.type&&"@"===e.text};function $t(e,t,r){var n=_t[e];switch(n){case"\\\\cdrightarrow":case"\\\\cdleftarrow":return r.callFunction(n,[t[0]],[t[1]]);case"\\uparrow":case"\\downarrow":var a={type:"atom",text:n,mode:"math",family:"rel"},i={type:"ordgroup",mode:"math",body:[r.callFunction("\\\\cdleft",[t[0]],[]),r.callFunction("\\Big",[a],[]),r.callFunction("\\\\cdright",[t[1]],[])]};return r.callFunction("\\\\cdparent",[i],[]);case"\\\\cdlongequal":return r.callFunction("\\\\cdlongequal",[],[]);case"\\Vert":return r.callFunction("\\Big",[{type:"textord",text:"\\Vert",mode:"math"}],[]);default:return{type:"textord",text:" ",mode:"math"}}}nt({type:"cdlabel",names:["\\\\cdleft","\\\\cdright"],props:{numArgs:1},handler:function(e,t){var r=e.parser,n=e.funcName;return{type:"cdlabel",mode:r.mode,side:n.slice(4),label:t[0]}},htmlBuilder:function(e,t){var r=t.havingStyle(t.style.sup()),n=je.wrapFragment(bt(e.label,r,t),t);return n.classes.push("cd-label-"+e.side),n.style.bottom=.8-n.depth+"em",n.height=0,n.depth=0,n},mathmlBuilder:function(e,t){var r=new Mt.MathNode("mrow",[qt(e.label,t)]);return(r=new Mt.MathNode("mpadded",[r])).setAttribute("width","0"),"left"===e.side&&r.setAttribute("lspace","-1width"),r.setAttribute("voffset","0.7em"),(r=new Mt.MathNode("mstyle",[r])).setAttribute("displaystyle","false"),r.setAttribute("scriptlevel","1"),r}}),nt({type:"cdlabelparent",names:["\\\\cdparent"],props:{numArgs:1},handler:function(e,t){return{type:"cdlabelparent",mode:e.parser.mode,fragment:t[0]}},htmlBuilder:function(e,t){var r=je.wrapFragment(bt(e.fragment,t),t);return r.classes.push("cd-vert-arrow"),r},mathmlBuilder:function(e,t){return new Mt.MathNode("mrow",[qt(e.fragment,t)])}}),nt({type:"textord",names:["\\@char"],props:{numArgs:1,allowedInText:!0},handler:function(e,t){for(var r=e.parser,a=Ft(t[0],"ordgroup").body,i="",o=0;o<a.length;o++){i+=Ft(a[o],"textord").text}var s,l=parseInt(i);if(isNaN(l))throw new n("\\@char has non-numeric argument "+i);if(l<0||l>=1114111)throw new n("\\@char with invalid code point "+i);return l<=65535?s=String.fromCharCode(l):(l-=65536,s=String.fromCharCode(55296+(l>>10),56320+(1023&l))),{type:"textord",mode:r.mode,text:s}}});var Zt=function(e,t){var r=ut(e.body,t.withColor(e.color),!1);return je.makeFragment(r)},Kt=function(e,t){var r=Bt(e.body,t.withColor(e.color)),n=new Mt.MathNode("mstyle",r);return n.setAttribute("mathcolor",e.color),n};nt({type:"color",names:["\\textcolor"],props:{numArgs:2,allowedInText:!0,argTypes:["color","original"]},handler:function(e,t){var r=e.parser,n=Ft(t[0],"color-token").color,a=t[1];return{type:"color",mode:r.mode,color:n,body:ot(a)}},htmlBuilder:Zt,mathmlBuilder:Kt}),nt({type:"color",names:["\\color"],props:{numArgs:1,allowedInText:!0,argTypes:["color"]},handler:function(e,t){var r=e.parser,n=e.breakOnTokenText,a=Ft(t[0],"color-token").color;r.gullet.macros.set("\\current@color",a);var i=r.parseExpression(!0,n);return{type:"color",mode:r.mode,color:a,body:i}},htmlBuilder:Zt,mathmlBuilder:Kt}),nt({type:"cr",names:["\\\\"],props:{numArgs:0,numOptionalArgs:1,argTypes:["size"],allowedInText:!0},handler:function(e,t,r){var n=e.parser,a=r[0],i=!n.settings.displayMode||!n.settings.useStrictBehavior("newLineInDisplayMode","In LaTeX, \\\\ or \\newline does nothing in display mode");return{type:"cr",mode:n.mode,newLine:i,size:a&&Ft(a,"size").value}},htmlBuilder:function(e,t){var r=je.makeSpan(["mspace"],[],t);return e.newLine&&(r.classes.push("newline"),e.size&&(r.style.marginTop=Le(e.size,t)+"em")),r},mathmlBuilder:function(e,t){var r=new Mt.MathNode("mspace");return e.newLine&&(r.setAttribute("linebreak","newline"),e.size&&r.setAttribute("height",Le(e.size,t)+"em")),r}});var Jt={"\\global":"\\global","\\long":"\\\\globallong","\\\\globallong":"\\\\globallong","\\def":"\\gdef","\\gdef":"\\gdef","\\edef":"\\xdef","\\xdef":"\\xdef","\\let":"\\\\globallet","\\futurelet":"\\\\globalfuture"},Qt=function(e){var t=e.text;if(/^(?:[\\{}$&#^_]|EOF)$/.test(t))throw new n("Expected a control sequence",e);return t},er=function(e,t,r,n){var a=e.gullet.macros.get(r.text);null==a&&(r.noexpand=!0,a={tokens:[r],numArgs:0,unexpandable:!e.gullet.isExpandable(r.text)}),e.gullet.macros.set(t,a,n)};nt({type:"internal",names:["\\global","\\long","\\\\globallong"],props:{numArgs:0,allowedInText:!0},handler:function(e){var t=e.parser,r=e.funcName;t.consumeSpaces();var a=t.fetch();if(Jt[a.text])return"\\global"!==r&&"\\\\globallong"!==r||(a.text=Jt[a.text]),Ft(t.parseFunction(),"internal");throw new n("Invalid token after macro prefix",a)}}),nt({type:"internal",names:["\\def","\\gdef","\\edef","\\xdef"],props:{numArgs:0,allowedInText:!0,primitive:!0},handler:function(e){var t=e.parser,r=e.funcName,a=t.gullet.popToken(),i=a.text;if(/^(?:[\\{}$&#^_]|EOF)$/.test(i))throw new n("Expected a control sequence",a);for(var o,s=0,l=[[]];"{"!==t.gullet.future().text;)if("#"===(a=t.gullet.popToken()).text){if("{"===t.gullet.future().text){o=t.gullet.future(),l[s].push("{");break}if(a=t.gullet.popToken(),!/^[1-9]$/.test(a.text))throw new n('Invalid argument number "'+a.text+'"');if(parseInt(a.text)!==s+1)throw new n('Argument number "'+a.text+'" out of order');s++,l.push([])}else{if("EOF"===a.text)throw new n("Expected a macro definition");l[s].push(a.text)}var h=t.gullet.consumeArg().tokens;return o&&h.unshift(o),"\\edef"!==r&&"\\xdef"!==r||(h=t.gullet.expandTokens(h)).reverse(),t.gullet.macros.set(i,{tokens:h,numArgs:s,delimiters:l},r===Jt[r]),{type:"internal",mode:t.mode}}}),nt({type:"internal",names:["\\let","\\\\globallet"],props:{numArgs:0,allowedInText:!0,primitive:!0},handler:function(e){var t=e.parser,r=e.funcName,n=Qt(t.gullet.popToken());t.gullet.consumeSpaces();var a=function(e){var t=e.gullet.popToken();return"="===t.text&&" "===(t=e.gullet.popToken()).text&&(t=e.gullet.popToken()),t}(t);return er(t,n,a,"\\\\globallet"===r),{type:"internal",mode:t.mode}}}),nt({type:"internal",names:["\\futurelet","\\\\globalfuture"],props:{numArgs:0,allowedInText:!0,primitive:!0},handler:function(e){var t=e.parser,r=e.funcName,n=Qt(t.gullet.popToken()),a=t.gullet.popToken(),i=t.gullet.popToken();return er(t,n,i,"\\\\globalfuture"===r),t.gullet.pushToken(i),t.gullet.pushToken(a),{type:"internal",mode:t.mode}}});var tr=function(e,t,r){var n=V(X.math[e]&&X.math[e].replace||e,t,r);if(!n)throw new Error("Unsupported symbol "+e+" and font size "+t+".");return n},rr=function(e,t,r,n){var a=r.havingBaseStyle(t),i=je.makeSpan(n.concat(a.sizingClasses(r)),[e],r),o=a.sizeMultiplier/r.sizeMultiplier;return i.height*=o,i.depth*=o,i.maxFontSize=a.sizeMultiplier,i},nr=function(e,t,r){var n=t.havingBaseStyle(r),a=(1-t.sizeMultiplier/n.sizeMultiplier)*t.fontMetrics().axisHeight;e.classes.push("delimcenter"),e.style.top=a+"em",e.height-=a,e.depth+=a},ar=function(e,t,r,n,a,i){var o=function(e,t,r,n){return je.makeSymbol(e,"Size"+t+"-Regular",r,n)}(e,t,a,n),s=rr(je.makeSpan(["delimsizing","size"+t],[o],n),b.TEXT,n,i);return r&&nr(s,n,b.TEXT),s},ir=function(e,t,r){var n;return n="Size1-Regular"===t?"delim-size1":"delim-size4",{type:"elem",elem:je.makeSpan(["delimsizinginner",n],[je.makeSpan([],[je.makeSymbol(e,t,r)])])}},or=function(e,t,r){var n=D["Size4-Regular"][e.charCodeAt(0)]?D["Size4-Regular"][e.charCodeAt(0)][4].toFixed(3):D["Size1-Regular"][e.charCodeAt(0)][4].toFixed(3),a=new E("inner",function(e,t){switch(e){case"\u239c":return"M291 0 H417 V"+t+" H291z M291 0 H417 V"+t+" H291z";case"\u2223":return"M145 0 H188 V"+t+" H145z M145 0 H188 V"+t+" H145z";case"\u2225":return"M145 0 H188 V"+t+" H145z M145 0 H188 V"+t+" H145zM367 0 H410 V"+t+" H367z M367 0 H410 V"+t+" H367z";case"\u239f":return"M457 0 H583 V"+t+" H457z M457 0 H583 V"+t+" H457z";case"\u23a2":return"M319 0 H403 V"+t+" H319z M319 0 H403 V"+t+" H319z";case"\u23a5":return"M263 0 H347 V"+t+" H263z M263 0 H347 V"+t+" H263z";case"\u23aa":return"M384 0 H504 V"+t+" H384z M384 0 H504 V"+t+" H384z";case"\u23d0":return"M312 0 H355 V"+t+" H312z M312 0 H355 V"+t+" H312z";case"\u2016":return"M257 0 H300 V"+t+" H257z M257 0 H300 V"+t+" H257zM478 0 H521 V"+t+" H478z M478 0 H521 V"+t+" H478z";default:return""}}(e,Math.round(1e3*t))),i=new O([a],{width:n+"em",height:t+"em",style:"width:"+n+"em",viewBox:"0 0 "+1e3*n+" "+Math.round(1e3*t),preserveAspectRatio:"xMinYMin"}),o=je.makeSvgSpan([],[i],r);return o.height=t,o.style.height=t+"em",o.style.width=n+"em",{type:"elem",elem:o}},sr={type:"kern",size:-.008},lr=["|","\\lvert","\\rvert","\\vert"],hr=["\\|","\\lVert","\\rVert","\\Vert"],mr=function(e,t,r,n,a,i){var o,s,h,m;o=h=m=e,s=null;var c="Size1-Regular";"\\uparrow"===e?h=m="\u23d0":"\\Uparrow"===e?h=m="\u2016":"\\downarrow"===e?o=h="\u23d0":"\\Downarrow"===e?o=h="\u2016":"\\updownarrow"===e?(o="\\uparrow",h="\u23d0",m="\\downarrow"):"\\Updownarrow"===e?(o="\\Uparrow",h="\u2016",m="\\Downarrow"):l.contains(lr,e)?h="\u2223":l.contains(hr,e)?h="\u2225":"["===e||"\\lbrack"===e?(o="\u23a1",h="\u23a2",m="\u23a3",c="Size4-Regular"):"]"===e||"\\rbrack"===e?(o="\u23a4",h="\u23a5",m="\u23a6",c="Size4-Regular"):"\\lfloor"===e||"\u230a"===e?(h=o="\u23a2",m="\u23a3",c="Size4-Regular"):"\\lceil"===e||"\u2308"===e?(o="\u23a1",h=m="\u23a2",c="Size4-Regular"):"\\rfloor"===e||"\u230b"===e?(h=o="\u23a5",m="\u23a6",c="Size4-Regular"):"\\rceil"===e||"\u2309"===e?(o="\u23a4",h=m="\u23a5",c="Size4-Regular"):"("===e||"\\lparen"===e?(o="\u239b",h="\u239c",m="\u239d",c="Size4-Regular"):")"===e||"\\rparen"===e?(o="\u239e",h="\u239f",m="\u23a0",c="Size4-Regular"):"\\{"===e||"\\lbrace"===e?(o="\u23a7",s="\u23a8",m="\u23a9",h="\u23aa",c="Size4-Regular"):"\\}"===e||"\\rbrace"===e?(o="\u23ab",s="\u23ac",m="\u23ad",h="\u23aa",c="Size4-Regular"):"\\lgroup"===e||"\u27ee"===e?(o="\u23a7",m="\u23a9",h="\u23aa",c="Size4-Regular"):"\\rgroup"===e||"\u27ef"===e?(o="\u23ab",m="\u23ad",h="\u23aa",c="Size4-Regular"):"\\lmoustache"===e||"\u23b0"===e?(o="\u23a7",m="\u23ad",h="\u23aa",c="Size4-Regular"):"\\rmoustache"!==e&&"\u23b1"!==e||(o="\u23ab",m="\u23a9",h="\u23aa",c="Size4-Regular");var u=tr(o,c,a),p=u.height+u.depth,d=tr(h,c,a),f=d.height+d.depth,g=tr(m,c,a),v=g.height+g.depth,y=0,x=1;if(null!==s){var w=tr(s,c,a);y=w.height+w.depth,x=2}var k=p+v+y,S=k+Math.max(0,Math.ceil((t-k)/(x*f)))*x*f,M=n.fontMetrics().axisHeight;r&&(M*=n.sizeMultiplier);var z=S/2-M,A=[];if(A.push(ir(m,c,a)),A.push(sr),null===s){var T=S-p-v+.016;A.push(or(h,T,n))}else{var B=(S-p-v-y)/2+.016;A.push(or(h,B,n)),A.push(sr),A.push(ir(s,c,a)),A.push(sr),A.push(or(h,B,n))}A.push(sr),A.push(ir(o,c,a));var N=n.havingBaseStyle(b.TEXT),q=je.makeVList({positionType:"bottom",positionData:z,children:A},N);return rr(je.makeSpan(["delimsizing","mult"],[q],N),b.TEXT,n,i)},cr=.08,ur=function(e,t,r,n,a){var i=function(e,t,r){t*=1e3;var n="";switch(e){case"sqrtMain":n=function(e,t){return"M95,"+(622+e+t)+"\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl"+e/2.075+" -"+e+"\nc5.3,-9.3,12,-14,20,-14\nH400000v"+(40+e)+"H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM"+(834+e)+" "+t+"h400000v"+(40+e)+"h-400000z"}(t,k);break;case"sqrtSize1":n=function(e,t){return"M263,"+(601+e+t)+"c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl"+e/2.084+" -"+e+"\nc4.7,-7.3,11,-11,19,-11\nH40000v"+(40+e)+"H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM"+(1001+e)+" "+t+"h400000v"+(40+e)+"h-400000z"}(t,k);break;case"sqrtSize2":n=function(e,t){return"M983 "+(10+e+t)+"\nl"+e/3.13+" -"+e+"\nc4,-6.7,10,-10,18,-10 H400000v"+(40+e)+"\nH1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7\ns-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744\nc-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30\nc26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722\nc56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5\nc53.7,-170.3,84.5,-266.8,92.5,-289.5z\nM"+(1001+e)+" "+t+"h400000v"+(40+e)+"h-400000z"}(t,k);break;case"sqrtSize3":n=function(e,t){return"M424,"+(2398+e+t)+"\nc-1.3,-0.7,-38.5,-172,-111.5,-514c-73,-342,-109.8,-513.3,-110.5,-514\nc0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,25c-5.7,9.3,-9.8,16,-12.5,20\ns-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,-13s76,-122,76,-122s77,-121,77,-121\ns209,968,209,968c0,-2,84.7,-361.7,254,-1079c169.3,-717.3,254.7,-1077.7,256,-1081\nl"+e/4.223+" -"+e+"c4,-6.7,10,-10,18,-10 H400000\nv"+(40+e)+"H1014.6\ns-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185\nc-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2z M"+(1001+e)+" "+t+"\nh400000v"+(40+e)+"h-400000z"}(t,k);break;case"sqrtSize4":n=function(e,t){return"M473,"+(2713+e+t)+"\nc339.3,-1799.3,509.3,-2700,510,-2702 l"+e/5.298+" -"+e+"\nc3.3,-7.3,9.3,-11,18,-11 H400000v"+(40+e)+"H1017.7\ns-90.5,478,-276.2,1466c-185.7,988,-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200\nc0,-1.3,-5.3,8.7,-16,30c-10.7,21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26\ns76,-153,76,-153s77,-151,77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,\n606zM"+(1001+e)+" "+t+"h400000v"+(40+e)+"H1017.7z"}(t,k);break;case"sqrtTall":n=function(e,t,r){return"M702 "+(e+t)+"H400000"+(40+e)+"\nH742v"+(r-54-t-e)+"l-4 4-4 4c-.667.7 -2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1\nh-12l-28-84c-16.667-52-96.667 -294.333-240-727l-212 -643 -85 170\nc-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667\n219 661 l218 661zM702 "+t+"H400000v"+(40+e)+"H742z"}(t,k,r)}return n}(e,n,r),o=new E(e,i),s=new O([o],{width:"400em",height:t+"em",viewBox:"0 0 400000 "+r,preserveAspectRatio:"xMinYMin slice"});return je.makeSvgSpan(["hide-tail"],[s],a)},pr=["(","\\lparen",")","\\rparen","[","\\lbrack","]","\\rbrack","\\{","\\lbrace","\\}","\\rbrace","\\lfloor","\\rfloor","\u230a","\u230b","\\lceil","\\rceil","\u2308","\u2309","\\surd"],dr=["\\uparrow","\\downarrow","\\updownarrow","\\Uparrow","\\Downarrow","\\Updownarrow","|","\\|","\\vert","\\Vert","\\lvert","\\rvert","\\lVert","\\rVert","\\lgroup","\\rgroup","\u27ee","\u27ef","\\lmoustache","\\rmoustache","\u23b0","\u23b1"],fr=["<",">","\\langle","\\rangle","/","\\backslash","\\lt","\\gt"],gr=[0,1.2,1.8,2.4,3],vr=[{type:"small",style:b.SCRIPTSCRIPT},{type:"small",style:b.SCRIPT},{type:"small",style:b.TEXT},{type:"large",size:1},{type:"large",size:2},{type:"large",size:3},{type:"large",size:4}],br=[{type:"small",style:b.SCRIPTSCRIPT},{type:"small",style:b.SCRIPT},{type:"small",style:b.TEXT},{type:"stack"}],yr=[{type:"small",style:b.SCRIPTSCRIPT},{type:"small",style:b.SCRIPT},{type:"small",style:b.TEXT},{type:"large",size:1},{type:"large",size:2},{type:"large",size:3},{type:"large",size:4},{type:"stack"}],xr=function(e){if("small"===e.type)return"Main-Regular";if("large"===e.type)return"Size"+e.size+"-Regular";if("stack"===e.type)return"Size4-Regular";throw new Error("Add support for delim type '"+e.type+"' here.")},wr=function(e,t,r,n){for(var a=Math.min(2,3-n.style.size);a<r.length&&"stack"!==r[a].type;a++){var i=tr(e,xr(r[a]),"math"),o=i.height+i.depth;if("small"===r[a].type&&(o*=n.havingBaseStyle(r[a].style).sizeMultiplier),o>t)return r[a]}return r[r.length-1]},kr=function(e,t,r,n,a,i){var o;"<"===e||"\\lt"===e||"\u27e8"===e?e="\\langle":">"!==e&&"\\gt"!==e&&"\u27e9"!==e||(e="\\rangle"),o=l.contains(fr,e)?vr:l.contains(pr,e)?yr:br;var s=wr(e,t,o,n);return"small"===s.type?function(e,t,r,n,a,i){var o=je.makeSymbol(e,"Main-Regular",a,n),s=rr(o,t,n,i);return r&&nr(s,n,t),s}(e,s.style,r,n,a,i):"large"===s.type?ar(e,s.size,r,n,a,i):mr(e,t,r,n,a,i)},Sr=function(e,t){var r,n,a=t.havingBaseSizing(),i=wr("\\surd",e*a.sizeMultiplier,yr,a),o=a.sizeMultiplier,s=Math.max(0,t.minRuleThickness-t.fontMetrics().sqrtRuleThickness),l=0,h=0,m=0;return"small"===i.type?(e<1?o=1:e<1.4&&(o=.7),h=(1+s)/o,(r=ur("sqrtMain",l=(1+s+cr)/o,m=1e3+1e3*s+80,s,t)).style.minWidth="0.853em",n=.833/o):"large"===i.type?(m=1080*gr[i.size],h=(gr[i.size]+s)/o,l=(gr[i.size]+s+cr)/o,(r=ur("sqrtSize"+i.size,l,m,s,t)).style.minWidth="1.02em",n=1/o):(l=e+s+cr,h=e+s,m=Math.floor(1e3*e+s)+80,(r=ur("sqrtTall",l,m,s,t)).style.minWidth="0.742em",n=1.056),r.height=h,r.style.height=l+"em",{span:r,advanceWidth:n,ruleWidth:(t.fontMetrics().sqrtRuleThickness+s)*o}},Mr=function(e,t,r,a,i){if("<"===e||"\\lt"===e||"\u27e8"===e?e="\\langle":">"!==e&&"\\gt"!==e&&"\u27e9"!==e||(e="\\rangle"),l.contains(pr,e)||l.contains(fr,e))return ar(e,t,!1,r,a,i);if(l.contains(dr,e))return mr(e,gr[t],!1,r,a,i);throw new n("Illegal delimiter: '"+e+"'")},zr=gr,Ar=kr,Tr=function(e,t,r,n,a,i){var o=n.fontMetrics().axisHeight*n.sizeMultiplier,s=5/n.fontMetrics().ptPerEm,l=Math.max(t-o,r+o),h=Math.max(l/500*901,2*l-s);return kr(e,h,!0,n,a,i)},Br={"\\bigl":{mclass:"mopen",size:1},"\\Bigl":{mclass:"mopen",size:2},"\\biggl":{mclass:"mopen",size:3},"\\Biggl":{mclass:"mopen",size:4},"\\bigr":{mclass:"mclose",size:1},"\\Bigr":{mclass:"mclose",size:2},"\\biggr":{mclass:"mclose",size:3},"\\Biggr":{mclass:"mclose",size:4},"\\bigm":{mclass:"mrel",size:1},"\\Bigm":{mclass:"mrel",size:2},"\\biggm":{mclass:"mrel",size:3},"\\Biggm":{mclass:"mrel",size:4},"\\big":{mclass:"mord",size:1},"\\Big":{mclass:"mord",size:2},"\\bigg":{mclass:"mord",size:3},"\\Bigg":{mclass:"mord",size:4}},Nr=["(","\\lparen",")","\\rparen","[","\\lbrack","]","\\rbrack","\\{","\\lbrace","\\}","\\rbrace","\\lfloor","\\rfloor","\u230a","\u230b","\\lceil","\\rceil","\u2308","\u2309","<",">","\\langle","\u27e8","\\rangle","\u27e9","\\lt","\\gt","\\lvert","\\rvert","\\lVert","\\rVert","\\lgroup","\\rgroup","\u27ee","\u27ef","\\lmoustache","\\rmoustache","\u23b0","\u23b1","/","\\backslash","|","\\vert","\\|","\\Vert","\\uparrow","\\Uparrow","\\downarrow","\\Downarrow","\\updownarrow","\\Updownarrow","."];function qr(e,t){var r=Gt(e);if(r&&l.contains(Nr,r.text))return r;throw new n(r?"Invalid delimiter '"+r.text+"' after '"+t.funcName+"'":"Invalid delimiter type '"+e.type+"'",e)}function Cr(e){if(!e.body)throw new Error("Bug: The leftright ParseNode wasn't fully parsed.")}nt({type:"delimsizing",names:["\\bigl","\\Bigl","\\biggl","\\Biggl","\\bigr","\\Bigr","\\biggr","\\Biggr","\\bigm","\\Bigm","\\biggm","\\Biggm","\\big","\\Big","\\bigg","\\Bigg"],props:{numArgs:1,argTypes:["primitive"]},handler:function(e,t){var r=qr(t[0],e);return{type:"delimsizing",mode:e.parser.mode,size:Br[e.funcName].size,mclass:Br[e.funcName].mclass,delim:r.text}},htmlBuilder:function(e,t){return"."===e.delim?je.makeSpan([e.mclass]):Mr(e.delim,e.size,t,e.mode,[e.mclass])},mathmlBuilder:function(e){var t=[];"."!==e.delim&&t.push(zt(e.delim,e.mode));var r=new Mt.MathNode("mo",t);return"mopen"===e.mclass||"mclose"===e.mclass?r.setAttribute("fence","true"):r.setAttribute("fence","false"),r.setAttribute("stretchy","true"),r.setAttribute("minsize",zr[e.size]+"em"),r.setAttribute("maxsize",zr[e.size]+"em"),r}}),nt({type:"leftright-right",names:["\\right"],props:{numArgs:1,primitive:!0},handler:function(e,t){var r=e.parser.gullet.macros.get("\\current@color");if(r&&"string"!=typeof r)throw new n("\\current@color set to non-string in \\right");return{type:"leftright-right",mode:e.parser.mode,delim:qr(t[0],e).text,color:r}}}),nt({type:"leftright",names:["\\left"],props:{numArgs:1,primitive:!0},handler:function(e,t){var r=qr(t[0],e),n=e.parser;++n.leftrightDepth;var a=n.parseExpression(!1);--n.leftrightDepth,n.expect("\\right",!1);var i=Ft(n.parseFunction(),"leftright-right");return{type:"leftright",mode:n.mode,body:a,left:r.text,right:i.delim,rightColor:i.color}},htmlBuilder:function(e,t){Cr(e);for(var r,n,a=ut(e.body,t,!0,["mopen","mclose"]),i=0,o=0,s=!1,l=0;l<a.length;l++)a[l].isMiddle?s=!0:(i=Math.max(a[l].height,i),o=Math.max(a[l].depth,o));if(i*=t.sizeMultiplier,o*=t.sizeMultiplier,r="."===e.left?vt(t,["mopen"]):Tr(e.left,i,o,t,e.mode,["mopen"]),a.unshift(r),s)for(var h=1;h<a.length;h++){var m=a[h].isMiddle;m&&(a[h]=Tr(m.delim,i,o,m.options,e.mode,[]))}if("."===e.right)n=vt(t,["mclose"]);else{var c=e.rightColor?t.withColor(e.rightColor):t;n=Tr(e.right,i,o,c,e.mode,["mclose"])}return a.push(n),je.makeSpan(["minner"],a,t)},mathmlBuilder:function(e,t){Cr(e);var r=Bt(e.body,t);if("."!==e.left){var n=new Mt.MathNode("mo",[zt(e.left,e.mode)]);n.setAttribute("fence","true"),r.unshift(n)}if("."!==e.right){var a=new Mt.MathNode("mo",[zt(e.right,e.mode)]);a.setAttribute("fence","true"),e.rightColor&&a.setAttribute("mathcolor",e.rightColor),r.push(a)}return At(r)}}),nt({type:"middle",names:["\\middle"],props:{numArgs:1,primitive:!0},handler:function(e,t){var r=qr(t[0],e);if(!e.parser.leftrightDepth)throw new n("\\middle without preceding \\left",r);return{type:"middle",mode:e.parser.mode,delim:r.text}},htmlBuilder:function(e,t){var r;if("."===e.delim)r=vt(t,[]);else{r=Mr(e.delim,1,t,e.mode,[]);var n={delim:e.delim,options:t};r.isMiddle=n}return r},mathmlBuilder:function(e,t){var r="\\vert"===e.delim||"|"===e.delim?zt("|","text"):zt(e.delim,e.mode),n=new Mt.MathNode("mo",[r]);return n.setAttribute("fence","true"),n.setAttribute("lspace","0.05em"),n.setAttribute("rspace","0.05em"),n}});var Ir=function(e,t){var r,n,a,i=je.wrapFragment(bt(e.body,t),t),o=e.label.substr(1),s=t.sizeMultiplier,h=0,m=l.isCharacterBox(e.body);if("sout"===o)(r=je.makeSpan(["stretchy","sout"])).height=t.fontMetrics().defaultRuleThickness/s,h=-.5*t.fontMetrics().xHeight;else if("phase"===o){var c=Le({number:.6,unit:"pt"},t),u=Le({number:.35,unit:"ex"},t);s/=t.havingBaseSizing().sizeMultiplier;var p=i.height+i.depth+c+u;i.style.paddingLeft=p/2+c+"em";var d=Math.floor(1e3*p*s),f="M400000 "+(n=d)+" H0 L"+n/2+" 0 l65 45 L145 "+(n-80)+" H400000z",g=new O([new E("phase",f)],{width:"400em",height:d/1e3+"em",viewBox:"0 0 400000 "+d,preserveAspectRatio:"xMinYMin slice"});(r=je.makeSvgSpan(["hide-tail"],[g],t)).style.height=p+"em",h=i.depth+c+u}else{/cancel/.test(o)?m||i.classes.push("cancel-pad"):"angl"===o?i.classes.push("anglpad"):i.classes.push("boxpad");var v=0,b=0,y=0;/box/.test(o)?(y=Math.max(t.fontMetrics().fboxrule,t.minRuleThickness),b=v=t.fontMetrics().fboxsep+("colorbox"===o?0:y)):"angl"===o?(v=4*(y=Math.max(t.fontMetrics().defaultRuleThickness,t.minRuleThickness)),b=Math.max(0,.25-i.depth)):b=v=m?.2:0,r=Lt(i,o,v,b,t),/fbox|boxed|fcolorbox/.test(o)?(r.style.borderStyle="solid",r.style.borderWidth=y+"em"):"angl"===o&&.049!==y&&(r.style.borderTopWidth=y+"em",r.style.borderRightWidth=y+"em"),h=i.depth+b,e.backgroundColor&&(r.style.backgroundColor=e.backgroundColor,e.borderColor&&(r.style.borderColor=e.borderColor))}if(e.backgroundColor)a=je.makeVList({positionType:"individualShift",children:[{type:"elem",elem:r,shift:h},{type:"elem",elem:i,shift:0}]},t);else{var x=/cancel|phase/.test(o)?["svg-align"]:[];a=je.makeVList({positionType:"individualShift",children:[{type:"elem",elem:i,shift:0},{type:"elem",elem:r,shift:h,wrapperClasses:x}]},t)}return/cancel/.test(o)&&(a.height=i.height,a.depth=i.depth),/cancel/.test(o)&&!m?je.makeSpan(["mord","cancel-lap"],[a],t):je.makeSpan(["mord"],[a],t)},Rr=function(e,t){var r=0,n=new Mt.MathNode(e.label.indexOf("colorbox")>-1?"mpadded":"menclose",[qt(e.body,t)]);switch(e.label){case"\\cancel":n.setAttribute("notation","updiagonalstrike");break;case"\\bcancel":n.setAttribute("notation","downdiagonalstrike");break;case"\\phase":n.setAttribute("notation","phasorangle");break;case"\\sout":n.setAttribute("notation","horizontalstrike");break;case"\\fbox":n.setAttribute("notation","box");break;case"\\angl":n.setAttribute("notation","actuarial");break;case"\\fcolorbox":case"\\colorbox":if(r=t.fontMetrics().fboxsep*t.fontMetrics().ptPerEm,n.setAttribute("width","+"+2*r+"pt"),n.setAttribute("height","+"+2*r+"pt"),n.setAttribute("lspace",r+"pt"),n.setAttribute("voffset",r+"pt"),"\\fcolorbox"===e.label){var a=Math.max(t.fontMetrics().fboxrule,t.minRuleThickness);n.setAttribute("style","border: "+a+"em solid "+String(e.borderColor))}break;case"\\xcancel":n.setAttribute("notation","updiagonalstrike downdiagonalstrike")}return e.backgroundColor&&n.setAttribute("mathbackground",e.backgroundColor),n};nt({type:"enclose",names:["\\colorbox"],props:{numArgs:2,allowedInText:!0,argTypes:["color","text"]},handler:function(e,t,r){var n=e.parser,a=e.funcName,i=Ft(t[0],"color-token").color,o=t[1];return{type:"enclose",mode:n.mode,label:a,backgroundColor:i,body:o}},htmlBuilder:Ir,mathmlBuilder:Rr}),nt({type:"enclose",names:["\\fcolorbox"],props:{numArgs:3,allowedInText:!0,argTypes:["color","color","text"]},handler:function(e,t,r){var n=e.parser,a=e.funcName,i=Ft(t[0],"color-token").color,o=Ft(t[1],"color-token").color,s=t[2];return{type:"enclose",mode:n.mode,label:a,backgroundColor:o,borderColor:i,body:s}},htmlBuilder:Ir,mathmlBuilder:Rr}),nt({type:"enclose",names:["\\fbox"],props:{numArgs:1,argTypes:["hbox"],allowedInText:!0},handler:function(e,t){return{type:"enclose",mode:e.parser.mode,label:"\\fbox",body:t[0]}}}),nt({type:"enclose",names:["\\cancel","\\bcancel","\\xcancel","\\sout","\\phase"],props:{numArgs:1},handler:function(e,t){var r=e.parser,n=e.funcName,a=t[0];return{type:"enclose",mode:r.mode,label:n,body:a}},htmlBuilder:Ir,mathmlBuilder:Rr}),nt({type:"enclose",names:["\\angl"],props:{numArgs:1,argTypes:["hbox"],allowedInText:!1},handler:function(e,t){return{type:"enclose",mode:e.parser.mode,label:"\\angl",body:t[0]}}});var Or={};function Er(e){for(var t=e.type,r=e.names,n=e.props,a=e.handler,i=e.htmlBuilder,o=e.mathmlBuilder,s={type:t,numArgs:n.numArgs||0,allowedInText:!1,numOptionalArgs:0,handler:a},l=0;l<r.length;++l)Or[r[l]]=s;i&&(tt[t]=i),o&&(rt[t]=o)}function Hr(e){var t=[];e.consumeSpaces();for(var r=e.fetch().text;"\\hline"===r||"\\hdashline"===r;)e.consume(),t.push("\\hdashline"===r),e.consumeSpaces(),r=e.fetch().text;return t}var Lr=function(e){if(!e.parser.settings.displayMode)throw new n("{"+e.envName+"} can be used only in display mode.")};function Dr(e,t,r){var a=t.hskipBeforeAndAfter,i=t.addJot,o=t.cols,s=t.arraystretch,l=t.colSeparationType,h=t.addEqnNum,m=t.singleRow,c=t.emptySingleRow,u=t.maxNumCols,p=t.leqno;if(e.gullet.beginGroup(),m||e.gullet.macros.set("\\cr","\\\\\\relax"),!s){var d=e.gullet.expandMacroAsText("\\arraystretch");if(null==d)s=1;else if(!(s=parseFloat(d))||s<0)throw new n("Invalid \\arraystretch: "+d)}e.gullet.beginGroup();var f=[],g=[f],v=[],b=[];for(b.push(Hr(e));;){var y=e.parseExpression(!1,m?"\\end":"\\\\");e.gullet.endGroup(),e.gullet.beginGroup(),y={type:"ordgroup",mode:e.mode,body:y},r&&(y={type:"styling",mode:e.mode,style:r,body:[y]}),f.push(y);var x=e.fetch().text;if("&"===x){if(u&&f.length===u){if(m||l)throw new n("Too many tab characters: &",e.nextToken);e.settings.reportNonstrict("textEnv","Too few columns specified in the {array} column argument.")}e.consume()}else{if("\\end"===x){1===f.length&&"styling"===y.type&&0===y.body[0].body.length&&(g.length>1||!c)&&g.pop(),b.length<g.length+1&&b.push([]);break}if("\\\\"!==x)throw new n("Expected & or \\\\ or \\cr or \\end",e.nextToken);e.consume();var w=void 0;" "!==e.gullet.future().text&&(w=e.parseSizeGroup(!0)),v.push(w?w.value:null),b.push(Hr(e)),f=[],g.push(f)}}return e.gullet.endGroup(),e.gullet.endGroup(),{type:"array",mode:e.mode,addJot:i,arraystretch:s,body:g,cols:o,rowGaps:v,hskipBeforeAndAfter:a,hLinesBeforeRow:b,colSeparationType:l,addEqnNum:h,leqno:p}}function Pr(e){return"d"===e.substr(0,1)?"display":"text"}var Fr=function(e,t){var r,a,i=e.body.length,o=e.hLinesBeforeRow,s=0,h=new Array(i),m=[],c=Math.max(t.fontMetrics().arrayRuleWidth,t.minRuleThickness),u=1/t.fontMetrics().ptPerEm,p=5*u;e.colSeparationType&&"small"===e.colSeparationType&&(p=t.havingStyle(b.SCRIPT).sizeMultiplier/t.sizeMultiplier*.2778);var d="CD"===e.colSeparationType?Le({number:3,unit:"ex"},t):12*u,f=3*u,g=e.arraystretch*d,v=.7*g,y=.3*g,x=0;function w(e){for(var t=0;t<e.length;++t)t>0&&(x+=.25),m.push({pos:x,isDashed:e[t]})}for(w(o[0]),r=0;r<e.body.length;++r){var k=e.body[r],S=v,M=y;s<k.length&&(s=k.length);var z=new Array(k.length);for(a=0;a<k.length;++a){var A=bt(k[a],t);M<A.depth&&(M=A.depth),S<A.height&&(S=A.height),z[a]=A}var T=e.rowGaps[r],B=0;T&&(B=Le(T,t))>0&&(M<(B+=y)&&(M=B),B=0),e.addJot&&(M+=f),z.height=S,z.depth=M,x+=S,z.pos=x,x+=M+B,h[r]=z,w(o[r+1])}var N,q,C=x/2+t.fontMetrics().axisHeight,I=e.cols||[],R=[],O=[];if(e.addEqnNum)for(r=0;r<i;++r){var E=h[r],H=E.pos-C,L=je.makeSpan(["eqn-num"],[],t);L.depth=E.depth,L.height=E.height,O.push({type:"elem",elem:L,shift:H})}for(a=0,q=0;a<s||q<I.length;++a,++q){for(var D=I[q]||{},P=!0;"separator"===D.type;){if(P||((N=je.makeSpan(["arraycolsep"],[])).style.width=t.fontMetrics().doubleRuleSep+"em",R.push(N)),"|"!==D.separator&&":"!==D.separator)throw new n("Invalid separator type: "+D.separator);var F="|"===D.separator?"solid":"dashed",V=je.makeSpan(["vertical-separator"],[],t);V.style.height=x+"em",V.style.borderRightWidth=c+"em",V.style.borderRightStyle=F,V.style.margin="0 -"+c/2+"em",V.style.verticalAlign=-(x-C)+"em",R.push(V),D=I[++q]||{},P=!1}if(!(a>=s)){var G=void 0;(a>0||e.hskipBeforeAndAfter)&&0!==(G=l.deflt(D.pregap,p))&&((N=je.makeSpan(["arraycolsep"],[])).style.width=G+"em",R.push(N));var U=[];for(r=0;r<i;++r){var Y=h[r],W=Y[a];if(W){var X=Y.pos-C;W.depth=Y.depth,W.height=Y.height,U.push({type:"elem",elem:W,shift:X})}}U=je.makeVList({positionType:"individualShift",children:U},t),U=je.makeSpan(["col-align-"+(D.align||"c")],[U]),R.push(U),(a<s-1||e.hskipBeforeAndAfter)&&0!==(G=l.deflt(D.postgap,p))&&((N=je.makeSpan(["arraycolsep"],[])).style.width=G+"em",R.push(N))}}if(h=je.makeSpan(["mtable"],R),m.length>0){for(var _=je.makeLineSpan("hline",t,c),j=je.makeLineSpan("hdashline",t,c),$=[{type:"elem",elem:h,shift:0}];m.length>0;){var Z=m.pop(),K=Z.pos-C;Z.isDashed?$.push({type:"elem",elem:j,shift:K}):$.push({type:"elem",elem:_,shift:K})}h=je.makeVList({positionType:"individualShift",children:$},t)}if(e.addEqnNum){var J=je.makeVList({positionType:"individualShift",children:O},t);return J=je.makeSpan(["tag"],[J],t),je.makeFragment([h,J])}return je.makeSpan(["mord"],[h],t)},Vr={c:"center ",l:"left ",r:"right "},Gr=function(e,t){for(var r=[],n=new Mt.MathNode("mtd",[],["mtr-glue"]),a=new Mt.MathNode("mtd",[],["mml-eqn-num"]),i=0;i<e.body.length;i++){for(var o=e.body[i],s=[],l=0;l<o.length;l++)s.push(new Mt.MathNode("mtd",[qt(o[l],t)]));e.addEqnNum&&(s.unshift(n),s.push(n),e.leqno?s.unshift(a):s.push(a)),r.push(new Mt.MathNode("mtr",s))}var h=new Mt.MathNode("mtable",r),m=.5===e.arraystretch?.1:.16+e.arraystretch-1+(e.addJot?.09:0);h.setAttribute("rowspacing",m.toFixed(4)+"em");var c="",u="";if(e.cols&&e.cols.length>0){var p=e.cols,d="",f=!1,g=0,v=p.length;"separator"===p[0].type&&(c+="top ",g=1),"separator"===p[p.length-1].type&&(c+="bottom ",v-=1);for(var b=g;b<v;b++)"align"===p[b].type?(u+=Vr[p[b].align],f&&(d+="none "),f=!0):"separator"===p[b].type&&f&&(d+="|"===p[b].separator?"solid ":"dashed ",f=!1);h.setAttribute("columnalign",u.trim()),/[sd]/.test(d)&&h.setAttribute("columnlines",d.trim())}if("align"===e.colSeparationType){for(var y=e.cols||[],x="",w=1;w<y.length;w++)x+=w%2?"0em ":"1em ";h.setAttribute("columnspacing",x.trim())}else"alignat"===e.colSeparationType||"gather"===e.colSeparationType?h.setAttribute("columnspacing","0em"):"small"===e.colSeparationType?h.setAttribute("columnspacing","0.2778em"):"CD"===e.colSeparationType?h.setAttribute("columnspacing","0.5em"):h.setAttribute("columnspacing","1em");var k="",S=e.hLinesBeforeRow;c+=S[0].length>0?"left ":"",c+=S[S.length-1].length>0?"right ":"";for(var M=1;M<S.length-1;M++)k+=0===S[M].length?"none ":S[M][0]?"dashed ":"solid ";return/[sd]/.test(k)&&h.setAttribute("rowlines",k.trim()),""!==c&&(h=new Mt.MathNode("menclose",[h])).setAttribute("notation",c.trim()),e.arraystretch&&e.arraystretch<1&&(h=new Mt.MathNode("mstyle",[h])).setAttribute("scriptlevel","1"),h},Ur=function(e,t){-1===e.envName.indexOf("ed")&&Lr(e);var r,a=[],i=e.envName.indexOf("at")>-1?"alignat":"align",o=Dr(e.parser,{cols:a,addJot:!0,addEqnNum:"align"===e.envName||"alignat"===e.envName,emptySingleRow:!0,colSeparationType:i,maxNumCols:"split"===e.envName?2:void 0,leqno:e.parser.settings.leqno},"display"),s=0,l={type:"ordgroup",mode:e.mode,body:[]};if(t[0]&&"ordgroup"===t[0].type){for(var h="",m=0;m<t[0].body.length;m++){h+=Ft(t[0].body[m],"textord").text}r=Number(h),s=2*r}var c=!s;o.body.forEach((function(e){for(var t=1;t<e.length;t+=2){var a=Ft(e[t],"styling");Ft(a.body[0],"ordgroup").body.unshift(l)}if(c)s<e.length&&(s=e.length);else{var i=e.length/2;if(r<i)throw new n("Too many math in a row: expected "+r+", but got "+i,e[0])}}));for(var u=0;u<s;++u){var p="r",d=0;u%2==1?p="l":u>0&&c&&(d=1),a[u]={type:"align",align:p,pregap:d,postgap:0}}return o.colSeparationType=c?"align":"alignat",o};Er({type:"array",names:["array","darray"],props:{numArgs:1},handler:function(e,t){var r=(Gt(t[0])?[t[0]]:Ft(t[0],"ordgroup").body).map((function(e){var t=Vt(e).text;if(-1!=="lcr".indexOf(t))return{type:"align",align:t};if("|"===t)return{type:"separator",separator:"|"};if(":"===t)return{type:"separator",separator:":"};throw new n("Unknown column alignment: "+t,e)})),a={cols:r,hskipBeforeAndAfter:!0,maxNumCols:r.length};return Dr(e.parser,a,Pr(e.envName))},htmlBuilder:Fr,mathmlBuilder:Gr}),Er({type:"array",names:["matrix","pmatrix","bmatrix","Bmatrix","vmatrix","Vmatrix","matrix*","pmatrix*","bmatrix*","Bmatrix*","vmatrix*","Vmatrix*"],props:{numArgs:0},handler:function(e){var t={matrix:null,pmatrix:["(",")"],bmatrix:["[","]"],Bmatrix:["\\{","\\}"],vmatrix:["|","|"],Vmatrix:["\\Vert","\\Vert"]}[e.envName.replace("*","")],r="c",a={hskipBeforeAndAfter:!1,cols:[{type:"align",align:r}]};if("*"===e.envName.charAt(e.envName.length-1)){var i=e.parser;if(i.consumeSpaces(),"["===i.fetch().text){if(i.consume(),i.consumeSpaces(),r=i.fetch().text,-1==="lcr".indexOf(r))throw new n("Expected l or c or r",i.nextToken);i.consume(),i.consumeSpaces(),i.expect("]"),i.consume(),a.cols=[{type:"align",align:r}]}}var o=Dr(e.parser,a,Pr(e.envName)),s=Math.max.apply(Math,[0].concat(o.body.map((function(e){return e.length}))));return o.cols=new Array(s).fill({type:"align",align:r}),t?{type:"leftright",mode:e.mode,body:[o],left:t[0],right:t[1],rightColor:void 0}:o},htmlBuilder:Fr,mathmlBuilder:Gr}),Er({type:"array",names:["smallmatrix"],props:{numArgs:0},handler:function(e){var t=Dr(e.parser,{arraystretch:.5},"script");return t.colSeparationType="small",t},htmlBuilder:Fr,mathmlBuilder:Gr}),Er({type:"array",names:["subarray"],props:{numArgs:1},handler:function(e,t){var r=(Gt(t[0])?[t[0]]:Ft(t[0],"ordgroup").body).map((function(e){var t=Vt(e).text;if(-1!=="lc".indexOf(t))return{type:"align",align:t};throw new n("Unknown column alignment: "+t,e)}));if(r.length>1)throw new n("{subarray} can contain only one column");var a={cols:r,hskipBeforeAndAfter:!1,arraystretch:.5};if((a=Dr(e.parser,a,"script")).body.length>0&&a.body[0].length>1)throw new n("{subarray} can contain only one column");return a},htmlBuilder:Fr,mathmlBuilder:Gr}),Er({type:"array",names:["cases","dcases","rcases","drcases"],props:{numArgs:0},handler:function(e){var t=Dr(e.parser,{arraystretch:1.2,cols:[{type:"align",align:"l",pregap:0,postgap:1},{type:"align",align:"l",pregap:0,postgap:0}]},Pr(e.envName));return{type:"leftright",mode:e.mode,body:[t],left:e.envName.indexOf("r")>-1?".":"\\{",right:e.envName.indexOf("r")>-1?"\\}":".",rightColor:void 0}},htmlBuilder:Fr,mathmlBuilder:Gr}),Er({type:"array",names:["align","align*","aligned","split"],props:{numArgs:0},handler:Ur,htmlBuilder:Fr,mathmlBuilder:Gr}),Er({type:"array",names:["gathered","gather","gather*"],props:{numArgs:0},handler:function(e){l.contains(["gather","gather*"],e.envName)&&Lr(e);var t={cols:[{type:"align",align:"c"}],addJot:!0,colSeparationType:"gather",addEqnNum:"gather"===e.envName,emptySingleRow:!0,leqno:e.parser.settings.leqno};return Dr(e.parser,t,"display")},htmlBuilder:Fr,mathmlBuilder:Gr}),Er({type:"array",names:["alignat","alignat*","alignedat"],props:{numArgs:1},handler:Ur,htmlBuilder:Fr,mathmlBuilder:Gr}),Er({type:"array",names:["equation","equation*"],props:{numArgs:0},handler:function(e){Lr(e);var t={addEqnNum:"equation"===e.envName,emptySingleRow:!0,singleRow:!0,maxNumCols:1,leqno:e.parser.settings.leqno};return Dr(e.parser,t,"display")},htmlBuilder:Fr,mathmlBuilder:Gr}),Er({type:"array",names:["CD"],props:{numArgs:0},handler:function(e){return Lr(e),function(e){var t=[];for(e.gullet.beginGroup(),e.gullet.macros.set("\\cr","\\\\\\relax"),e.gullet.beginGroup();;){t.push(e.parseExpression(!1,"\\\\")),e.gullet.endGroup(),e.gullet.beginGroup();var r=e.fetch().text;if("&"!==r&&"\\\\"!==r){if("\\end"===r){0===t[t.length-1].length&&t.pop();break}throw new n("Expected \\\\ or \\cr or \\end",e.nextToken)}e.consume()}for(var a,i,o=[],s=[o],l=0;l<t.length;l++){for(var h=t[l],m={type:"styling",body:[],mode:"math",style:"display"},c=0;c<h.length;c++)if(jt(h[c])){o.push(m);var u=Vt(h[c+=1]).text,p=new Array(2);if(p[0]={type:"ordgroup",mode:"math",body:[]},p[1]={type:"ordgroup",mode:"math",body:[]},"=|.".indexOf(u)>-1);else{if(!("<>AV".indexOf(u)>-1))throw new n('Expected one of "<>AV=|." after @',h[c]);for(var d=0;d<2;d++){for(var f=!0,g=c+1;g<h.length;g++){if(i=u,("mathord"===(a=h[g]).type||"atom"===a.type)&&a.text===i){f=!1,c=g;break}if(jt(h[g]))throw new n("Missing a "+u+" character to complete a CD arrow.",h[g]);p[d].body.push(h[g])}if(f)throw new n("Missing a "+u+" character to complete a CD arrow.",h[c])}}var v={type:"styling",body:[$t(u,p,e)],mode:"math",style:"display"};o.push(v),m={type:"styling",body:[],mode:"math",style:"display"}}else m.body.push(h[c]);l%2==0?o.push(m):o.shift(),o=[],s.push(o)}return e.gullet.endGroup(),e.gullet.endGroup(),{type:"array",mode:"math",body:s,arraystretch:1,addJot:!0,rowGaps:[null],cols:new Array(s[0].length).fill({type:"align",align:"c",pregap:.25,postgap:.25}),colSeparationType:"CD",hLinesBeforeRow:new Array(s.length+1).fill([])}}(e.parser)},htmlBuilder:Fr,mathmlBuilder:Gr}),nt({type:"text",names:["\\hline","\\hdashline"],props:{numArgs:0,allowedInText:!0,allowedInMath:!0},handler:function(e,t){throw new n(e.funcName+" valid only within array environment")}});var Yr=Or;nt({type:"environment",names:["\\begin","\\end"],props:{numArgs:1,argTypes:["text"]},handler:function(e,t){var r=e.parser,a=e.funcName,i=t[0];if("ordgroup"!==i.type)throw new n("Invalid environment name",i);for(var o="",s=0;s<i.body.length;++s)o+=Ft(i.body[s],"textord").text;if("\\begin"===a){if(!Yr.hasOwnProperty(o))throw new n("No such environment: "+o,i);var l=Yr[o],h=r.parseArguments("\\begin{"+o+"}",l),m=h.args,c=h.optArgs,u={mode:r.mode,envName:o,parser:r},p=l.handler(u,m,c);r.expect("\\end",!1);var d=r.nextToken,f=Ft(r.parseFunction(),"environment");if(f.name!==o)throw new n("Mismatch: \\begin{"+o+"} matched by \\end{"+f.name+"}",d);return p}return{type:"environment",mode:r.mode,name:o,nameGroup:i}}});var Wr=je.makeSpan;function Xr(e,t){var r=ut(e.body,t,!0);return Wr([e.mclass],r,t)}function _r(e,t){var r,n=Bt(e.body,t);return"minner"===e.mclass?Mt.newDocumentFragment(n):("mord"===e.mclass?e.isCharacterBox?(r=n[0]).type="mi":r=new Mt.MathNode("mi",n):(e.isCharacterBox?(r=n[0]).type="mo":r=new Mt.MathNode("mo",n),"mbin"===e.mclass?(r.attributes.lspace="0.22em",r.attributes.rspace="0.22em"):"mpunct"===e.mclass?(r.attributes.lspace="0em",r.attributes.rspace="0.17em"):"mopen"!==e.mclass&&"mclose"!==e.mclass||(r.attributes.lspace="0em",r.attributes.rspace="0em")),r)}nt({type:"mclass",names:["\\mathord","\\mathbin","\\mathrel","\\mathopen","\\mathclose","\\mathpunct","\\mathinner"],props:{numArgs:1,primitive:!0},handler:function(e,t){var r=e.parser,n=e.funcName,a=t[0];return{type:"mclass",mode:r.mode,mclass:"m"+n.substr(5),body:ot(a),isCharacterBox:l.isCharacterBox(a)}},htmlBuilder:Xr,mathmlBuilder:_r});var jr=function(e){var t="ordgroup"===e.type&&e.body.length?e.body[0]:e;return"atom"!==t.type||"bin"!==t.family&&"rel"!==t.family?"mord":"m"+t.family};nt({type:"mclass",names:["\\@binrel"],props:{numArgs:2},handler:function(e,t){return{type:"mclass",mode:e.parser.mode,mclass:jr(t[0]),body:ot(t[1]),isCharacterBox:l.isCharacterBox(t[1])}}}),nt({type:"mclass",names:["\\stackrel","\\overset","\\underset"],props:{numArgs:2},handler:function(e,t){var r,n=e.parser,a=e.funcName,i=t[1],o=t[0];r="\\stackrel"!==a?jr(i):"mrel";var s={type:"op",mode:i.mode,limits:!0,alwaysHandleSupSub:!0,parentIsSupSub:!1,symbol:!1,suppressBaseShift:"\\stackrel"!==a,body:ot(i)},h={type:"supsub",mode:o.mode,base:s,sup:"\\underset"===a?null:o,sub:"\\underset"===a?o:null};return{type:"mclass",mode:n.mode,mclass:r,body:[h],isCharacterBox:l.isCharacterBox(h)}},htmlBuilder:Xr,mathmlBuilder:_r});var $r=function(e,t){var r=e.font,n=t.withFont(r);return bt(e.body,n)},Zr=function(e,t){var r=e.font,n=t.withFont(r);return qt(e.body,n)},Kr={"\\Bbb":"\\mathbb","\\bold":"\\mathbf","\\frak":"\\mathfrak","\\bm":"\\boldsymbol"};nt({type:"font",names:["\\mathrm","\\mathit","\\mathbf","\\mathnormal","\\mathbb","\\mathcal","\\mathfrak","\\mathscr","\\mathsf","\\mathtt","\\Bbb","\\bold","\\frak"],props:{numArgs:1,allowedInArgument:!0},handler:function(e,t){var r=e.parser,n=e.funcName,a=it(t[0]),i=n;return i in Kr&&(i=Kr[i]),{type:"font",mode:r.mode,font:i.slice(1),body:a}},htmlBuilder:$r,mathmlBuilder:Zr}),nt({type:"mclass",names:["\\boldsymbol","\\bm"],props:{numArgs:1},handler:function(e,t){var r=e.parser,n=t[0],a=l.isCharacterBox(n);return{type:"mclass",mode:r.mode,mclass:jr(n),body:[{type:"font",mode:r.mode,font:"boldsymbol",body:n}],isCharacterBox:a}}}),nt({type:"font",names:["\\rm","\\sf","\\tt","\\bf","\\it","\\cal"],props:{numArgs:0,allowedInText:!0},handler:function(e,t){var r=e.parser,n=e.funcName,a=e.breakOnTokenText,i=r.mode,o=r.parseExpression(!0,a);return{type:"font",mode:i,font:"math"+n.slice(1),body:{type:"ordgroup",mode:r.mode,body:o}}},htmlBuilder:$r,mathmlBuilder:Zr});var Jr=function(e,t){var r=t;return"display"===e?r=r.id>=b.SCRIPT.id?r.text():b.DISPLAY:"text"===e&&r.size===b.DISPLAY.size?r=b.TEXT:"script"===e?r=b.SCRIPT:"scriptscript"===e&&(r=b.SCRIPTSCRIPT),r},Qr=function(e,t){var r,n=Jr(e.size,t.style),a=n.fracNum(),i=n.fracDen();r=t.havingStyle(a);var o=bt(e.numer,r,t);if(e.continued){var s=8.5/t.fontMetrics().ptPerEm,l=3.5/t.fontMetrics().ptPerEm;o.height=o.height<s?s:o.height,o.depth=o.depth<l?l:o.depth}r=t.havingStyle(i);var h,m,c,u,p,d,f,g,v,y,x=bt(e.denom,r,t);if(e.hasBarLine?(e.barSize?(m=Le(e.barSize,t),h=je.makeLineSpan("frac-line",t,m)):h=je.makeLineSpan("frac-line",t),m=h.height,c=h.height):(h=null,m=0,c=t.fontMetrics().defaultRuleThickness),n.size===b.DISPLAY.size||"display"===e.size?(u=t.fontMetrics().num1,p=m>0?3*c:7*c,d=t.fontMetrics().denom1):(m>0?(u=t.fontMetrics().num2,p=c):(u=t.fontMetrics().num3,p=3*c),d=t.fontMetrics().denom2),h){var w=t.fontMetrics().axisHeight;u-o.depth-(w+.5*m)<p&&(u+=p-(u-o.depth-(w+.5*m))),w-.5*m-(x.height-d)<p&&(d+=p-(w-.5*m-(x.height-d)));var k=-(w-.5*m);f=je.makeVList({positionType:"individualShift",children:[{type:"elem",elem:x,shift:d},{type:"elem",elem:h,shift:k},{type:"elem",elem:o,shift:-u}]},t)}else{var S=u-o.depth-(x.height-d);S<p&&(u+=.5*(p-S),d+=.5*(p-S)),f=je.makeVList({positionType:"individualShift",children:[{type:"elem",elem:x,shift:d},{type:"elem",elem:o,shift:-u}]},t)}return r=t.havingStyle(n),f.height*=r.sizeMultiplier/t.sizeMultiplier,f.depth*=r.sizeMultiplier/t.sizeMultiplier,g=n.size===b.DISPLAY.size?t.fontMetrics().delim1:n.size===b.SCRIPTSCRIPT.size?t.havingStyle(b.SCRIPT).fontMetrics().delim2:t.fontMetrics().delim2,v=null==e.leftDelim?vt(t,["mopen"]):Ar(e.leftDelim,g,!0,t.havingStyle(n),e.mode,["mopen"]),y=e.continued?je.makeSpan([]):null==e.rightDelim?vt(t,["mclose"]):Ar(e.rightDelim,g,!0,t.havingStyle(n),e.mode,["mclose"]),je.makeSpan(["mord"].concat(r.sizingClasses(t)),[v,je.makeSpan(["mfrac"],[f]),y],t)},en=function(e,t){var r=new Mt.MathNode("mfrac",[qt(e.numer,t),qt(e.denom,t)]);if(e.hasBarLine){if(e.barSize){var n=Le(e.barSize,t);r.setAttribute("linethickness",n+"em")}}else r.setAttribute("linethickness","0px");var a=Jr(e.size,t.style);if(a.size!==t.style.size){r=new Mt.MathNode("mstyle",[r]);var i=a.size===b.DISPLAY.size?"true":"false";r.setAttribute("displaystyle",i),r.setAttribute("scriptlevel","0")}if(null!=e.leftDelim||null!=e.rightDelim){var o=[];if(null!=e.leftDelim){var s=new Mt.MathNode("mo",[new Mt.TextNode(e.leftDelim.replace("\\",""))]);s.setAttribute("fence","true"),o.push(s)}if(o.push(r),null!=e.rightDelim){var l=new Mt.MathNode("mo",[new Mt.TextNode(e.rightDelim.replace("\\",""))]);l.setAttribute("fence","true"),o.push(l)}return At(o)}return r};nt({type:"genfrac",names:["\\dfrac","\\frac","\\tfrac","\\dbinom","\\binom","\\tbinom","\\\\atopfrac","\\\\bracefrac","\\\\brackfrac"],props:{numArgs:2,allowedInArgument:!0},handler:function(e,t){var r,n=e.parser,a=e.funcName,i=t[0],o=t[1],s=null,l=null,h="auto";switch(a){case"\\dfrac":case"\\frac":case"\\tfrac":r=!0;break;case"\\\\atopfrac":r=!1;break;case"\\dbinom":case"\\binom":case"\\tbinom":r=!1,s="(",l=")";break;case"\\\\bracefrac":r=!1,s="\\{",l="\\}";break;case"\\\\brackfrac":r=!1,s="[",l="]";break;default:throw new Error("Unrecognized genfrac command")}switch(a){case"\\dfrac":case"\\dbinom":h="display";break;case"\\tfrac":case"\\tbinom":h="text"}return{type:"genfrac",mode:n.mode,continued:!1,numer:i,denom:o,hasBarLine:r,leftDelim:s,rightDelim:l,size:h,barSize:null}},htmlBuilder:Qr,mathmlBuilder:en}),nt({type:"genfrac",names:["\\cfrac"],props:{numArgs:2},handler:function(e,t){var r=e.parser,n=(e.funcName,t[0]),a=t[1];return{type:"genfrac",mode:r.mode,continued:!0,numer:n,denom:a,hasBarLine:!0,leftDelim:null,rightDelim:null,size:"display",barSize:null}}}),nt({type:"infix",names:["\\over","\\choose","\\atop","\\brace","\\brack"],props:{numArgs:0,infix:!0},handler:function(e){var t,r=e.parser,n=e.funcName,a=e.token;switch(n){case"\\over":t="\\frac";break;case"\\choose":t="\\binom";break;case"\\atop":t="\\\\atopfrac";break;case"\\brace":t="\\\\bracefrac";break;case"\\brack":t="\\\\brackfrac";break;default:throw new Error("Unrecognized infix genfrac command")}return{type:"infix",mode:r.mode,replaceWith:t,token:a}}});var tn=["display","text","script","scriptscript"],rn=function(e){var t=null;return e.length>0&&(t="."===(t=e)?null:t),t};nt({type:"genfrac",names:["\\genfrac"],props:{numArgs:6,allowedInArgument:!0,argTypes:["math","math","size","text","math","math"]},handler:function(e,t){var r,n=e.parser,a=t[4],i=t[5],o=it(t[0]),s="atom"===o.type&&"open"===o.family?rn(o.text):null,l=it(t[1]),h="atom"===l.type&&"close"===l.family?rn(l.text):null,m=Ft(t[2],"size"),c=null;r=!!m.isBlank||(c=m.value).number>0;var u="auto",p=t[3];if("ordgroup"===p.type){if(p.body.length>0){var d=Ft(p.body[0],"textord");u=tn[Number(d.text)]}}else p=Ft(p,"textord"),u=tn[Number(p.text)];return{type:"genfrac",mode:n.mode,numer:a,denom:i,continued:!1,hasBarLine:r,barSize:c,leftDelim:s,rightDelim:h,size:u}},htmlBuilder:Qr,mathmlBuilder:en}),nt({type:"infix",names:["\\above"],props:{numArgs:1,argTypes:["size"],infix:!0},handler:function(e,t){var r=e.parser,n=(e.funcName,e.token);return{type:"infix",mode:r.mode,replaceWith:"\\\\abovefrac",size:Ft(t[0],"size").value,token:n}}}),nt({type:"genfrac",names:["\\\\abovefrac"],props:{numArgs:3,argTypes:["math","size","math"]},handler:function(e,t){var r=e.parser,n=(e.funcName,t[0]),a=function(e){if(!e)throw new Error("Expected non-null, but got "+String(e));return e}(Ft(t[1],"infix").size),i=t[2],o=a.number>0;return{type:"genfrac",mode:r.mode,numer:n,denom:i,continued:!1,hasBarLine:o,barSize:a,leftDelim:null,rightDelim:null,size:"auto"}},htmlBuilder:Qr,mathmlBuilder:en});var nn=function(e,t){var r,n,a=t.style;"supsub"===e.type?(r=e.sup?bt(e.sup,t.havingStyle(a.sup()),t):bt(e.sub,t.havingStyle(a.sub()),t),n=Ft(e.base,"horizBrace")):n=Ft(e,"horizBrace");var i,o=bt(n.base,t.havingBaseStyle(b.DISPLAY)),s=Pt(n,t);if(n.isOver?(i=je.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:o},{type:"kern",size:.1},{type:"elem",elem:s}]},t)).children[0].children[0].children[1].classes.push("svg-align"):(i=je.makeVList({positionType:"bottom",positionData:o.depth+.1+s.height,children:[{type:"elem",elem:s},{type:"kern",size:.1},{type:"elem",elem:o}]},t)).children[0].children[0].children[0].classes.push("svg-align"),r){var l=je.makeSpan(["mord",n.isOver?"mover":"munder"],[i],t);i=n.isOver?je.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:l},{type:"kern",size:.2},{type:"elem",elem:r}]},t):je.makeVList({positionType:"bottom",positionData:l.depth+.2+r.height+r.depth,children:[{type:"elem",elem:r},{type:"kern",size:.2},{type:"elem",elem:l}]},t)}return je.makeSpan(["mord",n.isOver?"mover":"munder"],[i],t)};nt({type:"horizBrace",names:["\\overbrace","\\underbrace"],props:{numArgs:1},handler:function(e,t){var r=e.parser,n=e.funcName;return{type:"horizBrace",mode:r.mode,label:n,isOver:/^\\over/.test(n),base:t[0]}},htmlBuilder:nn,mathmlBuilder:function(e,t){var r=Dt(e.label);return new Mt.MathNode(e.isOver?"mover":"munder",[qt(e.base,t),r])}}),nt({type:"href",names:["\\href"],props:{numArgs:2,argTypes:["url","original"],allowedInText:!0},handler:function(e,t){var r=e.parser,n=t[1],a=Ft(t[0],"url").url;return r.settings.isTrusted({command:"\\href",url:a})?{type:"href",mode:r.mode,href:a,body:ot(n)}:r.formatUnsupportedCmd("\\href")},htmlBuilder:function(e,t){var r=ut(e.body,t,!1);return je.makeAnchor(e.href,[],r,t)},mathmlBuilder:function(e,t){var r=Nt(e.body,t);return r instanceof kt||(r=new kt("mrow",[r])),r.setAttribute("href",e.href),r}}),nt({type:"href",names:["\\url"],props:{numArgs:1,argTypes:["url"],allowedInText:!0},handler:function(e,t){var r=e.parser,n=Ft(t[0],"url").url;if(!r.settings.isTrusted({command:"\\url",url:n}))return r.formatUnsupportedCmd("\\url");for(var a=[],i=0;i<n.length;i++){var o=n[i];"~"===o&&(o="\\textasciitilde"),a.push({type:"textord",mode:"text",text:o})}var s={type:"text",mode:r.mode,font:"\\texttt",body:a};return{type:"href",mode:r.mode,href:n,body:ot(s)}}}),nt({type:"hbox",names:["\\hbox"],props:{numArgs:1,argTypes:["text"],allowedInText:!0,primitive:!0},handler:function(e,t){return{type:"hbox",mode:e.parser.mode,body:ot(t[0])}},htmlBuilder:function(e,t){var r=ut(e.body,t,!1);return je.makeFragment(r)},mathmlBuilder:function(e,t){return new Mt.MathNode("mrow",Bt(e.body,t))}}),nt({type:"html",names:["\\htmlClass","\\htmlId","\\htmlStyle","\\htmlData"],props:{numArgs:2,argTypes:["raw","original"],allowedInText:!0},handler:function(e,t){var r,a=e.parser,i=e.funcName,o=(e.token,Ft(t[0],"raw").string),s=t[1];a.settings.strict&&a.settings.reportNonstrict("htmlExtension","HTML extension is disabled on strict mode");var l={};switch(i){case"\\htmlClass":l.class=o,r={command:"\\htmlClass",class:o};break;case"\\htmlId":l.id=o,r={command:"\\htmlId",id:o};break;case"\\htmlStyle":l.style=o,r={command:"\\htmlStyle",style:o};break;case"\\htmlData":for(var h=o.split(","),m=0;m<h.length;m++){var c=h[m].split("=");if(2!==c.length)throw new n("Error parsing key-value for \\htmlData");l["data-"+c[0].trim()]=c[1].trim()}r={command:"\\htmlData",attributes:l};break;default:throw new Error("Unrecognized html command")}return a.settings.isTrusted(r)?{type:"html",mode:a.mode,attributes:l,body:ot(s)}:a.formatUnsupportedCmd(i)},htmlBuilder:function(e,t){var r=ut(e.body,t,!1),n=["enclosing"];e.attributes.class&&n.push.apply(n,e.attributes.class.trim().split(/\s+/));var a=je.makeSpan(n,r,t);for(var i in e.attributes)"class"!==i&&e.attributes.hasOwnProperty(i)&&a.setAttribute(i,e.attributes[i]);return a},mathmlBuilder:function(e,t){return Nt(e.body,t)}}),nt({type:"htmlmathml",names:["\\html@mathml"],props:{numArgs:2,allowedInText:!0},handler:function(e,t){return{type:"htmlmathml",mode:e.parser.mode,html:ot(t[0]),mathml:ot(t[1])}},htmlBuilder:function(e,t){var r=ut(e.html,t,!1);return je.makeFragment(r)},mathmlBuilder:function(e,t){return Nt(e.mathml,t)}});var an=function(e){if(/^[-+]? *(\d+(\.\d*)?|\.\d+)$/.test(e))return{number:+e,unit:"bp"};var t=/([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(e);if(!t)throw new n("Invalid size: '"+e+"' in \\includegraphics");var r={number:+(t[1]+t[2]),unit:t[3]};if(!He(r))throw new n("Invalid unit: '"+r.unit+"' in \\includegraphics.");return r};nt({type:"includegraphics",names:["\\includegraphics"],props:{numArgs:1,numOptionalArgs:1,argTypes:["raw","url"],allowedInText:!1},handler:function(e,t,r){var a=e.parser,i={number:0,unit:"em"},o={number:.9,unit:"em"},s={number:0,unit:"em"},l="";if(r[0])for(var h=Ft(r[0],"raw").string.split(","),m=0;m<h.length;m++){var c=h[m].split("=");if(2===c.length){var u=c[1].trim();switch(c[0].trim()){case"alt":l=u;break;case"width":i=an(u);break;case"height":o=an(u);break;case"totalheight":s=an(u);break;default:throw new n("Invalid key: '"+c[0]+"' in \\includegraphics.")}}}var p=Ft(t[0],"url").url;return""===l&&(l=(l=(l=p).replace(/^.*[\\/]/,"")).substring(0,l.lastIndexOf("."))),a.settings.isTrusted({command:"\\includegraphics",url:p})?{type:"includegraphics",mode:a.mode,alt:l,width:i,height:o,totalheight:s,src:p}:a.formatUnsupportedCmd("\\includegraphics")},htmlBuilder:function(e,t){var r=Le(e.height,t),n=0;e.totalheight.number>0&&(n=Le(e.totalheight,t)-r,n=Number(n.toFixed(2)));var a=0;e.width.number>0&&(a=Le(e.width,t));var i={height:r+n+"em"};a>0&&(i.width=a+"em"),n>0&&(i.verticalAlign=-n+"em");var o=new C(e.src,e.alt,i);return o.height=r,o.depth=n,o},mathmlBuilder:function(e,t){var r=new Mt.MathNode("mglyph",[]);r.setAttribute("alt",e.alt);var n=Le(e.height,t),a=0;if(e.totalheight.number>0&&(a=(a=Le(e.totalheight,t)-n).toFixed(2),r.setAttribute("valign","-"+a+"em")),r.setAttribute("height",n+a+"em"),e.width.number>0){var i=Le(e.width,t);r.setAttribute("width",i+"em")}return r.setAttribute("src",e.src),r}}),nt({type:"kern",names:["\\kern","\\mkern","\\hskip","\\mskip"],props:{numArgs:1,argTypes:["size"],primitive:!0,allowedInText:!0},handler:function(e,t){var r=e.parser,n=e.funcName,a=Ft(t[0],"size");if(r.settings.strict){var i="m"===n[1],o="mu"===a.value.unit;i?(o||r.settings.reportNonstrict("mathVsTextUnits","LaTeX's "+n+" supports only mu units, not "+a.value.unit+" units"),"math"!==r.mode&&r.settings.reportNonstrict("mathVsTextUnits","LaTeX's "+n+" works only in math mode")):o&&r.settings.reportNonstrict("mathVsTextUnits","LaTeX's "+n+" doesn't support mu units")}return{type:"kern",mode:r.mode,dimension:a.value}},htmlBuilder:function(e,t){return je.makeGlue(e.dimension,t)},mathmlBuilder:function(e,t){var r=Le(e.dimension,t);return new Mt.SpaceNode(r)}}),nt({type:"lap",names:["\\mathllap","\\mathrlap","\\mathclap"],props:{numArgs:1,allowedInText:!0},handler:function(e,t){var r=e.parser,n=e.funcName,a=t[0];return{type:"lap",mode:r.mode,alignment:n.slice(5),body:a}},htmlBuilder:function(e,t){var r;"clap"===e.alignment?(r=je.makeSpan([],[bt(e.body,t)]),r=je.makeSpan(["inner"],[r],t)):r=je.makeSpan(["inner"],[bt(e.body,t)]);var n=je.makeSpan(["fix"],[]),a=je.makeSpan([e.alignment],[r,n],t),i=je.makeSpan(["strut"]);return i.style.height=a.height+a.depth+"em",i.style.verticalAlign=-a.depth+"em",a.children.unshift(i),a=je.makeSpan(["thinbox"],[a],t),je.makeSpan(["mord","vbox"],[a],t)},mathmlBuilder:function(e,t){var r=new Mt.MathNode("mpadded",[qt(e.body,t)]);if("rlap"!==e.alignment){var n="llap"===e.alignment?"-1":"-0.5";r.setAttribute("lspace",n+"width")}return r.setAttribute("width","0px"),r}}),nt({type:"styling",names:["\\(","$"],props:{numArgs:0,allowedInText:!0,allowedInMath:!1},handler:function(e,t){var r=e.funcName,n=e.parser,a=n.mode;n.switchMode("math");var i="\\("===r?"\\)":"$",o=n.parseExpression(!1,i);return n.expect(i),n.switchMode(a),{type:"styling",mode:n.mode,style:"text",body:o}}}),nt({type:"text",names:["\\)","\\]"],props:{numArgs:0,allowedInText:!0,allowedInMath:!1},handler:function(e,t){throw new n("Mismatched "+e.funcName)}});var on=function(e,t){switch(t.style.size){case b.DISPLAY.size:return e.display;case b.TEXT.size:return e.text;case b.SCRIPT.size:return e.script;case b.SCRIPTSCRIPT.size:return e.scriptscript;default:return e.text}};nt({type:"mathchoice",names:["\\mathchoice"],props:{numArgs:4,primitive:!0},handler:function(e,t){return{type:"mathchoice",mode:e.parser.mode,display:ot(t[0]),text:ot(t[1]),script:ot(t[2]),scriptscript:ot(t[3])}},htmlBuilder:function(e,t){var r=on(e,t),n=ut(r,t,!1);return je.makeFragment(n)},mathmlBuilder:function(e,t){var r=on(e,t);return Nt(r,t)}});var sn=function(e,t,r,n,a,i,o){e=je.makeSpan([],[e]);var s,h,m,c=r&&l.isCharacterBox(r);if(t){var u=bt(t,n.havingStyle(a.sup()),n);h={elem:u,kern:Math.max(n.fontMetrics().bigOpSpacing1,n.fontMetrics().bigOpSpacing3-u.depth)}}if(r){var p=bt(r,n.havingStyle(a.sub()),n);s={elem:p,kern:Math.max(n.fontMetrics().bigOpSpacing2,n.fontMetrics().bigOpSpacing4-p.height)}}if(h&&s){var d=n.fontMetrics().bigOpSpacing5+s.elem.height+s.elem.depth+s.kern+e.depth+o;m=je.makeVList({positionType:"bottom",positionData:d,children:[{type:"kern",size:n.fontMetrics().bigOpSpacing5},{type:"elem",elem:s.elem,marginLeft:-i+"em"},{type:"kern",size:s.kern},{type:"elem",elem:e},{type:"kern",size:h.kern},{type:"elem",elem:h.elem,marginLeft:i+"em"},{type:"kern",size:n.fontMetrics().bigOpSpacing5}]},n)}else if(s){var f=e.height-o;m=je.makeVList({positionType:"top",positionData:f,children:[{type:"kern",size:n.fontMetrics().bigOpSpacing5},{type:"elem",elem:s.elem,marginLeft:-i+"em"},{type:"kern",size:s.kern},{type:"elem",elem:e}]},n)}else{if(!h)return e;var g=e.depth+o;m=je.makeVList({positionType:"bottom",positionData:g,children:[{type:"elem",elem:e},{type:"kern",size:h.kern},{type:"elem",elem:h.elem,marginLeft:i+"em"},{type:"kern",size:n.fontMetrics().bigOpSpacing5}]},n)}var v=[m];if(s&&0!==i&&!c){var b=je.makeSpan(["mspace"],[],n);b.style.marginRight=i+"em",v.unshift(b)}return je.makeSpan(["mop","op-limits"],v,n)},ln=["\\smallint"],hn=function(e,t){var r,n,a,i=!1;"supsub"===e.type?(r=e.sup,n=e.sub,a=Ft(e.base,"op"),i=!0):a=Ft(e,"op");var o,s=t.style,h=!1;if(s.size===b.DISPLAY.size&&a.symbol&&!l.contains(ln,a.name)&&(h=!0),a.symbol){var m=h?"Size2-Regular":"Size1-Regular",c="";if("\\oiint"!==a.name&&"\\oiiint"!==a.name||(c=a.name.substr(1),a.name="oiint"===c?"\\iint":"\\iiint"),o=je.makeSymbol(a.name,m,"math",t,["mop","op-symbol",h?"large-op":"small-op"]),c.length>0){var u=o.italic,p=je.staticSvg(c+"Size"+(h?"2":"1"),t);o=je.makeVList({positionType:"individualShift",children:[{type:"elem",elem:o,shift:0},{type:"elem",elem:p,shift:h?.08:0}]},t),a.name="\\"+c,o.classes.unshift("mop"),o.italic=u}}else if(a.body){var d=ut(a.body,t,!0);1===d.length&&d[0]instanceof R?(o=d[0]).classes[0]="mop":o=je.makeSpan(["mop"],d,t)}else{for(var f=[],g=1;g<a.name.length;g++)f.push(je.mathsym(a.name[g],a.mode,t));o=je.makeSpan(["mop"],f,t)}var v=0,y=0;return(o instanceof R||"\\oiint"===a.name||"\\oiiint"===a.name)&&!a.suppressBaseShift&&(v=(o.height-o.depth)/2-t.fontMetrics().axisHeight,y=o.italic),i?sn(o,r,n,t,s,y,v):(v&&(o.style.position="relative",o.style.top=v+"em"),o)},mn=function(e,t){var r;if(e.symbol)r=new kt("mo",[zt(e.name,e.mode)]),l.contains(ln,e.name)&&r.setAttribute("largeop","false");else if(e.body)r=new kt("mo",Bt(e.body,t));else{r=new kt("mi",[new St(e.name.slice(1))]);var n=new kt("mo",[zt("\u2061","text")]);r=e.parentIsSupSub?new kt("mrow",[r,n]):wt([r,n])}return r},cn={"\u220f":"\\prod","\u2210":"\\coprod","\u2211":"\\sum","\u22c0":"\\bigwedge","\u22c1":"\\bigvee","\u22c2":"\\bigcap","\u22c3":"\\bigcup","\u2a00":"\\bigodot","\u2a01":"\\bigoplus","\u2a02":"\\bigotimes","\u2a04":"\\biguplus","\u2a06":"\\bigsqcup"};nt({type:"op",names:["\\coprod","\\bigvee","\\bigwedge","\\biguplus","\\bigcap","\\bigcup","\\intop","\\prod","\\sum","\\bigotimes","\\bigoplus","\\bigodot","\\bigsqcup","\\smallint","\u220f","\u2210","\u2211","\u22c0","\u22c1","\u22c2","\u22c3","\u2a00","\u2a01","\u2a02","\u2a04","\u2a06"],props:{numArgs:0},handler:function(e,t){var r=e.parser,n=e.funcName;return 1===n.length&&(n=cn[n]),{type:"op",mode:r.mode,limits:!0,parentIsSupSub:!1,symbol:!0,name:n}},htmlBuilder:hn,mathmlBuilder:mn}),nt({type:"op",names:["\\mathop"],props:{numArgs:1,primitive:!0},handler:function(e,t){var r=e.parser,n=t[0];return{type:"op",mode:r.mode,limits:!1,parentIsSupSub:!1,symbol:!1,body:ot(n)}},htmlBuilder:hn,mathmlBuilder:mn});var un={"\u222b":"\\int","\u222c":"\\iint","\u222d":"\\iiint","\u222e":"\\oint","\u222f":"\\oiint","\u2230":"\\oiiint"};nt({type:"op",names:["\\arcsin","\\arccos","\\arctan","\\arctg","\\arcctg","\\arg","\\ch","\\cos","\\cosec","\\cosh","\\cot","\\cotg","\\coth","\\csc","\\ctg","\\cth","\\deg","\\dim","\\exp","\\hom","\\ker","\\lg","\\ln","\\log","\\sec","\\sin","\\sinh","\\sh","\\tan","\\tanh","\\tg","\\th"],props:{numArgs:0},handler:function(e){var t=e.parser,r=e.funcName;return{type:"op",mode:t.mode,limits:!1,parentIsSupSub:!1,symbol:!1,name:r}},htmlBuilder:hn,mathmlBuilder:mn}),nt({type:"op",names:["\\det","\\gcd","\\inf","\\lim","\\max","\\min","\\Pr","\\sup"],props:{numArgs:0},handler:function(e){var t=e.parser,r=e.funcName;return{type:"op",mode:t.mode,limits:!0,parentIsSupSub:!1,symbol:!1,name:r}},htmlBuilder:hn,mathmlBuilder:mn}),nt({type:"op",names:["\\int","\\iint","\\iiint","\\oint","\\oiint","\\oiiint","\u222b","\u222c","\u222d","\u222e","\u222f","\u2230"],props:{numArgs:0},handler:function(e){var t=e.parser,r=e.funcName;return 1===r.length&&(r=un[r]),{type:"op",mode:t.mode,limits:!1,parentIsSupSub:!1,symbol:!0,name:r}},htmlBuilder:hn,mathmlBuilder:mn});var pn={};function dn(e,t){pn[e]=t}var fn=function(e,t){var r,n,a,i,o=!1;if("supsub"===e.type?(r=e.sup,n=e.sub,a=Ft(e.base,"operatorname"),o=!0):a=Ft(e,"operatorname"),a.body.length>0){for(var s=a.body.map((function(e){var t=e.text;return"string"==typeof t?{type:"textord",mode:e.mode,text:t}:e})),l=ut(s,t.withFont("mathrm"),!0),h=0;h<l.length;h++){var m=l[h];m instanceof R&&(m.text=m.text.replace(/\u2212/,"-").replace(/\u2217/,"*"))}i=je.makeSpan(["mop"],l,t)}else i=je.makeSpan(["mop"],[],t);return o?sn(i,r,n,t,t.style,0,0):i};function gn(e,t,r){for(var n=ut(e,t,!1),a=t.sizeMultiplier/r.sizeMultiplier,i=0;i<n.length;i++){var o=n[i].classes.indexOf("sizing");o<0?Array.prototype.push.apply(n[i].classes,t.sizingClasses(r)):n[i].classes[o+1]==="reset-size"+t.size&&(n[i].classes[o+1]="reset-size"+r.size),n[i].height*=a,n[i].depth*=a}return je.makeFragment(n)}nt({type:"operatorname",names:["\\operatorname@","\\operatornamewithlimits"],props:{numArgs:1},handler:function(e,t){var r=e.parser,n=e.funcName,a=t[0];return{type:"operatorname",mode:r.mode,body:ot(a),alwaysHandleSupSub:"\\operatornamewithlimits"===n,limits:!1,parentIsSupSub:!1}},htmlBuilder:fn,mathmlBuilder:function(e,t){for(var r=Bt(e.body,t.withFont("mathrm")),n=!0,a=0;a<r.length;a++){var i=r[a];if(i instanceof Mt.SpaceNode);else if(i instanceof Mt.MathNode)switch(i.type){case"mi":case"mn":case"ms":case"mspace":case"mtext":break;case"mo":var o=i.children[0];1===i.children.length&&o instanceof Mt.TextNode?o.text=o.text.replace(/\u2212/,"-").replace(/\u2217/,"*"):n=!1;break;default:n=!1}else n=!1}if(n){var s=r.map((function(e){return e.toText()})).join("");r=[new Mt.TextNode(s)]}var l=new Mt.MathNode("mi",r);l.setAttribute("mathvariant","normal");var h=new Mt.MathNode("mo",[zt("\u2061","text")]);return e.parentIsSupSub?new Mt.MathNode("mrow",[l,h]):Mt.newDocumentFragment([l,h])}}),dn("\\operatorname","\\@ifstar\\operatornamewithlimits\\operatorname@"),at({type:"ordgroup",htmlBuilder:function(e,t){return e.semisimple?je.makeFragment(ut(e.body,t,!1)):je.makeSpan(["mord"],ut(e.body,t,!0),t)},mathmlBuilder:function(e,t){return Nt(e.body,t,!0)}}),nt({type:"overline",names:["\\overline"],props:{numArgs:1},handler:function(e,t){var r=e.parser,n=t[0];return{type:"overline",mode:r.mode,body:n}},htmlBuilder:function(e,t){var r=bt(e.body,t.havingCrampedStyle()),n=je.makeLineSpan("overline-line",t),a=t.fontMetrics().defaultRuleThickness,i=je.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:r},{type:"kern",size:3*a},{type:"elem",elem:n},{type:"kern",size:a}]},t);return je.makeSpan(["mord","overline"],[i],t)},mathmlBuilder:function(e,t){var r=new Mt.MathNode("mo",[new Mt.TextNode("\u203e")]);r.setAttribute("stretchy","true");var n=new Mt.MathNode("mover",[qt(e.body,t),r]);return n.setAttribute("accent","true"),n}}),nt({type:"phantom",names:["\\phantom"],props:{numArgs:1,allowedInText:!0},handler:function(e,t){var r=e.parser,n=t[0];return{type:"phantom",mode:r.mode,body:ot(n)}},htmlBuilder:function(e,t){var r=ut(e.body,t.withPhantom(),!1);return je.makeFragment(r)},mathmlBuilder:function(e,t){var r=Bt(e.body,t);return new Mt.MathNode("mphantom",r)}}),nt({type:"hphantom",names:["\\hphantom"],props:{numArgs:1,allowedInText:!0},handler:function(e,t){var r=e.parser,n=t[0];return{type:"hphantom",mode:r.mode,body:n}},htmlBuilder:function(e,t){var r=je.makeSpan([],[bt(e.body,t.withPhantom())]);if(r.height=0,r.depth=0,r.children)for(var n=0;n<r.children.length;n++)r.children[n].height=0,r.children[n].depth=0;return r=je.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:r}]},t),je.makeSpan(["mord"],[r],t)},mathmlBuilder:function(e,t){var r=Bt(ot(e.body),t),n=new Mt.MathNode("mphantom",r),a=new Mt.MathNode("mpadded",[n]);return a.setAttribute("height","0px"),a.setAttribute("depth","0px"),a}}),nt({type:"vphantom",names:["\\vphantom"],props:{numArgs:1,allowedInText:!0},handler:function(e,t){var r=e.parser,n=t[0];return{type:"vphantom",mode:r.mode,body:n}},htmlBuilder:function(e,t){var r=je.makeSpan(["inner"],[bt(e.body,t.withPhantom())]),n=je.makeSpan(["fix"],[]);return je.makeSpan(["mord","rlap"],[r,n],t)},mathmlBuilder:function(e,t){var r=Bt(ot(e.body),t),n=new Mt.MathNode("mphantom",r),a=new Mt.MathNode("mpadded",[n]);return a.setAttribute("width","0px"),a}}),nt({type:"raisebox",names:["\\raisebox"],props:{numArgs:2,argTypes:["size","hbox"],allowedInText:!0},handler:function(e,t){var r=e.parser,n=Ft(t[0],"size").value,a=t[1];return{type:"raisebox",mode:r.mode,dy:n,body:a}},htmlBuilder:function(e,t){var r=bt(e.body,t),n=Le(e.dy,t);return je.makeVList({positionType:"shift",positionData:-n,children:[{type:"elem",elem:r}]},t)},mathmlBuilder:function(e,t){var r=new Mt.MathNode("mpadded",[qt(e.body,t)]),n=e.dy.number+e.dy.unit;return r.setAttribute("voffset",n),r}}),nt({type:"rule",names:["\\rule"],props:{numArgs:2,numOptionalArgs:1,argTypes:["size","size","size"]},handler:function(e,t,r){var n=e.parser,a=r[0],i=Ft(t[0],"size"),o=Ft(t[1],"size");return{type:"rule",mode:n.mode,shift:a&&Ft(a,"size").value,width:i.value,height:o.value}},htmlBuilder:function(e,t){var r=je.makeSpan(["mord","rule"],[],t),n=Le(e.width,t),a=Le(e.height,t),i=e.shift?Le(e.shift,t):0;return r.style.borderRightWidth=n+"em",r.style.borderTopWidth=a+"em",r.style.bottom=i+"em",r.width=n,r.height=a+i,r.depth=-i,r.maxFontSize=1.125*a*t.sizeMultiplier,r},mathmlBuilder:function(e,t){var r=Le(e.width,t),n=Le(e.height,t),a=e.shift?Le(e.shift,t):0,i=t.color&&t.getColor()||"black",o=new Mt.MathNode("mspace");o.setAttribute("mathbackground",i),o.setAttribute("width",r+"em"),o.setAttribute("height",n+"em");var s=new Mt.MathNode("mpadded",[o]);return a>=0?s.setAttribute("height","+"+a+"em"):(s.setAttribute("height",a+"em"),s.setAttribute("depth","+"+-a+"em")),s.setAttribute("voffset",a+"em"),s}});var vn=["\\tiny","\\sixptsize","\\scriptsize","\\footnotesize","\\small","\\normalsize","\\large","\\Large","\\LARGE","\\huge","\\Huge"];nt({type:"sizing",names:vn,props:{numArgs:0,allowedInText:!0},handler:function(e,t){var r=e.breakOnTokenText,n=e.funcName,a=e.parser,i=a.parseExpression(!1,r);return{type:"sizing",mode:a.mode,size:vn.indexOf(n)+1,body:i}},htmlBuilder:function(e,t){var r=t.havingSize(e.size);return gn(e.body,r,t)},mathmlBuilder:function(e,t){var r=t.havingSize(e.size),n=Bt(e.body,r),a=new Mt.MathNode("mstyle",n);return a.setAttribute("mathsize",r.sizeMultiplier+"em"),a}}),nt({type:"smash",names:["\\smash"],props:{numArgs:1,numOptionalArgs:1,allowedInText:!0},handler:function(e,t,r){var n=e.parser,a=!1,i=!1,o=r[0]&&Ft(r[0],"ordgroup");if(o)for(var s="",l=0;l<o.body.length;++l){if("t"===(s=o.body[l].text))a=!0;else{if("b"!==s){a=!1,i=!1;break}i=!0}}else a=!0,i=!0;var h=t[0];return{type:"smash",mode:n.mode,body:h,smashHeight:a,smashDepth:i}},htmlBuilder:function(e,t){var r=je.makeSpan([],[bt(e.body,t)]);if(!e.smashHeight&&!e.smashDepth)return r;if(e.smashHeight&&(r.height=0,r.children))for(var n=0;n<r.children.length;n++)r.children[n].height=0;if(e.smashDepth&&(r.depth=0,r.children))for(var a=0;a<r.children.length;a++)r.children[a].depth=0;var i=je.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:r}]},t);return je.makeSpan(["mord"],[i],t)},mathmlBuilder:function(e,t){var r=new Mt.MathNode("mpadded",[qt(e.body,t)]);return e.smashHeight&&r.setAttribute("height","0px"),e.smashDepth&&r.setAttribute("depth","0px"),r}}),nt({type:"sqrt",names:["\\sqrt"],props:{numArgs:1,numOptionalArgs:1},handler:function(e,t,r){var n=e.parser,a=r[0],i=t[0];return{type:"sqrt",mode:n.mode,body:i,index:a}},htmlBuilder:function(e,t){var r=bt(e.body,t.havingCrampedStyle());0===r.height&&(r.height=t.fontMetrics().xHeight),r=je.wrapFragment(r,t);var n=t.fontMetrics().defaultRuleThickness,a=n;t.style.id<b.TEXT.id&&(a=t.fontMetrics().xHeight);var i=n+a/4,o=r.height+r.depth+i+n,s=Sr(o,t),l=s.span,h=s.ruleWidth,m=s.advanceWidth,c=l.height-h;c>r.height+r.depth+i&&(i=(i+c-r.height-r.depth)/2);var u=l.height-r.height-i-h;r.style.paddingLeft=m+"em";var p=je.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:r,wrapperClasses:["svg-align"]},{type:"kern",size:-(r.height+u)},{type:"elem",elem:l},{type:"kern",size:h}]},t);if(e.index){var d=t.havingStyle(b.SCRIPTSCRIPT),f=bt(e.index,d,t),g=.6*(p.height-p.depth),v=je.makeVList({positionType:"shift",positionData:-g,children:[{type:"elem",elem:f}]},t),y=je.makeSpan(["root"],[v]);return je.makeSpan(["mord","sqrt"],[y,p],t)}return je.makeSpan(["mord","sqrt"],[p],t)},mathmlBuilder:function(e,t){var r=e.body,n=e.index;return n?new Mt.MathNode("mroot",[qt(r,t),qt(n,t)]):new Mt.MathNode("msqrt",[qt(r,t)])}});var bn={display:b.DISPLAY,text:b.TEXT,script:b.SCRIPT,scriptscript:b.SCRIPTSCRIPT};nt({type:"styling",names:["\\displaystyle","\\textstyle","\\scriptstyle","\\scriptscriptstyle"],props:{numArgs:0,allowedInText:!0,primitive:!0},handler:function(e,t){var r=e.breakOnTokenText,n=e.funcName,a=e.parser,i=a.parseExpression(!0,r),o=n.slice(1,n.length-5);return{type:"styling",mode:a.mode,style:o,body:i}},htmlBuilder:function(e,t){var r=bn[e.style],n=t.havingStyle(r).withFont("");return gn(e.body,n,t)},mathmlBuilder:function(e,t){var r=bn[e.style],n=t.havingStyle(r),a=Bt(e.body,n),i=new Mt.MathNode("mstyle",a),o={display:["0","true"],text:["0","false"],script:["1","false"],scriptscript:["2","false"]}[e.style];return i.setAttribute("scriptlevel",o[0]),i.setAttribute("displaystyle",o[1]),i}});var yn=function(e,t){var r=e.base;return r?"op"===r.type?r.limits&&(t.style.size===b.DISPLAY.size||r.alwaysHandleSupSub)?hn:null:"operatorname"===r.type?r.alwaysHandleSupSub&&(t.style.size===b.DISPLAY.size||r.limits)?fn:null:"accent"===r.type?l.isCharacterBox(r.base)?Ut:null:"horizBrace"===r.type&&!e.sub===r.isOver?nn:null:null};at({type:"supsub",htmlBuilder:function(e,t){var r=yn(e,t);if(r)return r(e,t);var n,a,i,o=e.base,s=e.sup,h=e.sub,m=bt(o,t),c=t.fontMetrics(),u=0,p=0,d=o&&l.isCharacterBox(o);if(s){var f=t.havingStyle(t.style.sup());n=bt(s,f,t),d||(u=m.height-f.fontMetrics().supDrop*f.sizeMultiplier/t.sizeMultiplier)}if(h){var g=t.havingStyle(t.style.sub());a=bt(h,g,t),d||(p=m.depth+g.fontMetrics().subDrop*g.sizeMultiplier/t.sizeMultiplier)}i=t.style===b.DISPLAY?c.sup1:t.style.cramped?c.sup3:c.sup2;var v,y=t.sizeMultiplier,x=.5/c.ptPerEm/y+"em",w=null;if(a){var k=e.base&&"op"===e.base.type&&e.base.name&&("\\oiint"===e.base.name||"\\oiiint"===e.base.name);(m instanceof R||k)&&(w=-m.italic+"em")}if(n&&a){u=Math.max(u,i,n.depth+.25*c.xHeight),p=Math.max(p,c.sub2);var S=4*c.defaultRuleThickness;if(u-n.depth-(a.height-p)<S){p=S-(u-n.depth)+a.height;var M=.8*c.xHeight-(u-n.depth);M>0&&(u+=M,p-=M)}var z=[{type:"elem",elem:a,shift:p,marginRight:x,marginLeft:w},{type:"elem",elem:n,shift:-u,marginRight:x}];v=je.makeVList({positionType:"individualShift",children:z},t)}else if(a){p=Math.max(p,c.sub1,a.height-.8*c.xHeight);var A=[{type:"elem",elem:a,marginLeft:w,marginRight:x}];v=je.makeVList({positionType:"shift",positionData:p,children:A},t)}else{if(!n)throw new Error("supsub must have either sup or sub.");u=Math.max(u,i,n.depth+.25*c.xHeight),v=je.makeVList({positionType:"shift",positionData:-u,children:[{type:"elem",elem:n,marginRight:x}]},t)}var T=gt(m,"right")||"mord";return je.makeSpan([T],[m,je.makeSpan(["msupsub"],[v])],t)},mathmlBuilder:function(e,t){var r,n=!1;e.base&&"horizBrace"===e.base.type&&!!e.sup===e.base.isOver&&(n=!0,r=e.base.isOver),!e.base||"op"!==e.base.type&&"operatorname"!==e.base.type||(e.base.parentIsSupSub=!0);var a,i=[qt(e.base,t)];if(e.sub&&i.push(qt(e.sub,t)),e.sup&&i.push(qt(e.sup,t)),n)a=r?"mover":"munder";else if(e.sub)if(e.sup){var o=e.base;a=o&&"op"===o.type&&o.limits&&t.style===b.DISPLAY||o&&"operatorname"===o.type&&o.alwaysHandleSupSub&&(t.style===b.DISPLAY||o.limits)?"munderover":"msubsup"}else{var s=e.base;a=s&&"op"===s.type&&s.limits&&(t.style===b.DISPLAY||s.alwaysHandleSupSub)||s&&"operatorname"===s.type&&s.alwaysHandleSupSub&&(s.limits||t.style===b.DISPLAY)?"munder":"msub"}else{var l=e.base;a=l&&"op"===l.type&&l.limits&&(t.style===b.DISPLAY||l.alwaysHandleSupSub)||l&&"operatorname"===l.type&&l.alwaysHandleSupSub&&(l.limits||t.style===b.DISPLAY)?"mover":"msup"}return new Mt.MathNode(a,i)}}),at({type:"atom",htmlBuilder:function(e,t){return je.mathsym(e.text,e.mode,t,["m"+e.family])},mathmlBuilder:function(e,t){var r=new Mt.MathNode("mo",[zt(e.text,e.mode)]);if("bin"===e.family){var n=Tt(e,t);"bold-italic"===n&&r.setAttribute("mathvariant",n)}else"punct"===e.family?r.setAttribute("separator","true"):"open"!==e.family&&"close"!==e.family||r.setAttribute("stretchy","false");return r}});var xn={mi:"italic",mn:"normal",mtext:"normal"};at({type:"mathord",htmlBuilder:function(e,t){return je.makeOrd(e,t,"mathord")},mathmlBuilder:function(e,t){var r=new Mt.MathNode("mi",[zt(e.text,e.mode,t)]),n=Tt(e,t)||"italic";return n!==xn[r.type]&&r.setAttribute("mathvariant",n),r}}),at({type:"textord",htmlBuilder:function(e,t){return je.makeOrd(e,t,"textord")},mathmlBuilder:function(e,t){var r,n=zt(e.text,e.mode,t),a=Tt(e,t)||"normal";return r="text"===e.mode?new Mt.MathNode("mtext",[n]):/[0-9]/.test(e.text)?new Mt.MathNode("mn",[n]):"\\prime"===e.text?new Mt.MathNode("mo",[n]):new Mt.MathNode("mi",[n]),a!==xn[r.type]&&r.setAttribute("mathvariant",a),r}});var wn={"\\nobreak":"nobreak","\\allowbreak":"allowbreak"},kn={" ":{},"\\ ":{},"~":{className:"nobreak"},"\\space":{},"\\nobreakspace":{className:"nobreak"}};at({type:"spacing",htmlBuilder:function(e,t){if(kn.hasOwnProperty(e.text)){var r=kn[e.text].className||"";if("text"===e.mode){var a=je.makeOrd(e,t,"textord");return a.classes.push(r),a}return je.makeSpan(["mspace",r],[je.mathsym(e.text,e.mode,t)],t)}if(wn.hasOwnProperty(e.text))return je.makeSpan(["mspace",wn[e.text]],[],t);throw new n('Unknown type of space "'+e.text+'"')},mathmlBuilder:function(e,t){if(!kn.hasOwnProperty(e.text)){if(wn.hasOwnProperty(e.text))return new Mt.MathNode("mspace");throw new n('Unknown type of space "'+e.text+'"')}return new Mt.MathNode("mtext",[new Mt.TextNode("\xa0")])}});var Sn=function(){var e=new Mt.MathNode("mtd",[]);return e.setAttribute("width","50%"),e};at({type:"tag",mathmlBuilder:function(e,t){var r=new Mt.MathNode("mtable",[new Mt.MathNode("mtr",[Sn(),new Mt.MathNode("mtd",[Nt(e.body,t)]),Sn(),new Mt.MathNode("mtd",[Nt(e.tag,t)])])]);return r.setAttribute("width","100%"),r}});var Mn={"\\text":void 0,"\\textrm":"textrm","\\textsf":"textsf","\\texttt":"texttt","\\textnormal":"textrm"},zn={"\\textbf":"textbf","\\textmd":"textmd"},An={"\\textit":"textit","\\textup":"textup"},Tn=function(e,t){var r=e.font;return r?Mn[r]?t.withTextFontFamily(Mn[r]):zn[r]?t.withTextFontWeight(zn[r]):t.withTextFontShape(An[r]):t};nt({type:"text",names:["\\text","\\textrm","\\textsf","\\texttt","\\textnormal","\\textbf","\\textmd","\\textit","\\textup"],props:{numArgs:1,argTypes:["text"],allowedInArgument:!0,allowedInText:!0},handler:function(e,t){var r=e.parser,n=e.funcName,a=t[0];return{type:"text",mode:r.mode,body:ot(a),font:n}},htmlBuilder:function(e,t){var r=Tn(e,t),n=ut(e.body,r,!0);return je.makeSpan(["mord","text"],n,r)},mathmlBuilder:function(e,t){var r=Tn(e,t);return Nt(e.body,r)}}),nt({type:"underline",names:["\\underline"],props:{numArgs:1,allowedInText:!0},handler:function(e,t){return{type:"underline",mode:e.parser.mode,body:t[0]}},htmlBuilder:function(e,t){var r=bt(e.body,t),n=je.makeLineSpan("underline-line",t),a=t.fontMetrics().defaultRuleThickness,i=je.makeVList({positionType:"top",positionData:r.height,children:[{type:"kern",size:a},{type:"elem",elem:n},{type:"kern",size:3*a},{type:"elem",elem:r}]},t);return je.makeSpan(["mord","underline"],[i],t)},mathmlBuilder:function(e,t){var r=new Mt.MathNode("mo",[new Mt.TextNode("\u203e")]);r.setAttribute("stretchy","true");var n=new Mt.MathNode("munder",[qt(e.body,t),r]);return n.setAttribute("accentunder","true"),n}}),nt({type:"vcenter",names:["\\vcenter"],props:{numArgs:1,argTypes:["original"],allowedInText:!1},handler:function(e,t){return{type:"vcenter",mode:e.parser.mode,body:t[0]}},htmlBuilder:function(e,t){var r=bt(e.body,t),n=t.fontMetrics().axisHeight,a=.5*(r.height-n-(r.depth+n));return je.makeVList({positionType:"shift",positionData:a,children:[{type:"elem",elem:r}]},t)},mathmlBuilder:function(e,t){return new Mt.MathNode("mpadded",[qt(e.body,t)],["vcenter"])}}),nt({type:"verb",names:["\\verb"],props:{numArgs:0,allowedInText:!0},handler:function(e,t,r){throw new n("\\verb ended by end of line instead of matching delimiter")},htmlBuilder:function(e,t){for(var r=Bn(e),n=[],a=t.havingStyle(t.style.text()),i=0;i<r.length;i++){var o=r[i];"~"===o&&(o="\\textasciitilde"),n.push(je.makeSymbol(o,"Typewriter-Regular",e.mode,a,["mord","texttt"]))}return je.makeSpan(["mord","text"].concat(a.sizingClasses(t)),je.tryCombineChars(n),a)},mathmlBuilder:function(e,t){var r=new Mt.TextNode(Bn(e)),n=new Mt.MathNode("mtext",[r]);return n.setAttribute("mathvariant","monospace"),n}});var Bn=function(e){return e.body.replace(/ /g,e.star?"\u2423":"\xa0")},Nn=et,qn=function(){function e(e,t,r){this.lexer=void 0,this.start=void 0,this.end=void 0,this.lexer=e,this.start=t,this.end=r}return e.range=function(t,r){return r?t&&t.loc&&r.loc&&t.loc.lexer===r.loc.lexer?new e(t.loc.lexer,t.loc.start,r.loc.end):null:t&&t.loc},e}(),Cn=function(){function e(e,t){this.text=void 0,this.loc=void 0,this.noexpand=void 0,this.treatAsRelax=void 0,this.text=e,this.loc=t}return e.prototype.range=function(t,r){return new e(r,qn.range(this,t))},e}(),In=new RegExp("[\u0300-\u036f]+$"),Rn=function(){function e(e,t){this.input=void 0,this.settings=void 0,this.tokenRegex=void 0,this.catcodes=void 0,this.input=e,this.settings=t,this.tokenRegex=new RegExp("([ \r\n\t]+)|\\\\(\n|[ \r\t]+\n?)[ \r\t]*|([!-\\[\\]-\u2027\u202a-\ud7ff\uf900-\uffff][\u0300-\u036f]*|[\ud800-\udbff][\udc00-\udfff][\u0300-\u036f]*|\\\\verb\\*([^]).*?\\4|\\\\verb([^*a-zA-Z]).*?\\5|(\\\\[a-zA-Z@]+)[ \r\n\t]*|\\\\[^\ud800-\udfff])","g"),this.catcodes={"%":14,"~":13}}var t=e.prototype;return t.setCatcode=function(e,t){this.catcodes[e]=t},t.lex=function(){var e=this.input,t=this.tokenRegex.lastIndex;if(t===e.length)return new Cn("EOF",new qn(this,t,t));var r=this.tokenRegex.exec(e);if(null===r||r.index!==t)throw new n("Unexpected character: '"+e[t]+"'",new Cn(e[t],new qn(this,t,t+1)));var a=r[6]||r[3]||(r[2]?"\\ ":" ");if(14===this.catcodes[a]){var i=e.indexOf("\n",this.tokenRegex.lastIndex);return-1===i?(this.tokenRegex.lastIndex=e.length,this.settings.reportNonstrict("commentAtEnd","% comment has no terminating newline; LaTeX would fail because of commenting the end of math mode (e.g. $)")):this.tokenRegex.lastIndex=i+1,this.lex()}return new Cn(a,new qn(this,t,this.tokenRegex.lastIndex))},e}(),On=function(){function e(e,t){void 0===e&&(e={}),void 0===t&&(t={}),this.current=void 0,this.builtins=void 0,this.undefStack=void 0,this.current=t,this.builtins=e,this.undefStack=[]}var t=e.prototype;return t.beginGroup=function(){this.undefStack.push({})},t.endGroup=function(){if(0===this.undefStack.length)throw new n("Unbalanced namespace destruction: attempt to pop global namespace; please report this as a bug");var e=this.undefStack.pop();for(var t in e)e.hasOwnProperty(t)&&(void 0===e[t]?delete this.current[t]:this.current[t]=e[t])},t.endGroups=function(){for(;this.undefStack.length>0;)this.endGroup()},t.has=function(e){return this.current.hasOwnProperty(e)||this.builtins.hasOwnProperty(e)},t.get=function(e){return this.current.hasOwnProperty(e)?this.current[e]:this.builtins[e]},t.set=function(e,t,r){if(void 0===r&&(r=!1),r){for(var n=0;n<this.undefStack.length;n++)delete this.undefStack[n][e];this.undefStack.length>0&&(this.undefStack[this.undefStack.length-1][e]=t)}else{var a=this.undefStack[this.undefStack.length-1];a&&!a.hasOwnProperty(e)&&(a[e]=this.current[e])}this.current[e]=t},e}(),En=pn;dn("\\noexpand",(function(e){var t=e.popToken();return e.isExpandable(t.text)&&(t.noexpand=!0,t.treatAsRelax=!0),{tokens:[t],numArgs:0}})),dn("\\expandafter",(function(e){var t=e.popToken();return e.expandOnce(!0),{tokens:[t],numArgs:0}})),dn("\\@firstoftwo",(function(e){return{tokens:e.consumeArgs(2)[0],numArgs:0}})),dn("\\@secondoftwo",(function(e){return{tokens:e.consumeArgs(2)[1],numArgs:0}})),dn("\\@ifnextchar",(function(e){var t=e.consumeArgs(3);e.consumeSpaces();var r=e.future();return 1===t[0].length&&t[0][0].text===r.text?{tokens:t[1],numArgs:0}:{tokens:t[2],numArgs:0}})),dn("\\@ifstar","\\@ifnextchar *{\\@firstoftwo{#1}}"),dn("\\TextOrMath",(function(e){var t=e.consumeArgs(2);return"text"===e.mode?{tokens:t[0],numArgs:0}:{tokens:t[1],numArgs:0}}));var Hn={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,a:10,A:10,b:11,B:11,c:12,C:12,d:13,D:13,e:14,E:14,f:15,F:15};dn("\\char",(function(e){var t,r=e.popToken(),a="";if("'"===r.text)t=8,r=e.popToken();else if('"'===r.text)t=16,r=e.popToken();else if(""===r.text)if("\\"===(r=e.popToken()).text[0])a=r.text.charCodeAt(1);else{if("EOF"===r.text)throw new n("\\char missing argument");a=r.text.charCodeAt(0)}else t=10;if(t){if(null==(a=Hn[r.text])||a>=t)throw new n("Invalid base-"+t+" digit "+r.text);for(var i;null!=(i=Hn[e.future().text])&&i<t;)a*=t,a+=i,e.popToken()}return"\\@char{"+a+"}"}));var Ln=function(e,t,r){var a=e.consumeArg().tokens;if(1!==a.length)throw new n("\\newcommand's first argument must be a macro name");var i=a[0].text,o=e.isDefined(i);if(o&&!t)throw new n("\\newcommand{"+i+"} attempting to redefine "+i+"; use \\renewcommand");if(!o&&!r)throw new n("\\renewcommand{"+i+"} when command "+i+" does not yet exist; use \\newcommand");var s=0;if(1===(a=e.consumeArg().tokens).length&&"["===a[0].text){for(var l="",h=e.expandNextToken();"]"!==h.text&&"EOF"!==h.text;)l+=h.text,h=e.expandNextToken();if(!l.match(/^\s*[0-9]+\s*$/))throw new n("Invalid number of arguments: "+l);s=parseInt(l),a=e.consumeArg().tokens}return e.macros.set(i,{tokens:a,numArgs:s}),""};dn("\\newcommand",(function(e){return Ln(e,!1,!0)})),dn("\\renewcommand",(function(e){return Ln(e,!0,!1)})),dn("\\providecommand",(function(e){return Ln(e,!0,!0)})),dn("\\message",(function(e){var t=e.consumeArgs(1)[0];return console.log(t.reverse().map((function(e){return e.text})).join("")),""})),dn("\\errmessage",(function(e){var t=e.consumeArgs(1)[0];return console.error(t.reverse().map((function(e){return e.text})).join("")),""})),dn("\\show",(function(e){var t=e.popToken(),r=t.text;return console.log(t,e.macros.get(r),Nn[r],X.math[r],X.text[r]),""})),dn("\\bgroup","{"),dn("\\egroup","}"),dn("~","\\nobreakspace"),dn("\\lq",""),dn("\\rq","'"),dn("\\aa","\\r a"),dn("\\AA","\\r A"),dn("\\textcopyright","\\html@mathml{\\textcircled{c}}{\\char\xa9}"),dn("\\copyright","\\TextOrMath{\\textcopyright}{\\text{\\textcopyright}}"),dn("\\textregistered","\\html@mathml{\\textcircled{\\scriptsize R}}{\\char\xae}"),dn("\u212c","\\mathscr{B}"),dn("\u2130","\\mathscr{E}"),dn("\u2131","\\mathscr{F}"),dn("\u210b","\\mathscr{H}"),dn("\u2110","\\mathscr{I}"),dn("\u2112","\\mathscr{L}"),dn("\u2133","\\mathscr{M}"),dn("\u211b","\\mathscr{R}"),dn("\u212d","\\mathfrak{C}"),dn("\u210c","\\mathfrak{H}"),dn("\u2128","\\mathfrak{Z}"),dn("\\Bbbk","\\Bbb{k}"),dn("\xb7","\\cdotp"),dn("\\llap","\\mathllap{\\textrm{#1}}"),dn("\\rlap","\\mathrlap{\\textrm{#1}}"),dn("\\clap","\\mathclap{\\textrm{#1}}"),dn("\\mathstrut","\\vphantom{(}"),dn("\\underbar","\\underline{\\text{#1}}"),dn("\\not",'\\html@mathml{\\mathrel{\\mathrlap\\@not}}{\\char"338}'),dn("\\neq","\\html@mathml{\\mathrel{\\not=}}{\\mathrel{\\char\u2260}}"),dn("\\ne","\\neq"),dn("\u2260","\\neq"),dn("\\notin","\\html@mathml{\\mathrel{{\\in}\\mathllap{/\\mskip1mu}}}{\\mathrel{\\char\u2209}}"),dn("\u2209","\\notin"),dn("\u2258","\\html@mathml{\\mathrel{=\\kern{-1em}\\raisebox{0.4em}{$\\scriptsize\\frown$}}}{\\mathrel{\\char\u2258}}"),dn("\u2259","\\html@mathml{\\stackrel{\\tiny\\wedge}{=}}{\\mathrel{\\char\u2258}}"),dn("\u225a","\\html@mathml{\\stackrel{\\tiny\\vee}{=}}{\\mathrel{\\char\u225a}}"),dn("\u225b","\\html@mathml{\\stackrel{\\scriptsize\\star}{=}}{\\mathrel{\\char\u225b}}"),dn("\u225d","\\html@mathml{\\stackrel{\\tiny\\mathrm{def}}{=}}{\\mathrel{\\char\u225d}}"),dn("\u225e","\\html@mathml{\\stackrel{\\tiny\\mathrm{m}}{=}}{\\mathrel{\\char\u225e}}"),dn("\u225f","\\html@mathml{\\stackrel{\\tiny?}{=}}{\\mathrel{\\char\u225f}}"),dn("\u27c2","\\perp"),dn("\u203c","\\mathclose{!\\mkern-0.8mu!}"),dn("\u220c","\\notni"),dn("\u231c","\\ulcorner"),dn("\u231d","\\urcorner"),dn("\u231e","\\llcorner"),dn("\u231f","\\lrcorner"),dn("\xa9","\\copyright"),dn("\xae","\\textregistered"),dn("\ufe0f","\\textregistered"),dn("\\ulcorner",'\\html@mathml{\\@ulcorner}{\\mathop{\\char"231c}}'),dn("\\urcorner",'\\html@mathml{\\@urcorner}{\\mathop{\\char"231d}}'),dn("\\llcorner",'\\html@mathml{\\@llcorner}{\\mathop{\\char"231e}}'),dn("\\lrcorner",'\\html@mathml{\\@lrcorner}{\\mathop{\\char"231f}}'),dn("\\vdots","\\mathord{\\varvdots\\rule{0pt}{15pt}}"),dn("\u22ee","\\vdots"),dn("\\varGamma","\\mathit{\\Gamma}"),dn("\\varDelta","\\mathit{\\Delta}"),dn("\\varTheta","\\mathit{\\Theta}"),dn("\\varLambda","\\mathit{\\Lambda}"),dn("\\varXi","\\mathit{\\Xi}"),dn("\\varPi","\\mathit{\\Pi}"),dn("\\varSigma","\\mathit{\\Sigma}"),dn("\\varUpsilon","\\mathit{\\Upsilon}"),dn("\\varPhi","\\mathit{\\Phi}"),dn("\\varPsi","\\mathit{\\Psi}"),dn("\\varOmega","\\mathit{\\Omega}"),dn("\\substack","\\begin{subarray}{c}#1\\end{subarray}"),dn("\\colon","\\nobreak\\mskip2mu\\mathpunct{}\\mathchoice{\\mkern-3mu}{\\mkern-3mu}{}{}{:}\\mskip6mu"),dn("\\boxed","\\fbox{$\\displaystyle{#1}$}"),dn("\\iff","\\DOTSB\\;\\Longleftrightarrow\\;"),dn("\\implies","\\DOTSB\\;\\Longrightarrow\\;"),dn("\\impliedby","\\DOTSB\\;\\Longleftarrow\\;");var Dn={",":"\\dotsc","\\not":"\\dotsb","+":"\\dotsb","=":"\\dotsb","<":"\\dotsb",">":"\\dotsb","-":"\\dotsb","*":"\\dotsb",":":"\\dotsb","\\DOTSB":"\\dotsb","\\coprod":"\\dotsb","\\bigvee":"\\dotsb","\\bigwedge":"\\dotsb","\\biguplus":"\\dotsb","\\bigcap":"\\dotsb","\\bigcup":"\\dotsb","\\prod":"\\dotsb","\\sum":"\\dotsb","\\bigotimes":"\\dotsb","\\bigoplus":"\\dotsb","\\bigodot":"\\dotsb","\\bigsqcup":"\\dotsb","\\And":"\\dotsb","\\longrightarrow":"\\dotsb","\\Longrightarrow":"\\dotsb","\\longleftarrow":"\\dotsb","\\Longleftarrow":"\\dotsb","\\longleftrightarrow":"\\dotsb","\\Longleftrightarrow":"\\dotsb","\\mapsto":"\\dotsb","\\longmapsto":"\\dotsb","\\hookrightarrow":"\\dotsb","\\doteq":"\\dotsb","\\mathbin":"\\dotsb","\\mathrel":"\\dotsb","\\relbar":"\\dotsb","\\Relbar":"\\dotsb","\\xrightarrow":"\\dotsb","\\xleftarrow":"\\dotsb","\\DOTSI":"\\dotsi","\\int":"\\dotsi","\\oint":"\\dotsi","\\iint":"\\dotsi","\\iiint":"\\dotsi","\\iiiint":"\\dotsi","\\idotsint":"\\dotsi","\\DOTSX":"\\dotsx"};dn("\\dots",(function(e){var t="\\dotso",r=e.expandAfterFuture().text;return r in Dn?t=Dn[r]:("\\not"===r.substr(0,4)||r in X.math&&l.contains(["bin","rel"],X.math[r].group))&&(t="\\dotsb"),t}));var Pn={")":!0,"]":!0,"\\rbrack":!0,"\\}":!0,"\\rbrace":!0,"\\rangle":!0,"\\rceil":!0,"\\rfloor":!0,"\\rgroup":!0,"\\rmoustache":!0,"\\right":!0,"\\bigr":!0,"\\biggr":!0,"\\Bigr":!0,"\\Biggr":!0,$:!0,";":!0,".":!0,",":!0};dn("\\dotso",(function(e){return e.future().text in Pn?"\\ldots\\,":"\\ldots"})),dn("\\dotsc",(function(e){var t=e.future().text;return t in Pn&&","!==t?"\\ldots\\,":"\\ldots"})),dn("\\cdots",(function(e){return e.future().text in Pn?"\\@cdots\\,":"\\@cdots"})),dn("\\dotsb","\\cdots"),dn("\\dotsm","\\cdots"),dn("\\dotsi","\\!\\cdots"),dn("\\dotsx","\\ldots\\,"),dn("\\DOTSI","\\relax"),dn("\\DOTSB","\\relax"),dn("\\DOTSX","\\relax"),dn("\\tmspace","\\TextOrMath{\\kern#1#3}{\\mskip#1#2}\\relax"),dn("\\,","\\tmspace+{3mu}{.1667em}"),dn("\\thinspace","\\,"),dn("\\>","\\mskip{4mu}"),dn("\\:","\\tmspace+{4mu}{.2222em}"),dn("\\medspace","\\:"),dn("\\;","\\tmspace+{5mu}{.2777em}"),dn("\\thickspace","\\;"),dn("\\!","\\tmspace-{3mu}{.1667em}"),dn("\\negthinspace","\\!"),dn("\\negmedspace","\\tmspace-{4mu}{.2222em}"),dn("\\negthickspace","\\tmspace-{5mu}{.277em}"),dn("\\enspace","\\kern.5em "),dn("\\enskip","\\hskip.5em\\relax"),dn("\\quad","\\hskip1em\\relax"),dn("\\qquad","\\hskip2em\\relax"),dn("\\tag","\\@ifstar\\tag@literal\\tag@paren"),dn("\\tag@paren","\\tag@literal{({#1})}"),dn("\\tag@literal",(function(e){if(e.macros.get("\\df@tag"))throw new n("Multiple \\tag");return"\\gdef\\df@tag{\\text{#1}}"})),dn("\\bmod","\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}\\mathbin{\\rm mod}\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}"),dn("\\pod","\\allowbreak\\mathchoice{\\mkern18mu}{\\mkern8mu}{\\mkern8mu}{\\mkern8mu}(#1)"),dn("\\pmod","\\pod{{\\rm mod}\\mkern6mu#1}"),dn("\\mod","\\allowbreak\\mathchoice{\\mkern18mu}{\\mkern12mu}{\\mkern12mu}{\\mkern12mu}{\\rm mod}\\,\\,#1"),dn("\\pmb","\\html@mathml{\\@binrel{#1}{\\mathrlap{#1}\\kern0.5px#1}}{\\mathbf{#1}}"),dn("\\newline","\\\\\\relax"),dn("\\TeX","\\textrm{\\html@mathml{T\\kern-.1667em\\raisebox{-.5ex}{E}\\kern-.125emX}{TeX}}");var Fn=D["Main-Regular"]["T".charCodeAt(0)][1]-.7*D["Main-Regular"]["A".charCodeAt(0)][1]+"em";dn("\\LaTeX","\\textrm{\\html@mathml{L\\kern-.36em\\raisebox{"+Fn+"}{\\scriptstyle A}\\kern-.15em\\TeX}{LaTeX}}"),dn("\\KaTeX","\\textrm{\\html@mathml{K\\kern-.17em\\raisebox{"+Fn+"}{\\scriptstyle A}\\kern-.15em\\TeX}{KaTeX}}"),dn("\\hspace","\\@ifstar\\@hspacer\\@hspace"),dn("\\@hspace","\\hskip #1\\relax"),dn("\\@hspacer","\\rule{0pt}{0pt}\\hskip #1\\relax"),dn("\\ordinarycolon",":"),dn("\\vcentcolon","\\mathrel{\\mathop\\ordinarycolon}"),dn("\\dblcolon",'\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-.9mu}\\vcentcolon}}{\\mathop{\\char"2237}}'),dn("\\coloneqq",'\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}=}}{\\mathop{\\char"2254}}'),dn("\\Coloneqq",'\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}=}}{\\mathop{\\char"2237\\char"3d}}'),dn("\\coloneq",'\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}{\\mathop{\\char"3a\\char"2212}}'),dn("\\Coloneq",'\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}{\\mathop{\\char"2237\\char"2212}}'),dn("\\eqqcolon",'\\html@mathml{\\mathrel{=\\mathrel{\\mkern-1.2mu}\\vcentcolon}}{\\mathop{\\char"2255}}'),dn("\\Eqqcolon",'\\html@mathml{\\mathrel{=\\mathrel{\\mkern-1.2mu}\\dblcolon}}{\\mathop{\\char"3d\\char"2237}}'),dn("\\eqcolon",'\\html@mathml{\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\vcentcolon}}{\\mathop{\\char"2239}}'),dn("\\Eqcolon",'\\html@mathml{\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\dblcolon}}{\\mathop{\\char"2212\\char"2237}}'),dn("\\colonapprox",'\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\approx}}{\\mathop{\\char"3a\\char"2248}}'),dn("\\Colonapprox",'\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\approx}}{\\mathop{\\char"2237\\char"2248}}'),dn("\\colonsim",'\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\sim}}{\\mathop{\\char"3a\\char"223c}}'),dn("\\Colonsim",'\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\sim}}{\\mathop{\\char"2237\\char"223c}}'),dn("\u2237","\\dblcolon"),dn("\u2239","\\eqcolon"),dn("\u2254","\\coloneqq"),dn("\u2255","\\eqqcolon"),dn("\u2a74","\\Coloneqq"),dn("\\ratio","\\vcentcolon"),dn("\\coloncolon","\\dblcolon"),dn("\\colonequals","\\coloneqq"),dn("\\coloncolonequals","\\Coloneqq"),dn("\\equalscolon","\\eqqcolon"),dn("\\equalscoloncolon","\\Eqqcolon"),dn("\\colonminus","\\coloneq"),dn("\\coloncolonminus","\\Coloneq"),dn("\\minuscolon","\\eqcolon"),dn("\\minuscoloncolon","\\Eqcolon"),dn("\\coloncolonapprox","\\Colonapprox"),dn("\\coloncolonsim","\\Colonsim"),dn("\\simcolon","\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\vcentcolon}"),dn("\\simcoloncolon","\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\dblcolon}"),dn("\\approxcolon","\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\vcentcolon}"),dn("\\approxcoloncolon","\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\dblcolon}"),dn("\\notni","\\html@mathml{\\not\\ni}{\\mathrel{\\char\u220c}}"),dn("\\limsup","\\DOTSB\\operatorname*{lim\\,sup}"),dn("\\liminf","\\DOTSB\\operatorname*{lim\\,inf}"),dn("\\injlim","\\DOTSB\\operatorname*{inj\\,lim}"),dn("\\projlim","\\DOTSB\\operatorname*{proj\\,lim}"),dn("\\varlimsup","\\DOTSB\\operatorname*{\\overline{lim}}"),dn("\\varliminf","\\DOTSB\\operatorname*{\\underline{lim}}"),dn("\\varinjlim","\\DOTSB\\operatorname*{\\underrightarrow{lim}}"),dn("\\varprojlim","\\DOTSB\\operatorname*{\\underleftarrow{lim}}"),dn("\\gvertneqq","\\html@mathml{\\@gvertneqq}{\u2269}"),dn("\\lvertneqq","\\html@mathml{\\@lvertneqq}{\u2268}"),dn("\\ngeqq","\\html@mathml{\\@ngeqq}{\u2271}"),dn("\\ngeqslant","\\html@mathml{\\@ngeqslant}{\u2271}"),dn("\\nleqq","\\html@mathml{\\@nleqq}{\u2270}"),dn("\\nleqslant","\\html@mathml{\\@nleqslant}{\u2270}"),dn("\\nshortmid","\\html@mathml{\\@nshortmid}{\u2224}"),dn("\\nshortparallel","\\html@mathml{\\@nshortparallel}{\u2226}"),dn("\\nsubseteqq","\\html@mathml{\\@nsubseteqq}{\u2288}"),dn("\\nsupseteqq","\\html@mathml{\\@nsupseteqq}{\u2289}"),dn("\\varsubsetneq","\\html@mathml{\\@varsubsetneq}{\u228a}"),dn("\\varsubsetneqq","\\html@mathml{\\@varsubsetneqq}{\u2acb}"),dn("\\varsupsetneq","\\html@mathml{\\@varsupsetneq}{\u228b}"),dn("\\varsupsetneqq","\\html@mathml{\\@varsupsetneqq}{\u2acc}"),dn("\\imath","\\html@mathml{\\@imath}{\u0131}"),dn("\\jmath","\\html@mathml{\\@jmath}{\u0237}"),dn("\\llbracket","\\html@mathml{\\mathopen{[\\mkern-3.2mu[}}{\\mathopen{\\char\u27e6}}"),dn("\\rrbracket","\\html@mathml{\\mathclose{]\\mkern-3.2mu]}}{\\mathclose{\\char\u27e7}}"),dn("\u27e6","\\llbracket"),dn("\u27e7","\\rrbracket"),dn("\\lBrace","\\html@mathml{\\mathopen{\\{\\mkern-3.2mu[}}{\\mathopen{\\char\u2983}}"),dn("\\rBrace","\\html@mathml{\\mathclose{]\\mkern-3.2mu\\}}}{\\mathclose{\\char\u2984}}"),dn("\u2983","\\lBrace"),dn("\u2984","\\rBrace"),dn("\\minuso","\\mathbin{\\html@mathml{{\\mathrlap{\\mathchoice{\\kern{0.145em}}{\\kern{0.145em}}{\\kern{0.1015em}}{\\kern{0.0725em}}\\circ}{-}}}{\\char\u29b5}}"),dn("\u29b5","\\minuso"),dn("\\darr","\\downarrow"),dn("\\dArr","\\Downarrow"),dn("\\Darr","\\Downarrow"),dn("\\lang","\\langle"),dn("\\rang","\\rangle"),dn("\\uarr","\\uparrow"),dn("\\uArr","\\Uparrow"),dn("\\Uarr","\\Uparrow"),dn("\\N","\\mathbb{N}"),dn("\\R","\\mathbb{R}"),dn("\\Z","\\mathbb{Z}"),dn("\\alef","\\aleph"),dn("\\alefsym","\\aleph"),dn("\\Alpha","\\mathrm{A}"),dn("\\Beta","\\mathrm{B}"),dn("\\bull","\\bullet"),dn("\\Chi","\\mathrm{X}"),dn("\\clubs","\\clubsuit"),dn("\\cnums","\\mathbb{C}"),dn("\\Complex","\\mathbb{C}"),dn("\\Dagger","\\ddagger"),dn("\\diamonds","\\diamondsuit"),dn("\\empty","\\emptyset"),dn("\\Epsilon","\\mathrm{E}"),dn("\\Eta","\\mathrm{H}"),dn("\\exist","\\exists"),dn("\\harr","\\leftrightarrow"),dn("\\hArr","\\Leftrightarrow"),dn("\\Harr","\\Leftrightarrow"),dn("\\hearts","\\heartsuit"),dn("\\image","\\Im"),dn("\\infin","\\infty"),dn("\\Iota","\\mathrm{I}"),dn("\\isin","\\in"),dn("\\Kappa","\\mathrm{K}"),dn("\\larr","\\leftarrow"),dn("\\lArr","\\Leftarrow"),dn("\\Larr","\\Leftarrow"),dn("\\lrarr","\\leftrightarrow"),dn("\\lrArr","\\Leftrightarrow"),dn("\\Lrarr","\\Leftrightarrow"),dn("\\Mu","\\mathrm{M}"),dn("\\natnums","\\mathbb{N}"),dn("\\Nu","\\mathrm{N}"),dn("\\Omicron","\\mathrm{O}"),dn("\\plusmn","\\pm"),dn("\\rarr","\\rightarrow"),dn("\\rArr","\\Rightarrow"),dn("\\Rarr","\\Rightarrow"),dn("\\real","\\Re"),dn("\\reals","\\mathbb{R}"),dn("\\Reals","\\mathbb{R}"),dn("\\Rho","\\mathrm{P}"),dn("\\sdot","\\cdot"),dn("\\sect","\\S"),dn("\\spades","\\spadesuit"),dn("\\sub","\\subset"),dn("\\sube","\\subseteq"),dn("\\supe","\\supseteq"),dn("\\Tau","\\mathrm{T}"),dn("\\thetasym","\\vartheta"),dn("\\weierp","\\wp"),dn("\\Zeta","\\mathrm{Z}"),dn("\\argmin","\\DOTSB\\operatorname*{arg\\,min}"),dn("\\argmax","\\DOTSB\\operatorname*{arg\\,max}"),dn("\\plim","\\DOTSB\\mathop{\\operatorname{plim}}\\limits"),dn("\\bra","\\mathinner{\\langle{#1}|}"),dn("\\ket","\\mathinner{|{#1}\\rangle}"),dn("\\braket","\\mathinner{\\langle{#1}\\rangle}"),dn("\\Bra","\\left\\langle#1\\right|"),dn("\\Ket","\\left|#1\\right\\rangle"),dn("\\angln","{\\angl n}"),dn("\\blue","\\textcolor{##6495ed}{#1}"),dn("\\orange","\\textcolor{##ffa500}{#1}"),dn("\\pink","\\textcolor{##ff00af}{#1}"),dn("\\red","\\textcolor{##df0030}{#1}"),dn("\\green","\\textcolor{##28ae7b}{#1}"),dn("\\gray","\\textcolor{gray}{#1}"),dn("\\purple","\\textcolor{##9d38bd}{#1}"),dn("\\blueA","\\textcolor{##ccfaff}{#1}"),dn("\\blueB","\\textcolor{##80f6ff}{#1}"),dn("\\blueC","\\textcolor{##63d9ea}{#1}"),dn("\\blueD","\\textcolor{##11accd}{#1}"),dn("\\blueE","\\textcolor{##0c7f99}{#1}"),dn("\\tealA","\\textcolor{##94fff5}{#1}"),dn("\\tealB","\\textcolor{##26edd5}{#1}"),dn("\\tealC","\\textcolor{##01d1c1}{#1}"),dn("\\tealD","\\textcolor{##01a995}{#1}"),dn("\\tealE","\\textcolor{##208170}{#1}"),dn("\\greenA","\\textcolor{##b6ffb0}{#1}"),dn("\\greenB","\\textcolor{##8af281}{#1}"),dn("\\greenC","\\textcolor{##74cf70}{#1}"),dn("\\greenD","\\textcolor{##1fab54}{#1}"),dn("\\greenE","\\textcolor{##0d923f}{#1}"),dn("\\goldA","\\textcolor{##ffd0a9}{#1}"),dn("\\goldB","\\textcolor{##ffbb71}{#1}"),dn("\\goldC","\\textcolor{##ff9c39}{#1}"),dn("\\goldD","\\textcolor{##e07d10}{#1}"),dn("\\goldE","\\textcolor{##a75a05}{#1}"),dn("\\redA","\\textcolor{##fca9a9}{#1}"),dn("\\redB","\\textcolor{##ff8482}{#1}"),dn("\\redC","\\textcolor{##f9685d}{#1}"),dn("\\redD","\\textcolor{##e84d39}{#1}"),dn("\\redE","\\textcolor{##bc2612}{#1}"),dn("\\maroonA","\\textcolor{##ffbde0}{#1}"),dn("\\maroonB","\\textcolor{##ff92c6}{#1}"),dn("\\maroonC","\\textcolor{##ed5fa6}{#1}"),dn("\\maroonD","\\textcolor{##ca337c}{#1}"),dn("\\maroonE","\\textcolor{##9e034e}{#1}"),dn("\\purpleA","\\textcolor{##ddd7ff}{#1}"),dn("\\purpleB","\\textcolor{##c6b9fc}{#1}"),dn("\\purpleC","\\textcolor{##aa87ff}{#1}"),dn("\\purpleD","\\textcolor{##7854ab}{#1}"),dn("\\purpleE","\\textcolor{##543b78}{#1}"),dn("\\mintA","\\textcolor{##f5f9e8}{#1}"),dn("\\mintB","\\textcolor{##edf2df}{#1}"),dn("\\mintC","\\textcolor{##e0e5cc}{#1}"),dn("\\grayA","\\textcolor{##f6f7f7}{#1}"),dn("\\grayB","\\textcolor{##f0f1f2}{#1}"),dn("\\grayC","\\textcolor{##e3e5e6}{#1}"),dn("\\grayD","\\textcolor{##d6d8da}{#1}"),dn("\\grayE","\\textcolor{##babec2}{#1}"),dn("\\grayF","\\textcolor{##888d93}{#1}"),dn("\\grayG","\\textcolor{##626569}{#1}"),dn("\\grayH","\\textcolor{##3b3e40}{#1}"),dn("\\grayI","\\textcolor{##21242c}{#1}"),dn("\\kaBlue","\\textcolor{##314453}{#1}"),dn("\\kaGreen","\\textcolor{##71B307}{#1}");var Vn={"\\relax":!0,"^":!0,_:!0,"\\limits":!0,"\\nolimits":!0},Gn=function(){function e(e,t,r){this.settings=void 0,this.expansionCount=void 0,this.lexer=void 0,this.macros=void 0,this.stack=void 0,this.mode=void 0,this.settings=t,this.expansionCount=0,this.feed(e),this.macros=new On(En,t.macros),this.mode=r,this.stack=[]}var t=e.prototype;return t.feed=function(e){this.lexer=new Rn(e,this.settings)},t.switchMode=function(e){this.mode=e},t.beginGroup=function(){this.macros.beginGroup()},t.endGroup=function(){this.macros.endGroup()},t.endGroups=function(){this.macros.endGroups()},t.future=function(){return 0===this.stack.length&&this.pushToken(this.lexer.lex()),this.stack[this.stack.length-1]},t.popToken=function(){return this.future(),this.stack.pop()},t.pushToken=function(e){this.stack.push(e)},t.pushTokens=function(e){var t;(t=this.stack).push.apply(t,e)},t.scanArgument=function(e){var t,r,n;if(e){if(this.consumeSpaces(),"["!==this.future().text)return null;t=this.popToken();var a=this.consumeArg(["]"]);n=a.tokens,r=a.end}else{var i=this.consumeArg();n=i.tokens,t=i.start,r=i.end}return this.pushToken(new Cn("EOF",r.loc)),this.pushTokens(n),t.range(r,"")},t.consumeSpaces=function(){for(;;){if(" "!==this.future().text)break;this.stack.pop()}},t.consumeArg=function(e){var t=[],r=e&&e.length>0;r||this.consumeSpaces();var a,i=this.future(),o=0,s=0;do{if(a=this.popToken(),t.push(a),"{"===a.text)++o;else if("}"===a.text){if(-1===--o)throw new n("Extra }",a)}else if("EOF"===a.text)throw new n("Unexpected end of input in a macro argument, expected '"+(e&&r?e[s]:"}")+"'",a);if(e&&r)if((0===o||1===o&&"{"===e[s])&&a.text===e[s]){if(++s===e.length){t.splice(-s,s);break}}else s=0}while(0!==o||r);return"{"===i.text&&"}"===t[t.length-1].text&&(t.pop(),t.shift()),t.reverse(),{tokens:t,start:i,end:a}},t.consumeArgs=function(e,t){if(t){if(t.length!==e+1)throw new n("The length of delimiters doesn't match the number of args!");for(var r=t[0],a=0;a<r.length;a++){var i=this.popToken();if(r[a]!==i.text)throw new n("Use of the macro doesn't match its definition",i)}}for(var o=[],s=0;s<e;s++)o.push(this.consumeArg(t&&t[s+1]).tokens);return o},t.expandOnce=function(e){var t=this.popToken(),r=t.text,a=t.noexpand?null:this._getExpansion(r);if(null==a||e&&a.unexpandable){if(e&&null==a&&"\\"===r[0]&&!this.isDefined(r))throw new n("Undefined control sequence: "+r);return this.pushToken(t),t}if(this.expansionCount++,this.expansionCount>this.settings.maxExpand)throw new n("Too many expansions: infinite loop or need to increase maxExpand setting");var i=a.tokens,o=this.consumeArgs(a.numArgs,a.delimiters);if(a.numArgs)for(var s=(i=i.slice()).length-1;s>=0;--s){var l=i[s];if("#"===l.text){if(0===s)throw new n("Incomplete placeholder at end of macro body",l);if("#"===(l=i[--s]).text)i.splice(s+1,1);else{if(!/^[1-9]$/.test(l.text))throw new n("Not a valid argument number",l);var h;(h=i).splice.apply(h,[s,2].concat(o[+l.text-1]))}}}return this.pushTokens(i),i},t.expandAfterFuture=function(){return this.expandOnce(),this.future()},t.expandNextToken=function(){for(;;){var e=this.expandOnce();if(e instanceof Cn){if("\\relax"!==e.text&&!e.treatAsRelax)return this.stack.pop();this.stack.pop()}}throw new Error},t.expandMacro=function(e){return this.macros.has(e)?this.expandTokens([new Cn(e)]):void 0},t.expandTokens=function(e){var t=[],r=this.stack.length;for(this.pushTokens(e);this.stack.length>r;){var n=this.expandOnce(!0);n instanceof Cn&&(n.treatAsRelax&&(n.noexpand=!1,n.treatAsRelax=!1),t.push(this.stack.pop()))}return t},t.expandMacroAsText=function(e){var t=this.expandMacro(e);return t?t.map((function(e){return e.text})).join(""):t},t._getExpansion=function(e){var t=this.macros.get(e);if(null==t)return t;if(1===e.length){var r=this.lexer.catcodes[e];if(null!=r&&13!==r)return}var n="function"==typeof t?t(this):t;if("string"==typeof n){var a=0;if(-1!==n.indexOf("#"))for(var i=n.replace(/##/g,"");-1!==i.indexOf("#"+(a+1));)++a;for(var o=new Rn(n,this.settings),s=[],l=o.lex();"EOF"!==l.text;)s.push(l),l=o.lex();return s.reverse(),{tokens:s,numArgs:a}}return n},t.isDefined=function(e){return this.macros.has(e)||Nn.hasOwnProperty(e)||X.math.hasOwnProperty(e)||X.text.hasOwnProperty(e)||Vn.hasOwnProperty(e)},t.isExpandable=function(e){var t=this.macros.get(e);return null!=t?"string"==typeof t||"function"==typeof t||!t.unexpandable:Nn.hasOwnProperty(e)&&!Nn[e].primitive},e}(),Un={"\u0301":{text:"\\'",math:"\\acute"},"\u0300":{text:"\\",math:"\\grave"},"\u0308":{text:'\\"',math:"\\ddot"},"\u0303":{text:"\\~",math:"\\tilde"},"\u0304":{text:"\\=",math:"\\bar"},"\u0306":{text:"\\u",math:"\\breve"},"\u030c":{text:"\\v",math:"\\check"},"\u0302":{text:"\\^",math:"\\hat"},"\u0307":{text:"\\.",math:"\\dot"},"\u030a":{text:"\\r",math:"\\mathring"},"\u030b":{text:"\\H"},"\u0327":{text:"\\c"}},Yn={"\xe1":"a\u0301","\xe0":"a\u0300","\xe4":"a\u0308","\u01df":"a\u0308\u0304","\xe3":"a\u0303","\u0101":"a\u0304","\u0103":"a\u0306","\u1eaf":"a\u0306\u0301","\u1eb1":"a\u0306\u0300","\u1eb5":"a\u0306\u0303","\u01ce":"a\u030c","\xe2":"a\u0302","\u1ea5":"a\u0302\u0301","\u1ea7":"a\u0302\u0300","\u1eab":"a\u0302\u0303","\u0227":"a\u0307","\u01e1":"a\u0307\u0304","\xe5":"a\u030a","\u01fb":"a\u030a\u0301","\u1e03":"b\u0307","\u0107":"c\u0301","\u1e09":"c\u0327\u0301","\u010d":"c\u030c","\u0109":"c\u0302","\u010b":"c\u0307","\xe7":"c\u0327","\u010f":"d\u030c","\u1e0b":"d\u0307","\u1e11":"d\u0327","\xe9":"e\u0301","\xe8":"e\u0300","\xeb":"e\u0308","\u1ebd":"e\u0303","\u0113":"e\u0304","\u1e17":"e\u0304\u0301","\u1e15":"e\u0304\u0300","\u0115":"e\u0306","\u1e1d":"e\u0327\u0306","\u011b":"e\u030c","\xea":"e\u0302","\u1ebf":"e\u0302\u0301","\u1ec1":"e\u0302\u0300","\u1ec5":"e\u0302\u0303","\u0117":"e\u0307","\u0229":"e\u0327","\u1e1f":"f\u0307","\u01f5":"g\u0301","\u1e21":"g\u0304","\u011f":"g\u0306","\u01e7":"g\u030c","\u011d":"g\u0302","\u0121":"g\u0307","\u0123":"g\u0327","\u1e27":"h\u0308","\u021f":"h\u030c","\u0125":"h\u0302","\u1e23":"h\u0307","\u1e29":"h\u0327","\xed":"i\u0301","\xec":"i\u0300","\xef":"i\u0308","\u1e2f":"i\u0308\u0301","\u0129":"i\u0303","\u012b":"i\u0304","\u012d":"i\u0306","\u01d0":"i\u030c","\xee":"i\u0302","\u01f0":"j\u030c","\u0135":"j\u0302","\u1e31":"k\u0301","\u01e9":"k\u030c","\u0137":"k\u0327","\u013a":"l\u0301","\u013e":"l\u030c","\u013c":"l\u0327","\u1e3f":"m\u0301","\u1e41":"m\u0307","\u0144":"n\u0301","\u01f9":"n\u0300","\xf1":"n\u0303","\u0148":"n\u030c","\u1e45":"n\u0307","\u0146":"n\u0327","\xf3":"o\u0301","\xf2":"o\u0300","\xf6":"o\u0308","\u022b":"o\u0308\u0304","\xf5":"o\u0303","\u1e4d":"o\u0303\u0301","\u1e4f":"o\u0303\u0308","\u022d":"o\u0303\u0304","\u014d":"o\u0304","\u1e53":"o\u0304\u0301","\u1e51":"o\u0304\u0300","\u014f":"o\u0306","\u01d2":"o\u030c","\xf4":"o\u0302","\u1ed1":"o\u0302\u0301","\u1ed3":"o\u0302\u0300","\u1ed7":"o\u0302\u0303","\u022f":"o\u0307","\u0231":"o\u0307\u0304","\u0151":"o\u030b","\u1e55":"p\u0301","\u1e57":"p\u0307","\u0155":"r\u0301","\u0159":"r\u030c","\u1e59":"r\u0307","\u0157":"r\u0327","\u015b":"s\u0301","\u1e65":"s\u0301\u0307","\u0161":"s\u030c","\u1e67":"s\u030c\u0307","\u015d":"s\u0302","\u1e61":"s\u0307","\u015f":"s\u0327","\u1e97":"t\u0308","\u0165":"t\u030c","\u1e6b":"t\u0307","\u0163":"t\u0327","\xfa":"u\u0301","\xf9":"u\u0300","\xfc":"u\u0308","\u01d8":"u\u0308\u0301","\u01dc":"u\u0308\u0300","\u01d6":"u\u0308\u0304","\u01da":"u\u0308\u030c","\u0169":"u\u0303","\u1e79":"u\u0303\u0301","\u016b":"u\u0304","\u1e7b":"u\u0304\u0308","\u016d":"u\u0306","\u01d4":"u\u030c","\xfb":"u\u0302","\u016f":"u\u030a","\u0171":"u\u030b","\u1e7d":"v\u0303","\u1e83":"w\u0301","\u1e81":"w\u0300","\u1e85":"w\u0308","\u0175":"w\u0302","\u1e87":"w\u0307","\u1e98":"w\u030a","\u1e8d":"x\u0308","\u1e8b":"x\u0307","\xfd":"y\u0301","\u1ef3":"y\u0300","\xff":"y\u0308","\u1ef9":"y\u0303","\u0233":"y\u0304","\u0177":"y\u0302","\u1e8f":"y\u0307","\u1e99":"y\u030a","\u017a":"z\u0301","\u017e":"z\u030c","\u1e91":"z\u0302","\u017c":"z\u0307","\xc1":"A\u0301","\xc0":"A\u0300","\xc4":"A\u0308","\u01de":"A\u0308\u0304","\xc3":"A\u0303","\u0100":"A\u0304","\u0102":"A\u0306","\u1eae":"A\u0306\u0301","\u1eb0":"A\u0306\u0300","\u1eb4":"A\u0306\u0303","\u01cd":"A\u030c","\xc2":"A\u0302","\u1ea4":"A\u0302\u0301","\u1ea6":"A\u0302\u0300","\u1eaa":"A\u0302\u0303","\u0226":"A\u0307","\u01e0":"A\u0307\u0304","\xc5":"A\u030a","\u01fa":"A\u030a\u0301","\u1e02":"B\u0307","\u0106":"C\u0301","\u1e08":"C\u0327\u0301","\u010c":"C\u030c","\u0108":"C\u0302","\u010a":"C\u0307","\xc7":"C\u0327","\u010e":"D\u030c","\u1e0a":"D\u0307","\u1e10":"D\u0327","\xc9":"E\u0301","\xc8":"E\u0300","\xcb":"E\u0308","\u1ebc":"E\u0303","\u0112":"E\u0304","\u1e16":"E\u0304\u0301","\u1e14":"E\u0304\u0300","\u0114":"E\u0306","\u1e1c":"E\u0327\u0306","\u011a":"E\u030c","\xca":"E\u0302","\u1ebe":"E\u0302\u0301","\u1ec0":"E\u0302\u0300","\u1ec4":"E\u0302\u0303","\u0116":"E\u0307","\u0228":"E\u0327","\u1e1e":"F\u0307","\u01f4":"G\u0301","\u1e20":"G\u0304","\u011e":"G\u0306","\u01e6":"G\u030c","\u011c":"G\u0302","\u0120":"G\u0307","\u0122":"G\u0327","\u1e26":"H\u0308","\u021e":"H\u030c","\u0124":"H\u0302","\u1e22":"H\u0307","\u1e28":"H\u0327","\xcd":"I\u0301","\xcc":"I\u0300","\xcf":"I\u0308","\u1e2e":"I\u0308\u0301","\u0128":"I\u0303","\u012a":"I\u0304","\u012c":"I\u0306","\u01cf":"I\u030c","\xce":"I\u0302","\u0130":"I\u0307","\u0134":"J\u0302","\u1e30":"K\u0301","\u01e8":"K\u030c","\u0136":"K\u0327","\u0139":"L\u0301","\u013d":"L\u030c","\u013b":"L\u0327","\u1e3e":"M\u0301","\u1e40":"M\u0307","\u0143":"N\u0301","\u01f8":"N\u0300","\xd1":"N\u0303","\u0147":"N\u030c","\u1e44":"N\u0307","\u0145":"N\u0327","\xd3":"O\u0301","\xd2":"O\u0300","\xd6":"O\u0308","\u022a":"O\u0308\u0304","\xd5":"O\u0303","\u1e4c":"O\u0303\u0301","\u1e4e":"O\u0303\u0308","\u022c":"O\u0303\u0304","\u014c":"O\u0304","\u1e52":"O\u0304\u0301","\u1e50":"O\u0304\u0300","\u014e":"O\u0306","\u01d1":"O\u030c","\xd4":"O\u0302","\u1ed0":"O\u0302\u0301","\u1ed2":"O\u0302\u0300","\u1ed6":"O\u0302\u0303","\u022e":"O\u0307","\u0230":"O\u0307\u0304","\u0150":"O\u030b","\u1e54":"P\u0301","\u1e56":"P\u0307","\u0154":"R\u0301","\u0158":"R\u030c","\u1e58":"R\u0307","\u0156":"R\u0327","\u015a":"S\u0301","\u1e64":"S\u0301\u0307","\u0160":"S\u030c","\u1e66":"S\u030c\u0307","\u015c":"S\u0302","\u1e60":"S\u0307","\u015e":"S\u0327","\u0164":"T\u030c","\u1e6a":"T\u0307","\u0162":"T\u0327","\xda":"U\u0301","\xd9":"U\u0300","\xdc":"U\u0308","\u01d7":"U\u0308\u0301","\u01db":"U\u0308\u0300","\u01d5":"U\u0308\u0304","\u01d9":"U\u0308\u030c","\u0168":"U\u0303","\u1e78":"U\u0303\u0301","\u016a":"U\u0304","\u1e7a":"U\u0304\u0308","\u016c":"U\u0306","\u01d3":"U\u030c","\xdb":"U\u0302","\u016e":"U\u030a","\u0170":"U\u030b","\u1e7c":"V\u0303","\u1e82":"W\u0301","\u1e80":"W\u0300","\u1e84":"W\u0308","\u0174":"W\u0302","\u1e86":"W\u0307","\u1e8c":"X\u0308","\u1e8a":"X\u0307","\xdd":"Y\u0301","\u1ef2":"Y\u0300","\u0178":"Y\u0308","\u1ef8":"Y\u0303","\u0232":"Y\u0304","\u0176":"Y\u0302","\u1e8e":"Y\u0307","\u0179":"Z\u0301","\u017d":"Z\u030c","\u1e90":"Z\u0302","\u017b":"Z\u0307","\u03ac":"\u03b1\u0301","\u1f70":"\u03b1\u0300","\u1fb1":"\u03b1\u0304","\u1fb0":"\u03b1\u0306","\u03ad":"\u03b5\u0301","\u1f72":"\u03b5\u0300","\u03ae":"\u03b7\u0301","\u1f74":"\u03b7\u0300","\u03af":"\u03b9\u0301","\u1f76":"\u03b9\u0300","\u03ca":"\u03b9\u0308","\u0390":"\u03b9\u0308\u0301","\u1fd2":"\u03b9\u0308\u0300","\u1fd1":"\u03b9\u0304","\u1fd0":"\u03b9\u0306","\u03cc":"\u03bf\u0301","\u1f78":"\u03bf\u0300","\u03cd":"\u03c5\u0301","\u1f7a":"\u03c5\u0300","\u03cb":"\u03c5\u0308","\u03b0":"\u03c5\u0308\u0301","\u1fe2":"\u03c5\u0308\u0300","\u1fe1":"\u03c5\u0304","\u1fe0":"\u03c5\u0306","\u03ce":"\u03c9\u0301","\u1f7c":"\u03c9\u0300","\u038e":"\u03a5\u0301","\u1fea":"\u03a5\u0300","\u03ab":"\u03a5\u0308","\u1fe9":"\u03a5\u0304","\u1fe8":"\u03a5\u0306","\u038f":"\u03a9\u0301","\u1ffa":"\u03a9\u0300"},Wn=function(){function e(e,t){this.mode=void 0,this.gullet=void 0,this.settings=void 0,this.leftrightDepth=void 0,this.nextToken=void 0,this.mode="math",this.gullet=new Gn(e,t,this.mode),this.settings=t,this.leftrightDepth=0}var t=e.prototype;return t.expect=function(e,t){if(void 0===t&&(t=!0),this.fetch().text!==e)throw new n("Expected '"+e+"', got '"+this.fetch().text+"'",this.fetch());t&&this.consume()},t.consume=function(){this.nextToken=null},t.fetch=function(){return null==this.nextToken&&(this.nextToken=this.gullet.expandNextToken()),this.nextToken},t.switchMode=function(e){this.mode=e,this.gullet.switchMode(e)},t.parse=function(){this.settings.globalGroup||this.gullet.beginGroup(),this.settings.colorIsTextColor&&this.gullet.macros.set("\\color","\\textcolor");try{var e=this.parseExpression(!1);return this.expect("EOF"),this.settings.globalGroup||this.gullet.endGroup(),e}finally{this.gullet.endGroups()}},t.parseExpression=function(t,r){for(var n=[];;){"math"===this.mode&&this.consumeSpaces();var a=this.fetch();if(-1!==e.endOfExpression.indexOf(a.text))break;if(r&&a.text===r)break;if(t&&Nn[a.text]&&Nn[a.text].infix)break;var i=this.parseAtom(r);if(!i)break;"internal"!==i.type&&n.push(i)}return"text"===this.mode&&this.formLigatures(n),this.handleInfixNodes(n)},t.handleInfixNodes=function(e){for(var t,r=-1,a=0;a<e.length;a++)if("infix"===e[a].type){if(-1!==r)throw new n("only one infix operator per group",e[a].token);r=a,t=e[a].replaceWith}if(-1!==r&&t){var i,o,s=e.slice(0,r),l=e.slice(r+1);return i=1===s.length&&"ordgroup"===s[0].type?s[0]:{type:"ordgroup",mode:this.mode,body:s},o=1===l.length&&"ordgroup"===l[0].type?l[0]:{type:"ordgroup",mode:this.mode,body:l},["\\\\abovefrac"===t?this.callFunction(t,[i,e[r],o],[]):this.callFunction(t,[i,o],[])]}return e},t.handleSupSubscript=function(e){var t=this.fetch(),r=t.text;this.consume(),this.consumeSpaces();var a=this.parseGroup(e);if(!a)throw new n("Expected group after '"+r+"'",t);return a},t.formatUnsupportedCmd=function(e){for(var t=[],r=0;r<e.length;r++)t.push({type:"textord",mode:"text",text:e[r]});var n={type:"text",mode:this.mode,body:t};return{type:"color",mode:this.mode,color:this.settings.errorColor,body:[n]}},t.parseAtom=function(e){var t,r,a=this.parseGroup("atom",e);if("text"===this.mode)return a;for(;;){this.consumeSpaces();var i=this.fetch();if("\\limits"===i.text||"\\nolimits"===i.text){if(a&&"op"===a.type){var o="\\limits"===i.text;a.limits=o,a.alwaysHandleSupSub=!0}else{if(!a||"operatorname"!==a.type)throw new n("Limit controls must follow a math operator",i);a.alwaysHandleSupSub&&(a.limits="\\limits"===i.text)}this.consume()}else if("^"===i.text){if(t)throw new n("Double superscript",i);t=this.handleSupSubscript("superscript")}else if("_"===i.text){if(r)throw new n("Double subscript",i);r=this.handleSupSubscript("subscript")}else{if("'"!==i.text)break;if(t)throw new n("Double superscript",i);var s={type:"textord",mode:this.mode,text:"\\prime"},l=[s];for(this.consume();"'"===this.fetch().text;)l.push(s),this.consume();"^"===this.fetch().text&&l.push(this.handleSupSubscript("superscript")),t={type:"ordgroup",mode:this.mode,body:l}}}return t||r?{type:"supsub",mode:this.mode,base:a,sup:t,sub:r}:a},t.parseFunction=function(e,t){var r=this.fetch(),a=r.text,i=Nn[a];if(!i)return null;if(this.consume(),t&&"atom"!==t&&!i.allowedInArgument)throw new n("Got function '"+a+"' with no arguments"+(t?" as "+t:""),r);if("text"===this.mode&&!i.allowedInText)throw new n("Can't use function '"+a+"' in text mode",r);if("math"===this.mode&&!1===i.allowedInMath)throw new n("Can't use function '"+a+"' in math mode",r);var o=this.parseArguments(a,i),s=o.args,l=o.optArgs;return this.callFunction(a,s,l,r,e)},t.callFunction=function(e,t,r,a,i){var o={funcName:e,parser:this,token:a,breakOnTokenText:i},s=Nn[e];if(s&&s.handler)return s.handler(o,t,r);throw new n("No function handler for "+e)},t.parseArguments=function(e,t){var r=t.numArgs+t.numOptionalArgs;if(0===r)return{args:[],optArgs:[]};for(var a=[],i=[],o=0;o<r;o++){var s=t.argTypes&&t.argTypes[o],l=o<t.numOptionalArgs;(t.primitive&&null==s||"sqrt"===t.type&&1===o&&null==i[0])&&(s="primitive");var h=this.parseGroupOfType("argument to '"+e+"'",s,l);if(l)i.push(h);else{if(null==h)throw new n("Null argument, please report this as a bug");a.push(h)}}return{args:a,optArgs:i}},t.parseGroupOfType=function(e,t,r){switch(t){case"color":return this.parseColorGroup(r);case"size":return this.parseSizeGroup(r);case"url":return this.parseUrlGroup(r);case"math":case"text":return this.parseArgumentGroup(r,t);case"hbox":var a=this.parseArgumentGroup(r,"text");return null!=a?{type:"styling",mode:a.mode,body:[a],style:"text"}:null;case"raw":var i=this.parseStringGroup("raw",r);return null!=i?{type:"raw",mode:"text",string:i.text}:null;case"primitive":if(r)throw new n("A primitive argument cannot be optional");var o=this.parseGroup(e);if(null==o)throw new n("Expected group as "+e,this.fetch());return o;case"original":case null:case void 0:return this.parseArgumentGroup(r);default:throw new n("Unknown group type as "+e,this.fetch())}},t.consumeSpaces=function(){for(;" "===this.fetch().text;)this.consume()},t.parseStringGroup=function(e,t){var r=this.gullet.scanArgument(t);if(null==r)return null;for(var n,a="";"EOF"!==(n=this.fetch()).text;)a+=n.text,this.consume();return this.consume(),r.text=a,r},t.parseRegexGroup=function(e,t){for(var r,a=this.fetch(),i=a,o="";"EOF"!==(r=this.fetch()).text&&e.test(o+r.text);)o+=(i=r).text,this.consume();if(""===o)throw new n("Invalid "+t+": '"+a.text+"'",a);return a.range(i,o)},t.parseColorGroup=function(e){var t=this.parseStringGroup("color",e);if(null==t)return null;var r=/^(#[a-f0-9]{3}|#?[a-f0-9]{6}|[a-z]+)$/i.exec(t.text);if(!r)throw new n("Invalid color: '"+t.text+"'",t);var a=r[0];return/^[0-9a-f]{6}$/i.test(a)&&(a="#"+a),{type:"color-token",mode:this.mode,color:a}},t.parseSizeGroup=function(e){var t,r=!1;if(this.gullet.consumeSpaces(),!(t=e||"{"===this.gullet.future().text?this.parseStringGroup("size",e):this.parseRegexGroup(/^[-+]? *(?:$|\d+|\d+\.\d*|\.\d*) *[a-z]{0,2} *$/,"size")))return null;e||0!==t.text.length||(t.text="0pt",r=!0);var a=/([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(t.text);if(!a)throw new n("Invalid size: '"+t.text+"'",t);var i={number:+(a[1]+a[2]),unit:a[3]};if(!He(i))throw new n("Invalid unit: '"+i.unit+"'",t);return{type:"size",mode:this.mode,value:i,isBlank:r}},t.parseUrlGroup=function(e){this.gullet.lexer.setCatcode("%",13),this.gullet.lexer.setCatcode("~",12);var t=this.parseStringGroup("url",e);if(this.gullet.lexer.setCatcode("%",14),this.gullet.lexer.setCatcode("~",13),null==t)return null;var r=t.text.replace(/\\([#$%&~_^{}])/g,"$1");return{type:"url",mode:this.mode,url:r}},t.parseArgumentGroup=function(e,t){var r=this.gullet.scanArgument(e);if(null==r)return null;var n=this.mode;t&&this.switchMode(t),this.gullet.beginGroup();var a=this.parseExpression(!1,"EOF");this.expect("EOF"),this.gullet.endGroup();var i={type:"ordgroup",mode:this.mode,loc:r.loc,body:a};return t&&this.switchMode(n),i},t.parseGroup=function(e,t){var r,a=this.fetch(),i=a.text;if("{"===i||"\\begingroup"===i){this.consume();var o="{"===i?"}":"\\endgroup";this.gullet.beginGroup();var s=this.parseExpression(!1,o),l=this.fetch();this.expect(o),this.gullet.endGroup(),r={type:"ordgroup",mode:this.mode,loc:qn.range(a,l),body:s,semisimple:"\\begingroup"===i||void 0}}else if(null==(r=this.parseFunction(t,e)||this.parseSymbol())&&"\\"===i[0]&&!Vn.hasOwnProperty(i)){if(this.settings.throwOnError)throw new n("Undefined control sequence: "+i,a);r=this.formatUnsupportedCmd(i),this.consume()}return r},t.formLigatures=function(e){for(var t=e.length-1,r=0;r<t;++r){var n=e[r],a=n.text;"-"===a&&"-"===e[r+1].text&&(r+1<t&&"-"===e[r+2].text?(e.splice(r,3,{type:"textord",mode:"text",loc:qn.range(n,e[r+2]),text:"---"}),t-=2):(e.splice(r,2,{type:"textord",mode:"text",loc:qn.range(n,e[r+1]),text:"--"}),t-=1)),"'"!==a&&""!==a||e[r+1].text!==a||(e.splice(r,2,{type:"textord",mode:"text",loc:qn.range(n,e[r+1]),text:a+a}),t-=1)}},t.parseSymbol=function(){var e=this.fetch(),t=e.text;if(/^\\verb[^a-zA-Z]/.test(t)){this.consume();var r=t.slice(5),a="*"===r.charAt(0);if(a&&(r=r.slice(1)),r.length<2||r.charAt(0)!==r.slice(-1))throw new n("\\verb assertion failed --\n                    please report what input caused this bug");return{type:"verb",mode:"text",body:r=r.slice(1,-1),star:a}}Yn.hasOwnProperty(t[0])&&!X[this.mode][t[0]]&&(this.settings.strict&&"math"===this.mode&&this.settings.reportNonstrict("unicodeTextInMathMode",'Accented Unicode text character "'+t[0]+'" used in math mode',e),t=Yn[t[0]]+t.substr(1));var i,o=In.exec(t);if(o&&("i"===(t=t.substring(0,o.index))?t="\u0131":"j"===t&&(t="\u0237")),X[this.mode][t]){this.settings.strict&&"math"===this.mode&&Me.indexOf(t)>=0&&this.settings.reportNonstrict("unicodeTextInMathMode",'Latin-1/Unicode text character "'+t[0]+'" used in math mode',e);var s,l=X[this.mode][t].group,h=qn.range(e);if(U.hasOwnProperty(l)){var m=l;s={type:"atom",mode:this.mode,family:m,loc:h,text:t}}else s={type:l,mode:this.mode,loc:h,text:t};i=s}else{if(!(t.charCodeAt(0)>=128))return null;this.settings.strict&&(w(t.charCodeAt(0))?"math"===this.mode&&this.settings.reportNonstrict("unicodeTextInMathMode",'Unicode text character "'+t[0]+'" used in math mode',e):this.settings.reportNonstrict("unknownSymbol",'Unrecognized Unicode character "'+t[0]+'" ('+t.charCodeAt(0)+")",e)),i={type:"textord",mode:"text",loc:qn.range(e),text:t}}if(this.consume(),o)for(var c=0;c<o[0].length;c++){var u=o[0][c];if(!Un[u])throw new n("Unknown accent ' "+u+"'",e);var p=Un[u][this.mode]||Un[u].text;if(!p)throw new n("Accent "+u+" unsupported in "+this.mode+" mode",e);i={type:"accent",mode:this.mode,loc:qn.range(e),label:p,isStretchy:!1,isShifty:!0,base:i}}return i},e}();Wn.endOfExpression=["}","\\endgroup","\\end","\\right","&"];var Xn=function(e,t){if(!("string"==typeof e||e instanceof String))throw new TypeError("KaTeX can only parse string typed expression");var r=new Wn(e,t);delete r.gullet.macros.current["\\df@tag"];var a=r.parse();if(delete r.gullet.macros.current["\\current@color"],delete r.gullet.macros.current["\\color"],r.gullet.macros.get("\\df@tag")){if(!t.displayMode)throw new n("\\tag works only in display equations");r.gullet.feed("\\df@tag"),a=[{type:"tag",mode:"text",body:a,tag:r.parse()}]}return a},_n=function(e,t,r){t.textContent="";var n=$n(e,r).toNode();t.appendChild(n)};"undefined"!=typeof document&&"CSS1Compat"!==document.compatMode&&("undefined"!=typeof console&&console.warn("Warning: KaTeX doesn't work in quirks mode. Make sure your website has a suitable doctype."),_n=function(){throw new n("KaTeX doesn't work in quirks mode.")});var jn=function(e,t,r){if(r.throwOnError||!(e instanceof n))throw e;var a=je.makeSpan(["katex-error"],[new R(t)]);return a.setAttribute("title",e.toString()),a.setAttribute("style","color:"+r.errorColor),a},$n=function(e,t){var r=new h(t);try{var n=Xn(e,r);return Ot(n,e,r)}catch(t){return jn(t,e,r)}},Zn={version:"0.13.18",render:_n,renderToString:function(e,t){return $n(e,t).toMarkup()},ParseError:n,__parse:function(e,t){var r=new h(t);return Xn(e,r)},__renderToDomTree:$n,__renderToHTMLTree:function(e,t){var r=new h(t);try{return function(e,t,r){var n=xt(e,It(r)),a=je.makeSpan(["katex"],[n]);return Rt(a,r)}(Xn(e,r),0,r)}catch(t){return jn(t,e,r)}},__setFontMetrics:function(e,t){D[e]=t},__defineSymbol:_,__defineMacro:dn,__domTree:{Span:N,Anchor:q,SymbolNode:R,SvgNode:O,PathNode:E,LineNode:H}};return t=t.default}()}));

function isFatPointer_33557131(ti_33557132) {
  var result_33557133 = false;

  BeforeRet: do {
    result_33557133 = !((ConstSet1[ti_33557132.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_33557133;

}

function nimCopyAux(dest_33557144, src_33557145, n_33557146) {
    switch (n_33557146.kind) {
    case 0:
      break;
    case 1:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557146.sons.length; i++) {
      nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i]);
    }
    
      break;
    case 3:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
      for (var i = 0; i < n_33557146.sons.length; ++i) {
        nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i][1]);
      }
    
      break;
    }

  
}

function succeedImpl_2030044108(inputInHEX60gensym43_2030044109, valueInHEX60gensym43_2030044110, tailInHEX60gensym43_2030044111) {
  var result_2030044113 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_2030044113 = nimCopy(result_2030044113, {kind: 0, value: nimCopy(null, valueInHEX60gensym43_2030044110, NTI33554439), tail: nimCopy(null, tailInHEX60gensym43_2030044111, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym43_2030044109, NTI33554439), expected: []}, NTI2030043268);

  return result_2030044113;

}

function failImpl_2030044115(inputInHEX60gensym43_2030044116, expectedInHEX60gensym43_2030044117, tailInHEX60gensym43_2030044118) {
  var result_2030044120 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_2030044120 = nimCopy(result_2030044120, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym43_2030044117, NTI2030044158), tail: nimCopy(null, tailInHEX60gensym43_2030044118, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym43_2030044116, NTI33554439), value: []}, NTI2030043268);

  return result_2030044120;

}

function succeedImpl_2030044144(inputInHEX60gensym45_2030044145, valueInHEX60gensym45_2030044146, tailInHEX60gensym45_2030044147) {
  var result_2030044149 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_2030044149 = nimCopy(result_2030044149, {kind: 0, value: valueInHEX60gensym45_2030044146, tail: nimCopy(null, tailInHEX60gensym45_2030044147, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym45_2030044145, NTI33554439), expected: []}, NTI2030043366);

  return result_2030044149;

}

function failImpl_2030044151(inputInHEX60gensym45_2030044152, expectedInHEX60gensym45_2030044153, tailInHEX60gensym45_2030044154) {
  var result_2030044156 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_2030044156 = nimCopy(result_2030044156, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym45_2030044153, NTI2030044192), tail: nimCopy(null, tailInHEX60gensym45_2030044154, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym45_2030044152, NTI33554439), value: 0}, NTI2030043366);

  return result_2030044156;

}

function add_33556419(x_33556420, x_33556420_Idx, y_33556421) {
          if (x_33556420[x_33556420_Idx] === null) { x_33556420[x_33556420_Idx] = []; }
      var off = x_33556420[x_33556420_Idx].length;
      x_33556420[x_33556420_Idx].length += y_33556421.length;
      for (var i = 0; i < y_33556421.length; ++i) {
        x_33556420[x_33556420_Idx][off+i] = y_33556421.charCodeAt(i);
      }
    

  
}

function newSeq_33556825(len_33556827) {
  var result_33556828 = [];

    result_33556828 = new Array(len_33556827); for (var i = 0 ; i < len_33556827 ; ++i) { result_33556828[i] = null; }
  return result_33556828;

}

function unhandledException(e_33556663) {
    var buf_33556664 = [[]];
    if (!(((e_33556663.message).length == 0))) {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_33556664[0].push.apply(buf_33556664[0], e_33556663.message);;
    }
    else {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit(" ["));;
    add_33556419(buf_33556664, 0, e_33556663.name);
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("]\x0A"));;
    var cbuf_33556665 = toJSStr(buf_33556664[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556665);
  }
  else {
    throw cbuf_33556665;
  }
  

  
}

function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI33555122, name: null, trace: [], up: null}, "OverflowDefect");

  
}

function checkOverflowInt(a_33556938) {
        if (a_33556938 > 2147483647 || a_33556938 < -2147483648) raiseOverflow();
  

  
}

function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI33555130, name: null, trace: [], up: null}, "RangeDefect");

  
}

function addChars_251658415(result_251658417, result_251658417_Idx, x_251658418, start_251658419, n_251658420) {
    var old_251658421 = (result_251658417[result_251658417_Idx]).length;
    (result_251658417[result_251658417_Idx].length = chckRange(addInt(old_251658421, n_251658420), 0, 2147483647));
    Label1: do {
      var iHEX60gensym4_251658435 = 0;
      var i_2030044327 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_2030044327 < n_251658420)) break Label3;
            iHEX60gensym4_251658435 = i_2030044327;
            result_251658417[result_251658417_Idx][chckIndx(addInt(old_251658421, iHEX60gensym4_251658435), 0, (result_251658417[result_251658417_Idx]).length - 1)] = x_251658418.charCodeAt(chckIndx(addInt(start_251658419, iHEX60gensym4_251658435), 0, (x_251658418).length - 1));
            i_2030044327 = addInt(i_2030044327, 1);
          }
      } while (false);
    } while (false);

  
}

function addChars_251658411(result_251658413, result_251658413_Idx, x_251658414) {
    addChars_251658415(result_251658413, result_251658413_Idx, x_251658414, 0, ((x_251658414) == null ? 0 : (x_251658414).length));

  
}

function addInt_251658436(result_251658437, result_251658437_Idx, x_251658438) {
    addChars_251658411(result_251658437, result_251658437_Idx, ((x_251658438) + ""));

  
}

function addInt_251658457(result_251658458, result_251658458_Idx, x_251658459) {
    addInt_251658436(result_251658458, result_251658458_Idx, x_251658459);

  
}

function HEX24_335544323(x_335544324) {
  var result_335544325 = [[]];

    addInt_251658457(result_335544325, 0, x_335544324);

  return result_335544325[0];

}

function raiseIndexError(i_33556754, a_33556755, b_33556756) {
    var Temporary1;

    if ((b_33556756 < a_33556755)) {
    Temporary1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Temporary1 = (makeNimstrLit("index ") || []).concat(HEX24_335544323(i_33556754) || [],makeNimstrLit(" not in ") || [],HEX24_335544323(a_33556755) || [],makeNimstrLit(" .. ") || [],HEX24_335544323(b_33556756) || []);
    }
    
    raiseException({message: nimCopy(null, Temporary1, NTI33554439), parent: null, m_type: NTI33555128, name: null, trace: [], up: null}, "IndexDefect");

  
}

function HEX5BHEX5D_939527322(s_939527325, x_939527326) {
  var result_939527327 = [];

    var a_939527329 = x_939527326.a;
    var L_939527331 = addInt(subInt(subInt((s_939527325).length, x_939527326.b), a_939527329), 1);
    result_939527327 = nimCopy(null, mnewString(chckRange(L_939527331, 0, 2147483647)), NTI33554439);
    Label1: do {
      var i_939527336 = 0;
      var i_1325400245 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1325400245 < L_939527331)) break Label3;
            i_939527336 = i_1325400245;
            result_939527327[chckIndx(i_939527336, 0, (result_939527327).length - 1)] = s_939527325[chckIndx(addInt(i_939527336, a_939527329), 0, (s_939527325).length - 1)];
            i_1325400245 = addInt(i_1325400245, 1);
          }
      } while (false);
    } while (false);

  return result_939527327;

}

function HEX2EHEX2E_872415312(a_872415315, b_872415316) {
  var result_872415319 = ({a: 0, b: 0});

    result_872415319 = nimCopy(result_872415319, {a: a_872415315, b: b_872415316}, NTI872415311);

  return result_872415319;

}

function nsuFindChar(s_654312949, sub_654312950, start_654312951, last_654312952) {
    var Temporary1;

  var result_654312953 = 0;

  BeforeRet: do {
    if ((last_654312952 == 0)) {
    Temporary1 = (s_654312949).length - 1;
    }
    else {
    Temporary1 = last_654312952;
    }
    
    var last_654312954 = Temporary1;
    Label2: do {
      var i_654312964 = 0;
      var colontmp__1325400135 = 0;
      colontmp__1325400135 = start_654312951;
      var res_1325400136 = colontmp__1325400135;
      Label3: do {
          Label4: while (true) {
          if (!(res_1325400136 <= last_654312954)) break Label4;
            i_654312964 = res_1325400136;
            if ((sub_654312950 == s_654312949[chckIndx(i_654312964, 0, (s_654312949).length - 1)])) {
            result_654312953 = i_654312964;
            break BeforeRet;
            }
            
            res_1325400136 = addInt(res_1325400136, 1);
          }
      } while (false);
    } while (false);
    result_654312953 = -1;
    break BeforeRet;
  } while (false);

  return result_654312953;

}

function fill_654312891(a_654312893, value_654312894) {
    var xHEX60gensym166_654312900 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(xHEX60gensym166_654312900 <= (a_654312893).length - 1)) break Label2;
          a_654312893[chckIndx(xHEX60gensym166_654312900, 0, (a_654312893).length - 1)] = value_654312894;
          xHEX60gensym166_654312900 = addInt(xHEX60gensym166_654312900, 1);
        }
    } while (false);

  
}

function nsuInitSkipTable(a_654312888, sub_654312889) {
    var m_654312890 = (sub_654312889).length;
    fill_654312891(a_654312888, m_654312890);
    Label1: do {
      var i_654312909 = 0;
      var colontmp__2030044337 = 0;
      colontmp__2030044337 = subInt(m_654312890, 1);
      var i_2030044338 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_2030044338 < colontmp__2030044337)) break Label3;
            i_654312909 = i_2030044338;
            a_654312888[chckIndx(sub_654312889[chckIndx(i_654312909, 0, (sub_654312889).length - 1)], 0, (a_654312888).length - 1)] = subInt(subInt(m_654312890, 1), i_654312909);
            i_2030044338 = addInt(i_2030044338, 1);
          }
      } while (false);
    } while (false);

  
}

function nsuFindStrA(a_654312929, s_654312930, sub_654312931, start_654312932, last_654312933) {
    var Temporary1;

  var result_654312934 = 0;

  BeforeRet: do {
    if ((last_654312933 == 0)) {
    Temporary1 = (s_654312930).length - 1;
    }
    else {
    Temporary1 = last_654312933;
    }
    
    var last_654312935 = Temporary1;
    var subLast_654312936 = subInt((sub_654312931).length, 1);
    if ((subLast_654312936 == -1)) {
    result_654312934 = start_654312932;
    break BeforeRet;
    }
    
    var skip_654312937 = start_654312932;
    Label2: do {
        Label3: while (true) {
        if (!(subLast_654312936 <= subInt(last_654312935, skip_654312937))) break Label3;
          var i_654312938 = subLast_654312936;
          Label4: do {
              Label5: while (true) {
              if (!(s_654312930[chckIndx(addInt(skip_654312937, i_654312938), 0, (s_654312930).length - 1)] == sub_654312931[chckIndx(i_654312938, 0, (sub_654312931).length - 1)])) break Label5;
                if ((i_654312938 == 0)) {
                result_654312934 = skip_654312937;
                break BeforeRet;
                }
                
                i_654312938 = subInt(i_654312938, 1);
              }
          } while (false);
          skip_654312937 = addInt(skip_654312937, a_654312929[chckIndx(s_654312930[chckIndx(addInt(skip_654312937, subLast_654312936), 0, (s_654312930).length - 1)], 0, (a_654312929).length - 1)]);
        }
    } while (false);
    result_654312934 = -1;
    break BeforeRet;
  } while (false);

  return result_654312934;

}

function nsuFindStr(s_654312982, sub_654312983, start_654312984, last_654312985) {
  var result_654312986 = 0;

  BeforeRet: do {
    if ((subInt((s_654312982).length, start_654312984) < (sub_654312983).length)) {
    result_654312986 = -1;
    break BeforeRet;
    }
    
    if (((sub_654312983).length == 1)) {
    result_654312986 = nsuFindChar(s_654312982, sub_654312983[chckIndx(0, 0, (sub_654312983).length - 1)], start_654312984, last_654312985);
    break BeforeRet;
    }
    
    var a_654312988 = [new Int32Array(256)];
    nsuInitSkipTable(a_654312988[0], sub_654312983);
    result_654312986 = nsuFindStrA(a_654312988[0], s_654312982, sub_654312983, start_654312984, last_654312985);
  } while (false);

  return result_654312986;

}

function findBounds_2030043144(s_2030043145, r_2030043146) {
  var result_2030043147 = {Field0: 0, Field1: 0};

  BeforeRet: do {
    var m_2030043148 = toJSStr(s_2030043145).match(r_2030043146);
    if (!(((m_2030043148) == null))) {
    var start_2030043156 = nsuFindStr(s_2030043145, cstrToNimstr(m_2030043148[chckIndx(0, 0, (m_2030043148).length - 1)]), 0, 0);
    var colontmp__2030044332 = start_2030043156;
    var colontmp__2030044333 = subInt(addInt(start_2030043156, ((m_2030043148[chckIndx(0, 0, (m_2030043148).length - 1)]) == null ? 0 : (m_2030043148[chckIndx(0, 0, (m_2030043148).length - 1)]).length)), 1);
    result_2030043147 = nimCopy(result_2030043147, {Field0: colontmp__2030044332, Field1: colontmp__2030044333}, NTI2030043142);
    break BeforeRet;
    }
    
    var colontmp__2030044334 = -1;
    var colontmp__2030044335 = 0;
    result_2030043147 = nimCopy(result_2030043147, {Field0: colontmp__2030044334, Field1: colontmp__2030044335}, NTI2030043142);
    break BeforeRet;
  } while (false);

  return result_2030043147;

}

function invalidFormatString_654313549() {
    raiseException({message: makeNimstrLit("invalid format string"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");

  
}

function toLowerAscii_973078529(c_973078530) {
  var result_973078531 = 0;

    if ((ConstSet5[c_973078530] != undefined)) {
    result_973078531 = chckRange(addInt(c_973078530, 32), 0, 255);
    }
    else {
      result_973078531 = c_973078530;
    }
    

  return result_973078531;

}

function nsuCmpIgnoreStyle(a_654311614, b_654311615) {
          var Temporary7;
          var Temporary8;

  var result_654311616 = 0;

  BeforeRet: do {
    var aLenHEX60gensym25_654311625 = (a_654311614).length;
    var bLenHEX60gensym25_654311626 = (b_654311615).length;
    var iHEX60gensym25_654311627 = 0;
    var jHEX60gensym25_654311628 = 0;
    Label1: do {
        Label2: while (true) {
        if (!true) break Label2;
          Label3: do {
              Label4: while (true) {
              if (!((iHEX60gensym25_654311627 < aLenHEX60gensym25_654311625) && (a_654311614[iHEX60gensym25_654311627] == 95))) break Label4;
                iHEX60gensym25_654311627 += 1;
              }
          } while (false);
          Label5: do {
              Label6: while (true) {
              if (!((jHEX60gensym25_654311628 < bLenHEX60gensym25_654311626) && (b_654311615[jHEX60gensym25_654311628] == 95))) break Label6;
                jHEX60gensym25_654311628 += 1;
              }
          } while (false);
          if ((iHEX60gensym25_654311627 < aLenHEX60gensym25_654311625)) {
          Temporary7 = toLowerAscii_973078529(a_654311614[iHEX60gensym25_654311627]);
          }
          else {
          Temporary7 = 0;
          }
          
          var aaHEX60gensym25_654311637 = Temporary7;
          if ((jHEX60gensym25_654311628 < bLenHEX60gensym25_654311626)) {
          Temporary8 = toLowerAscii_973078529(b_654311615[jHEX60gensym25_654311628]);
          }
          else {
          Temporary8 = 0;
          }
          
          var bbHEX60gensym25_654311638 = Temporary8;
          result_654311616 = (aaHEX60gensym25_654311637 - bbHEX60gensym25_654311638);
          if (!((result_654311616 == 0))) {
          break BeforeRet;
          }
          
          if ((aLenHEX60gensym25_654311625 <= iHEX60gensym25_654311627)) {
          if ((bLenHEX60gensym25_654311626 <= jHEX60gensym25_654311628)) {
          result_654311616 = 0;
          break BeforeRet;
          }
          
          result_654311616 = -1;
          break BeforeRet;
          }
          else {
          if ((bLenHEX60gensym25_654311626 <= jHEX60gensym25_654311628)) {
          result_654311616 = 1;
          break BeforeRet;
          }
          }
          iHEX60gensym25_654311627 += 1;
          jHEX60gensym25_654311628 += 1;
        }
    } while (false);
  } while (false);

  return result_654311616;

}

function findNormalized_654313537(x_654313538, inArray_654313539) {
  var result_654313540 = 0;

  BeforeRet: do {
    var i_654313541 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_654313541 < (inArray_654313539).length - 1)) break Label2;
          if ((nsuCmpIgnoreStyle(x_654313538, inArray_654313539[chckIndx(i_654313541, 0, (inArray_654313539).length - 1)]) == 0)) {
          result_654313540 = i_654313541;
          break BeforeRet;
          }
          
          i_654313541 = addInt(i_654313541, 2);
        }
    } while (false);
    result_654313540 = -1;
    break BeforeRet;
  } while (false);

  return result_654313540;

}

function substr_33557906(s_33557907, first_33557908, last_33557909) {
  var result_33557910 = [];

    var first_33557911 = nimMax(first_33557908, 0);
    var L_33557912 = nimMax(addInt(subInt(nimMin(last_33557909, (s_33557907).length - 1), first_33557911), 1), 0);
    result_33557910 = nimCopy(null, mnewString(chckRange(L_33557912, 0, 2147483647)), NTI33554439);
    Label1: do {
      var i_33557917 = 0;
      var colontmp__1325400141 = 0;
      colontmp__1325400141 = subInt(L_33557912, 1);
      var res_1325400142 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_1325400142 <= colontmp__1325400141)) break Label3;
            i_33557917 = res_1325400142;
            result_33557910[chckIndx(i_33557917, 0, (result_33557910).length - 1)] = s_33557907[chckIndx(addInt(i_33557917, first_33557911), 0, (s_33557907).length - 1)];
            res_1325400142 = addInt(res_1325400142, 1);
          }
      } while (false);
    } while (false);

  return result_33557910;

}

function nsuAddf(s_654313552, s_654313552_Idx, formatstr_654313553, a_654313554) {
                  var Temporary5;
            var Temporary6;
              var Temporary7;
            var Temporary10;
              var Temporary11;
                var Temporary12;
                  var Temporary15;
              var Temporary16;

    var i_654313556 = 0;
    var num_654313557 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_654313556 < (formatstr_654313553).length)) break Label2;
          if (((formatstr_654313553[chckIndx(i_654313556, 0, (formatstr_654313553).length - 1)] == 36) && (addInt(i_654313556, 1) < (formatstr_654313553).length))) {
          switch (formatstr_654313553[chckIndx(addInt(i_654313556, 1), 0, (formatstr_654313553).length - 1)]) {
          case 35:
            if (((a_654313554).length - 1 < num_654313557)) {
            invalidFormatString_654313549();
            }
            
            s_654313552[s_654313552_Idx].push.apply(s_654313552[s_654313552_Idx], a_654313554[chckIndx(num_654313557, 0, (a_654313554).length - 1)]);;
            i_654313556 = addInt(i_654313556, 2);
            num_654313557 = addInt(num_654313557, 1);
            break;
          case 36:
            addChar(s_654313552[s_654313552_Idx], 36);;
            i_654313556 = addInt(i_654313556, 2);
            break;
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 45:
            var j_654313573 = 0;
            i_654313556 = addInt(i_654313556, 1);
            var negative_654313578 = (formatstr_654313553[chckIndx(i_654313556, 0, (formatstr_654313553).length - 1)] == 45);
            if (negative_654313578) {
            i_654313556 = addInt(i_654313556, 1);
            }
            
            Label3: do {
                Label4: while (true) {
                  if (!(i_654313556 < (formatstr_654313553).length)) Temporary5 = false; else {                    Temporary5 = (ConstSet2[formatstr_654313553[chckIndx(i_654313556, 0, (formatstr_654313553).length - 1)]] != undefined);                  }                if (!Temporary5) break Label4;
                  j_654313573 = subInt(addInt(mulInt(j_654313573, 10), formatstr_654313553[chckIndx(i_654313556, 0, (formatstr_654313553).length - 1)]), 48);
                  i_654313556 = addInt(i_654313556, 1);
                }
            } while (false);
            if (!(negative_654313578)) {
            Temporary6 = subInt(j_654313573, 1);
            }
            else {
            Temporary6 = subInt((a_654313554).length, j_654313573);
            }
            
            var idx_654313601 = Temporary6;
              if ((idx_654313601 < 0)) Temporary7 = true; else {                Temporary7 = ((a_654313554).length - 1 < idx_654313601);              }            if (Temporary7) {
            invalidFormatString_654313549();
            }
            
            s_654313552[s_654313552_Idx].push.apply(s_654313552[s_654313552_Idx], a_654313554[chckIndx(idx_654313601, 0, (a_654313554).length - 1)]);;
            break;
          case 123:
            var j_654313605 = addInt(i_654313556, 2);
            var k_654313606 = 0;
            var negative_654313607 = (formatstr_654313553[chckIndx(j_654313605, 0, (formatstr_654313553).length - 1)] == 45);
            if (negative_654313607) {
            j_654313605 = addInt(j_654313605, 1);
            }
            
            var isNumber_654313612 = 0;
            Label8: do {
                Label9: while (true) {
                if (!((j_654313605 < (formatstr_654313553).length) && !((ConstSet3[formatstr_654313553[chckIndx(j_654313605, 0, (formatstr_654313553).length - 1)]] != undefined)))) break Label9;
                  if ((ConstSet4[formatstr_654313553[chckIndx(j_654313605, 0, (formatstr_654313553).length - 1)]] != undefined)) {
                  k_654313606 = subInt(addInt(mulInt(k_654313606, 10), formatstr_654313553[chckIndx(j_654313605, 0, (formatstr_654313553).length - 1)]), 48);
                  if ((isNumber_654313612 == 0)) {
                  isNumber_654313612 = 1;
                  }
                  
                  }
                  else {
                    isNumber_654313612 = -1;
                  }
                  
                  j_654313605 = addInt(j_654313605, 1);
                }
            } while (false);
            if ((isNumber_654313612 == 1)) {
            if (!(negative_654313607)) {
            Temporary10 = subInt(k_654313606, 1);
            }
            else {
            Temporary10 = subInt((a_654313554).length, k_654313606);
            }
            
            var idx_654313634 = Temporary10;
              if ((idx_654313634 < 0)) Temporary11 = true; else {                Temporary11 = ((a_654313554).length - 1 < idx_654313634);              }            if (Temporary11) {
            invalidFormatString_654313549();
            }
            
            s_654313552[s_654313552_Idx].push.apply(s_654313552[s_654313552_Idx], a_654313554[chckIndx(idx_654313634, 0, (a_654313554).length - 1)]);;
            }
            else {
              var x_654313638 = findNormalized_654313537(substr_33557906(formatstr_654313553, addInt(i_654313556, 2), subInt(j_654313605, 1)), a_654313554);
                if (!(0 <= x_654313638)) Temporary12 = false; else {                  Temporary12 = (x_654313638 < (a_654313554).length - 1);                }              if (Temporary12) {
              s_654313552[s_654313552_Idx].push.apply(s_654313552[s_654313552_Idx], a_654313554[chckIndx(addInt(x_654313638, 1), 0, (a_654313554).length - 1)]);;
              }
              else {
              invalidFormatString_654313549();
              }
              
            }
            
            i_654313556 = addInt(j_654313605, 1);
            break;
          case 97:
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
          case 103:
          case 104:
          case 105:
          case 106:
          case 107:
          case 108:
          case 109:
          case 110:
          case 111:
          case 112:
          case 113:
          case 114:
          case 115:
          case 116:
          case 117:
          case 118:
          case 119:
          case 120:
          case 121:
          case 122:
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
          case 73:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
          case 79:
          case 80:
          case 81:
          case 82:
          case 83:
          case 84:
          case 85:
          case 86:
          case 87:
          case 88:
          case 89:
          case 90:
          case 128:
          case 129:
          case 130:
          case 131:
          case 132:
          case 133:
          case 134:
          case 135:
          case 136:
          case 137:
          case 138:
          case 139:
          case 140:
          case 141:
          case 142:
          case 143:
          case 144:
          case 145:
          case 146:
          case 147:
          case 148:
          case 149:
          case 150:
          case 151:
          case 152:
          case 153:
          case 154:
          case 155:
          case 156:
          case 157:
          case 158:
          case 159:
          case 160:
          case 161:
          case 162:
          case 163:
          case 164:
          case 165:
          case 166:
          case 167:
          case 168:
          case 169:
          case 170:
          case 171:
          case 172:
          case 173:
          case 174:
          case 175:
          case 176:
          case 177:
          case 178:
          case 179:
          case 180:
          case 181:
          case 182:
          case 183:
          case 184:
          case 185:
          case 186:
          case 187:
          case 188:
          case 189:
          case 190:
          case 191:
          case 192:
          case 193:
          case 194:
          case 195:
          case 196:
          case 197:
          case 198:
          case 199:
          case 200:
          case 201:
          case 202:
          case 203:
          case 204:
          case 205:
          case 206:
          case 207:
          case 208:
          case 209:
          case 210:
          case 211:
          case 212:
          case 213:
          case 214:
          case 215:
          case 216:
          case 217:
          case 218:
          case 219:
          case 220:
          case 221:
          case 222:
          case 223:
          case 224:
          case 225:
          case 226:
          case 227:
          case 228:
          case 229:
          case 230:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 236:
          case 237:
          case 238:
          case 239:
          case 240:
          case 241:
          case 242:
          case 243:
          case 244:
          case 245:
          case 246:
          case 247:
          case 248:
          case 249:
          case 250:
          case 251:
          case 252:
          case 253:
          case 254:
          case 255:
          case 95:
            var j_654313642 = addInt(i_654313556, 1);
            Label13: do {
                Label14: while (true) {
                  if (!(j_654313642 < (formatstr_654313553).length)) Temporary15 = false; else {                    Temporary15 = (ConstSet6[formatstr_654313553[chckIndx(j_654313642, 0, (formatstr_654313553).length - 1)]] != undefined);                  }                if (!Temporary15) break Label14;
                  j_654313642 = addInt(j_654313642, 1);
                }
            } while (false);
            var x_654313651 = findNormalized_654313537(substr_33557906(formatstr_654313553, addInt(i_654313556, 1), subInt(j_654313642, 1)), a_654313554);
              if (!(0 <= x_654313651)) Temporary16 = false; else {                Temporary16 = (x_654313651 < (a_654313554).length - 1);              }            if (Temporary16) {
            s_654313552[s_654313552_Idx].push.apply(s_654313552[s_654313552_Idx], a_654313554[chckIndx(addInt(x_654313651, 1), 0, (a_654313554).length - 1)]);;
            }
            else {
            invalidFormatString_654313549();
            }
            
            i_654313556 = j_654313642;
            break;
          default: 
            invalidFormatString_654313549();
            break;
          }
          }
          else {
            addChar(s_654313552[s_654313552_Idx], formatstr_654313553[chckIndx(i_654313556, 0, (formatstr_654313553).length - 1)]);;
            i_654313556 = addInt(i_654313556, 1);
          }
          
        }
    } while (false);

  
}

function nsuFormatSingleElem(formatstr_654313671, a_654313672) {
  var result_654313673 = [[]];

    result_654313673[0] = nimCopy(null, mnewString(0), NTI33554439);
    nsuAddf(result_654313673, 0, formatstr_654313671, [nimCopy(null, a_654313672, NTI33554439)]);

  return result_654313673[0];

}

function HEX5BHEX5D_939524972(s_939524975, x_939524976) {
  var result_939524977 = [];

    var a_939524979 = x_939524976.a;
    var L_939524981 = addInt(subInt(x_939524976.b, a_939524979), 1);
    result_939524977 = nimCopy(null, mnewString(chckRange(L_939524981, 0, 2147483647)), NTI33554439);
    Label1: do {
      var i_939524986 = 0;
      var i_1543504038 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1543504038 < L_939524981)) break Label3;
            i_939524986 = i_1543504038;
            result_939524977[chckIndx(i_939524986, 0, (result_939524977).length - 1)] = s_939524975[chckIndx(addInt(i_939524986, a_939524979), 0, (s_939524975).length - 1)];
            i_1543504038 = addInt(i_1543504038, 1);
          }
      } while (false);
    } while (false);

  return result_939524977;

}

function HEX2EHEX2E_939524947(a_939524950, b_939524951) {
  var result_939524952 = ({a: 0, b: 0});

    result_939524952 = nimCopy(result_939524952, {a: a_939524950, b: b_939524951}, NTI721420349);

  return result_939524952;

}

function regex_2030043609(expect_2030043610) {

function succeedImpl_2030043624(inputInHEX60gensym20_2030043625, valueInHEX60gensym20_2030043626, tailInHEX60gensym20_2030043627) {
  var result_2030043629 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_2030043629 = nimCopy(result_2030043629, {kind: 0, value: nimCopy(null, valueInHEX60gensym20_2030043626, NTI33554439), tail: nimCopy(null, tailInHEX60gensym20_2030043627, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym20_2030043625, NTI33554439), expected: []}, NTI2030043268);

  return result_2030043629;

}

function failImpl_2030043631(inputInHEX60gensym20_2030043632, expectedInHEX60gensym20_2030043633, tailInHEX60gensym20_2030043634) {
  var result_2030043636 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_2030043636 = nimCopy(result_2030043636, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym20_2030043633, NTI2030043589), tail: nimCopy(null, tailInHEX60gensym20_2030043634, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym20_2030043632, NTI33554439), value: []}, NTI2030043268);

  return result_2030043636;

}
      expect_2030043610 = nimCopy(null, expect_2030043610, NTI33554439);
      
function HEX3Aanonymous_2030043639(input_2030043640) {
        var result_2030043642 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_2030043643 = succeedImpl_2030043624;
          var fail_2030043644 = failImpl_2030043631;
          var bounds_2030043645 = findBounds_2030043144(input_2030043640, expreg_2030043613);
          if (!((bounds_2030043645["Field0"] == 0))) {
          result_2030043642 = nimCopy(result_2030043642, fail_2030043644(input_2030043640, [nsuFormatSingleElem(makeNimstrLit("match for regex \'$1\'"), expect_2030043610)], input_2030043640), NTI2030043268);
          break BeforeRet;
          }
          
          result_2030043642 = nimCopy(result_2030043642, succeed_2030043643(input_2030043640, HEX5BHEX5D_939524972(input_2030043640, HEX2EHEX2E_939524947(0, bounds_2030043645["Field1"])), HEX5BHEX5D_939527322(input_2030043640, HEX2EHEX2E_872415312(addInt(bounds_2030043645["Field1"], 1), 1))), NTI2030043268);
        } while (false);

        return result_2030043642;

      }

  var result_2030043612 = null;

    var expreg_2030043613 = new RegExp(toJSStr(expect_2030043610));
    Label1: do {
    } while (false);
    result_2030043612 = {body: HEX3Aanonymous_2030043639};

  return result_2030043612;

}

function parse_2030044065(p_2030044067, input_2030044068) {
  var result_2030044069 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_2030044067.body == null)) {
    result_2030044069 = nimCopy(result_2030044069, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_2030044068, NTI33554439), fromInput: nimCopy(null, input_2030044068, NTI33554439), value: 0}, NTI2030043366);
    break BeforeRet;
    }
    
    result_2030044069 = nimCopy(result_2030044069, p_2030044067.body(input_2030044068), NTI2030043366);
  } while (false);

  return result_2030044069;

}

function HEX26_2013266015(x_2013266017, y_2013266018) {
  var result_2013266019 = [];

    result_2013266019 = new Array(chckRange(addInt((x_2013266017).length, (y_2013266018).length), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_2013266017).length, (y_2013266018).length), 0, 2147483647) ; ++i) { result_2013266019[i] = []; }    Label1: do {
      var i_2013266037 = 0;
      var colontmp__2030044353 = 0;
      colontmp__2030044353 = subInt((x_2013266017).length, 1);
      var res_2030044354 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_2030044354 <= colontmp__2030044353)) break Label3;
            i_2013266037 = res_2030044354;
            result_2013266019[chckIndx(i_2013266037, 0, (result_2013266019).length - 1)] = nimCopy(null, x_2013266017[chckIndx(i_2013266037, 0, (x_2013266017).length - 1)], NTI33554439);
            res_2030044354 = addInt(res_2030044354, 1);
          }
      } while (false);
    } while (false);
    Label4: do {
      var i_2013266045 = 0;
      var colontmp__2030044357 = 0;
      colontmp__2030044357 = subInt((y_2013266018).length, 1);
      var res_2030044358 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(res_2030044358 <= colontmp__2030044357)) break Label6;
            i_2013266045 = res_2030044358;
            result_2013266019[chckIndx(addInt(i_2013266045, (x_2013266017).length), 0, (result_2013266019).length - 1)] = nimCopy(null, y_2013266018[chckIndx(i_2013266045, 0, (y_2013266018).length - 1)], NTI33554439);
            res_2030044358 = addInt(res_2030044358, 1);
          }
      } while (false);
    } while (false);

  return result_2013266019;

}

function reprEnum(e_33557385, typ_33557386) {
  var result_33557387 = [];

    var tmp_33557388 = false;
    var item_33557389 = typ_33557386.node.sons[e_33557385];
    tmp_33557388 = item_33557389 !== undefined
    if (tmp_33557388) {
    result_33557387 = nimCopy(null, makeNimstrLit(item_33557389.name), NTI33554439);
    }
    else {
      result_33557387 = nimCopy(null, (HEX24_335544323(e_33557385) || []).concat(makeNimstrLit(" (invalid data!)") || []), NTI33554439);
    }
    

  return result_33557387;

}

function HEX7C_2030044209(a_2030044211, b_2030044212) {

function succeedImpl_2030044224(inputInHEX60gensym49_2030044225, valueInHEX60gensym49_2030044226, tailInHEX60gensym49_2030044227) {
  var result_2030044229 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_2030044229 = nimCopy(result_2030044229, {kind: 0, value: valueInHEX60gensym49_2030044226, tail: nimCopy(null, tailInHEX60gensym49_2030044227, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym49_2030044225, NTI33554439), expected: []}, NTI2030043366);

  return result_2030044229;

}

function failImpl_2030044231(inputInHEX60gensym49_2030044232, expectedInHEX60gensym49_2030044233, tailInHEX60gensym49_2030044234) {
  var result_2030044236 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_2030044236 = nimCopy(result_2030044236, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym49_2030044233, NTI2030044254), tail: nimCopy(null, tailInHEX60gensym49_2030044234, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym49_2030044232, NTI33554439), value: 0}, NTI2030043366);

  return result_2030044236;

}
      
function HEX3Aanonymous_2030044239(input_2030044240) {
          var Temporary1;
          var Temporary2;

        var result_2030044242 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_2030044243 = succeedImpl_2030044224;
          var fail_2030044244 = failImpl_2030044231;
          var result1_2030044257 = parse_2030044065(a_2030044211, input_2030044240);
          if ((result1_2030044257.kind == 0)) {
          result_2030044242 = nimCopy(result_2030044242, result1_2030044257, NTI2030043366);
          break BeforeRet;
          }
          
          var result2_2030044274 = parse_2030044065(b_2030044212, input_2030044240);
          if ((result2_2030044274.kind == 0)) {
          result_2030044242 = nimCopy(result_2030044242, result2_2030044274, NTI2030043366);
          break BeforeRet;
          }
          
          var Temporary1 = result1_2030044257;
          if (ConstSet7[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI2030043157)); }
          var Temporary2 = result2_2030044274;
          if (ConstSet8[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
          result_2030044242 = nimCopy(result_2030044242, fail_2030044244(input_2030044240, HEX26_2013266015(Temporary1.expected, Temporary2.expected), input_2030044240), NTI2030043366);
        } while (false);

        return result_2030044242;

      }

  var result_2030044213 = null;

    Label1: do {
    } while (false);
    result_2030044213 = {body: HEX3Aanonymous_2030044239};

  return result_2030044213;

}

function contains_1996488979(s_1996488983, value_1996488984) {
  var result_1996488985 = false;

    result_1996488985 = ((s_1996488983.a <= value_1996488984) && (value_1996488984 <= s_1996488983.b));

  return result_1996488985;

}

function nsuFormatOpenArray(formatstr_654313660, a_654313661) {
  var result_654313662 = [[]];

    result_654313662[0] = nimCopy(null, mnewString(0), NTI33554439);
    nsuAddf(result_654313662, 0, formatstr_654313660, a_654313661);

  return result_654313662[0];

}

function c_2030043543(expect_2030043545) {

function succeedImpl_2030043558(inputInHEX60gensym14_2030043559, valueInHEX60gensym14_2030043560, tailInHEX60gensym14_2030043561) {
  var result_2030043563 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_2030043563 = nimCopy(result_2030043563, {kind: 0, value: valueInHEX60gensym14_2030043560, tail: nimCopy(null, tailInHEX60gensym14_2030043561, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym14_2030043559, NTI33554439), expected: []}, NTI2030043366);

  return result_2030043563;

}

function failImpl_2030043565(inputInHEX60gensym14_2030043566, expectedInHEX60gensym14_2030043567, tailInHEX60gensym14_2030043568) {
  var result_2030043570 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_2030043570 = nimCopy(result_2030043570, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym14_2030043567, NTI2030043532), tail: nimCopy(null, tailInHEX60gensym14_2030043568, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym14_2030043566, NTI33554439), value: 0}, NTI2030043366);

  return result_2030043570;

}
      expect_2030043545 = nimCopy(null, expect_2030043545, NTI1996489346);
      
function HEX3Aanonymous_2030043573(input_2030043574) {
            var Temporary1;

        var result_2030043576 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_2030043577 = succeedImpl_2030043558;
          var fail_2030043578 = failImpl_2030043565;
            if (!(0 < (input_2030043574).length)) Temporary1 = false; else {              Temporary1 = contains_1996488979(expect_2030043545, input_2030043574[chckIndx(0, 0, (input_2030043574).length - 1)]);            }          if (Temporary1) {
          result_2030043576 = nimCopy(result_2030043576, succeed_2030043577(input_2030043574, input_2030043574[chckIndx(0, 0, (input_2030043574).length - 1)], HEX5BHEX5D_939527322(input_2030043574, HEX2EHEX2E_872415312(1, 1))), NTI2030043366);
          break BeforeRet;
          }
          
          result_2030043576 = nimCopy(result_2030043576, fail_2030043578(input_2030043574, [nsuFormatOpenArray(makeNimstrLit("character from $1..$2"), [nimCharToStr(expect_2030043545.a), nimCharToStr(expect_2030043545.b)])], input_2030043574), NTI2030043366);
        } while (false);

        return result_2030043576;

      }

  var result_2030043547 = null;

    Label1: do {
    } while (false);
    result_2030043547 = {body: HEX3Aanonymous_2030043573};

  return result_2030043547;

}

function HEX2EHEX2E_1996488909(a_1996488912, b_1996488913) {
  var result_1996488916 = ({a: 0, b: 0});

    result_1996488916 = nimCopy(result_1996488916, {a: a_1996488912, b: b_1996488913}, NTI1996489346);

  return result_1996488916;

}

function HEX3Aanonymous_2030044123(input_2030044124) {
  var result_2030044126 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    var succeed_2030044127 = succeedImpl_2030044108;
    var fail_2030044128 = failImpl_2030044115;
    if ((0 < (input_2030044124).length)) {
    result_2030044126 = nimCopy(result_2030044126, fail_2030044128(input_2030044124, [makeNimstrLit("EOF")], input_2030044124), NTI2030043268);
    break BeforeRet;
    }
    
    result_2030044126 = nimCopy(result_2030044126, succeed_2030044127(input_2030044124, [], []), NTI2030043268);
  } while (false);

  return result_2030044126;

}

function HEX3Aanonymous_2030044159(input_2030044160) {
  var result_2030044162 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    var succeed_2030044163 = succeedImpl_2030044144;
    var fail_2030044164 = failImpl_2030044151;
    if ((0 < (input_2030044160).length)) {
    result_2030044162 = nimCopy(result_2030044162, succeed_2030044163(input_2030044160, input_2030044160[chckIndx(0, 0, (input_2030044160).length - 1)], HEX5BHEX5D_939527322(input_2030044160, HEX2EHEX2E_872415312(1, 1))), NTI2030043366);
    break BeforeRet;
    }
    
    result_2030044162 = nimCopy(result_2030044162, fail_2030044164(input_2030044160, [makeNimstrLit("any character")], input_2030044160), NTI2030043366);
  } while (false);

  return result_2030044162;

}
Label1: do {
} while (false);
var eofImpl_2030044133 = {body: HEX3Aanonymous_2030044123};
Label2: do {
} while (false);
var anyCharImpl_2030044187 = {body: HEX3Aanonymous_2030044159};
var eof_2030044188 = eofImpl_2030044133;
var anyChar_2030044189 = anyCharImpl_2030044187;
var whitespace_2030044190 = regex_2030043609(makeNimstrLit("\\s+"));
var letter_2030044283 = HEX7C_2030044209(c_2030043543(HEX2EHEX2E_1996488909(97, 122)), c_2030043543(HEX2EHEX2E_1996488909(65, 90)));
var digit_2030044289 = c_2030043543(HEX2EHEX2E_1996488909(48, 57));
var alphanumeric_2030044302 = HEX7C_2030044209(letter_2030044283, digit_2030044289);

function parse_1979714062(p_1979714064, input_1979714065) {
  var result_1979714066 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_1979714064.body == null)) {
    result_1979714066 = nimCopy(result_1979714066, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_1979714065, NTI33554439), fromInput: nimCopy(null, input_1979714065, NTI33554439), value: []}, NTI1979712796);
    break BeforeRet;
    }
    
    result_1979714066 = nimCopy(result_1979714066, p_1979714064.body(input_1979714065), NTI1979712796);
  } while (false);

  return result_1979714066;

}

function map_1979714243(a_1979714246, fn_1979714248) {

function succeedImpl_1979714260(inputInHEX60gensym43_1979714261, valueInHEX60gensym43_1979714262, tailInHEX60gensym43_1979714263) {
  var result_1979714265 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979714265 = nimCopy(result_1979714265, {kind: 0, value: nimCopy(null, valueInHEX60gensym43_1979714262, NTI452985127), tail: nimCopy(null, tailInHEX60gensym43_1979714263, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym43_1979714261, NTI33554439), expected: []}, NTI1979712330);

  return result_1979714265;

}

function failImpl_1979714267(inputInHEX60gensym43_1979714268, expectedInHEX60gensym43_1979714269, tailInHEX60gensym43_1979714270) {
  var result_1979714272 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979714272 = nimCopy(result_1979714272, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym43_1979714269, NTI1979713386), tail: nimCopy(null, tailInHEX60gensym43_1979714270, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym43_1979714268, NTI33554439), value: []}, NTI1979712330);

  return result_1979714272;

}
      
function HEX3Aanonymous_1979714275(input_1979714276) {
            var Temporary2;
          var Temporary3;

        var result_1979714278 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979714279 = succeedImpl_1979714260;
          var fail_1979714280 = failImpl_1979714267;
          Label1: do {
            var tempHEX60gensym24_1979714293 = parse_1979714062(a_1979714246, input_1979714276);
            if ((tempHEX60gensym24_1979714293.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_1979714293;
            if (ConstSet9[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979714278 = nimCopy(result_1979714278, {kind: 1, fromInput: nimCopy(null, input_1979714276, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym24_1979714293.tail, NTI33554439), value: []}, NTI1979712330);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979714299 = nimCopy(null, tempHEX60gensym24_1979714293, NTI1979712796);
          var Temporary3 = result1_1979714299;
          if (ConstSet10[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI2030043157)); }
          result_1979714278 = nimCopy(result_1979714278, succeed_1979714279(input_1979714276, fn_1979714248(Temporary3.value), result1_1979714299.tail), NTI1979712330);
          break BeforeRet;
        } while (false);

        return result_1979714278;

      }

  var result_1979714249 = null;

    Label1: do {
    } while (false);
    result_1979714249 = {body: HEX3Aanonymous_1979714275};

  return result_1979714249;

}

function HEX26_1979714104(x_1979714106, y_1979714107) {
  var result_1979714108 = [];

    result_1979714108 = new Array(chckRange(addInt((x_1979714106).length, (y_1979714107).length), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_1979714106).length, (y_1979714107).length), 0, 2147483647) ; ++i) { result_1979714108[i] = []; }    Label1: do {
      var i_1979714127 = 0;
      var colontmp__1962934345 = 0;
      colontmp__1962934345 = subInt((x_1979714106).length, 1);
      var res_1962934346 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_1962934346 <= colontmp__1962934345)) break Label3;
            i_1979714127 = res_1962934346;
            result_1979714108[chckIndx(i_1979714127, 0, (result_1979714108).length - 1)] = nimCopy(null, x_1979714106[chckIndx(i_1979714127, 0, (x_1979714106).length - 1)], NTI1979712324);
            res_1962934346 = addInt(res_1962934346, 1);
          }
      } while (false);
    } while (false);
    Label4: do {
      var i_1979714135 = 0;
      var colontmp__1962934349 = 0;
      colontmp__1962934349 = subInt((y_1979714107).length, 1);
      var res_1962934350 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(res_1962934350 <= colontmp__1962934349)) break Label6;
            i_1979714135 = res_1962934350;
            result_1979714108[chckIndx(addInt(i_1979714135, (x_1979714106).length), 0, (result_1979714108).length - 1)] = nimCopy(null, y_1979714107[chckIndx(i_1979714135, 0, (y_1979714107).length - 1)], NTI1979712324);
            res_1962934350 = addInt(res_1962934350, 1);
          }
      } while (false);
    } while (false);

  return result_1979714108;

}

function HEX26_1979714009(a_1979714014, b_1979714018) {

function succeedImpl_1979714033(inputInHEX60gensym37_1979714034, valueInHEX60gensym37_1979714035, tailInHEX60gensym37_1979714036) {
  var result_1979714038 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979714038 = nimCopy(result_1979714038, {kind: 0, value: nimCopy(null, valueInHEX60gensym37_1979714035, NTI1979713196), tail: nimCopy(null, tailInHEX60gensym37_1979714036, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym37_1979714034, NTI33554439), expected: []}, NTI1979712796);

  return result_1979714038;

}

function failImpl_1979714040(inputInHEX60gensym37_1979714041, expectedInHEX60gensym37_1979714042, tailInHEX60gensym37_1979714043) {
  var result_1979714045 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979714045 = nimCopy(result_1979714045, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym37_1979714042, NTI1979713202), tail: nimCopy(null, tailInHEX60gensym37_1979714043, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym37_1979714041, NTI33554439), value: []}, NTI1979712796);

  return result_1979714045;

}
      
function HEX3Aanonymous_1979714048(input_1979714049) {
            var Temporary2;
            var Temporary4;
          var Temporary5;
          var Temporary6;

        var result_1979714051 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979714052 = succeedImpl_1979714033;
          var fail_1979714053 = failImpl_1979714040;
          Label1: do {
            var tempHEX60gensym26_1979714078 = parse_1979714062(a_1979714014, input_1979714049);
            if ((tempHEX60gensym26_1979714078.kind == 1)) {
            var Temporary2 = tempHEX60gensym26_1979714078;
            if (ConstSet11[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979714051 = nimCopy(result_1979714051, {kind: 1, fromInput: nimCopy(null, input_1979714049, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym26_1979714078.tail, NTI33554439), value: []}, NTI1979712796);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979714084 = nimCopy(null, tempHEX60gensym26_1979714078, NTI1979712796);
          Label3: do {
            var tempHEX60gensym28_1979714097 = parse_1979714062(b_1979714018, result1_1979714084.tail);
            if ((tempHEX60gensym28_1979714097.kind == 1)) {
            var Temporary4 = tempHEX60gensym28_1979714097;
            if (ConstSet12[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI2030043157)); }
            result_1979714051 = nimCopy(result_1979714051, {kind: 1, fromInput: nimCopy(null, input_1979714049, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym28_1979714097.tail, NTI33554439), value: []}, NTI1979712796);
            break BeforeRet;
            }
            
          } while (false);
          var result2_1979714103 = nimCopy(null, tempHEX60gensym28_1979714097, NTI1979712796);
          var Temporary5 = result1_1979714084;
          if (ConstSet13[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI2030043157)); }
          var Temporary6 = result2_1979714103;
          if (ConstSet14[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI2030043157)); }
          result_1979714051 = nimCopy(result_1979714051, succeed_1979714052(input_1979714049, HEX26_1979714104(Temporary5.value, Temporary6.value), result2_1979714103.tail), NTI1979712796);
          break BeforeRet;
        } while (false);

        return result_1979714051;

      }

  var result_1979714022 = null;

    Label1: do {
    } while (false);
    result_1979714022 = {body: HEX3Aanonymous_1979714048};

  return result_1979714022;

}

function parse_1979713530(p_1979713532, input_1979713533) {
  var result_1979713534 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_1979713532.body == null)) {
    result_1979713534 = nimCopy(result_1979713534, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_1979713533, NTI33554439), fromInput: nimCopy(null, input_1979713533, NTI33554439), value: []}, NTI1979712330);
    break BeforeRet;
    }
    
    result_1979713534 = nimCopy(result_1979713534, p_1979713532.body(input_1979713533), NTI1979712330);
  } while (false);

  return result_1979713534;

}

function map_1979713764(a_1979713767, fn_1979713769) {

function succeedImpl_1979713781(inputInHEX60gensym33_1979713782, valueInHEX60gensym33_1979713783, tailInHEX60gensym33_1979713784) {
  var result_1979713786 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979713786 = nimCopy(result_1979713786, {kind: 0, value: nimCopy(null, valueInHEX60gensym33_1979713783, NTI1979712905), tail: nimCopy(null, tailInHEX60gensym33_1979713784, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym33_1979713782, NTI33554439), expected: []}, NTI1979712796);

  return result_1979713786;

}

function failImpl_1979713788(inputInHEX60gensym33_1979713789, expectedInHEX60gensym33_1979713790, tailInHEX60gensym33_1979713791) {
  var result_1979713793 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979713793 = nimCopy(result_1979713793, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym33_1979713790, NTI1979712956), tail: nimCopy(null, tailInHEX60gensym33_1979713791, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym33_1979713789, NTI33554439), value: []}, NTI1979712796);

  return result_1979713793;

}
      
function HEX3Aanonymous_1979713796(input_1979713797) {
            var Temporary2;
          var Temporary3;

        var result_1979713799 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979713800 = succeedImpl_1979713781;
          var fail_1979713801 = failImpl_1979713788;
          Label1: do {
            var tempHEX60gensym24_1979713814 = parse_1979713530(a_1979713767, input_1979713797);
            if ((tempHEX60gensym24_1979713814.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_1979713814;
            if (ConstSet15[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979713799 = nimCopy(result_1979713799, {kind: 1, fromInput: nimCopy(null, input_1979713797, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym24_1979713814.tail, NTI33554439), value: []}, NTI1979712796);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979713820 = nimCopy(null, tempHEX60gensym24_1979713814, NTI1979712330);
          var Temporary3 = result1_1979713820;
          if (ConstSet16[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI2030043157)); }
          result_1979713799 = nimCopy(result_1979713799, succeed_1979713800(input_1979713797, fn_1979713769(Temporary3.value), result1_1979713820.tail), NTI1979712796);
          break BeforeRet;
        } while (false);

        return result_1979713799;

      }

  var result_1979713770 = null;

    Label1: do {
    } while (false);
    result_1979713770 = {body: HEX3Aanonymous_1979713796};

  return result_1979713770;

}

function nop_1979713110() {

function succeedImpl_1979713123(inputInHEX60gensym23_1979713124, valueInHEX60gensym23_1979713125, tailInHEX60gensym23_1979713126) {
  var result_1979713128 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979713128 = nimCopy(result_1979713128, {kind: 0, value: nimCopy(null, valueInHEX60gensym23_1979713125, NTI1979712384), tail: nimCopy(null, tailInHEX60gensym23_1979713126, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym23_1979713124, NTI33554439), expected: []}, NTI1979712330);

  return result_1979713128;

}

function failImpl_1979713142(inputInHEX60gensym23_1979713143, expectedInHEX60gensym23_1979713144, tailInHEX60gensym23_1979713145) {
  var result_1979713147 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979713147 = nimCopy(result_1979713147, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym23_1979713144, NTI1979712411), tail: nimCopy(null, tailInHEX60gensym23_1979713145, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym23_1979713143, NTI33554439), value: []}, NTI1979712330);

  return result_1979713147;

}
      
function HEX3Aanonymous_1979713150(input_1979713151) {
        var result_1979713153 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          var succeed_1979713154 = succeedImpl_1979713123;
          var fail_1979713155 = failImpl_1979713142;
          result_1979713153 = nimCopy(result_1979713153, succeed_1979713154(input_1979713151, [], input_1979713151), NTI1979712330);

        return result_1979713153;

      }

  var result_1979713112 = null;

    Label1: do {
    } while (false);
    result_1979713112 = {body: HEX3Aanonymous_1979713150};

  return result_1979713112;

}

function parse_1979713292(p_1979713294, input_1979713295) {
  var result_1979713296 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_1979713294.body == null)) {
    result_1979713296 = nimCopy(result_1979713296, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_1979713295, NTI33554439), fromInput: nimCopy(null, input_1979713295, NTI33554439), value: []}, NTI2030043268);
    break BeforeRet;
    }
    
    result_1979713296 = nimCopy(result_1979713296, p_1979713294.body(input_1979713295), NTI2030043268);
  } while (false);

  return result_1979713296;

}

function map_1979713246(a_1979713249, fn_1979713251) {

function succeedImpl_1979713263(inputInHEX60gensym25_1979713264, valueInHEX60gensym25_1979713265, tailInHEX60gensym25_1979713266) {
  var result_1979713268 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979713268 = nimCopy(result_1979713268, {kind: 0, value: nimCopy(null, valueInHEX60gensym25_1979713265, NTI1660944992), tail: nimCopy(null, tailInHEX60gensym25_1979713266, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym25_1979713264, NTI33554439), expected: []}, NTI1979712330);

  return result_1979713268;

}

function failImpl_1979713270(inputInHEX60gensym25_1979713271, expectedInHEX60gensym25_1979713272, tailInHEX60gensym25_1979713273) {
  var result_1979713275 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979713275 = nimCopy(result_1979713275, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym25_1979713272, NTI1979712519), tail: nimCopy(null, tailInHEX60gensym25_1979713273, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym25_1979713271, NTI33554439), value: []}, NTI1979712330);

  return result_1979713275;

}
      
function HEX3Aanonymous_1979713278(input_1979713279) {
            var Temporary2;
          var Temporary3;

        var result_1979713281 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979713282 = succeedImpl_1979713263;
          var fail_1979713283 = failImpl_1979713270;
          Label1: do {
            var tempHEX60gensym24_1979713308 = parse_1979713292(a_1979713249, input_1979713279);
            if ((tempHEX60gensym24_1979713308.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_1979713308;
            if (ConstSet17[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979713281 = nimCopy(result_1979713281, {kind: 1, fromInput: nimCopy(null, input_1979713279, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym24_1979713308.tail, NTI33554439), value: []}, NTI1979712330);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979713314 = nimCopy(null, tempHEX60gensym24_1979713308, NTI2030043268);
          var Temporary3 = result1_1979713314;
          if (ConstSet18[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI2030043157)); }
          result_1979713281 = nimCopy(result_1979713281, succeed_1979713282(input_1979713279, fn_1979713251(Temporary3.value), result1_1979713314.tail), NTI1979712330);
          break BeforeRet;
        } while (false);

        return result_1979713281;

      }

  var result_1979713252 = null;

    Label1: do {
    } while (false);
    result_1979713252 = {body: HEX3Aanonymous_1979713278};

  return result_1979713252;

}

function HEX2A_1979713102(a_1979713104, n_1979713105) {
    var Temporary1;
      
function HEX3Aanonymous_1979713209(x_1979713229) {
        var result_1979713232 = [];

          result_1979713232 = nimCopy(null, [nimCopy(null, x_1979713229, NTI33554439)], NTI1660944992);

        return result_1979713232;

      }

function succeedImpl_1979713325(inputInHEX60gensym26_1979713326, valueInHEX60gensym26_1979713327, tailInHEX60gensym26_1979713328) {
  var result_1979713330 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979713330 = nimCopy(result_1979713330, {kind: 0, value: nimCopy(null, valueInHEX60gensym26_1979713327, NTI1979712571), tail: nimCopy(null, tailInHEX60gensym26_1979713328, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym26_1979713326, NTI33554439), expected: []}, NTI1979712330);

  return result_1979713330;

}

function failImpl_1979713332(inputInHEX60gensym26_1979713333, expectedInHEX60gensym26_1979713334, tailInHEX60gensym26_1979713335) {
  var result_1979713337 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979713337 = nimCopy(result_1979713337, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym26_1979713334, NTI1979712577), tail: nimCopy(null, tailInHEX60gensym26_1979713335, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym26_1979713333, NTI33554439), value: []}, NTI1979712330);

  return result_1979713337;

}
        
function HEX3Aanonymous_1979713340(input_1979713341) {
              var Temporary2;
            var Temporary3;
                      var Temporary8;
                    var Temporary9;

          var result_1979713343 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          BeforeRet: do {
            var succeed_1979713344 = succeedImpl_1979713325;
            var fail_1979713345 = failImpl_1979713332;
            Label1: do {
              var tempHEX60gensym38_1979713358 = parse_1979713292(a_1979713104, input_1979713341);
              if ((tempHEX60gensym38_1979713358.kind == 1)) {
              var Temporary2 = tempHEX60gensym38_1979713358;
              if (ConstSet19[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
              result_1979713343 = nimCopy(result_1979713343, {kind: 1, fromInput: nimCopy(null, input_1979713341, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym38_1979713358.tail, NTI33554439), value: []}, NTI1979712330);
              break BeforeRet;
              }
              
            } while (false);
            var result1_1979713364 = nimCopy(null, tempHEX60gensym38_1979713358, NTI2030043268);
            var Temporary3 = result1_1979713364;
            if (ConstSet20[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI2030043157)); }
            var outputs_1979713369 = [nimCopy(null, Temporary3.value, NTI33554439)];
            var lastTail_1979713370 = nimCopy(null, result1_1979713364.tail, NTI33554439);
            Label4: do {
              var i_1979713376 = 0;
              var res_1962934358 = 2;
              Label5: do {
                  Label6: while (true) {
                  if (!(res_1962934358 <= n_1979713105)) break Label6;
                    i_1979713376 = res_1962934358;
                    Label7: do {
                      var tempHEX60gensym40_1979713389 = parse_1979713292(a_1979713104, result1_1979713364.tail);
                      if ((tempHEX60gensym40_1979713389.kind == 1)) {
                      var Temporary8 = tempHEX60gensym40_1979713389;
                      if (ConstSet21[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI2030043157)); }
                      result_1979713343 = nimCopy(result_1979713343, {kind: 1, fromInput: nimCopy(null, input_1979713341, NTI33554439), expected: nimCopy(null, Temporary8.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym40_1979713389.tail, NTI33554439), value: []}, NTI1979712330);
                      break BeforeRet;
                      }
                      
                    } while (false);
                    result1_1979713364 = nimCopy(result1_1979713364, tempHEX60gensym40_1979713389, NTI2030043268);
                    if (eqStrings(result1_1979713364.tail, lastTail_1979713370)) {
                    break Label4;
                    }
                    
                    lastTail_1979713370 = nimCopy(null, result1_1979713364.tail, NTI33554439);
                    var Temporary9 = result1_1979713364;
                    if (ConstSet22[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI2030043157)); }
                    var Temporary10 = nimCopy(null, Temporary9.value, NTI33554439);
                    outputs_1979713369.push(Temporary10);;
                    res_1962934358 = addInt(res_1962934358, 1);
                  }
              } while (false);
            } while (false);
            result_1979713343 = nimCopy(result_1979713343, succeed_1979713344(input_1979713341, outputs_1979713369, result1_1979713364.tail), NTI1979712330);
          } while (false);

          return result_1979713343;

        }

  var result_1979713109 = null;

  BeforeRet: do {
    switch (n_1979713105) {
    case 0:
      result_1979713109 = nop_1979713110();
      break BeforeRet;
      break;
    case 1:
      result_1979713109 = map_1979713246(a_1979713104, HEX3Aanonymous_1979713209);
      break BeforeRet;
      break;
    default: 
      Label2: do {
      } while (false);
      Temporary1 = {body: HEX3Aanonymous_1979713340};
      break;
    }
    result_1979713109 = Temporary1;
  } while (false);

  return result_1979713109;

}

function nop_1979713601() {

function succeedImpl_1979713614(inputInHEX60gensym31_1979713615, valueInHEX60gensym31_1979713616, tailInHEX60gensym31_1979713617) {
  var result_1979713619 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979713619 = nimCopy(result_1979713619, {kind: 0, value: nimCopy(null, valueInHEX60gensym31_1979713616, NTI1979712803), tail: nimCopy(null, tailInHEX60gensym31_1979713617, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym31_1979713615, NTI33554439), expected: []}, NTI1979712796);

  return result_1979713619;

}

function failImpl_1979713642(inputInHEX60gensym31_1979713643, expectedInHEX60gensym31_1979713644, tailInHEX60gensym31_1979713645) {
  var result_1979713647 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979713647 = nimCopy(result_1979713647, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym31_1979713644, NTI1979712836), tail: nimCopy(null, tailInHEX60gensym31_1979713645, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym31_1979713643, NTI33554439), value: []}, NTI1979712796);

  return result_1979713647;

}
      
function HEX3Aanonymous_1979713650(input_1979713651) {
        var result_1979713653 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          var succeed_1979713654 = succeedImpl_1979713614;
          var fail_1979713655 = failImpl_1979713642;
          result_1979713653 = nimCopy(result_1979713653, succeed_1979713654(input_1979713651, [], input_1979713651), NTI1979712796);

        return result_1979713653;

      }

  var result_1979713603 = null;

    Label1: do {
    } while (false);
    result_1979713603 = {body: HEX3Aanonymous_1979713650};

  return result_1979713603;

}

function HEX2A_1979713588(a_1979713590, n_1979713591) {
    var Temporary1;
      
function HEX3Aanonymous_1979713718(x_1979713747) {
        var result_1979713750 = [];

          result_1979713750 = nimCopy(null, [nimCopy(null, x_1979713747, NTI1979712324)], NTI1979712905);

        return result_1979713750;

      }

function succeedImpl_1979713831(inputInHEX60gensym34_1979713832, valueInHEX60gensym34_1979713833, tailInHEX60gensym34_1979713834) {
  var result_1979713836 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979713836 = nimCopy(result_1979713836, {kind: 0, value: nimCopy(null, valueInHEX60gensym34_1979713833, NTI1979712996), tail: nimCopy(null, tailInHEX60gensym34_1979713834, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym34_1979713832, NTI33554439), expected: []}, NTI1979712796);

  return result_1979713836;

}

function failImpl_1979713838(inputInHEX60gensym34_1979713839, expectedInHEX60gensym34_1979713840, tailInHEX60gensym34_1979713841) {
  var result_1979713843 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979713843 = nimCopy(result_1979713843, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym34_1979713840, NTI1979713002), tail: nimCopy(null, tailInHEX60gensym34_1979713841, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym34_1979713839, NTI33554439), value: []}, NTI1979712796);

  return result_1979713843;

}
        
function HEX3Aanonymous_1979713846(input_1979713847) {
              var Temporary2;
            var Temporary3;
                      var Temporary8;
                    var Temporary9;

          var result_1979713849 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          BeforeRet: do {
            var succeed_1979713850 = succeedImpl_1979713831;
            var fail_1979713851 = failImpl_1979713838;
            Label1: do {
              var tempHEX60gensym38_1979713864 = parse_1979713530(a_1979713590, input_1979713847);
              if ((tempHEX60gensym38_1979713864.kind == 1)) {
              var Temporary2 = tempHEX60gensym38_1979713864;
              if (ConstSet23[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
              result_1979713849 = nimCopy(result_1979713849, {kind: 1, fromInput: nimCopy(null, input_1979713847, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym38_1979713864.tail, NTI33554439), value: []}, NTI1979712796);
              break BeforeRet;
              }
              
            } while (false);
            var result1_1979713870 = nimCopy(null, tempHEX60gensym38_1979713864, NTI1979712330);
            var Temporary3 = result1_1979713870;
            if (ConstSet24[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI2030043157)); }
            var outputs_1979713875 = [nimCopy(null, Temporary3.value, NTI1979712324)];
            var lastTail_1979713876 = nimCopy(null, result1_1979713870.tail, NTI33554439);
            Label4: do {
              var i_1979713882 = 0;
              var res_1962934367 = 2;
              Label5: do {
                  Label6: while (true) {
                  if (!(res_1962934367 <= n_1979713591)) break Label6;
                    i_1979713882 = res_1962934367;
                    Label7: do {
                      var tempHEX60gensym40_1979713895 = parse_1979713530(a_1979713590, result1_1979713870.tail);
                      if ((tempHEX60gensym40_1979713895.kind == 1)) {
                      var Temporary8 = tempHEX60gensym40_1979713895;
                      if (ConstSet25[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI2030043157)); }
                      result_1979713849 = nimCopy(result_1979713849, {kind: 1, fromInput: nimCopy(null, input_1979713847, NTI33554439), expected: nimCopy(null, Temporary8.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym40_1979713895.tail, NTI33554439), value: []}, NTI1979712796);
                      break BeforeRet;
                      }
                      
                    } while (false);
                    result1_1979713870 = nimCopy(result1_1979713870, tempHEX60gensym40_1979713895, NTI1979712330);
                    if (eqStrings(result1_1979713870.tail, lastTail_1979713876)) {
                    break Label4;
                    }
                    
                    lastTail_1979713876 = nimCopy(null, result1_1979713870.tail, NTI33554439);
                    var Temporary9 = result1_1979713870;
                    if (ConstSet26[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI2030043157)); }
                    var Temporary10 = nimCopy(null, Temporary9.value, NTI1979712324);
                    outputs_1979713875.push(Temporary10);;
                    res_1962934367 = addInt(res_1962934367, 1);
                  }
              } while (false);
            } while (false);
            result_1979713849 = nimCopy(result_1979713849, succeed_1979713850(input_1979713847, outputs_1979713875, result1_1979713870.tail), NTI1979712796);
          } while (false);

          return result_1979713849;

        }

  var result_1979713600 = null;

  BeforeRet: do {
    switch (n_1979713591) {
    case 0:
      result_1979713600 = nop_1979713601();
      break BeforeRet;
      break;
    case 1:
      result_1979713600 = map_1979713764(a_1979713590, HEX3Aanonymous_1979713718);
      break BeforeRet;
      break;
    default: 
      Label2: do {
      } while (false);
      Temporary1 = {body: HEX3Aanonymous_1979713846};
      break;
    }
    result_1979713600 = Temporary1;
  } while (false);

  return result_1979713600;

}

function HEX7C_1979713486(a_1979713488, b_1979713489) {

function succeedImpl_1979713501(inputInHEX60gensym30_1979713502, valueInHEX60gensym30_1979713503, tailInHEX60gensym30_1979713504) {
  var result_1979713506 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979713506 = nimCopy(result_1979713506, {kind: 0, value: nimCopy(null, valueInHEX60gensym30_1979713503, NTI1979712324), tail: nimCopy(null, tailInHEX60gensym30_1979713504, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym30_1979713502, NTI33554439), expected: []}, NTI1979712330);

  return result_1979713506;

}

function failImpl_1979713508(inputInHEX60gensym30_1979713509, expectedInHEX60gensym30_1979713510, tailInHEX60gensym30_1979713511) {
  var result_1979713513 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979713513 = nimCopy(result_1979713513, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym30_1979713510, NTI1979712741), tail: nimCopy(null, tailInHEX60gensym30_1979713511, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym30_1979713509, NTI33554439), value: []}, NTI1979712330);

  return result_1979713513;

}
      
function HEX3Aanonymous_1979713516(input_1979713517) {
          var Temporary1;
          var Temporary2;

        var result_1979713519 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979713520 = succeedImpl_1979713501;
          var fail_1979713521 = failImpl_1979713508;
          var result1_1979713546 = parse_1979713530(a_1979713488, input_1979713517);
          if ((result1_1979713546.kind == 0)) {
          result_1979713519 = nimCopy(result_1979713519, result1_1979713546, NTI1979712330);
          break BeforeRet;
          }
          
          var result2_1979713563 = parse_1979713530(b_1979713489, input_1979713517);
          if ((result2_1979713563.kind == 0)) {
          result_1979713519 = nimCopy(result_1979713519, result2_1979713563, NTI1979712330);
          break BeforeRet;
          }
          
          var Temporary1 = result1_1979713546;
          if (ConstSet27[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI2030043157)); }
          var Temporary2 = result2_1979713563;
          if (ConstSet28[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
          result_1979713519 = nimCopy(result_1979713519, fail_1979713521(input_1979713517, HEX26_2013266015(Temporary1.expected, Temporary2.expected), input_1979713517), NTI1979712330);
        } while (false);

        return result_1979713519;

      }

  var result_1979713490 = null;

    Label1: do {
    } while (false);
    result_1979713490 = {body: HEX3Aanonymous_1979713516};

  return result_1979713490;

}

function newSeq_452985301(len_452985303) {
  var result_452985304 = [];

    result_452985304 = new Array(len_452985303); for (var i = 0 ; i < len_452985303 ; ++i) { result_452985304[i] = []; }
  return result_452985304;

}

function sysFatal_218103842(message_218103845) {
    raiseException({message: nimCopy(null, message_218103845, NTI33554439), m_type: NTI33555124, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}

function raiseAssert_218103840(msg_218103841) {
    sysFatal_218103842(msg_218103841);

  
}

function failedAssertImpl_218103864(msg_218103865) {
    raiseAssert_218103840(msg_218103865);

  
}

function parse_1979714814(p_1979714816, input_1979714817) {
  var result_1979714818 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_1979714816.body == null)) {
    result_1979714818 = nimCopy(result_1979714818, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_1979714817, NTI33554439), fromInput: nimCopy(null, input_1979714817, NTI33554439), value: []}, NTI1979713435);
    break BeforeRet;
    }
    
    result_1979714818 = nimCopy(result_1979714818, p_1979714816.body(input_1979714817), NTI1979713435);
  } while (false);

  return result_1979714818;

}

function map_1979715660(a_1979715663, fn_1979715665) {

function succeedImpl_1979715677(inputInHEX60gensym70_1979715678, valueInHEX60gensym70_1979715679, tailInHEX60gensym70_1979715680) {
  var result_1979715682 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_1979715682 = nimCopy(result_1979715682, {kind: 0, value: nimCopy(null, valueInHEX60gensym70_1979715679, NTI2013265924), tail: nimCopy(null, tailInHEX60gensym70_1979715680, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym70_1979715678, NTI33554439), expected: []}, NTI1979713420);

  return result_1979715682;

}

function failImpl_1979715684(inputInHEX60gensym70_1979715685, expectedInHEX60gensym70_1979715686, tailInHEX60gensym70_1979715687) {
  var result_1979715689 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_1979715689 = nimCopy(result_1979715689, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym70_1979715686, NTI1979714610), tail: nimCopy(null, tailInHEX60gensym70_1979715687, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym70_1979715685, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);

  return result_1979715689;

}
      
function HEX3Aanonymous_1979715692(input_1979715693) {
            var Temporary2;
          var Temporary3;

        var result_1979715695 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979715696 = succeedImpl_1979715677;
          var fail_1979715697 = failImpl_1979715684;
          Label1: do {
            var tempHEX60gensym24_1979715710 = parse_1979714814(a_1979715663, input_1979715693);
            if ((tempHEX60gensym24_1979715710.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_1979715710;
            if (ConstSet29[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979715695 = nimCopy(result_1979715695, {kind: 1, fromInput: nimCopy(null, input_1979715693, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym24_1979715710.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979715716 = nimCopy(null, tempHEX60gensym24_1979715710, NTI1979713435);
          var Temporary3 = result1_1979715716;
          if (ConstSet30[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI2030043157)); }
          result_1979715695 = nimCopy(result_1979715695, succeed_1979715696(input_1979715693, fn_1979715665(Temporary3.value), result1_1979715716.tail), NTI1979713420);
          break BeforeRet;
        } while (false);

        return result_1979715695;

      }

  var result_1979715666 = null;

    Label1: do {
    } while (false);
    result_1979715666 = {body: HEX3Aanonymous_1979715692};

  return result_1979715666;

}

function parse_1979715346(p_1979715348, input_1979715349) {
  var result_1979715350 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_1979715348.body == null)) {
    result_1979715350 = nimCopy(result_1979715350, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_1979715349, NTI33554439), fromInput: nimCopy(null, input_1979715349, NTI33554439), value: []}, NTI1979713920);
    break BeforeRet;
    }
    
    result_1979715350 = nimCopy(result_1979715350, p_1979715348.body(input_1979715349), NTI1979713920);
  } while (false);

  return result_1979715350;

}

function map_1979715566(a_1979715569, fn_1979715571) {

function succeedImpl_1979715583(inputInHEX60gensym69_1979715584, valueInHEX60gensym69_1979715585, tailInHEX60gensym69_1979715586) {
  var result_1979715588 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979715588 = nimCopy(result_1979715588, {kind: 0, value: nimCopy(null, valueInHEX60gensym69_1979715585, NTI2013266111), tail: nimCopy(null, tailInHEX60gensym69_1979715586, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym69_1979715584, NTI33554439), expected: []}, NTI1979713435);

  return result_1979715588;

}

function failImpl_1979715590(inputInHEX60gensym69_1979715591, expectedInHEX60gensym69_1979715592, tailInHEX60gensym69_1979715593) {
  var result_1979715595 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979715595 = nimCopy(result_1979715595, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym69_1979715592, NTI1979714537), tail: nimCopy(null, tailInHEX60gensym69_1979715593, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym69_1979715591, NTI33554439), value: []}, NTI1979713435);

  return result_1979715595;

}
      
function HEX3Aanonymous_1979715598(input_1979715599) {
            var Temporary2;
          var Temporary3;

        var result_1979715601 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979715602 = succeedImpl_1979715583;
          var fail_1979715603 = failImpl_1979715590;
          Label1: do {
            var tempHEX60gensym24_1979715616 = parse_1979715346(a_1979715569, input_1979715599);
            if ((tempHEX60gensym24_1979715616.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_1979715616;
            if (ConstSet31[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979715601 = nimCopy(result_1979715601, {kind: 1, fromInput: nimCopy(null, input_1979715599, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym24_1979715616.tail, NTI33554439), value: []}, NTI1979713435);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979715622 = nimCopy(null, tempHEX60gensym24_1979715616, NTI1979713920);
          var Temporary3 = result1_1979715622;
          if (ConstSet32[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI2030043157)); }
          result_1979715601 = nimCopy(result_1979715601, succeed_1979715602(input_1979715599, fn_1979715571(Temporary3.value), result1_1979715622.tail), NTI1979713435);
          break BeforeRet;
        } while (false);

        return result_1979715601;

      }

  var result_1979715572 = null;

    Label1: do {
    } while (false);
    result_1979715572 = {body: HEX3Aanonymous_1979715598};

  return result_1979715572;

}

function HEX26_1979715388(x_1979715390, y_1979715391) {
  var result_1979715392 = [];

    result_1979715392 = new Array(chckRange(addInt((x_1979715390).length, (y_1979715391).length), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_1979715390).length, (y_1979715391).length), 0, 2147483647) ; ++i) { result_1979715392[i] = []; }    Label1: do {
      var i_1979715411 = 0;
      var colontmp__1962934384 = 0;
      colontmp__1962934384 = subInt((x_1979715390).length, 1);
      var res_1962934385 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_1962934385 <= colontmp__1962934384)) break Label3;
            i_1979715411 = res_1962934385;
            result_1979715392[chckIndx(i_1979715411, 0, (result_1979715392).length - 1)] = nimCopy(null, x_1979715390[chckIndx(i_1979715411, 0, (x_1979715390).length - 1)], NTI1979713429);
            res_1962934385 = addInt(res_1962934385, 1);
          }
      } while (false);
    } while (false);
    Label4: do {
      var i_1979715419 = 0;
      var colontmp__1962934388 = 0;
      colontmp__1962934388 = subInt((y_1979715391).length, 1);
      var res_1962934389 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(res_1962934389 <= colontmp__1962934388)) break Label6;
            i_1979715419 = res_1962934389;
            result_1979715392[chckIndx(addInt(i_1979715419, (x_1979715390).length), 0, (result_1979715392).length - 1)] = nimCopy(null, y_1979715391[chckIndx(i_1979715419, 0, (y_1979715391).length - 1)], NTI1979713429);
            res_1962934389 = addInt(res_1962934389, 1);
          }
      } while (false);
    } while (false);

  return result_1979715392;

}

function HEX26_1979715293(a_1979715298, b_1979715302) {

function succeedImpl_1979715317(inputInHEX60gensym63_1979715318, valueInHEX60gensym63_1979715319, tailInHEX60gensym63_1979715320) {
  var result_1979715322 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979715322 = nimCopy(result_1979715322, {kind: 0, value: nimCopy(null, valueInHEX60gensym63_1979715319, NTI1979714320), tail: nimCopy(null, tailInHEX60gensym63_1979715320, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym63_1979715318, NTI33554439), expected: []}, NTI1979713920);

  return result_1979715322;

}

function failImpl_1979715324(inputInHEX60gensym63_1979715325, expectedInHEX60gensym63_1979715326, tailInHEX60gensym63_1979715327) {
  var result_1979715329 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979715329 = nimCopy(result_1979715329, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym63_1979715326, NTI1979714326), tail: nimCopy(null, tailInHEX60gensym63_1979715327, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym63_1979715325, NTI33554439), value: []}, NTI1979713920);

  return result_1979715329;

}
      
function HEX3Aanonymous_1979715332(input_1979715333) {
            var Temporary2;
            var Temporary4;
          var Temporary5;
          var Temporary6;

        var result_1979715335 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979715336 = succeedImpl_1979715317;
          var fail_1979715337 = failImpl_1979715324;
          Label1: do {
            var tempHEX60gensym26_1979715362 = parse_1979715346(a_1979715298, input_1979715333);
            if ((tempHEX60gensym26_1979715362.kind == 1)) {
            var Temporary2 = tempHEX60gensym26_1979715362;
            if (ConstSet33[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979715335 = nimCopy(result_1979715335, {kind: 1, fromInput: nimCopy(null, input_1979715333, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym26_1979715362.tail, NTI33554439), value: []}, NTI1979713920);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979715368 = nimCopy(null, tempHEX60gensym26_1979715362, NTI1979713920);
          Label3: do {
            var tempHEX60gensym28_1979715381 = parse_1979715346(b_1979715302, result1_1979715368.tail);
            if ((tempHEX60gensym28_1979715381.kind == 1)) {
            var Temporary4 = tempHEX60gensym28_1979715381;
            if (ConstSet34[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI2030043157)); }
            result_1979715335 = nimCopy(result_1979715335, {kind: 1, fromInput: nimCopy(null, input_1979715333, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym28_1979715381.tail, NTI33554439), value: []}, NTI1979713920);
            break BeforeRet;
            }
            
          } while (false);
          var result2_1979715387 = nimCopy(null, tempHEX60gensym28_1979715381, NTI1979713920);
          var Temporary5 = result1_1979715368;
          if (ConstSet35[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI2030043157)); }
          var Temporary6 = result2_1979715387;
          if (ConstSet36[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI2030043157)); }
          result_1979715335 = nimCopy(result_1979715335, succeed_1979715336(input_1979715333, HEX26_1979715388(Temporary5.value, Temporary6.value), result2_1979715387.tail), NTI1979713920);
          break BeforeRet;
        } while (false);

        return result_1979715335;

      }

  var result_1979715306 = null;

    Label1: do {
    } while (false);
    result_1979715306 = {body: HEX3Aanonymous_1979715332};

  return result_1979715306;

}

function map_1979715048(a_1979715051, fn_1979715053) {

function succeedImpl_1979715065(inputInHEX60gensym59_1979715066, valueInHEX60gensym59_1979715067, tailInHEX60gensym59_1979715068) {
  var result_1979715070 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979715070 = nimCopy(result_1979715070, {kind: 0, value: nimCopy(null, valueInHEX60gensym59_1979715067, NTI1979714029), tail: nimCopy(null, tailInHEX60gensym59_1979715068, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym59_1979715066, NTI33554439), expected: []}, NTI1979713920);

  return result_1979715070;

}

function failImpl_1979715072(inputInHEX60gensym59_1979715073, expectedInHEX60gensym59_1979715074, tailInHEX60gensym59_1979715075) {
  var result_1979715077 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979715077 = nimCopy(result_1979715077, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym59_1979715074, NTI1979714080), tail: nimCopy(null, tailInHEX60gensym59_1979715075, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym59_1979715073, NTI33554439), value: []}, NTI1979713920);

  return result_1979715077;

}
      
function HEX3Aanonymous_1979715080(input_1979715081) {
            var Temporary2;
          var Temporary3;

        var result_1979715083 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979715084 = succeedImpl_1979715065;
          var fail_1979715085 = failImpl_1979715072;
          Label1: do {
            var tempHEX60gensym24_1979715098 = parse_1979714814(a_1979715051, input_1979715081);
            if ((tempHEX60gensym24_1979715098.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_1979715098;
            if (ConstSet37[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979715083 = nimCopy(result_1979715083, {kind: 1, fromInput: nimCopy(null, input_1979715081, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym24_1979715098.tail, NTI33554439), value: []}, NTI1979713920);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979715104 = nimCopy(null, tempHEX60gensym24_1979715098, NTI1979713435);
          var Temporary3 = result1_1979715104;
          if (ConstSet38[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI2030043157)); }
          result_1979715083 = nimCopy(result_1979715083, succeed_1979715084(input_1979715081, fn_1979715053(Temporary3.value), result1_1979715104.tail), NTI1979713920);
          break BeforeRet;
        } while (false);

        return result_1979715083;

      }

  var result_1979715054 = null;

    Label1: do {
    } while (false);
    result_1979715054 = {body: HEX3Aanonymous_1979715080};

  return result_1979715054;

}

function nop_1979714364() {

function succeedImpl_1979714377(inputInHEX60gensym49_1979714378, valueInHEX60gensym49_1979714379, tailInHEX60gensym49_1979714380) {
  var result_1979714382 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979714382 = nimCopy(result_1979714382, {kind: 0, value: nimCopy(null, valueInHEX60gensym49_1979714379, NTI1979713489), tail: nimCopy(null, tailInHEX60gensym49_1979714380, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym49_1979714378, NTI33554439), expected: []}, NTI1979713435);

  return result_1979714382;

}

function failImpl_1979714396(inputInHEX60gensym49_1979714397, expectedInHEX60gensym49_1979714398, tailInHEX60gensym49_1979714399) {
  var result_1979714401 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979714401 = nimCopy(result_1979714401, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym49_1979714398, NTI1979713516), tail: nimCopy(null, tailInHEX60gensym49_1979714399, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym49_1979714397, NTI33554439), value: []}, NTI1979713435);

  return result_1979714401;

}
      
function HEX3Aanonymous_1979714404(input_1979714405) {
        var result_1979714407 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          var succeed_1979714408 = succeedImpl_1979714377;
          var fail_1979714409 = failImpl_1979714396;
          result_1979714407 = nimCopy(result_1979714407, succeed_1979714408(input_1979714405, [], input_1979714405), NTI1979713435);

        return result_1979714407;

      }

  var result_1979714366 = null;

    Label1: do {
    } while (false);
    result_1979714366 = {body: HEX3Aanonymous_1979714404};

  return result_1979714366;

}

function parse_1979714564(p_1979714566, input_1979714567) {
  var result_1979714568 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_1979714566.body == null)) {
    result_1979714568 = nimCopy(result_1979714568, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_1979714567, NTI33554439), fromInput: nimCopy(null, input_1979714567, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);
    break BeforeRet;
    }
    
    result_1979714568 = nimCopy(result_1979714568, p_1979714566.body(input_1979714567), NTI1979713420);
  } while (false);

  return result_1979714568;

}

function map_1979714518(a_1979714521, fn_1979714523) {

function succeedImpl_1979714535(inputInHEX60gensym51_1979714536, valueInHEX60gensym51_1979714537, tailInHEX60gensym51_1979714538) {
  var result_1979714540 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979714540 = nimCopy(result_1979714540, {kind: 0, value: nimCopy(null, valueInHEX60gensym51_1979714537, NTI1979713585), tail: nimCopy(null, tailInHEX60gensym51_1979714538, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym51_1979714536, NTI33554439), expected: []}, NTI1979713435);

  return result_1979714540;

}

function failImpl_1979714542(inputInHEX60gensym51_1979714543, expectedInHEX60gensym51_1979714544, tailInHEX60gensym51_1979714545) {
  var result_1979714547 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979714547 = nimCopy(result_1979714547, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym51_1979714544, NTI1979713636), tail: nimCopy(null, tailInHEX60gensym51_1979714545, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym51_1979714543, NTI33554439), value: []}, NTI1979713435);

  return result_1979714547;

}
      
function HEX3Aanonymous_1979714550(input_1979714551) {
            var Temporary2;
          var Temporary3;

        var result_1979714553 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979714554 = succeedImpl_1979714535;
          var fail_1979714555 = failImpl_1979714542;
          Label1: do {
            var tempHEX60gensym24_1979714592 = parse_1979714564(a_1979714521, input_1979714551);
            if ((tempHEX60gensym24_1979714592.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_1979714592;
            if (ConstSet39[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979714553 = nimCopy(result_1979714553, {kind: 1, fromInput: nimCopy(null, input_1979714551, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym24_1979714592.tail, NTI33554439), value: []}, NTI1979713435);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979714598 = nimCopy(null, tempHEX60gensym24_1979714592, NTI1979713420);
          var Temporary3 = result1_1979714598;
          if (ConstSet40[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI2030043157)); }
          result_1979714553 = nimCopy(result_1979714553, succeed_1979714554(input_1979714551, fn_1979714523(Temporary3.value), result1_1979714598.tail), NTI1979713435);
          break BeforeRet;
        } while (false);

        return result_1979714553;

      }

  var result_1979714524 = null;

    Label1: do {
    } while (false);
    result_1979714524 = {body: HEX3Aanonymous_1979714550};

  return result_1979714524;

}

function HEX2A_1979714356(a_1979714358, n_1979714359) {
    var Temporary1;
      
function HEX3Aanonymous_1979714472(x_1979714501) {
        var result_1979714504 = [];

          result_1979714504 = nimCopy(null, [nimCopy(null, x_1979714501, NTI2013265924)], NTI1979713585);

        return result_1979714504;

      }

function succeedImpl_1979714609(inputInHEX60gensym52_1979714610, valueInHEX60gensym52_1979714611, tailInHEX60gensym52_1979714612) {
  var result_1979714614 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979714614 = nimCopy(result_1979714614, {kind: 0, value: nimCopy(null, valueInHEX60gensym52_1979714611, NTI1979713695), tail: nimCopy(null, tailInHEX60gensym52_1979714612, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym52_1979714610, NTI33554439), expected: []}, NTI1979713435);

  return result_1979714614;

}

function failImpl_1979714616(inputInHEX60gensym52_1979714617, expectedInHEX60gensym52_1979714618, tailInHEX60gensym52_1979714619) {
  var result_1979714621 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979714621 = nimCopy(result_1979714621, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym52_1979714618, NTI1979713701), tail: nimCopy(null, tailInHEX60gensym52_1979714619, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym52_1979714617, NTI33554439), value: []}, NTI1979713435);

  return result_1979714621;

}
        
function HEX3Aanonymous_1979714624(input_1979714625) {
              var Temporary2;
            var Temporary3;
                      var Temporary8;
                    var Temporary9;

          var result_1979714627 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          BeforeRet: do {
            var succeed_1979714628 = succeedImpl_1979714609;
            var fail_1979714629 = failImpl_1979714616;
            Label1: do {
              var tempHEX60gensym38_1979714642 = parse_1979714564(a_1979714358, input_1979714625);
              if ((tempHEX60gensym38_1979714642.kind == 1)) {
              var Temporary2 = tempHEX60gensym38_1979714642;
              if (ConstSet41[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
              result_1979714627 = nimCopy(result_1979714627, {kind: 1, fromInput: nimCopy(null, input_1979714625, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym38_1979714642.tail, NTI33554439), value: []}, NTI1979713435);
              break BeforeRet;
              }
              
            } while (false);
            var result1_1979714648 = nimCopy(null, tempHEX60gensym38_1979714642, NTI1979713420);
            var Temporary3 = result1_1979714648;
            if (ConstSet42[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI2030043157)); }
            var outputs_1979714653 = [nimCopy(null, Temporary3.value, NTI2013265924)];
            var lastTail_1979714654 = nimCopy(null, result1_1979714648.tail, NTI33554439);
            Label4: do {
              var i_1979714660 = 0;
              var res_1962934397 = 2;
              Label5: do {
                  Label6: while (true) {
                  if (!(res_1962934397 <= n_1979714359)) break Label6;
                    i_1979714660 = res_1962934397;
                    Label7: do {
                      var tempHEX60gensym40_1979714673 = parse_1979714564(a_1979714358, result1_1979714648.tail);
                      if ((tempHEX60gensym40_1979714673.kind == 1)) {
                      var Temporary8 = tempHEX60gensym40_1979714673;
                      if (ConstSet43[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI2030043157)); }
                      result_1979714627 = nimCopy(result_1979714627, {kind: 1, fromInput: nimCopy(null, input_1979714625, NTI33554439), expected: nimCopy(null, Temporary8.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym40_1979714673.tail, NTI33554439), value: []}, NTI1979713435);
                      break BeforeRet;
                      }
                      
                    } while (false);
                    result1_1979714648 = nimCopy(result1_1979714648, tempHEX60gensym40_1979714673, NTI1979713420);
                    if (eqStrings(result1_1979714648.tail, lastTail_1979714654)) {
                    break Label4;
                    }
                    
                    lastTail_1979714654 = nimCopy(null, result1_1979714648.tail, NTI33554439);
                    var Temporary9 = result1_1979714648;
                    if (ConstSet44[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI2030043157)); }
                    var Temporary10 = nimCopy(null, Temporary9.value, NTI2013265924);
                    outputs_1979714653.push(Temporary10);;
                    res_1962934397 = addInt(res_1962934397, 1);
                  }
              } while (false);
            } while (false);
            result_1979714627 = nimCopy(result_1979714627, succeed_1979714628(input_1979714625, outputs_1979714653, result1_1979714648.tail), NTI1979713435);
          } while (false);

          return result_1979714627;

        }

  var result_1979714363 = null;

  BeforeRet: do {
    switch (n_1979714359) {
    case 0:
      result_1979714363 = nop_1979714364();
      break BeforeRet;
      break;
    case 1:
      result_1979714363 = map_1979714518(a_1979714358, HEX3Aanonymous_1979714472);
      break BeforeRet;
      break;
    default: 
      Label2: do {
      } while (false);
      Temporary1 = {body: HEX3Aanonymous_1979714624};
      break;
    }
    result_1979714363 = Temporary1;
  } while (false);

  return result_1979714363;

}

function nop_1979714885() {

function succeedImpl_1979714898(inputInHEX60gensym57_1979714899, valueInHEX60gensym57_1979714900, tailInHEX60gensym57_1979714901) {
  var result_1979714903 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979714903 = nimCopy(result_1979714903, {kind: 0, value: nimCopy(null, valueInHEX60gensym57_1979714900, NTI1979713927), tail: nimCopy(null, tailInHEX60gensym57_1979714901, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym57_1979714899, NTI33554439), expected: []}, NTI1979713920);

  return result_1979714903;

}

function failImpl_1979714926(inputInHEX60gensym57_1979714927, expectedInHEX60gensym57_1979714928, tailInHEX60gensym57_1979714929) {
  var result_1979714931 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979714931 = nimCopy(result_1979714931, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym57_1979714928, NTI1979713960), tail: nimCopy(null, tailInHEX60gensym57_1979714929, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym57_1979714927, NTI33554439), value: []}, NTI1979713920);

  return result_1979714931;

}
      
function HEX3Aanonymous_1979714934(input_1979714935) {
        var result_1979714937 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          var succeed_1979714938 = succeedImpl_1979714898;
          var fail_1979714939 = failImpl_1979714926;
          result_1979714937 = nimCopy(result_1979714937, succeed_1979714938(input_1979714935, [], input_1979714935), NTI1979713920);

        return result_1979714937;

      }

  var result_1979714887 = null;

    Label1: do {
    } while (false);
    result_1979714887 = {body: HEX3Aanonymous_1979714934};

  return result_1979714887;

}

function HEX2A_1979714872(a_1979714874, n_1979714875) {
    var Temporary1;
      
function HEX3Aanonymous_1979715002(x_1979715031) {
        var result_1979715034 = [];

          result_1979715034 = nimCopy(null, [nimCopy(null, x_1979715031, NTI1979713429)], NTI1979714029);

        return result_1979715034;

      }

function succeedImpl_1979715115(inputInHEX60gensym60_1979715116, valueInHEX60gensym60_1979715117, tailInHEX60gensym60_1979715118) {
  var result_1979715120 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979715120 = nimCopy(result_1979715120, {kind: 0, value: nimCopy(null, valueInHEX60gensym60_1979715117, NTI1979714120), tail: nimCopy(null, tailInHEX60gensym60_1979715118, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym60_1979715116, NTI33554439), expected: []}, NTI1979713920);

  return result_1979715120;

}

function failImpl_1979715122(inputInHEX60gensym60_1979715123, expectedInHEX60gensym60_1979715124, tailInHEX60gensym60_1979715125) {
  var result_1979715127 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979715127 = nimCopy(result_1979715127, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym60_1979715124, NTI1979714126), tail: nimCopy(null, tailInHEX60gensym60_1979715125, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym60_1979715123, NTI33554439), value: []}, NTI1979713920);

  return result_1979715127;

}
        
function HEX3Aanonymous_1979715130(input_1979715131) {
              var Temporary2;
            var Temporary3;
                      var Temporary8;
                    var Temporary9;

          var result_1979715133 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          BeforeRet: do {
            var succeed_1979715134 = succeedImpl_1979715115;
            var fail_1979715135 = failImpl_1979715122;
            Label1: do {
              var tempHEX60gensym38_1979715148 = parse_1979714814(a_1979714874, input_1979715131);
              if ((tempHEX60gensym38_1979715148.kind == 1)) {
              var Temporary2 = tempHEX60gensym38_1979715148;
              if (ConstSet45[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
              result_1979715133 = nimCopy(result_1979715133, {kind: 1, fromInput: nimCopy(null, input_1979715131, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym38_1979715148.tail, NTI33554439), value: []}, NTI1979713920);
              break BeforeRet;
              }
              
            } while (false);
            var result1_1979715154 = nimCopy(null, tempHEX60gensym38_1979715148, NTI1979713435);
            var Temporary3 = result1_1979715154;
            if (ConstSet46[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI2030043157)); }
            var outputs_1979715159 = [nimCopy(null, Temporary3.value, NTI1979713429)];
            var lastTail_1979715160 = nimCopy(null, result1_1979715154.tail, NTI33554439);
            Label4: do {
              var i_1979715166 = 0;
              var res_1962934406 = 2;
              Label5: do {
                  Label6: while (true) {
                  if (!(res_1962934406 <= n_1979714875)) break Label6;
                    i_1979715166 = res_1962934406;
                    Label7: do {
                      var tempHEX60gensym40_1979715179 = parse_1979714814(a_1979714874, result1_1979715154.tail);
                      if ((tempHEX60gensym40_1979715179.kind == 1)) {
                      var Temporary8 = tempHEX60gensym40_1979715179;
                      if (ConstSet47[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI2030043157)); }
                      result_1979715133 = nimCopy(result_1979715133, {kind: 1, fromInput: nimCopy(null, input_1979715131, NTI33554439), expected: nimCopy(null, Temporary8.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym40_1979715179.tail, NTI33554439), value: []}, NTI1979713920);
                      break BeforeRet;
                      }
                      
                    } while (false);
                    result1_1979715154 = nimCopy(result1_1979715154, tempHEX60gensym40_1979715179, NTI1979713435);
                    if (eqStrings(result1_1979715154.tail, lastTail_1979715160)) {
                    break Label4;
                    }
                    
                    lastTail_1979715160 = nimCopy(null, result1_1979715154.tail, NTI33554439);
                    var Temporary9 = result1_1979715154;
                    if (ConstSet48[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI2030043157)); }
                    var Temporary10 = nimCopy(null, Temporary9.value, NTI1979713429);
                    outputs_1979715159.push(Temporary10);;
                    res_1962934406 = addInt(res_1962934406, 1);
                  }
              } while (false);
            } while (false);
            result_1979715133 = nimCopy(result_1979715133, succeed_1979715134(input_1979715131, outputs_1979715159, result1_1979715154.tail), NTI1979713920);
          } while (false);

          return result_1979715133;

        }

  var result_1979714884 = null;

  BeforeRet: do {
    switch (n_1979714875) {
    case 0:
      result_1979714884 = nop_1979714885();
      break BeforeRet;
      break;
    case 1:
      result_1979714884 = map_1979715048(a_1979714874, HEX3Aanonymous_1979715002);
      break BeforeRet;
      break;
    default: 
      Label2: do {
      } while (false);
      Temporary1 = {body: HEX3Aanonymous_1979715130};
      break;
    }
    result_1979714884 = Temporary1;
  } while (false);

  return result_1979714884;

}

function HEX7C_1979714770(a_1979714772, b_1979714773) {

function succeedImpl_1979714785(inputInHEX60gensym56_1979714786, valueInHEX60gensym56_1979714787, tailInHEX60gensym56_1979714788) {
  var result_1979714790 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979714790 = nimCopy(result_1979714790, {kind: 0, value: nimCopy(null, valueInHEX60gensym56_1979714787, NTI1979713429), tail: nimCopy(null, tailInHEX60gensym56_1979714788, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym56_1979714786, NTI33554439), expected: []}, NTI1979713435);

  return result_1979714790;

}

function failImpl_1979714792(inputInHEX60gensym56_1979714793, expectedInHEX60gensym56_1979714794, tailInHEX60gensym56_1979714795) {
  var result_1979714797 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979714797 = nimCopy(result_1979714797, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym56_1979714794, NTI1979713865), tail: nimCopy(null, tailInHEX60gensym56_1979714795, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym56_1979714793, NTI33554439), value: []}, NTI1979713435);

  return result_1979714797;

}
      
function HEX3Aanonymous_1979714800(input_1979714801) {
          var Temporary1;
          var Temporary2;

        var result_1979714803 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979714804 = succeedImpl_1979714785;
          var fail_1979714805 = failImpl_1979714792;
          var result1_1979714830 = parse_1979714814(a_1979714772, input_1979714801);
          if ((result1_1979714830.kind == 0)) {
          result_1979714803 = nimCopy(result_1979714803, result1_1979714830, NTI1979713435);
          break BeforeRet;
          }
          
          var result2_1979714847 = parse_1979714814(b_1979714773, input_1979714801);
          if ((result2_1979714847.kind == 0)) {
          result_1979714803 = nimCopy(result_1979714803, result2_1979714847, NTI1979713435);
          break BeforeRet;
          }
          
          var Temporary1 = result1_1979714830;
          if (ConstSet49[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI2030043157)); }
          var Temporary2 = result2_1979714847;
          if (ConstSet50[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
          result_1979714803 = nimCopy(result_1979714803, fail_1979714805(input_1979714801, HEX26_2013266015(Temporary1.expected, Temporary2.expected), input_1979714801), NTI1979713435);
        } while (false);

        return result_1979714803;

      }

  var result_1979714774 = null;

    Label1: do {
    } while (false);
    result_1979714774 = {body: HEX3Aanonymous_1979714800};

  return result_1979714774;

}

function newSeq_2013266235(len_2013266237) {
  var result_2013266238 = [];

    result_2013266238 = new Array(len_2013266237); for (var i = 0 ; i < len_2013266237 ; ++i) { result_2013266238[i] = ({rows: [], baseline: 0, width: 0, flag: 0}); }
  return result_2013266238;

}

function HEX26_1979715482(x_1979715484, y_1979715485) {
  var result_1979715486 = [];

    result_1979715486 = new Array(chckRange(addInt((x_1979715484).length, (y_1979715485).length), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_1979715484).length, (y_1979715485).length), 0, 2147483647) ; ++i) { result_1979715486[i] = ({rows: [], baseline: 0, width: 0, flag: 0}); }    Label1: do {
      var i_1979715504 = 0;
      var colontmp__1962934416 = 0;
      colontmp__1962934416 = subInt((x_1979715484).length, 1);
      var res_1962934417 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_1962934417 <= colontmp__1962934416)) break Label3;
            i_1979715504 = res_1962934417;
            result_1979715486[chckIndx(i_1979715504, 0, (result_1979715486).length - 1)] = nimCopy(result_1979715486[chckIndx(i_1979715504, 0, (result_1979715486).length - 1)], x_1979715484[chckIndx(i_1979715504, 0, (x_1979715484).length - 1)], NTI2013265924);
            res_1962934417 = addInt(res_1962934417, 1);
          }
      } while (false);
    } while (false);
    Label4: do {
      var i_1979715512 = 0;
      var colontmp__1962934420 = 0;
      colontmp__1962934420 = subInt((y_1979715485).length, 1);
      var res_1962934421 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(res_1962934421 <= colontmp__1962934420)) break Label6;
            i_1979715512 = res_1962934421;
            result_1979715486[chckIndx(addInt(i_1979715512, (x_1979715484).length), 0, (result_1979715486).length - 1)] = nimCopy(result_1979715486[chckIndx(addInt(i_1979715512, (x_1979715484).length), 0, (result_1979715486).length - 1)], y_1979715485[chckIndx(i_1979715512, 0, (y_1979715485).length - 1)], NTI2013265924);
            res_1962934421 = addInt(res_1962934421, 1);
          }
      } while (false);
    } while (false);

  return result_1979715486;

}

function height_2013265961(rect_2013265962) {
  var result_2013265963 = 0;

    result_2013265963 = chckRange((rect_2013265962.rows).length, 0, 2147483647);

  return result_2013265963;

}

function isEmpty_2013265967(rect_2013265968) {
  var result_2013265969 = false;

    result_2013265969 = (height_2013265961(rect_2013265968) == 0);

  return result_2013265969;

}

function HEX3DHEX3D_2013266315(x_2013266317, y_2013266318) {
  var result_2013266319 = false;

  BeforeRet: do {
    var sameObject_2013266326 = false;
    sameObject_2013266326 = x_2013266317 === y_2013266318
    if (sameObject_2013266326) {
    result_2013266319 = true;
    break BeforeRet;
    }
    
    if (!(((x_2013266317).length == (y_2013266318).length))) {
    result_2013266319 = false;
    break BeforeRet;
    }
    
    Label1: do {
      var i_2013266340 = 0;
      var colontmp__1962934476 = 0;
      colontmp__1962934476 = subInt((x_2013266317).length, 1);
      var res_1962934477 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_1962934477 <= colontmp__1962934476)) break Label3;
            i_2013266340 = res_1962934477;
            if (!(eqStrings(x_2013266317[chckIndx(i_2013266340, 0, (x_2013266317).length - 1)], y_2013266318[chckIndx(i_2013266340, 0, (y_2013266318).length - 1)]))) {
            result_2013266319 = false;
            break BeforeRet;
            }
            
            res_1962934477 = addInt(res_1962934477, 1);
          }
      } while (false);
    } while (false);
    result_2013266319 = true;
    break BeforeRet;
  } while (false);

  return result_2013266319;

}

function HEX3DHEX3D_2013266305(x_2013266307, y_2013266308) {
  var result_2013266309 = false;

  BeforeRet: do {
    if (!(HEX3DHEX3D_2013266315(x_2013266307.rows, y_2013266308.rows))) {
    result_2013266309 = false;
    break BeforeRet;
    }
    
    if (!((x_2013266307.baseline == y_2013266308.baseline))) {
    result_2013266309 = false;
    break BeforeRet;
    }
    
    if (!((x_2013266307.width == y_2013266308.width))) {
    result_2013266309 = false;
    break BeforeRet;
    }
    
    if (!((x_2013266307.flag == y_2013266308.flag))) {
    result_2013266309 = false;
    break BeforeRet;
    }
    
    result_2013266309 = true;
    break BeforeRet;
  } while (false);

  return result_2013266309;

}

function HEX3DHEX3D_2013266279(x_2013266281, y_2013266282) {
  var result_2013266283 = false;

  BeforeRet: do {
    var sameObject_2013266290 = false;
    sameObject_2013266290 = x_2013266281 === y_2013266282
    if (sameObject_2013266290) {
    result_2013266283 = true;
    break BeforeRet;
    }
    
    if (!(((x_2013266281).length == (y_2013266282).length))) {
    result_2013266283 = false;
    break BeforeRet;
    }
    
    Label1: do {
      var i_2013266304 = 0;
      var colontmp__1962934472 = 0;
      colontmp__1962934472 = subInt((x_2013266281).length, 1);
      var res_1962934473 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_1962934473 <= colontmp__1962934472)) break Label3;
            i_2013266304 = res_1962934473;
            if (!(HEX3DHEX3D_2013266305(x_2013266281[chckIndx(i_2013266304, 0, (x_2013266281).length - 1)], y_2013266282[chckIndx(i_2013266304, 0, (y_2013266282).length - 1)]))) {
            result_2013266283 = false;
            break BeforeRet;
            }
            
            res_1962934473 = addInt(res_1962934473, 1);
          }
      } while (false);
    } while (false);
    result_2013266283 = true;
    break BeforeRet;
  } while (false);

  return result_2013266283;

}

function extendRight_2013266097(rect_2013266098) {
    Label1: do {
      var row_2013266102 = null;
      var row_2013266102_Idx = 0;
      var i_1962934481 = 0;
      var L_1962934482 = (rect_2013266098.rows).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_1962934481 < L_1962934482)) break Label3;
            row_2013266102 = rect_2013266098.rows; row_2013266102_Idx = chckIndx(i_1962934481, 0, (rect_2013266098.rows).length - 1);
            row_2013266102[row_2013266102_Idx].push.apply(row_2013266102[row_2013266102_Idx], makeNimstrLit(" "));;
            i_1962934481 = addInt(i_1962934481, 1);
            if (!(((rect_2013266098.rows).length == L_1962934482))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(249, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    rect_2013266098.width = addInt(rect_2013266098.width, 1);

  
}

function extendLeft_2013266061(rect_2013266062) {
    Label1: do {
      var row_2013266083 = null;
      var row_2013266083_Idx = 0;
      var i_1962934485 = 0;
      var L_1962934486 = (rect_2013266062.rows).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_1962934485 < L_1962934486)) break Label3;
            row_2013266083 = rect_2013266062.rows; row_2013266083_Idx = chckIndx(i_1962934485, 0, (rect_2013266062.rows).length - 1);
            row_2013266083[row_2013266083_Idx] = nimCopy(null, (makeNimstrLit(" ") || []).concat(row_2013266083[row_2013266083_Idx] || []), NTI33554439);
            i_1962934485 = addInt(i_1962934485, 1);
            if (!(((rect_2013266062.rows).length == L_1962934486))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(249, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    rect_2013266062.width = addInt(rect_2013266062.width, 1);

  
}

function max_2013266487(x_2013266489) {
  var result_2013266490 = 0;

    result_2013266490 = x_2013266489[chckIndx(0, 0, (x_2013266489).length - 1)];
    Label1: do {
      var i_2013266498 = 0;
      var colontmp__1962934489 = 0;
      colontmp__1962934489 = (x_2013266489).length - 1;
      var res_1962934490 = 1;
      Label2: do {
          Label3: while (true) {
          if (!(res_1962934490 <= colontmp__1962934489)) break Label3;
            i_2013266498 = res_1962934490;
            if ((result_2013266490 < x_2013266489[chckIndx(i_2013266498, 0, (x_2013266489).length - 1)])) {
            result_2013266490 = x_2013266489[chckIndx(i_2013266498, 0, (x_2013266489).length - 1)];
            }
            
            res_1962934490 = addInt(res_1962934490, 1);
          }
      } while (false);
    } while (false);

  return result_2013266490;

}

function newSeq_2013266461(len_2013266463) {
  var result_2013266464 = [];

    result_2013266464 = new Array(len_2013266463); for (var i = 0 ; i < len_2013266463 ; ++i) { result_2013266464[i] = 0; }
  return result_2013266464;

}

function repeat_2013266002(x_2013266004, n_2013266005) {
  var result_2013266006 = [];

    result_2013266006 = nimCopy(null, newSeq_452985301(n_2013266005), NTI452985127);
    Label1: do {
      var i_2013266014 = 0;
      var colontmp__1962934493 = 0;
      colontmp__1962934493 = n_2013266005;
      var i_1962934494 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1962934494 < colontmp__1962934493)) break Label3;
            i_2013266014 = i_1962934494;
            result_2013266006[chckIndx(i_2013266014, 0, (result_2013266006).length - 1)] = nimCopy(null, x_2013266004, NTI33554439);
            i_1962934494 = addInt(i_1962934494, 1);
          }
      } while (false);
    } while (false);

  return result_2013266006;

}

function nsuRepeatChar(c_654312443, count_654312444) {
  var result_654312445 = [];

    result_654312445 = nimCopy(null, mnewString(count_654312444), NTI33554439);
    Label1: do {
      var i_654312450 = 0;
      var colontmp__1962934497 = 0;
      colontmp__1962934497 = subInt(count_654312444, 1);
      var res_1962934498 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_1962934498 <= colontmp__1962934497)) break Label3;
            i_654312450 = res_1962934498;
            result_654312445[chckIndx(i_654312450, 0, (result_654312445).length - 1)] = c_654312443;
            res_1962934498 = addInt(res_1962934498, 1);
          }
      } while (false);
    } while (false);

  return result_654312445;

}

function extendUp_2013265998(rect_2013265999, num_2013266000) {
  var result_2013266001 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_2013266001.rows = nimCopy(null, HEX26_2013266015(repeat_2013266002(nsuRepeatChar(32, rect_2013265999.width), num_2013266000), rect_2013265999.rows), NTI2013265977);
    result_2013266001.baseline = addInt(rect_2013265999.baseline, num_2013266000);
    result_2013266001.width = rect_2013265999.width;

  return result_2013266001;

}

function max_2013266564(x_2013266566) {
  var result_2013266567 = 0;

    result_2013266567 = x_2013266566[chckIndx(0, 0, (x_2013266566).length - 1)];
    Label1: do {
      var i_2013266575 = 0;
      var colontmp__1962934501 = 0;
      colontmp__1962934501 = (x_2013266566).length - 1;
      var res_1962934502 = 1;
      Label2: do {
          Label3: while (true) {
          if (!(res_1962934502 <= colontmp__1962934501)) break Label3;
            i_2013266575 = res_1962934502;
            if ((result_2013266567 < x_2013266566[chckIndx(i_2013266575, 0, (x_2013266566).length - 1)])) {
            result_2013266567 = x_2013266566[chckIndx(i_2013266575, 0, (x_2013266566).length - 1)];
            }
            
            res_1962934502 = addInt(res_1962934502, 1);
          }
      } while (false);
    } while (false);

  return result_2013266567;

}

function newSeq_2013266538(len_2013266540) {
  var result_2013266541 = [];

    result_2013266541 = new Array(len_2013266540); for (var i = 0 ; i < len_2013266540 ; ++i) { result_2013266541[i] = 0; }
  return result_2013266541;

}

function extendDown_2013266049(rect_2013266050, num_2013266051) {
  var result_2013266052 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_2013266052.rows = nimCopy(null, HEX26_2013266015(rect_2013266050.rows, repeat_2013266002(nsuRepeatChar(32, rect_2013266050.width), num_2013266051)), NTI2013265977);
    result_2013266052.baseline = rect_2013266050.baseline;
    result_2013266052.width = rect_2013266050.width;

  return result_2013266052;

}

function nsuJoinSep(a_654312849, sep_654312850) {
  var result_654312851 = [];

    if ((0 < (a_654312849).length)) {
    var L_654312858 = mulInt((sep_654312850).length, subInt((a_654312849).length, 1));
    Label1: do {
      var i_654312866 = 0;
      var colontmp__1962934505 = 0;
      colontmp__1962934505 = (a_654312849).length - 1;
      var res_1962934506 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_1962934506 <= colontmp__1962934505)) break Label3;
            i_654312866 = res_1962934506;
            L_654312858 = addInt(L_654312858, (a_654312849[chckIndx(i_654312866, 0, (a_654312849).length - 1)]).length);
            res_1962934506 = addInt(res_1962934506, 1);
          }
      } while (false);
    } while (false);
    result_654312851 = nimCopy(null, mnewString(0), NTI33554439);
    result_654312851.push.apply(result_654312851, a_654312849[chckIndx(0, 0, (a_654312849).length - 1)]);;
    Label4: do {
      var i_654312878 = 0;
      var colontmp__1962934509 = 0;
      colontmp__1962934509 = (a_654312849).length - 1;
      var res_1962934510 = 1;
      Label5: do {
          Label6: while (true) {
          if (!(res_1962934510 <= colontmp__1962934509)) break Label6;
            i_654312878 = res_1962934510;
            result_654312851.push.apply(result_654312851, sep_654312850);;
            result_654312851.push.apply(result_654312851, a_654312849[chckIndx(i_654312878, 0, (a_654312849).length - 1)]);;
            res_1962934510 = addInt(res_1962934510, 1);
          }
      } while (false);
    } while (false);
    }
    else {
      result_654312851 = nimCopy(null, [], NTI33554439);
    }
    

  return result_654312851;

}

function sum_2013266704(x_2013266706) {
  var result_2013266707 = 0;

    Label1: do {
      var i_2013266720 = 0;
      var i_1962934514 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1962934514 < (x_2013266706).length)) break Label3;
            i_2013266720 = x_2013266706[i_1962934514];
            result_2013266707 = (result_2013266707 + i_2013266720);
            i_1962934514 += 1;
          }
      } while (false);
    } while (false);

  return result_2013266707;

}

function join_2013266107(rects_2013266108) {
                var Temporary11;
                var Temporary12;
                var Temporary13;

  var result_2013266109 = ({rows: [], baseline: 0, width: 0, flag: 0});

  BeforeRet: do {
    Label1: do {
      var iHEX60gensym8_2013266230 = 0;
      var resultHEX60gensym8_2013266243 = newSeq_2013266235(chckRange((rects_2013266108).length, 0, 2147483647));
      Label2: do {
        var itHEX60gensym8_2013266247 = ({rows: [], baseline: 0, width: 0, flag: 0});
        var i_1962934426 = 0;
        Label3: do {
            Label4: while (true) {
            if (!(i_1962934426 < (rects_2013266108).length)) break Label4;
              itHEX60gensym8_2013266247 = rects_2013266108[chckIndx(i_1962934426, 0, (rects_2013266108).length - 1)];
              resultHEX60gensym8_2013266243[chckIndx(iHEX60gensym8_2013266230, 0, (resultHEX60gensym8_2013266243).length - 1)] = nimCopy(resultHEX60gensym8_2013266243[chckIndx(iHEX60gensym8_2013266230, 0, (resultHEX60gensym8_2013266243).length - 1)], itHEX60gensym8_2013266247, NTI2013265924);
              iHEX60gensym8_2013266230 = addInt(iHEX60gensym8_2013266230, 1);
              i_1962934426 = addInt(i_1962934426, 1);
            }
        } while (false);
      } while (false);
    } while (false);
    var rects_2013266252 = [nimCopy(null, resultHEX60gensym8_2013266243, NTI2013266111)];
    var posHEX60gensym11_2013266256 = 0;
    Label5: do {
      var iHEX60gensym11_2013266265 = 0;
      var colontmp__1962934429 = 0;
      colontmp__1962934429 = (rects_2013266252[0]).length;
      var i_1962934430 = 0;
      Label6: do {
          Label7: while (true) {
          if (!(i_1962934430 < colontmp__1962934429)) break Label7;
            iHEX60gensym11_2013266265 = i_1962934430;
            var it_2013266266 = nimCopy(null, rects_2013266252[0][chckIndx(iHEX60gensym11_2013266265, 0, (rects_2013266252[0]).length - 1)], NTI2013265924);
            if (!(isEmpty_2013265967(it_2013266266))) {
            if (!((posHEX60gensym11_2013266256 == iHEX60gensym11_2013266265))) {
            rects_2013266252[0][chckIndx(posHEX60gensym11_2013266256, 0, (rects_2013266252[0]).length - 1)] = nimCopy(rects_2013266252[0][chckIndx(posHEX60gensym11_2013266256, 0, (rects_2013266252[0]).length - 1)], rects_2013266252[0][chckIndx(iHEX60gensym11_2013266265, 0, (rects_2013266252[0]).length - 1)], NTI2013265924);
            }
            
            posHEX60gensym11_2013266256 = addInt(posHEX60gensym11_2013266256, 1);
            }
            
            i_1962934430 = addInt(i_1962934430, 1);
          }
      } while (false);
    } while (false);
    if (rects_2013266252[0].length < chckRange(posHEX60gensym11_2013266256, 0, 2147483647)) { for (var i = rects_2013266252[0].length ; i < chckRange(posHEX60gensym11_2013266256, 0, 2147483647) ; ++i) rects_2013266252[0].push(({rows: [], baseline: 0, width: 0, flag: 0})); }
               else { rects_2013266252[0].length = chckRange(posHEX60gensym11_2013266256, 0, 2147483647); };
    if (HEX3DHEX3D_2013266279(rects_2013266252[0], [])) {
    break BeforeRet;
    }
    
    if (((rects_2013266252[0]).length == 1)) {
    result_2013266109 = nimCopy(result_2013266109, rects_2013266252[0][chckIndx(0, 0, (rects_2013266252[0]).length - 1)], NTI2013265924);
    break BeforeRet;
    }
    
    Label8: do {
      var i_2013266389 = 0;
      var rect_2013266390 = null;
      var i_1962934434 = 0;
      var L_1962934435 = (rects_2013266252[0]).length;
      Label9: do {
          Label10: while (true) {
          if (!(i_1962934434 < L_1962934435)) break Label10;
            i_2013266389 = i_1962934434;
            rect_2013266390 = rects_2013266252[0][chckIndx(i_1962934434, 0, (rects_2013266252[0]).length - 1)];
            switch (rect_2013266390.flag) {
            case 8:
              if (!((i_2013266389 == (rects_2013266252[0]).length - 1))) {
              extendRight_2013266097(rect_2013266390);
              }
              
              break;
            case 2:
            case 3:
              if (!((i_2013266389 == (rects_2013266252[0]).length - 1))) {
              extendRight_2013266097(rect_2013266390);
              }
              
                if (!!((i_2013266389 == 0))) Temporary11 = false; else {                  Temporary11 = !((ConstSet51[rects_2013266252[0][chckIndx(subInt(i_2013266389, 1), 0, (rects_2013266252[0]).length - 1)].flag] != undefined));                }              if (Temporary11) {
              extendLeft_2013266061(rect_2013266390);
              }
              
              break;
            case 4:
                if (!!((i_2013266389 == (rects_2013266252[0]).length - 1))) Temporary12 = false; else {                  Temporary12 = (ConstSet52[rects_2013266252[0][chckIndx(addInt(i_2013266389, 1), 0, (rects_2013266252[0]).length - 1)].flag] != undefined);                }              if (Temporary12) {
              extendRight_2013266097(rect_2013266390);
              }
              
                if (!!((i_2013266389 == 0))) Temporary13 = false; else {                  Temporary13 = (ConstSet53[rects_2013266252[0][chckIndx(subInt(i_2013266389, 1), 0, (rects_2013266252[0]).length - 1)].flag] != undefined);                }              if (Temporary13) {
              extendLeft_2013266061(rect_2013266390);
              }
              
              break;
            default: 
              break;
            }
            i_1962934434 = addInt(i_1962934434, 1);
            if (!(((rects_2013266252[0]).length == L_1962934435))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(183, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    Label14: do {
      var iHEX60gensym23_2013266457 = 0;
      var resultHEX60gensym23_2013266478 = newSeq_2013266461(chckRange((rects_2013266252[0]).length, 0, 2147483647));
      Label15: do {
        var it_2013266482 = ({rows: [], baseline: 0, width: 0, flag: 0});
        var i_1962934440 = 0;
        var L_1962934441 = (rects_2013266252[0]).length;
        Label16: do {
            Label17: while (true) {
            if (!(i_1962934440 < L_1962934441)) break Label17;
              it_2013266482 = rects_2013266252[0][chckIndx(i_1962934440, 0, (rects_2013266252[0]).length - 1)];
              resultHEX60gensym23_2013266478[chckIndx(iHEX60gensym23_2013266457, 0, (resultHEX60gensym23_2013266478).length - 1)] = it_2013266482.baseline;
              iHEX60gensym23_2013266457 = addInt(iHEX60gensym23_2013266457, 1);
              i_1962934440 = addInt(i_1962934440, 1);
              if (!(((rects_2013266252[0]).length == L_1962934441))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    } while (false);
    var maxBaseline_2013266499 = max_2013266487(resultHEX60gensym23_2013266478);
    Label18: do {
      var iHEX60gensym28_2013266511 = 0;
      var colontmp__1962934444 = 0;
      colontmp__1962934444 = (rects_2013266252[0]).length - 1;
      var res_1962934445 = 0;
      Label19: do {
          Label20: while (true) {
          if (!(res_1962934445 <= colontmp__1962934444)) break Label20;
            iHEX60gensym28_2013266511 = res_1962934445;
            var it_2013266512 = nimCopy(null, rects_2013266252[0][chckIndx(iHEX60gensym28_2013266511, 0, (rects_2013266252[0]).length - 1)], NTI2013265924);
            rects_2013266252[0][chckIndx(iHEX60gensym28_2013266511, 0, (rects_2013266252[0]).length - 1)] = nimCopy(rects_2013266252[0][chckIndx(iHEX60gensym28_2013266511, 0, (rects_2013266252[0]).length - 1)], extendUp_2013265998(it_2013266512, chckRange(subInt(maxBaseline_2013266499, it_2013266512.baseline), 0, 2147483647)), NTI2013265924);
            res_1962934445 = addInt(res_1962934445, 1);
          }
      } while (false);
    } while (false);
    Label21: do {
      var iHEX60gensym29_2013266534 = 0;
      var resultHEX60gensym29_2013266555 = newSeq_2013266538(chckRange((rects_2013266252[0]).length, 0, 2147483647));
      Label22: do {
        var it_2013266559 = ({rows: [], baseline: 0, width: 0, flag: 0});
        var i_1962934449 = 0;
        var L_1962934450 = (rects_2013266252[0]).length;
        Label23: do {
            Label24: while (true) {
            if (!(i_1962934449 < L_1962934450)) break Label24;
              it_2013266559 = rects_2013266252[0][chckIndx(i_1962934449, 0, (rects_2013266252[0]).length - 1)];
              resultHEX60gensym29_2013266555[chckIndx(iHEX60gensym29_2013266534, 0, (resultHEX60gensym29_2013266555).length - 1)] = height_2013265961(it_2013266559);
              iHEX60gensym29_2013266534 = addInt(iHEX60gensym29_2013266534, 1);
              i_1962934449 = addInt(i_1962934449, 1);
              if (!(((rects_2013266252[0]).length == L_1962934450))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    } while (false);
    var maxHeight_2013266576 = max_2013266564(resultHEX60gensym29_2013266555);
    Label25: do {
      var iHEX60gensym32_2013266588 = 0;
      var colontmp__1962934453 = 0;
      colontmp__1962934453 = (rects_2013266252[0]).length - 1;
      var res_1962934454 = 0;
      Label26: do {
          Label27: while (true) {
          if (!(res_1962934454 <= colontmp__1962934453)) break Label27;
            iHEX60gensym32_2013266588 = res_1962934454;
            var it_2013266589 = nimCopy(null, rects_2013266252[0][chckIndx(iHEX60gensym32_2013266588, 0, (rects_2013266252[0]).length - 1)], NTI2013265924);
            rects_2013266252[0][chckIndx(iHEX60gensym32_2013266588, 0, (rects_2013266252[0]).length - 1)] = nimCopy(rects_2013266252[0][chckIndx(iHEX60gensym32_2013266588, 0, (rects_2013266252[0]).length - 1)], extendDown_2013266049(it_2013266589, chckRange(subInt(maxHeight_2013266576, height_2013265961(it_2013266589)), 0, 2147483647)), NTI2013265924);
            res_1962934454 = addInt(res_1962934454, 1);
          }
      } while (false);
    } while (false);
    result_2013266109.rows = nimCopy(null, newSeq_452985301(height_2013265961(rects_2013266252[0][chckIndx(0, 0, (rects_2013266252[0]).length - 1)])), NTI452985127);
    Label28: do {
      var i_2013266628 = 0;
      var row_2013266629 = null;
      var row_2013266629_Idx = 0;
      var i_1962934463 = 0;
      var L_1962934464 = (result_2013266109.rows).length;
      Label29: do {
          Label30: while (true) {
          if (!(i_1962934463 < L_1962934464)) break Label30;
            i_2013266628 = i_1962934463;
            row_2013266629 = result_2013266109.rows; row_2013266629_Idx = chckIndx(i_1962934463, 0, (result_2013266109.rows).length - 1);
            Label31: do {
              var iHEX60gensym35_2013266651 = 0;
              var resultHEX60gensym35_2013266658 = newSeq_452985301(chckRange((rects_2013266252[0]).length, 0, 2147483647));
              Label32: do {
                var it_2013266662 = ({rows: [], baseline: 0, width: 0, flag: 0});
                var i_1962934459 = 0;
                var L_1962934460 = (rects_2013266252[0]).length;
                Label33: do {
                    Label34: while (true) {
                    if (!(i_1962934459 < L_1962934460)) break Label34;
                      it_2013266662 = rects_2013266252[0][chckIndx(i_1962934459, 0, (rects_2013266252[0]).length - 1)];
                      resultHEX60gensym35_2013266658[chckIndx(iHEX60gensym35_2013266651, 0, (resultHEX60gensym35_2013266658).length - 1)] = nimCopy(null, it_2013266662.rows[chckIndx(i_2013266628, 0, (it_2013266662.rows).length - 1)], NTI33554439);
                      iHEX60gensym35_2013266651 = addInt(iHEX60gensym35_2013266651, 1);
                      i_1962934459 = addInt(i_1962934459, 1);
                      if (!(((rects_2013266252[0]).length == L_1962934460))) {
                      failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                } while (false);
              } while (false);
            } while (false);
            row_2013266629[row_2013266629_Idx] = nimCopy(null, nsuJoinSep(resultHEX60gensym35_2013266658, []), NTI33554439);
            i_1962934463 = addInt(i_1962934463, 1);
            if (!(((result_2013266109.rows).length == L_1962934464))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(183, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_2013266109.baseline = rects_2013266252[0][chckIndx(0, 0, (rects_2013266252[0]).length - 1)].baseline;
    Label35: do {
      var iHEX60gensym38_2013266688 = 0;
      var resultHEX60gensym38_2013266695 = newSeq_2013266538(chckRange((rects_2013266252[0]).length, 0, 2147483647));
      Label36: do {
        var it_2013266699 = ({rows: [], baseline: 0, width: 0, flag: 0});
        var i_1962934468 = 0;
        var L_1962934469 = (rects_2013266252[0]).length;
        Label37: do {
            Label38: while (true) {
            if (!(i_1962934468 < L_1962934469)) break Label38;
              it_2013266699 = rects_2013266252[0][chckIndx(i_1962934468, 0, (rects_2013266252[0]).length - 1)];
              resultHEX60gensym38_2013266695[chckIndx(iHEX60gensym38_2013266688, 0, (resultHEX60gensym38_2013266695).length - 1)] = it_2013266699.width;
              iHEX60gensym38_2013266688 = addInt(iHEX60gensym38_2013266688, 1);
              i_1962934468 = addInt(i_1962934468, 1);
              if (!(((rects_2013266252[0]).length == L_1962934469))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    } while (false);
    result_2013266109.width = sum_2013266704(resultHEX60gensym38_2013266695);
  } while (false);

  return result_2013266109;

}

function map_1979715827(a_1979715830, fn_1979715832) {

function succeedImpl_1979715844(inputInHEX60gensym71_1979715845, valueInHEX60gensym71_1979715846, tailInHEX60gensym71_1979715847) {
  var result_1979715849 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_1979715849 = nimCopy(result_1979715849, {kind: 0, value: nimCopy(null, valueInHEX60gensym71_1979715846, NTI2013265924), tail: nimCopy(null, tailInHEX60gensym71_1979715847, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym71_1979715845, NTI33554439), expected: []}, NTI1979713420);

  return result_1979715849;

}

function failImpl_1979715851(inputInHEX60gensym71_1979715852, expectedInHEX60gensym71_1979715853, tailInHEX60gensym71_1979715854) {
  var result_1979715856 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_1979715856 = nimCopy(result_1979715856, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym71_1979715853, NTI1979714731), tail: nimCopy(null, tailInHEX60gensym71_1979715854, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym71_1979715852, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);

  return result_1979715856;

}
      
function HEX3Aanonymous_1979715859(input_1979715860) {
            var Temporary2;
          var Temporary3;

        var result_1979715862 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979715863 = succeedImpl_1979715844;
          var fail_1979715864 = failImpl_1979715851;
          Label1: do {
            var tempHEX60gensym24_1979715877 = parse_2030044065(a_1979715830, input_1979715860);
            if ((tempHEX60gensym24_1979715877.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_1979715877;
            if (ConstSet54[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979715862 = nimCopy(result_1979715862, {kind: 1, fromInput: nimCopy(null, input_1979715860, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym24_1979715877.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979715883 = nimCopy(null, tempHEX60gensym24_1979715877, NTI2030043366);
          var Temporary3 = result1_1979715883;
          if (ConstSet55[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI2030043157)); }
          result_1979715862 = nimCopy(result_1979715862, succeed_1979715863(input_1979715860, fn_1979715832(Temporary3.value), result1_1979715883.tail), NTI1979713420);
          break BeforeRet;
        } while (false);

        return result_1979715862;

      }

  var result_1979715833 = null;

    Label1: do {
    } while (false);
    result_1979715833 = {body: HEX3Aanonymous_1979715859};

  return result_1979715833;

}

function nucruneLen(s_939524106) {
  var result_939524107 = 0;

    result_939524107 = 0;
    var i_939524108 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_939524108 < (s_939524106).length)) break Label2;
          if ((s_939524106[chckIndx(i_939524108, 0, (s_939524106).length - 1)] <= 127)) {
          i_939524108 = addInt(i_939524108, 1);
          }
          else {
          if (((s_939524106[chckIndx(i_939524108, 0, (s_939524106).length - 1)] >>> 5) == 6)) {
          i_939524108 = addInt(i_939524108, 2);
          }
          else {
          if (((s_939524106[chckIndx(i_939524108, 0, (s_939524106).length - 1)] >>> 4) == 14)) {
          i_939524108 = addInt(i_939524108, 3);
          }
          else {
          if (((s_939524106[chckIndx(i_939524108, 0, (s_939524106).length - 1)] >>> 3) == 30)) {
          i_939524108 = addInt(i_939524108, 4);
          }
          else {
          if (((s_939524106[chckIndx(i_939524108, 0, (s_939524106).length - 1)] >>> 2) == 62)) {
          i_939524108 = addInt(i_939524108, 5);
          }
          else {
          if (((s_939524106[chckIndx(i_939524108, 0, (s_939524106).length - 1)] >>> 1) == 126)) {
          i_939524108 = addInt(i_939524108, 6);
          }
          else {
          i_939524108 = addInt(i_939524108, 1);
          }
          }}}}}
          result_939524107 = addInt(result_939524107, 1);
        }
    } while (false);

  return result_939524107;

}

function toTextRectOneLine_2013265989(s_2013265990, baseline_2013265991, flag_2013265992) {
  var result_2013265993 = ({rows: [], baseline: 0, width: 0, flag: 0});

  BeforeRet: do {
    if (eqStrings(s_2013265990, [])) {
    result_2013265993.flag = flag_2013265992;
    break BeforeRet;
    }
    
    result_2013265993.rows = nimCopy(null, [nimCopy(null, s_2013265990, NTI33554439)], NTI1660944992);
    result_2013265993.width = chckRange(nucruneLen(s_2013265990), 0, 2147483647);
    result_2013265993.baseline = baseline_2013265991;
    result_2013265993.flag = flag_2013265992;
  } while (false);

  return result_2013265993;

}

function HEX7C_1979716914(a_1979716916, b_1979716917) {

function succeedImpl_1979716929(inputInHEX60gensym92_1979716930, valueInHEX60gensym92_1979716931, tailInHEX60gensym92_1979716932) {
  var result_1979716934 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_1979716934 = nimCopy(result_1979716934, {kind: 0, value: nimCopy(null, valueInHEX60gensym92_1979716931, NTI2013265924), tail: nimCopy(null, tailInHEX60gensym92_1979716932, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym92_1979716930, NTI33554439), expected: []}, NTI1979713420);

  return result_1979716934;

}

function failImpl_1979716936(inputInHEX60gensym92_1979716937, expectedInHEX60gensym92_1979716938, tailInHEX60gensym92_1979716939) {
  var result_1979716941 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_1979716941 = nimCopy(result_1979716941, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym92_1979716938, NTI1979715584), tail: nimCopy(null, tailInHEX60gensym92_1979716939, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym92_1979716937, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);

  return result_1979716941;

}
      
function HEX3Aanonymous_1979716944(input_1979716945) {
          var Temporary1;
          var Temporary2;

        var result_1979716947 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979716948 = succeedImpl_1979716929;
          var fail_1979716949 = failImpl_1979716936;
          var result1_1979716962 = parse_1979714564(a_1979716916, input_1979716945);
          if ((result1_1979716962.kind == 0)) {
          result_1979716947 = nimCopy(result_1979716947, result1_1979716962, NTI1979713420);
          break BeforeRet;
          }
          
          var result2_1979716979 = parse_1979714564(b_1979716917, input_1979716945);
          if ((result2_1979716979.kind == 0)) {
          result_1979716947 = nimCopy(result_1979716947, result2_1979716979, NTI1979713420);
          break BeforeRet;
          }
          
          var Temporary1 = result1_1979716962;
          if (ConstSet56[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI2030043157)); }
          var Temporary2 = result2_1979716979;
          if (ConstSet57[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
          result_1979716947 = nimCopy(result_1979716947, fail_1979716949(input_1979716945, HEX26_2013266015(Temporary1.expected, Temporary2.expected), input_1979716945), NTI1979713420);
        } while (false);

        return result_1979716947;

      }

  var result_1979716918 = null;

    Label1: do {
    } while (false);
    result_1979716918 = {body: HEX3Aanonymous_1979716944};

  return result_1979716918;

}

function HEX3CHEX3DHEX25_33555429(x_33555430, y_33555431) {
  var result_33555432 = false;

    result_33555432 = ((x_33555430 >>> 0) <= (y_33555431 >>> 0));

  return result_33555432;

}

function nuctoUTF8(c_939524437) {
  var result_939524438 = [];

    result_939524438 = nimCopy(null, [], NTI33554439);
    var iHEX60gensym49_939524440 = c_939524437;
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_939524440, 127)) {
    (result_939524438.length = 1);
    result_939524438[chckIndx(0, 0, (result_939524438).length - 1)] = chckRange(iHEX60gensym49_939524440, 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_939524440, 2047)) {
    (result_939524438.length = 2);
    result_939524438[chckIndx(0, 0, (result_939524438).length - 1)] = chckRange(((iHEX60gensym49_939524440 >> 6) | 192), 0, 255);
    result_939524438[chckIndx(1, 0, (result_939524438).length - 1)] = chckRange(((iHEX60gensym49_939524440 & 63) | 128), 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_939524440, 65535)) {
    (result_939524438.length = 3);
    result_939524438[chckIndx(0, 0, (result_939524438).length - 1)] = chckRange(((iHEX60gensym49_939524440 >> 12) | 224), 0, 255);
    result_939524438[chckIndx(1, 0, (result_939524438).length - 1)] = chckRange((((iHEX60gensym49_939524440 >> 6) & 63) | 128), 0, 255);
    result_939524438[chckIndx(2, 0, (result_939524438).length - 1)] = chckRange(((iHEX60gensym49_939524440 & 63) | 128), 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_939524440, 2097151)) {
    (result_939524438.length = 4);
    result_939524438[chckIndx(0, 0, (result_939524438).length - 1)] = chckRange(((iHEX60gensym49_939524440 >> 18) | 240), 0, 255);
    result_939524438[chckIndx(1, 0, (result_939524438).length - 1)] = chckRange((((iHEX60gensym49_939524440 >> 12) & 63) | 128), 0, 255);
    result_939524438[chckIndx(2, 0, (result_939524438).length - 1)] = chckRange((((iHEX60gensym49_939524440 >> 6) & 63) | 128), 0, 255);
    result_939524438[chckIndx(3, 0, (result_939524438).length - 1)] = chckRange(((iHEX60gensym49_939524440 & 63) | 128), 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_939524440, 67108863)) {
    (result_939524438.length = 5);
    result_939524438[chckIndx(0, 0, (result_939524438).length - 1)] = chckRange(((iHEX60gensym49_939524440 >> 24) | 248), 0, 255);
    result_939524438[chckIndx(1, 0, (result_939524438).length - 1)] = chckRange((((iHEX60gensym49_939524440 >> 18) & 63) | 128), 0, 255);
    result_939524438[chckIndx(2, 0, (result_939524438).length - 1)] = chckRange((((iHEX60gensym49_939524440 >> 12) & 63) | 128), 0, 255);
    result_939524438[chckIndx(3, 0, (result_939524438).length - 1)] = chckRange((((iHEX60gensym49_939524440 >> 6) & 63) | 128), 0, 255);
    result_939524438[chckIndx(4, 0, (result_939524438).length - 1)] = chckRange(((iHEX60gensym49_939524440 & 63) | 128), 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_939524440, 2147483647)) {
    (result_939524438.length = 6);
    result_939524438[chckIndx(0, 0, (result_939524438).length - 1)] = chckRange(((iHEX60gensym49_939524440 >> 30) | 252), 0, 255);
    result_939524438[chckIndx(1, 0, (result_939524438).length - 1)] = chckRange((((iHEX60gensym49_939524440 >> 24) & 63) | 128), 0, 255);
    result_939524438[chckIndx(2, 0, (result_939524438).length - 1)] = chckRange((((iHEX60gensym49_939524440 >> 18) & 63) | 128), 0, 255);
    result_939524438[chckIndx(3, 0, (result_939524438).length - 1)] = chckRange((((iHEX60gensym49_939524440 >> 12) & 63) | 128), 0, 255);
    result_939524438[chckIndx(4, 0, (result_939524438).length - 1)] = chckRange((((iHEX60gensym49_939524440 >> 6) & 63) | 128), 0, 255);
    result_939524438[chckIndx(5, 0, (result_939524438).length - 1)] = chckRange(((iHEX60gensym49_939524440 & 63) | 128), 0, 255);
    }
    else {
    }
    }}}}}

  return result_939524438;

}

function HEX24_939524687(rune_939524688) {
  var result_939524689 = [];

    result_939524689 = nimCopy(null, nuctoUTF8(rune_939524688), NTI33554439);

  return result_939524689;

}

function inFont_1996488882(letter_1996488883, font_1996488884) {
    var Temporary4;

  var result_1996488885 = [];

  BeforeRet: do {
    Label1: do {
      var lhs_1996488907 = 0;
      var rhs_1996488908 = [];
      var colontmp__1962934520 = [];
      colontmp__1962934520 = fontExceptions_1996488836[chckIndx(font_1996488884, 0, (fontExceptions_1996488836).length - 1)];
      var i_1962934522 = 0;
      var L_1962934523 = (colontmp__1962934520).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_1962934522 < L_1962934523)) break Label3;
            lhs_1996488907 = colontmp__1962934520[chckIndx(i_1962934522, 0, (colontmp__1962934520).length - 1)]["Field0"];
            rhs_1996488908 = colontmp__1962934520[chckIndx(i_1962934522, 0, (colontmp__1962934520).length - 1)]["Field1"];
            if ((letter_1996488883 == lhs_1996488907)) {
            result_1996488885 = nimCopy(null, rhs_1996488908, NTI33554439);
            break BeforeRet;
            }
            
            i_1962934522 = addInt(i_1962934522, 1);
            if (!(((colontmp__1962934520).length == L_1962934523))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    if (contains_1996488979(HEX2EHEX2E_1996488909(65, 90), letter_1996488883)) {
    Temporary4 = 65;
    }
    else {
    Temporary4 = 71;
    }
    
    var shift_1996488986 = Temporary4;
    result_1996488885 = nimCopy(null, HEX24_939524687(((subInt(addInt(fontStarts_1996488815[chckIndx(font_1996488884, 0, (fontStarts_1996488815).length - 1)], letter_1996488883), shift_1996488986)) | 0)), NTI33554439);
    break BeforeRet;
  } while (false);

  return result_1996488885;

}

function map_1979716850(s_1979716853, op_1979716855) {
  var result_1979716856 = [];

    result_1979716856 = new Array(chckRange((s_1979716853).length, 0, 2147483647)); for (var i = 0 ; i < chckRange((s_1979716853).length, 0, 2147483647) ; ++i) { result_1979716856[i] = null; }    Label1: do {
      var i_1979716872 = 0;
      var colontmp__1962934526 = 0;
      colontmp__1962934526 = (s_1979716853).length;
      var i_1962934527 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1962934527 < colontmp__1962934526)) break Label3;
            i_1979716872 = i_1962934527;
            result_1979716856[chckIndx(i_1979716872, 0, (result_1979716856).length - 1)] = op_1979716855(s_1979716853[chckIndx(i_1979716872, 0, (s_1979716853).length - 1)]);
            i_1962934527 = addInt(i_1962934527, 1);
          }
      } while (false);
    } while (false);

  return result_1979716856;

}

function HEX3CHEX3C_1979716322(a_1979716325, b_1979716326) {

function succeedImpl_1979716338(inputInHEX60gensym76_1979716339, valueInHEX60gensym76_1979716340, tailInHEX60gensym76_1979716341) {
  var result_1979716343 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1979716343 = nimCopy(result_1979716343, {kind: 0, value: valueInHEX60gensym76_1979716340, tail: nimCopy(null, tailInHEX60gensym76_1979716341, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym76_1979716339, NTI33554439), expected: []}, NTI2030043366);

  return result_1979716343;

}

function failImpl_1979716345(inputInHEX60gensym76_1979716346, expectedInHEX60gensym76_1979716347, tailInHEX60gensym76_1979716348) {
  var result_1979716350 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1979716350 = nimCopy(result_1979716350, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym76_1979716347, NTI1979715084), tail: nimCopy(null, tailInHEX60gensym76_1979716348, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym76_1979716346, NTI33554439), value: 0}, NTI2030043366);

  return result_1979716350;

}
      
function HEX3Aanonymous_1979716353(input_1979716354) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_1979716356 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979716357 = succeedImpl_1979716338;
          var fail_1979716358 = failImpl_1979716345;
          Label1: do {
            var tempHEX60gensym30_1979716371 = parse_2030044065(a_1979716325, input_1979716354);
            if ((tempHEX60gensym30_1979716371.kind == 1)) {
            var Temporary2 = tempHEX60gensym30_1979716371;
            if (ConstSet58[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979716356 = nimCopy(result_1979716356, {kind: 1, fromInput: nimCopy(null, input_1979716354, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym30_1979716371.tail, NTI33554439), value: 0}, NTI2030043366);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979716377 = nimCopy(null, tempHEX60gensym30_1979716371, NTI2030043366);
          Label3: do {
            var tempHEX60gensym32_1979716390 = parse_2030044065(b_1979716326, result1_1979716377.tail);
            if ((tempHEX60gensym32_1979716390.kind == 1)) {
            var Temporary4 = tempHEX60gensym32_1979716390;
            if (ConstSet59[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI2030043157)); }
            result_1979716356 = nimCopy(result_1979716356, {kind: 1, fromInput: nimCopy(null, input_1979716354, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym32_1979716390.tail, NTI33554439), value: 0}, NTI2030043366);
            break BeforeRet;
            }
            
          } while (false);
          var result2_1979716396 = nimCopy(null, tempHEX60gensym32_1979716390, NTI2030043366);
          var Temporary5 = result1_1979716377;
          if (ConstSet60[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI2030043157)); }
          result_1979716356 = nimCopy(result_1979716356, succeed_1979716357(input_1979716354, Temporary5.value, result2_1979716396.tail), NTI2030043366);
          break BeforeRet;
        } while (false);

        return result_1979716356;

      }

  var result_1979716327 = null;

    Label1: do {
    } while (false);
    result_1979716327 = {body: HEX3Aanonymous_1979716353};

  return result_1979716327;

}

function HEX3CHEX3C_1979716239(a_1979716242, b_1979716243) {

function succeedImpl_1979716255(inputInHEX60gensym75_1979716256, valueInHEX60gensym75_1979716257, tailInHEX60gensym75_1979716258) {
  var result_1979716260 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1979716260 = nimCopy(result_1979716260, {kind: 0, value: valueInHEX60gensym75_1979716257, tail: nimCopy(null, tailInHEX60gensym75_1979716258, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym75_1979716256, NTI33554439), expected: []}, NTI2030043366);

  return result_1979716260;

}

function failImpl_1979716262(inputInHEX60gensym75_1979716263, expectedInHEX60gensym75_1979716264, tailInHEX60gensym75_1979716265) {
  var result_1979716267 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1979716267 = nimCopy(result_1979716267, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym75_1979716264, NTI1979715023), tail: nimCopy(null, tailInHEX60gensym75_1979716265, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym75_1979716263, NTI33554439), value: 0}, NTI2030043366);

  return result_1979716267;

}
      
function HEX3Aanonymous_1979716270(input_1979716271) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_1979716273 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979716274 = succeedImpl_1979716255;
          var fail_1979716275 = failImpl_1979716262;
          Label1: do {
            var tempHEX60gensym30_1979716288 = parse_2030044065(a_1979716242, input_1979716271);
            if ((tempHEX60gensym30_1979716288.kind == 1)) {
            var Temporary2 = tempHEX60gensym30_1979716288;
            if (ConstSet61[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979716273 = nimCopy(result_1979716273, {kind: 1, fromInput: nimCopy(null, input_1979716271, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym30_1979716288.tail, NTI33554439), value: 0}, NTI2030043366);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979716294 = nimCopy(null, tempHEX60gensym30_1979716288, NTI2030043366);
          Label3: do {
            var tempHEX60gensym32_1979716307 = parse_1979713530(b_1979716243, result1_1979716294.tail);
            if ((tempHEX60gensym32_1979716307.kind == 1)) {
            var Temporary4 = tempHEX60gensym32_1979716307;
            if (ConstSet62[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI2030043157)); }
            result_1979716273 = nimCopy(result_1979716273, {kind: 1, fromInput: nimCopy(null, input_1979716271, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym32_1979716307.tail, NTI33554439), value: 0}, NTI2030043366);
            break BeforeRet;
            }
            
          } while (false);
          var result2_1979716313 = nimCopy(null, tempHEX60gensym32_1979716307, NTI1979712330);
          var Temporary5 = result1_1979716294;
          if (ConstSet63[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI2030043157)); }
          result_1979716273 = nimCopy(result_1979716273, succeed_1979716274(input_1979716271, Temporary5.value, result2_1979716313.tail), NTI2030043366);
          break BeforeRet;
        } while (false);

        return result_1979716273;

      }

  var result_1979716244 = null;

    Label1: do {
    } while (false);
    result_1979716244 = {body: HEX3Aanonymous_1979716270};

  return result_1979716244;

}

function HEX3EHEX3E_1979716060(a_1979716063, b_1979716064) {

function succeedImpl_1979716076(inputInHEX60gensym73_1979716077, valueInHEX60gensym73_1979716078, tailInHEX60gensym73_1979716079) {
  var result_1979716081 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1979716081 = nimCopy(result_1979716081, {kind: 0, value: valueInHEX60gensym73_1979716078, tail: nimCopy(null, tailInHEX60gensym73_1979716079, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym73_1979716077, NTI33554439), expected: []}, NTI2030043366);

  return result_1979716081;

}

function failImpl_1979716083(inputInHEX60gensym73_1979716084, expectedInHEX60gensym73_1979716085, tailInHEX60gensym73_1979716086) {
  var result_1979716088 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1979716088 = nimCopy(result_1979716088, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym73_1979716085, NTI1979714896), tail: nimCopy(null, tailInHEX60gensym73_1979716086, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym73_1979716084, NTI33554439), value: 0}, NTI2030043366);

  return result_1979716088;

}
      
function HEX3Aanonymous_1979716091(input_1979716092) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_1979716094 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979716095 = succeedImpl_1979716076;
          var fail_1979716096 = failImpl_1979716083;
          Label1: do {
            var tempHEX60gensym34_1979716109 = parse_1979713530(a_1979716063, input_1979716092);
            if ((tempHEX60gensym34_1979716109.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_1979716109;
            if (ConstSet64[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979716094 = nimCopy(result_1979716094, {kind: 1, fromInput: nimCopy(null, input_1979716092, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym34_1979716109.tail, NTI33554439), value: 0}, NTI2030043366);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979716115 = nimCopy(null, tempHEX60gensym34_1979716109, NTI1979712330);
          Label3: do {
            var tempHEX60gensym36_1979716128 = parse_2030044065(b_1979716064, result1_1979716115.tail);
            if ((tempHEX60gensym36_1979716128.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_1979716128;
            if (ConstSet65[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI2030043157)); }
            result_1979716094 = nimCopy(result_1979716094, {kind: 1, fromInput: nimCopy(null, input_1979716092, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym36_1979716128.tail, NTI33554439), value: 0}, NTI2030043366);
            break BeforeRet;
            }
            
          } while (false);
          var result2_1979716134 = nimCopy(null, tempHEX60gensym36_1979716128, NTI2030043366);
          var Temporary5 = result2_1979716134;
          if (ConstSet66[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI2030043157)); }
          result_1979716094 = nimCopy(result_1979716094, succeed_1979716095(input_1979716092, Temporary5.value, result2_1979716134.tail), NTI2030043366);
          break BeforeRet;
        } while (false);

        return result_1979716094;

      }

  var result_1979716065 = null;

    Label1: do {
    } while (false);
    result_1979716065 = {body: HEX3Aanonymous_1979716091};

  return result_1979716065;

}

function HEX3EHEX3E_1979716143(a_1979716146, b_1979716147) {

function succeedImpl_1979716159(inputInHEX60gensym74_1979716160, valueInHEX60gensym74_1979716161, tailInHEX60gensym74_1979716162) {
  var result_1979716164 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979716164 = nimCopy(result_1979716164, {kind: 0, value: nimCopy(null, valueInHEX60gensym74_1979716161, NTI1979712324), tail: nimCopy(null, tailInHEX60gensym74_1979716162, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym74_1979716160, NTI33554439), expected: []}, NTI1979712330);

  return result_1979716164;

}

function failImpl_1979716166(inputInHEX60gensym74_1979716167, expectedInHEX60gensym74_1979716168, tailInHEX60gensym74_1979716169) {
  var result_1979716171 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979716171 = nimCopy(result_1979716171, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym74_1979716168, NTI1979714957), tail: nimCopy(null, tailInHEX60gensym74_1979716169, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym74_1979716167, NTI33554439), value: []}, NTI1979712330);

  return result_1979716171;

}
      
function HEX3Aanonymous_1979716174(input_1979716175) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_1979716177 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979716178 = succeedImpl_1979716159;
          var fail_1979716179 = failImpl_1979716166;
          Label1: do {
            var tempHEX60gensym34_1979716192 = parse_2030044065(a_1979716146, input_1979716175);
            if ((tempHEX60gensym34_1979716192.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_1979716192;
            if (ConstSet67[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979716177 = nimCopy(result_1979716177, {kind: 1, fromInput: nimCopy(null, input_1979716175, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym34_1979716192.tail, NTI33554439), value: []}, NTI1979712330);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979716198 = nimCopy(null, tempHEX60gensym34_1979716192, NTI2030043366);
          Label3: do {
            var tempHEX60gensym36_1979716211 = parse_1979713530(b_1979716147, result1_1979716198.tail);
            if ((tempHEX60gensym36_1979716211.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_1979716211;
            if (ConstSet68[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI2030043157)); }
            result_1979716177 = nimCopy(result_1979716177, {kind: 1, fromInput: nimCopy(null, input_1979716175, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym36_1979716211.tail, NTI33554439), value: []}, NTI1979712330);
            break BeforeRet;
            }
            
          } while (false);
          var result2_1979716217 = nimCopy(null, tempHEX60gensym36_1979716211, NTI1979712330);
          var Temporary5 = result2_1979716217;
          if (ConstSet69[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI2030043157)); }
          result_1979716177 = nimCopy(result_1979716177, succeed_1979716178(input_1979716175, Temporary5.value, result2_1979716217.tail), NTI1979712330);
          break BeforeRet;
        } while (false);

        return result_1979716177;

      }

  var result_1979716148 = null;

    Label1: do {
    } while (false);
    result_1979716148 = {body: HEX3Aanonymous_1979716174};

  return result_1979716148;

}

function HEX3EHEX3E_1979715977(a_1979715980, b_1979715981) {

function succeedImpl_1979715993(inputInHEX60gensym72_1979715994, valueInHEX60gensym72_1979715995, tailInHEX60gensym72_1979715996) {
  var result_1979715998 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979715998 = nimCopy(result_1979715998, {kind: 0, value: nimCopy(null, valueInHEX60gensym72_1979715995, NTI1979712324), tail: nimCopy(null, tailInHEX60gensym72_1979715996, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym72_1979715994, NTI33554439), expected: []}, NTI1979712330);

  return result_1979715998;

}

function failImpl_1979716000(inputInHEX60gensym72_1979716001, expectedInHEX60gensym72_1979716002, tailInHEX60gensym72_1979716003) {
  var result_1979716005 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979716005 = nimCopy(result_1979716005, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym72_1979716002, NTI1979714835), tail: nimCopy(null, tailInHEX60gensym72_1979716003, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym72_1979716001, NTI33554439), value: []}, NTI1979712330);

  return result_1979716005;

}
      
function HEX3Aanonymous_1979716008(input_1979716009) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_1979716011 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979716012 = succeedImpl_1979715993;
          var fail_1979716013 = failImpl_1979716000;
          Label1: do {
            var tempHEX60gensym34_1979716026 = parse_1979713292(a_1979715980, input_1979716009);
            if ((tempHEX60gensym34_1979716026.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_1979716026;
            if (ConstSet70[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979716011 = nimCopy(result_1979716011, {kind: 1, fromInput: nimCopy(null, input_1979716009, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym34_1979716026.tail, NTI33554439), value: []}, NTI1979712330);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979716032 = nimCopy(null, tempHEX60gensym34_1979716026, NTI2030043268);
          Label3: do {
            var tempHEX60gensym36_1979716045 = parse_1979713530(b_1979715981, result1_1979716032.tail);
            if ((tempHEX60gensym36_1979716045.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_1979716045;
            if (ConstSet71[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI2030043157)); }
            result_1979716011 = nimCopy(result_1979716011, {kind: 1, fromInput: nimCopy(null, input_1979716009, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym36_1979716045.tail, NTI33554439), value: []}, NTI1979712330);
            break BeforeRet;
            }
            
          } while (false);
          var result2_1979716051 = nimCopy(null, tempHEX60gensym36_1979716045, NTI1979712330);
          var Temporary5 = result2_1979716051;
          if (ConstSet72[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI2030043157)); }
          result_1979716011 = nimCopy(result_1979716011, succeed_1979716012(input_1979716009, Temporary5.value, result2_1979716051.tail), NTI1979712330);
          break BeforeRet;
        } while (false);

        return result_1979716011;

      }

  var result_1979715982 = null;

    Label1: do {
    } while (false);
    result_1979715982 = {body: HEX3Aanonymous_1979716008};

  return result_1979715982;

}

function nsuStartsWith(s_654312737, prefix_654312738) {
            var Temporary3;

  var result_654312739 = false;

  BeforeRet: do {
    var prefixLenHEX60gensym141_654312744 = (prefix_654312738).length;
    var sLenHEX60gensym141_654312745 = (s_654312737).length;
    var iHEX60gensym141_654312746 = 0;
    Label1: do {
        Label2: while (true) {
        if (!true) break Label2;
          if ((prefixLenHEX60gensym141_654312744 <= iHEX60gensym141_654312746)) {
          result_654312739 = true;
          break BeforeRet;
          }
          
            if ((sLenHEX60gensym141_654312745 <= iHEX60gensym141_654312746)) Temporary3 = true; else {              Temporary3 = !((s_654312737[chckIndx(iHEX60gensym141_654312746, 0, (s_654312737).length - 1)] == prefix_654312738[chckIndx(iHEX60gensym141_654312746, 0, (prefix_654312738).length - 1)]));            }          if (Temporary3) {
          result_654312739 = false;
          break BeforeRet;
          }
          
          iHEX60gensym141_654312746 = addInt(iHEX60gensym141_654312746, 1);
        }
    } while (false);
  } while (false);

  return result_654312739;

}

function s_2030043247(expect_2030043248) {

function succeedImpl_2030043269(inputInHEX60gensym2_2030043270, valueInHEX60gensym2_2030043271, tailInHEX60gensym2_2030043272) {
  var result_2030043274 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_2030043274 = nimCopy(result_2030043274, {kind: 0, value: nimCopy(null, valueInHEX60gensym2_2030043271, NTI33554439), tail: nimCopy(null, tailInHEX60gensym2_2030043272, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym2_2030043270, NTI33554439), expected: []}, NTI2030043268);

  return result_2030043274;

}

function failImpl_2030043297(inputInHEX60gensym2_2030043298, expectedInHEX60gensym2_2030043299, tailInHEX60gensym2_2030043300) {
  var result_2030043302 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_2030043302 = nimCopy(result_2030043302, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym2_2030043299, NTI2030043302), tail: nimCopy(null, tailInHEX60gensym2_2030043300, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym2_2030043298, NTI33554439), value: []}, NTI2030043268);

  return result_2030043302;

}
      expect_2030043248 = nimCopy(null, expect_2030043248, NTI33554439);
      
function HEX3Aanonymous_2030043305(input_2030043306) {
        var result_2030043308 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_2030043309 = succeedImpl_2030043269;
          var fail_2030043310 = failImpl_2030043297;
          if (nsuStartsWith(input_2030043306, expect_2030043248)) {
          result_2030043308 = nimCopy(result_2030043308, succeed_2030043309(input_2030043306, expect_2030043248, HEX5BHEX5D_939527322(input_2030043306, HEX2EHEX2E_872415312((expect_2030043248).length, 1))), NTI2030043268);
          break BeforeRet;
          }
          
          result_2030043308 = nimCopy(result_2030043308, fail_2030043310(input_2030043306, [nsuFormatSingleElem(makeNimstrLit("\'$1\'"), expect_2030043248)], input_2030043306), NTI2030043268);
        } while (false);

        return result_2030043308;

      }

  var result_2030043258 = null;

    Label1: do {
    } while (false);
    result_2030043258 = {body: HEX3Aanonymous_2030043305};

  return result_2030043258;

}

function c_2030043369(expect_2030043370) {

function succeedImpl_2030043391(inputInHEX60gensym5_2030043392, valueInHEX60gensym5_2030043393, tailInHEX60gensym5_2030043394) {
  var result_2030043396 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_2030043396 = nimCopy(result_2030043396, {kind: 0, value: valueInHEX60gensym5_2030043393, tail: nimCopy(null, tailInHEX60gensym5_2030043394, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym5_2030043392, NTI33554439), expected: []}, NTI2030043366);

  return result_2030043396;

}

function failImpl_2030043410(inputInHEX60gensym5_2030043411, expectedInHEX60gensym5_2030043412, tailInHEX60gensym5_2030043413) {
  var result_2030043415 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_2030043415 = nimCopy(result_2030043415, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym5_2030043412, NTI2030043394), tail: nimCopy(null, tailInHEX60gensym5_2030043413, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym5_2030043411, NTI33554439), value: 0}, NTI2030043366);

  return result_2030043415;

}
      
function HEX3Aanonymous_2030043418(input_2030043419) {
            var Temporary1;

        var result_2030043421 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_2030043422 = succeedImpl_2030043391;
          var fail_2030043423 = failImpl_2030043410;
            if (!(0 < (input_2030043419).length)) Temporary1 = false; else {              Temporary1 = (input_2030043419[chckIndx(0, 0, (input_2030043419).length - 1)] == expect_2030043370);            }          if (Temporary1) {
          result_2030043421 = nimCopy(result_2030043421, succeed_2030043422(input_2030043419, expect_2030043370, HEX5BHEX5D_939527322(input_2030043419, HEX2EHEX2E_872415312(1, 1))), NTI2030043366);
          break BeforeRet;
          }
          
          result_2030043421 = nimCopy(result_2030043421, fail_2030043423(input_2030043419, [nsuFormatSingleElem(makeNimstrLit("\'$1\'"), nimCharToStr(expect_2030043370))], input_2030043419), NTI2030043366);
        } while (false);

        return result_2030043421;

      }

  var result_2030043380 = null;

    Label1: do {
    } while (false);
    result_2030043380 = {body: HEX3Aanonymous_2030043418};

  return result_2030043380;

}

function map_1979717301(s_1979717304, op_1979717306) {
  var result_1979717307 = [];

    result_1979717307 = new Array(chckRange((s_1979717304).length, 0, 2147483647)); for (var i = 0 ; i < chckRange((s_1979717304).length, 0, 2147483647) ; ++i) { result_1979717307[i] = null; }    Label1: do {
      var i_1979717322 = 0;
      var colontmp__1962934551 = 0;
      colontmp__1962934551 = (s_1979717304).length;
      var i_1962934552 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1962934552 < colontmp__1962934551)) break Label3;
            i_1979717322 = i_1962934552;
            result_1979717307[chckIndx(i_1979717322, 0, (result_1979717307).length - 1)] = op_1979717306(s_1979717304[chckIndx(i_1979717322, 0, (s_1979717304).length - 1)]);
            i_1962934552 = addInt(i_1962934552, 1);
          }
      } while (false);
    } while (false);

  return result_1979717307;

}

function map_1979717189(a_1979717192, fn_1979717194) {

function succeedImpl_1979717206(inputInHEX60gensym96_1979717207, valueInHEX60gensym96_1979717208, tailInHEX60gensym96_1979717209) {
  var result_1979717211 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_1979717211 = nimCopy(result_1979717211, {kind: 0, value: nimCopy(null, valueInHEX60gensym96_1979717208, NTI2013265924), tail: nimCopy(null, tailInHEX60gensym96_1979717209, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym96_1979717207, NTI33554439), expected: []}, NTI1979713420);

  return result_1979717211;

}

function failImpl_1979717213(inputInHEX60gensym96_1979717214, expectedInHEX60gensym96_1979717215, tailInHEX60gensym96_1979717216) {
  var result_1979717218 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_1979717218 = nimCopy(result_1979717218, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym96_1979717215, NTI1979715779), tail: nimCopy(null, tailInHEX60gensym96_1979717216, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym96_1979717214, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);

  return result_1979717218;

}
      
function HEX3Aanonymous_1979717221(input_1979717222) {
            var Temporary2;
          var Temporary3;

        var result_1979717224 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979717225 = succeedImpl_1979717206;
          var fail_1979717226 = failImpl_1979717213;
          Label1: do {
            var tempHEX60gensym24_1979717239 = parse_1979713292(a_1979717192, input_1979717222);
            if ((tempHEX60gensym24_1979717239.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_1979717239;
            if (ConstSet73[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979717224 = nimCopy(result_1979717224, {kind: 1, fromInput: nimCopy(null, input_1979717222, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym24_1979717239.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979717245 = nimCopy(null, tempHEX60gensym24_1979717239, NTI2030043268);
          var Temporary3 = result1_1979717245;
          if (ConstSet74[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI2030043157)); }
          result_1979717224 = nimCopy(result_1979717224, succeed_1979717225(input_1979717222, fn_1979717194(Temporary3.value), result1_1979717245.tail), NTI1979713420);
          break BeforeRet;
        } while (false);

        return result_1979717224;

      }

  var result_1979717195 = null;

    Label1: do {
    } while (false);
    result_1979717195 = {body: HEX3Aanonymous_1979717221};

  return result_1979717195;

}

function HEX3CHEX3C_1979717075(a_1979717078, b_1979717079) {

function succeedImpl_1979717091(inputInHEX60gensym94_1979717092, valueInHEX60gensym94_1979717093, tailInHEX60gensym94_1979717094) {
  var result_1979717096 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979717096 = nimCopy(result_1979717096, {kind: 0, value: nimCopy(null, valueInHEX60gensym94_1979717093, NTI33554439), tail: nimCopy(null, tailInHEX60gensym94_1979717094, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym94_1979717092, NTI33554439), expected: []}, NTI2030043268);

  return result_1979717096;

}

function failImpl_1979717098(inputInHEX60gensym94_1979717099, expectedInHEX60gensym94_1979717100, tailInHEX60gensym94_1979717101) {
  var result_1979717103 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979717103 = nimCopy(result_1979717103, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym94_1979717100, NTI1979715693), tail: nimCopy(null, tailInHEX60gensym94_1979717101, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym94_1979717099, NTI33554439), value: []}, NTI2030043268);

  return result_1979717103;

}
      
function HEX3Aanonymous_1979717106(input_1979717107) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_1979717109 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979717110 = succeedImpl_1979717091;
          var fail_1979717111 = failImpl_1979717098;
          Label1: do {
            var tempHEX60gensym30_1979717124 = parse_1979713292(a_1979717078, input_1979717107);
            if ((tempHEX60gensym30_1979717124.kind == 1)) {
            var Temporary2 = tempHEX60gensym30_1979717124;
            if (ConstSet75[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979717109 = nimCopy(result_1979717109, {kind: 1, fromInput: nimCopy(null, input_1979717107, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym30_1979717124.tail, NTI33554439), value: []}, NTI2030043268);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979717130 = nimCopy(null, tempHEX60gensym30_1979717124, NTI2030043268);
          Label3: do {
            var tempHEX60gensym32_1979717143 = parse_2030044065(b_1979717079, result1_1979717130.tail);
            if ((tempHEX60gensym32_1979717143.kind == 1)) {
            var Temporary4 = tempHEX60gensym32_1979717143;
            if (ConstSet76[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI2030043157)); }
            result_1979717109 = nimCopy(result_1979717109, {kind: 1, fromInput: nimCopy(null, input_1979717107, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym32_1979717143.tail, NTI33554439), value: []}, NTI2030043268);
            break BeforeRet;
            }
            
          } while (false);
          var result2_1979717149 = nimCopy(null, tempHEX60gensym32_1979717143, NTI2030043366);
          var Temporary5 = result1_1979717130;
          if (ConstSet77[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI2030043157)); }
          result_1979717109 = nimCopy(result_1979717109, succeed_1979717110(input_1979717107, Temporary5.value, result2_1979717149.tail), NTI2030043268);
          break BeforeRet;
        } while (false);

        return result_1979717109;

      }

  var result_1979717080 = null;

    Label1: do {
    } while (false);
    result_1979717080 = {body: HEX3Aanonymous_1979717106};

  return result_1979717080;

}

function HEX21_1979717018(a_1979717020) {

function succeedImpl_1979717032(inputInHEX60gensym93_1979717033, valueInHEX60gensym93_1979717034, tailInHEX60gensym93_1979717035) {
  var result_1979717037 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1979717037 = nimCopy(result_1979717037, {kind: 0, value: valueInHEX60gensym93_1979717034, tail: nimCopy(null, tailInHEX60gensym93_1979717035, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym93_1979717033, NTI33554439), expected: []}, NTI2030043366);

  return result_1979717037;

}

function failImpl_1979717039(inputInHEX60gensym93_1979717040, expectedInHEX60gensym93_1979717041, tailInHEX60gensym93_1979717042) {
  var result_1979717044 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1979717044 = nimCopy(result_1979717044, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym93_1979717041, NTI1979715648), tail: nimCopy(null, tailInHEX60gensym93_1979717042, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym93_1979717040, NTI33554439), value: 0}, NTI2030043366);

  return result_1979717044;

}
      
function HEX3Aanonymous_1979717047(input_1979717048) {
        var result_1979717050 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979717051 = succeedImpl_1979717032;
          var fail_1979717052 = failImpl_1979717039;
          var result1_1979717065 = parse_2030044065(a_1979717020, input_1979717048);
          switch (result1_1979717065.kind) {
          case 0:
            result_1979717050 = nimCopy(result_1979717050, fail_1979717052(input_1979717048, [makeNimstrLit("successful negative lookahead")], input_1979717048), NTI2030043366);
            break BeforeRet;
            break;
          case 1:
            result_1979717050 = nimCopy(result_1979717050, succeed_1979717051(input_1979717048, 0, input_1979717048), NTI2030043366);
            break BeforeRet;
            break;
          }
        } while (false);

        return result_1979717050;

      }

  var result_1979717021 = null;

    Label1: do {
    } while (false);
    result_1979717021 = {body: HEX3Aanonymous_1979717047};

  return result_1979717021;

}

function validate_1979718941(p_1979718943, fn_1979718945, expected_1979718946) {

function succeedImpl_1979718958(inputInHEX60gensym129_1979718959, valueInHEX60gensym129_1979718960, tailInHEX60gensym129_1979718961) {
  var result_1979718963 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979718963 = nimCopy(result_1979718963, {kind: 0, value: nimCopy(null, valueInHEX60gensym129_1979718960, NTI33554439), tail: nimCopy(null, tailInHEX60gensym129_1979718961, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym129_1979718959, NTI33554439), expected: []}, NTI2030043268);

  return result_1979718963;

}

function failImpl_1979718965(inputInHEX60gensym129_1979718966, expectedInHEX60gensym129_1979718967, tailInHEX60gensym129_1979718968) {
  var result_1979718970 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979718970 = nimCopy(result_1979718970, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym129_1979718967, NTI1979717199), tail: nimCopy(null, tailInHEX60gensym129_1979718968, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym129_1979718966, NTI33554439), value: []}, NTI2030043268);

  return result_1979718970;

}
      expected_1979718946 = nimCopy(null, expected_1979718946, NTI33554439);
      
function HEX3Aanonymous_1979718973(input_1979718974) {
              var Temporary1;

        var result_1979718976 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979718977 = succeedImpl_1979718958;
          var fail_1979718978 = failImpl_1979718965;
          var result1_1979718991 = parse_1979713292(p_1979718943, input_1979718974);
          switch (result1_1979718991.kind) {
          case 1:
            result_1979718976 = nimCopy(result_1979718976, result1_1979718991, NTI2030043268);
            break BeforeRet;
            break;
          case 0:
              var Temporary1 = result1_1979718991;
              if (ConstSet78[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI2030043157)); }
            if (fn_1979718945(Temporary1.value)) {
            result_1979718976 = nimCopy(result_1979718976, result1_1979718991, NTI2030043268);
            break BeforeRet;
            }
            
            result_1979718976 = nimCopy(result_1979718976, fail_1979718978(input_1979718974, [nimCopy(null, expected_1979718946, NTI33554439)], input_1979718974), NTI2030043268);
            break BeforeRet;
            break;
          }
        } while (false);

        return result_1979718976;

      }

  var result_1979718947 = null;

    Label1: do {
    } while (false);
    result_1979718947 = {body: HEX3Aanonymous_1979718973};

  return result_1979718947;

}

function parse_1979717849(p_1979717851, input_1979717852) {
  var result_1979717853 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_1979717851.body == null)) {
    result_1979717853 = nimCopy(result_1979717853, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_1979717852, NTI33554439), fromInput: nimCopy(null, input_1979717852, NTI33554439), value: []}, NTI1979715881);
    break BeforeRet;
    }
    
    result_1979717853 = nimCopy(result_1979717853, p_1979717851.body(input_1979717852), NTI1979715881);
  } while (false);

  return result_1979717853;

}

function map_1979718807(a_1979718810, fn_1979718812) {

function succeedImpl_1979718824(inputInHEX60gensym127_1979718825, valueInHEX60gensym127_1979718826, tailInHEX60gensym127_1979718827) {
  var result_1979718829 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979718829 = nimCopy(result_1979718829, {kind: 0, value: nimCopy(null, valueInHEX60gensym127_1979718826, NTI33554439), tail: nimCopy(null, tailInHEX60gensym127_1979718827, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym127_1979718825, NTI33554439), expected: []}, NTI2030043268);

  return result_1979718829;

}

function failImpl_1979718831(inputInHEX60gensym127_1979718832, expectedInHEX60gensym127_1979718833, tailInHEX60gensym127_1979718834) {
  var result_1979718836 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979718836 = nimCopy(result_1979718836, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym127_1979718833, NTI1979717118), tail: nimCopy(null, tailInHEX60gensym127_1979718834, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym127_1979718832, NTI33554439), value: []}, NTI2030043268);

  return result_1979718836;

}
      
function HEX3Aanonymous_1979718839(input_1979718840) {
            var Temporary2;
          var Temporary3;

        var result_1979718842 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979718843 = succeedImpl_1979718824;
          var fail_1979718844 = failImpl_1979718831;
          Label1: do {
            var tempHEX60gensym24_1979718857 = parse_1979717849(a_1979718810, input_1979718840);
            if ((tempHEX60gensym24_1979718857.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_1979718857;
            if (ConstSet79[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979718842 = nimCopy(result_1979718842, {kind: 1, fromInput: nimCopy(null, input_1979718840, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym24_1979718857.tail, NTI33554439), value: []}, NTI2030043268);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979718863 = nimCopy(null, tempHEX60gensym24_1979718857, NTI1979715881);
          var Temporary3 = result1_1979718863;
          if (ConstSet80[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI2030043157)); }
          result_1979718842 = nimCopy(result_1979718842, succeed_1979718843(input_1979718840, fn_1979718812(Temporary3.value), result1_1979718863.tail), NTI2030043268);
          break BeforeRet;
        } while (false);

        return result_1979718842;

      }

  var result_1979718813 = null;

    Label1: do {
    } while (false);
    result_1979718813 = {body: HEX3Aanonymous_1979718839};

  return result_1979718813;

}

function HEX3EHEX3E_1979718671(a_1979718674, b_1979718675) {

function succeedImpl_1979718687(inputInHEX60gensym126_1979718688, valueInHEX60gensym126_1979718689, tailInHEX60gensym126_1979718690) {
  var result_1979718692 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979718692 = nimCopy(result_1979718692, {kind: 0, value: nimCopy(null, valueInHEX60gensym126_1979718689, NTI1979715875), tail: nimCopy(null, tailInHEX60gensym126_1979718690, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym126_1979718688, NTI33554439), expected: []}, NTI1979715881);

  return result_1979718692;

}

function failImpl_1979718694(inputInHEX60gensym126_1979718695, expectedInHEX60gensym126_1979718696, tailInHEX60gensym126_1979718697) {
  var result_1979718699 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979718699 = nimCopy(result_1979718699, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym126_1979718696, NTI1979717019), tail: nimCopy(null, tailInHEX60gensym126_1979718697, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym126_1979718695, NTI33554439), value: []}, NTI1979715881);

  return result_1979718699;

}
      
function HEX3Aanonymous_1979718702(input_1979718703) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_1979718705 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979718706 = succeedImpl_1979718687;
          var fail_1979718707 = failImpl_1979718694;
          Label1: do {
            var tempHEX60gensym34_1979718720 = parse_2030044065(a_1979718674, input_1979718703);
            if ((tempHEX60gensym34_1979718720.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_1979718720;
            if (ConstSet81[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979718705 = nimCopy(result_1979718705, {kind: 1, fromInput: nimCopy(null, input_1979718703, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym34_1979718720.tail, NTI33554439), value: []}, NTI1979715881);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979718726 = nimCopy(null, tempHEX60gensym34_1979718720, NTI2030043366);
          Label3: do {
            var tempHEX60gensym36_1979718739 = parse_1979717849(b_1979718675, result1_1979718726.tail);
            if ((tempHEX60gensym36_1979718739.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_1979718739;
            if (ConstSet82[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI2030043157)); }
            result_1979718705 = nimCopy(result_1979718705, {kind: 1, fromInput: nimCopy(null, input_1979718703, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym36_1979718739.tail, NTI33554439), value: []}, NTI1979715881);
            break BeforeRet;
            }
            
          } while (false);
          var result2_1979718745 = nimCopy(null, tempHEX60gensym36_1979718739, NTI1979715881);
          var Temporary5 = result2_1979718745;
          if (ConstSet83[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI2030043157)); }
          result_1979718705 = nimCopy(result_1979718705, succeed_1979718706(input_1979718703, Temporary5.value, result2_1979718745.tail), NTI1979715881);
          break BeforeRet;
        } while (false);

        return result_1979718705;

      }

  var result_1979718676 = null;

    Label1: do {
    } while (false);
    result_1979718676 = {body: HEX3Aanonymous_1979718702};

  return result_1979718676;

}

function parse_1979718381(p_1979718383, input_1979718384) {
  var result_1979718385 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_1979718383.body == null)) {
    result_1979718385 = nimCopy(result_1979718385, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_1979718384, NTI33554439), fromInput: nimCopy(null, input_1979718384, NTI33554439), value: []}, NTI1979716352);
    break BeforeRet;
    }
    
    result_1979718385 = nimCopy(result_1979718385, p_1979718383.body(input_1979718384), NTI1979716352);
  } while (false);

  return result_1979718385;

}

function map_1979718606(a_1979718609, fn_1979718611) {

function succeedImpl_1979718623(inputInHEX60gensym125_1979718624, valueInHEX60gensym125_1979718625, tailInHEX60gensym125_1979718626) {
  var result_1979718628 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979718628 = nimCopy(result_1979718628, {kind: 0, value: nimCopy(null, valueInHEX60gensym125_1979718625, NTI1979716870), tail: nimCopy(null, tailInHEX60gensym125_1979718626, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym125_1979718624, NTI33554439), expected: []}, NTI1979715881);

  return result_1979718628;

}

function failImpl_1979718630(inputInHEX60gensym125_1979718631, expectedInHEX60gensym125_1979718632, tailInHEX60gensym125_1979718633) {
  var result_1979718635 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979718635 = nimCopy(result_1979718635, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym125_1979718632, NTI1979716972), tail: nimCopy(null, tailInHEX60gensym125_1979718633, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym125_1979718631, NTI33554439), value: []}, NTI1979715881);

  return result_1979718635;

}
      
function HEX3Aanonymous_1979718638(input_1979718639) {
            var Temporary2;
          var Temporary3;

        var result_1979718641 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979718642 = succeedImpl_1979718623;
          var fail_1979718643 = failImpl_1979718630;
          Label1: do {
            var tempHEX60gensym24_1979718656 = parse_1979718381(a_1979718609, input_1979718639);
            if ((tempHEX60gensym24_1979718656.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_1979718656;
            if (ConstSet84[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979718641 = nimCopy(result_1979718641, {kind: 1, fromInput: nimCopy(null, input_1979718639, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym24_1979718656.tail, NTI33554439), value: []}, NTI1979715881);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979718662 = nimCopy(null, tempHEX60gensym24_1979718656, NTI1979716352);
          var Temporary3 = result1_1979718662;
          if (ConstSet85[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI2030043157)); }
          result_1979718641 = nimCopy(result_1979718641, succeed_1979718642(input_1979718639, fn_1979718611(Temporary3.value), result1_1979718662.tail), NTI1979715881);
          break BeforeRet;
        } while (false);

        return result_1979718641;

      }

  var result_1979718612 = null;

    Label1: do {
    } while (false);
    result_1979718612 = {body: HEX3Aanonymous_1979718638};

  return result_1979718612;

}

function HEX26_1979718423(x_1979718425, y_1979718426) {
  var result_1979718427 = [];

    result_1979718427 = new Array(chckRange(addInt((x_1979718425).length, (y_1979718426).length), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_1979718425).length, (y_1979718426).length), 0, 2147483647) ; ++i) { result_1979718427[i] = []; }    Label1: do {
      var i_1979718446 = 0;
      var colontmp__1962934572 = 0;
      colontmp__1962934572 = subInt((x_1979718425).length, 1);
      var res_1962934573 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_1962934573 <= colontmp__1962934572)) break Label3;
            i_1979718446 = res_1962934573;
            result_1979718427[chckIndx(i_1979718446, 0, (result_1979718427).length - 1)] = nimCopy(null, x_1979718425[chckIndx(i_1979718446, 0, (x_1979718425).length - 1)], NTI1979715875);
            res_1962934573 = addInt(res_1962934573, 1);
          }
      } while (false);
    } while (false);
    Label4: do {
      var i_1979718454 = 0;
      var colontmp__1962934576 = 0;
      colontmp__1962934576 = subInt((y_1979718426).length, 1);
      var res_1962934577 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(res_1962934577 <= colontmp__1962934576)) break Label6;
            i_1979718454 = res_1962934577;
            result_1979718427[chckIndx(addInt(i_1979718454, (x_1979718425).length), 0, (result_1979718427).length - 1)] = nimCopy(null, y_1979718426[chckIndx(i_1979718454, 0, (y_1979718426).length - 1)], NTI1979715875);
            res_1962934577 = addInt(res_1962934577, 1);
          }
      } while (false);
    } while (false);

  return result_1979718427;

}

function HEX26_1979718328(a_1979718333, b_1979718337) {

function succeedImpl_1979718352(inputInHEX60gensym119_1979718353, valueInHEX60gensym119_1979718354, tailInHEX60gensym119_1979718355) {
  var result_1979718357 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979718357 = nimCopy(result_1979718357, {kind: 0, value: nimCopy(null, valueInHEX60gensym119_1979718354, NTI1979716752), tail: nimCopy(null, tailInHEX60gensym119_1979718355, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym119_1979718353, NTI33554439), expected: []}, NTI1979716352);

  return result_1979718357;

}

function failImpl_1979718359(inputInHEX60gensym119_1979718360, expectedInHEX60gensym119_1979718361, tailInHEX60gensym119_1979718362) {
  var result_1979718364 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979718364 = nimCopy(result_1979718364, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym119_1979718361, NTI1979716758), tail: nimCopy(null, tailInHEX60gensym119_1979718362, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym119_1979718360, NTI33554439), value: []}, NTI1979716352);

  return result_1979718364;

}
      
function HEX3Aanonymous_1979718367(input_1979718368) {
            var Temporary2;
            var Temporary4;
          var Temporary5;
          var Temporary6;

        var result_1979718370 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979718371 = succeedImpl_1979718352;
          var fail_1979718372 = failImpl_1979718359;
          Label1: do {
            var tempHEX60gensym26_1979718397 = parse_1979718381(a_1979718333, input_1979718368);
            if ((tempHEX60gensym26_1979718397.kind == 1)) {
            var Temporary2 = tempHEX60gensym26_1979718397;
            if (ConstSet86[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979718370 = nimCopy(result_1979718370, {kind: 1, fromInput: nimCopy(null, input_1979718368, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym26_1979718397.tail, NTI33554439), value: []}, NTI1979716352);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979718403 = nimCopy(null, tempHEX60gensym26_1979718397, NTI1979716352);
          Label3: do {
            var tempHEX60gensym28_1979718416 = parse_1979718381(b_1979718337, result1_1979718403.tail);
            if ((tempHEX60gensym28_1979718416.kind == 1)) {
            var Temporary4 = tempHEX60gensym28_1979718416;
            if (ConstSet87[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI2030043157)); }
            result_1979718370 = nimCopy(result_1979718370, {kind: 1, fromInput: nimCopy(null, input_1979718368, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym28_1979718416.tail, NTI33554439), value: []}, NTI1979716352);
            break BeforeRet;
            }
            
          } while (false);
          var result2_1979718422 = nimCopy(null, tempHEX60gensym28_1979718416, NTI1979716352);
          var Temporary5 = result1_1979718403;
          if (ConstSet88[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI2030043157)); }
          var Temporary6 = result2_1979718422;
          if (ConstSet89[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI2030043157)); }
          result_1979718370 = nimCopy(result_1979718370, succeed_1979718371(input_1979718368, HEX26_1979718423(Temporary5.value, Temporary6.value), result2_1979718422.tail), NTI1979716352);
          break BeforeRet;
        } while (false);

        return result_1979718370;

      }

  var result_1979718341 = null;

    Label1: do {
    } while (false);
    result_1979718341 = {body: HEX3Aanonymous_1979718367};

  return result_1979718341;

}

function map_1979718083(a_1979718086, fn_1979718088) {

function succeedImpl_1979718100(inputInHEX60gensym115_1979718101, valueInHEX60gensym115_1979718102, tailInHEX60gensym115_1979718103) {
  var result_1979718105 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979718105 = nimCopy(result_1979718105, {kind: 0, value: nimCopy(null, valueInHEX60gensym115_1979718102, NTI1979716461), tail: nimCopy(null, tailInHEX60gensym115_1979718103, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym115_1979718101, NTI33554439), expected: []}, NTI1979716352);

  return result_1979718105;

}

function failImpl_1979718107(inputInHEX60gensym115_1979718108, expectedInHEX60gensym115_1979718109, tailInHEX60gensym115_1979718110) {
  var result_1979718112 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979718112 = nimCopy(result_1979718112, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym115_1979718109, NTI1979716512), tail: nimCopy(null, tailInHEX60gensym115_1979718110, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym115_1979718108, NTI33554439), value: []}, NTI1979716352);

  return result_1979718112;

}
      
function HEX3Aanonymous_1979718115(input_1979718116) {
            var Temporary2;
          var Temporary3;

        var result_1979718118 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979718119 = succeedImpl_1979718100;
          var fail_1979718120 = failImpl_1979718107;
          Label1: do {
            var tempHEX60gensym24_1979718133 = parse_1979717849(a_1979718086, input_1979718116);
            if ((tempHEX60gensym24_1979718133.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_1979718133;
            if (ConstSet90[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979718118 = nimCopy(result_1979718118, {kind: 1, fromInput: nimCopy(null, input_1979718116, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym24_1979718133.tail, NTI33554439), value: []}, NTI1979716352);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979718139 = nimCopy(null, tempHEX60gensym24_1979718133, NTI1979715881);
          var Temporary3 = result1_1979718139;
          if (ConstSet91[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI2030043157)); }
          result_1979718118 = nimCopy(result_1979718118, succeed_1979718119(input_1979718116, fn_1979718088(Temporary3.value), result1_1979718139.tail), NTI1979716352);
          break BeforeRet;
        } while (false);

        return result_1979718118;

      }

  var result_1979718089 = null;

    Label1: do {
    } while (false);
    result_1979718089 = {body: HEX3Aanonymous_1979718115};

  return result_1979718089;

}

function nop_1979717407() {

function succeedImpl_1979717420(inputInHEX60gensym105_1979717421, valueInHEX60gensym105_1979717422, tailInHEX60gensym105_1979717423) {
  var result_1979717425 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979717425 = nimCopy(result_1979717425, {kind: 0, value: nimCopy(null, valueInHEX60gensym105_1979717422, NTI1979715924), tail: nimCopy(null, tailInHEX60gensym105_1979717423, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym105_1979717421, NTI33554439), expected: []}, NTI1979715881);

  return result_1979717425;

}

function failImpl_1979717439(inputInHEX60gensym105_1979717440, expectedInHEX60gensym105_1979717441, tailInHEX60gensym105_1979717442) {
  var result_1979717444 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979717444 = nimCopy(result_1979717444, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym105_1979717441, NTI1979715951), tail: nimCopy(null, tailInHEX60gensym105_1979717442, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym105_1979717440, NTI33554439), value: []}, NTI1979715881);

  return result_1979717444;

}
      
function HEX3Aanonymous_1979717447(input_1979717448) {
        var result_1979717450 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          var succeed_1979717451 = succeedImpl_1979717420;
          var fail_1979717452 = failImpl_1979717439;
          result_1979717450 = nimCopy(result_1979717450, succeed_1979717451(input_1979717448, [], input_1979717448), NTI1979715881);

        return result_1979717450;

      }

  var result_1979717409 = null;

    Label1: do {
    } while (false);
    result_1979717409 = {body: HEX3Aanonymous_1979717447};

  return result_1979717409;

}

function map_1979717569(a_1979717572, fn_1979717574) {

function succeedImpl_1979717586(inputInHEX60gensym107_1979717587, valueInHEX60gensym107_1979717588, tailInHEX60gensym107_1979717589) {
  var result_1979717591 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979717591 = nimCopy(result_1979717591, {kind: 0, value: nimCopy(null, valueInHEX60gensym107_1979717588, NTI1979716020), tail: nimCopy(null, tailInHEX60gensym107_1979717589, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym107_1979717587, NTI33554439), expected: []}, NTI1979715881);

  return result_1979717591;

}

function failImpl_1979717593(inputInHEX60gensym107_1979717594, expectedInHEX60gensym107_1979717595, tailInHEX60gensym107_1979717596) {
  var result_1979717598 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979717598 = nimCopy(result_1979717598, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym107_1979717595, NTI1979716079), tail: nimCopy(null, tailInHEX60gensym107_1979717596, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym107_1979717594, NTI33554439), value: []}, NTI1979715881);

  return result_1979717598;

}
      
function HEX3Aanonymous_1979717601(input_1979717602) {
            var Temporary2;
          var Temporary3;

        var result_1979717604 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979717605 = succeedImpl_1979717586;
          var fail_1979717606 = failImpl_1979717593;
          Label1: do {
            var tempHEX60gensym24_1979717619 = parse_2030044065(a_1979717572, input_1979717602);
            if ((tempHEX60gensym24_1979717619.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_1979717619;
            if (ConstSet92[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979717604 = nimCopy(result_1979717604, {kind: 1, fromInput: nimCopy(null, input_1979717602, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym24_1979717619.tail, NTI33554439), value: []}, NTI1979715881);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979717625 = nimCopy(null, tempHEX60gensym24_1979717619, NTI2030043366);
          var Temporary3 = result1_1979717625;
          if (ConstSet93[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI2030043157)); }
          result_1979717604 = nimCopy(result_1979717604, succeed_1979717605(input_1979717602, fn_1979717574(Temporary3.value), result1_1979717625.tail), NTI1979715881);
          break BeforeRet;
        } while (false);

        return result_1979717604;

      }

  var result_1979717575 = null;

    Label1: do {
    } while (false);
    result_1979717575 = {body: HEX3Aanonymous_1979717601};

  return result_1979717575;

}

function HEX2A_1979717399(a_1979717401, n_1979717402) {
    var Temporary1;
      
function HEX3Aanonymous_1979717515(x_1979717544) {
        var result_1979717547 = [];

          result_1979717547 = nimCopy(null, [x_1979717544], NTI1979716020);

        return result_1979717547;

      }

function succeedImpl_1979717636(inputInHEX60gensym108_1979717637, valueInHEX60gensym108_1979717638, tailInHEX60gensym108_1979717639) {
  var result_1979717641 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979717641 = nimCopy(result_1979717641, {kind: 0, value: nimCopy(null, valueInHEX60gensym108_1979717638, NTI1979716119), tail: nimCopy(null, tailInHEX60gensym108_1979717639, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym108_1979717637, NTI33554439), expected: []}, NTI1979715881);

  return result_1979717641;

}

function failImpl_1979717643(inputInHEX60gensym108_1979717644, expectedInHEX60gensym108_1979717645, tailInHEX60gensym108_1979717646) {
  var result_1979717648 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979717648 = nimCopy(result_1979717648, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym108_1979717645, NTI1979716125), tail: nimCopy(null, tailInHEX60gensym108_1979717646, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym108_1979717644, NTI33554439), value: []}, NTI1979715881);

  return result_1979717648;

}
        
function HEX3Aanonymous_1979717651(input_1979717652) {
              var Temporary2;
            var Temporary3;
                      var Temporary8;
                    var Temporary9;

          var result_1979717654 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          BeforeRet: do {
            var succeed_1979717655 = succeedImpl_1979717636;
            var fail_1979717656 = failImpl_1979717643;
            Label1: do {
              var tempHEX60gensym38_1979717669 = parse_2030044065(a_1979717401, input_1979717652);
              if ((tempHEX60gensym38_1979717669.kind == 1)) {
              var Temporary2 = tempHEX60gensym38_1979717669;
              if (ConstSet94[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
              result_1979717654 = nimCopy(result_1979717654, {kind: 1, fromInput: nimCopy(null, input_1979717652, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym38_1979717669.tail, NTI33554439), value: []}, NTI1979715881);
              break BeforeRet;
              }
              
            } while (false);
            var result1_1979717675 = nimCopy(null, tempHEX60gensym38_1979717669, NTI2030043366);
            var Temporary3 = result1_1979717675;
            if (ConstSet95[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI2030043157)); }
            var outputs_1979717680 = [Temporary3.value];
            var lastTail_1979717681 = nimCopy(null, result1_1979717675.tail, NTI33554439);
            Label4: do {
              var i_1979717687 = 0;
              var res_1962934585 = 2;
              Label5: do {
                  Label6: while (true) {
                  if (!(res_1962934585 <= n_1979717402)) break Label6;
                    i_1979717687 = res_1962934585;
                    Label7: do {
                      var tempHEX60gensym40_1979717700 = parse_2030044065(a_1979717401, result1_1979717675.tail);
                      if ((tempHEX60gensym40_1979717700.kind == 1)) {
                      var Temporary8 = tempHEX60gensym40_1979717700;
                      if (ConstSet96[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI2030043157)); }
                      result_1979717654 = nimCopy(result_1979717654, {kind: 1, fromInput: nimCopy(null, input_1979717652, NTI33554439), expected: nimCopy(null, Temporary8.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym40_1979717700.tail, NTI33554439), value: []}, NTI1979715881);
                      break BeforeRet;
                      }
                      
                    } while (false);
                    result1_1979717675 = nimCopy(result1_1979717675, tempHEX60gensym40_1979717700, NTI2030043366);
                    if (eqStrings(result1_1979717675.tail, lastTail_1979717681)) {
                    break Label4;
                    }
                    
                    lastTail_1979717681 = nimCopy(null, result1_1979717675.tail, NTI33554439);
                    var Temporary9 = result1_1979717675;
                    if (ConstSet97[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI2030043157)); }
                    outputs_1979717680.push(Temporary9.value);;
                    res_1962934585 = addInt(res_1962934585, 1);
                  }
              } while (false);
            } while (false);
            result_1979717654 = nimCopy(result_1979717654, succeed_1979717655(input_1979717652, outputs_1979717680, result1_1979717675.tail), NTI1979715881);
          } while (false);

          return result_1979717654;

        }

  var result_1979717406 = null;

  BeforeRet: do {
    switch (n_1979717402) {
    case 0:
      result_1979717406 = nop_1979717407();
      break BeforeRet;
      break;
    case 1:
      result_1979717406 = map_1979717569(a_1979717401, HEX3Aanonymous_1979717515);
      break BeforeRet;
      break;
    default: 
      Label2: do {
      } while (false);
      Temporary1 = {body: HEX3Aanonymous_1979717651};
      break;
    }
    result_1979717406 = Temporary1;
  } while (false);

  return result_1979717406;

}

function nop_1979717920() {

function succeedImpl_1979717933(inputInHEX60gensym113_1979717934, valueInHEX60gensym113_1979717935, tailInHEX60gensym113_1979717936) {
  var result_1979717938 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979717938 = nimCopy(result_1979717938, {kind: 0, value: nimCopy(null, valueInHEX60gensym113_1979717935, NTI1979716359), tail: nimCopy(null, tailInHEX60gensym113_1979717936, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym113_1979717934, NTI33554439), expected: []}, NTI1979716352);

  return result_1979717938;

}

function failImpl_1979717961(inputInHEX60gensym113_1979717962, expectedInHEX60gensym113_1979717963, tailInHEX60gensym113_1979717964) {
  var result_1979717966 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979717966 = nimCopy(result_1979717966, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym113_1979717963, NTI1979716392), tail: nimCopy(null, tailInHEX60gensym113_1979717964, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym113_1979717962, NTI33554439), value: []}, NTI1979716352);

  return result_1979717966;

}
      
function HEX3Aanonymous_1979717969(input_1979717970) {
        var result_1979717972 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          var succeed_1979717973 = succeedImpl_1979717933;
          var fail_1979717974 = failImpl_1979717961;
          result_1979717972 = nimCopy(result_1979717972, succeed_1979717973(input_1979717970, [], input_1979717970), NTI1979716352);

        return result_1979717972;

      }

  var result_1979717922 = null;

    Label1: do {
    } while (false);
    result_1979717922 = {body: HEX3Aanonymous_1979717969};

  return result_1979717922;

}

function HEX2A_1979717907(a_1979717909, n_1979717910) {
    var Temporary1;
      
function HEX3Aanonymous_1979718037(x_1979718066) {
        var result_1979718069 = [];

          result_1979718069 = nimCopy(null, [nimCopy(null, x_1979718066, NTI1979715875)], NTI1979716461);

        return result_1979718069;

      }

function succeedImpl_1979718150(inputInHEX60gensym116_1979718151, valueInHEX60gensym116_1979718152, tailInHEX60gensym116_1979718153) {
  var result_1979718155 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979718155 = nimCopy(result_1979718155, {kind: 0, value: nimCopy(null, valueInHEX60gensym116_1979718152, NTI1979716552), tail: nimCopy(null, tailInHEX60gensym116_1979718153, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym116_1979718151, NTI33554439), expected: []}, NTI1979716352);

  return result_1979718155;

}

function failImpl_1979718157(inputInHEX60gensym116_1979718158, expectedInHEX60gensym116_1979718159, tailInHEX60gensym116_1979718160) {
  var result_1979718162 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979718162 = nimCopy(result_1979718162, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym116_1979718159, NTI1979716558), tail: nimCopy(null, tailInHEX60gensym116_1979718160, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym116_1979718158, NTI33554439), value: []}, NTI1979716352);

  return result_1979718162;

}
        
function HEX3Aanonymous_1979718165(input_1979718166) {
              var Temporary2;
            var Temporary3;
                      var Temporary8;
                    var Temporary9;

          var result_1979718168 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          BeforeRet: do {
            var succeed_1979718169 = succeedImpl_1979718150;
            var fail_1979718170 = failImpl_1979718157;
            Label1: do {
              var tempHEX60gensym38_1979718183 = parse_1979717849(a_1979717909, input_1979718166);
              if ((tempHEX60gensym38_1979718183.kind == 1)) {
              var Temporary2 = tempHEX60gensym38_1979718183;
              if (ConstSet98[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
              result_1979718168 = nimCopy(result_1979718168, {kind: 1, fromInput: nimCopy(null, input_1979718166, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym38_1979718183.tail, NTI33554439), value: []}, NTI1979716352);
              break BeforeRet;
              }
              
            } while (false);
            var result1_1979718189 = nimCopy(null, tempHEX60gensym38_1979718183, NTI1979715881);
            var Temporary3 = result1_1979718189;
            if (ConstSet99[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI2030043157)); }
            var outputs_1979718194 = [nimCopy(null, Temporary3.value, NTI1979715875)];
            var lastTail_1979718195 = nimCopy(null, result1_1979718189.tail, NTI33554439);
            Label4: do {
              var i_1979718201 = 0;
              var res_1962934594 = 2;
              Label5: do {
                  Label6: while (true) {
                  if (!(res_1962934594 <= n_1979717910)) break Label6;
                    i_1979718201 = res_1962934594;
                    Label7: do {
                      var tempHEX60gensym40_1979718214 = parse_1979717849(a_1979717909, result1_1979718189.tail);
                      if ((tempHEX60gensym40_1979718214.kind == 1)) {
                      var Temporary8 = tempHEX60gensym40_1979718214;
                      if (ConstSet100[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI2030043157)); }
                      result_1979718168 = nimCopy(result_1979718168, {kind: 1, fromInput: nimCopy(null, input_1979718166, NTI33554439), expected: nimCopy(null, Temporary8.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym40_1979718214.tail, NTI33554439), value: []}, NTI1979716352);
                      break BeforeRet;
                      }
                      
                    } while (false);
                    result1_1979718189 = nimCopy(result1_1979718189, tempHEX60gensym40_1979718214, NTI1979715881);
                    if (eqStrings(result1_1979718189.tail, lastTail_1979718195)) {
                    break Label4;
                    }
                    
                    lastTail_1979718195 = nimCopy(null, result1_1979718189.tail, NTI33554439);
                    var Temporary9 = result1_1979718189;
                    if (ConstSet101[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI2030043157)); }
                    var Temporary10 = nimCopy(null, Temporary9.value, NTI1979715875);
                    outputs_1979718194.push(Temporary10);;
                    res_1962934594 = addInt(res_1962934594, 1);
                  }
              } while (false);
            } while (false);
            result_1979718168 = nimCopy(result_1979718168, succeed_1979718169(input_1979718166, outputs_1979718194, result1_1979718189.tail), NTI1979716352);
          } while (false);

          return result_1979718168;

        }

  var result_1979717919 = null;

  BeforeRet: do {
    switch (n_1979717910) {
    case 0:
      result_1979717919 = nop_1979717920();
      break BeforeRet;
      break;
    case 1:
      result_1979717919 = map_1979718083(a_1979717909, HEX3Aanonymous_1979718037);
      break BeforeRet;
      break;
    default: 
      Label2: do {
      } while (false);
      Temporary1 = {body: HEX3Aanonymous_1979718165};
      break;
    }
    result_1979717919 = Temporary1;
  } while (false);

  return result_1979717919;

}

function HEX7C_1979717805(a_1979717807, b_1979717808) {

function succeedImpl_1979717820(inputInHEX60gensym112_1979717821, valueInHEX60gensym112_1979717822, tailInHEX60gensym112_1979717823) {
  var result_1979717825 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979717825 = nimCopy(result_1979717825, {kind: 0, value: nimCopy(null, valueInHEX60gensym112_1979717822, NTI1979715875), tail: nimCopy(null, tailInHEX60gensym112_1979717823, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym112_1979717821, NTI33554439), expected: []}, NTI1979715881);

  return result_1979717825;

}

function failImpl_1979717827(inputInHEX60gensym112_1979717828, expectedInHEX60gensym112_1979717829, tailInHEX60gensym112_1979717830) {
  var result_1979717832 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979717832 = nimCopy(result_1979717832, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym112_1979717829, NTI1979716297), tail: nimCopy(null, tailInHEX60gensym112_1979717830, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym112_1979717828, NTI33554439), value: []}, NTI1979715881);

  return result_1979717832;

}
      
function HEX3Aanonymous_1979717835(input_1979717836) {
          var Temporary1;
          var Temporary2;

        var result_1979717838 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979717839 = succeedImpl_1979717820;
          var fail_1979717840 = failImpl_1979717827;
          var result1_1979717865 = parse_1979717849(a_1979717807, input_1979717836);
          if ((result1_1979717865.kind == 0)) {
          result_1979717838 = nimCopy(result_1979717838, result1_1979717865, NTI1979715881);
          break BeforeRet;
          }
          
          var result2_1979717882 = parse_1979717849(b_1979717808, input_1979717836);
          if ((result2_1979717882.kind == 0)) {
          result_1979717838 = nimCopy(result_1979717838, result2_1979717882, NTI1979715881);
          break BeforeRet;
          }
          
          var Temporary1 = result1_1979717865;
          if (ConstSet102[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI2030043157)); }
          var Temporary2 = result2_1979717882;
          if (ConstSet103[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
          result_1979717838 = nimCopy(result_1979717838, fail_1979717840(input_1979717836, HEX26_2013266015(Temporary1.expected, Temporary2.expected), input_1979717836), NTI1979715881);
        } while (false);

        return result_1979717838;

      }

  var result_1979717809 = null;

    Label1: do {
    } while (false);
    result_1979717809 = {body: HEX3Aanonymous_1979717835};

  return result_1979717809;

}

function newSeq_1979718487(len_1979718489) {
  var result_1979718490 = [];

    result_1979718490 = new Array(len_1979718489); for (var i = 0 ; i < len_1979718489 ; ++i) { result_1979718490[i] = 0; }
  return result_1979718490;

}

function HEX26_1979718522(x_1979718524, y_1979718525) {
  var result_1979718526 = [];

    result_1979718526 = new Array(chckRange(addInt((x_1979718524).length, (y_1979718525).length), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_1979718524).length, (y_1979718525).length), 0, 2147483647) ; ++i) { result_1979718526[i] = 0; }    Label1: do {
      var i_1979718544 = 0;
      var colontmp__1962934604 = 0;
      colontmp__1962934604 = subInt((x_1979718524).length, 1);
      var res_1962934605 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_1962934605 <= colontmp__1962934604)) break Label3;
            i_1979718544 = res_1962934605;
            result_1979718526[chckIndx(i_1979718544, 0, (result_1979718526).length - 1)] = x_1979718524[chckIndx(i_1979718544, 0, (x_1979718524).length - 1)];
            res_1962934605 = addInt(res_1962934605, 1);
          }
      } while (false);
    } while (false);
    Label4: do {
      var i_1979718552 = 0;
      var colontmp__1962934608 = 0;
      colontmp__1962934608 = subInt((y_1979718525).length, 1);
      var res_1962934609 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(res_1962934609 <= colontmp__1962934608)) break Label6;
            i_1979718552 = res_1962934609;
            result_1979718526[chckIndx(addInt(i_1979718552, (x_1979718524).length), 0, (result_1979718526).length - 1)] = y_1979718525[chckIndx(i_1979718552, 0, (y_1979718525).length - 1)];
            res_1962934609 = addInt(res_1962934609, 1);
          }
      } while (false);
    } while (false);

  return result_1979718526;

}

function join_1979718761(a_1979718763, sep_1979718764) {
  var result_1979718765 = [];

    result_1979718765 = nimCopy(null, [], NTI33554439);
    Label1: do {
      var i_1979718779 = 0;
      var x_1979718780 = 0;
      var i_1962934613 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1962934613 < (a_1979718763).length)) break Label3;
            i_1979718779 = i_1962934613;
            x_1979718780 = a_1979718763[chckIndx(i_1962934613, 0, (a_1979718763).length - 1)];
            if ((0 < i_1979718779)) {
            result_1979718765.push.apply(result_1979718765, sep_1979718764);;
            }
            
            result_1979718765.push.apply(result_1979718765, nimCharToStr(x_1979718780));;
            i_1962934613 = addInt(i_1962934613, 1);
          }
      } while (false);
    } while (false);

  return result_1979718765;

}

function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI33555121, name: null, trace: [], up: null}, "DivByZeroDefect");

  
}

function imul_1056964898(a_1056964899, b_1056964900) {
  var result_1056964901 = 0;

    var mask_1056964902 = 65535;
    var aHi_1056964907 = ((a_1056964899 >>> 16) & mask_1056964902);
    var aLo_1056964908 = (a_1056964899 & mask_1056964902);
    var bHi_1056964913 = ((b_1056964900 >>> 16) & mask_1056964902);
    var bLo_1056964914 = (b_1056964900 & mask_1056964902);
    result_1056964901 = ((((aLo_1056964908 * bLo_1056964914) >>> 0) + (((((aHi_1056964907 * bLo_1056964914) >>> 0) + ((aLo_1056964908 * bHi_1056964913) >>> 0)) >>> 0) << 16)) >>> 0);

  return result_1056964901;

}

function rotl32_1056964919(x_1056964920, r_1056964921) {
  var result_1056964922 = 0;

    result_1056964922 = ((x_1056964920 << r_1056964921) | (x_1056964920 >>> subInt(32, r_1056964921)));

  return result_1056964922;

}

function murmurHash_1056964931(x_1056964932) {
  var result_1056964933 = 0;

  BeforeRet: do {
    var size_1056964942 = (x_1056964932).length;
    var stepSize_1056964943 = 4;
    var n_1056964944 = divInt(size_1056964942, stepSize_1056964943);
    var h1_1056964945 = 0;
    var i_1056964946 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_1056964946 < mulInt(n_1056964944, stepSize_1056964943))) break Label2;
          var k1_1056964947 = 0;
          var j_1056964948 = stepSize_1056964943;
          Label3: do {
              Label4: while (true) {
              if (!(0 < j_1056964948)) break Label4;
                j_1056964948 = subInt(j_1056964948, 1);
                k1_1056964947 = ((k1_1056964947 << 8) | x_1056964932[chckIndx(addInt(i_1056964946, j_1056964948), 0, (x_1056964932).length - 1)]);
              }
          } while (false);
          i_1056964946 = addInt(i_1056964946, stepSize_1056964943);
          k1_1056964947 = imul_1056964898(k1_1056964947, 3432918353);
          k1_1056964947 = rotl32_1056964919(k1_1056964947, 15);
          k1_1056964947 = imul_1056964898(k1_1056964947, 461845907);
          h1_1056964945 = (h1_1056964945 ^ k1_1056964947);
          h1_1056964945 = rotl32_1056964919(h1_1056964945, 13);
          h1_1056964945 = ((((h1_1056964945 * 5) >>> 0) + 3864292196) >>> 0);
        }
    } while (false);
    var k1_1056964965 = 0;
    var rem_1056964966 = modInt(size_1056964942, stepSize_1056964943);
    Label5: do {
        Label6: while (true) {
        if (!(0 < rem_1056964966)) break Label6;
          rem_1056964966 = subInt(rem_1056964966, 1);
          k1_1056964965 = ((k1_1056964965 << 8) | x_1056964932[chckIndx(addInt(i_1056964946, rem_1056964966), 0, (x_1056964932).length - 1)]);
        }
    } while (false);
    k1_1056964965 = imul_1056964898(k1_1056964965, 3432918353);
    k1_1056964965 = rotl32_1056964919(k1_1056964965, 15);
    k1_1056964965 = imul_1056964898(k1_1056964965, 461845907);
    h1_1056964945 = (h1_1056964945 ^ k1_1056964965);
    h1_1056964945 = (h1_1056964945 ^ size_1056964942);
    h1_1056964945 = (h1_1056964945 ^ (h1_1056964945 >>> 16));
    h1_1056964945 = imul_1056964898(h1_1056964945, 2246822507);
    h1_1056964945 = (h1_1056964945 ^ (h1_1056964945 >>> 13));
    h1_1056964945 = imul_1056964898(h1_1056964945, 3266489909);
    h1_1056964945 = (h1_1056964945 ^ (h1_1056964945 >>> 16));
    result_1056964933 = (h1_1056964945 | 0);
    break BeforeRet;
  } while (false);

  return result_1056964933;

}

function hash_1056965030(x_1056965031) {
  var result_1056965032 = 0;

    result_1056965032 = murmurHash_1056964931((x_1056965031.slice(0, (x_1056965031).length - 1 + 1)));

  return result_1056965032;

}

function isFilled_1241514015(hcode_1241514016) {
  var result_1241514017 = false;

    result_1241514017 = !((hcode_1241514016 == 0));

  return result_1241514017;

}

function nextTry_1241514018(h_1241514019, maxHash_1241514020) {
  var result_1241514021 = 0;

    result_1241514021 = (addInt(h_1241514019, 1) & maxHash_1241514020);

  return result_1241514021;

}

function rawGet_1996490684(t_1996490687, key_1996490688, hc_1996490689, hc_1996490689_Idx) {
            var Temporary3;

  var result_1996490690 = 0;

  BeforeRet: do {
    hc_1996490689[hc_1996490689_Idx] = hash_1056965030(key_1996490688);
    if ((hc_1996490689[hc_1996490689_Idx] == 0)) {
    hc_1996490689[hc_1996490689_Idx] = 314159265;
    }
    
    if (((t_1996490687.data).length == 0)) {
    result_1996490690 = -1;
    break BeforeRet;
    }
    
    var h_1996490741 = (hc_1996490689[hc_1996490689_Idx] & (t_1996490687.data).length - 1);
    Label1: do {
        Label2: while (true) {
        if (!isFilled_1241514015(t_1996490687.data[chckIndx(h_1996490741, 0, (t_1996490687.data).length - 1)].Field0)) break Label2;
            if (!(t_1996490687.data[chckIndx(h_1996490741, 0, (t_1996490687.data).length - 1)].Field0 == hc_1996490689[hc_1996490689_Idx])) Temporary3 = false; else {              Temporary3 = eqStrings(t_1996490687.data[chckIndx(h_1996490741, 0, (t_1996490687.data).length - 1)].Field1, key_1996490688);            }          if (Temporary3) {
          result_1996490690 = h_1996490741;
          break BeforeRet;
          }
          
          h_1996490741 = nextTry_1241514018(h_1996490741, (t_1996490687.data).length - 1);
        }
    } while (false);
    result_1996490690 = subInt(-1, h_1996490741);
  } while (false);

  return result_1996490690;

}

function hasKey_1979718927(t_1979718930, key_1979718931) {
  var result_1979718932 = false;

    var hc_1979718933 = [0];
    result_1979718932 = (0 <= rawGet_1996490684(t_1979718930, key_1979718931, hc_1979718933, 0));

  return result_1979718932;

}

function contains_1979718921(t_1979718924, key_1979718925) {
  var result_1979718926 = false;

  BeforeRet: do {
    result_1979718926 = hasKey_1979718927(t_1979718924, key_1979718925);
    break BeforeRet;
  } while (false);

  return result_1979718926;

}

function raiseKeyError_1493173732(key_1493173734) {
    raiseException({message: (makeNimstrLit("key not found: ") || []).concat(key_1493173734 || []), parent: null, m_type: NTI33555126, name: null, trace: [], up: null}, "KeyError");

  
}

function HEX5BHEX5D_1979719064(t_1979719067, key_1979719068) {
  var result_1979719069 = ({rows: [], baseline: 0, width: 0, flag: 0});

    var hcHEX60gensym20_1979719070 = [0];
    var indexHEX60gensym20_1979719077 = rawGet_1996490684(t_1979719067, key_1979719068, hcHEX60gensym20_1979719070, 0);
    if ((0 <= indexHEX60gensym20_1979719077)) {
    result_1979719069 = nimCopy(result_1979719069, t_1979719067.data[chckIndx(indexHEX60gensym20_1979719077, 0, (t_1979719067.data).length - 1)].Field2, NTI2013265924);
    }
    else {
    raiseKeyError_1493173732(key_1979719068);
    }
    

  return result_1979719069;

}

function map_1979719646(s_1979719649, op_1979719651) {
  var result_1979719652 = [];

    result_1979719652 = new Array(chckRange((s_1979719649).length, 0, 2147483647)); for (var i = 0 ; i < chckRange((s_1979719649).length, 0, 2147483647) ; ++i) { result_1979719652[i] = null; }    Label1: do {
      var i_1979719668 = 0;
      var colontmp__1962934619 = 0;
      colontmp__1962934619 = (s_1979719649).length;
      var i_1962934620 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1962934620 < colontmp__1962934619)) break Label3;
            i_1979719668 = i_1962934620;
            result_1979719652[chckIndx(i_1979719668, 0, (result_1979719652).length - 1)] = op_1979719651(s_1979719649[chckIndx(i_1979719668, 0, (s_1979719649).length - 1)]);
            i_1962934620 = addInt(i_1962934620, 1);
          }
      } while (false);
    } while (false);

  return result_1979719652;

}

function map_1979719580(a_1979719583, fn_1979719585) {

function succeedImpl_1979719597(inputInHEX60gensym139_1979719598, valueInHEX60gensym139_1979719599, tailInHEX60gensym139_1979719600) {
  var result_1979719602 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_1979719602 = nimCopy(result_1979719602, {kind: 0, value: nimCopy(null, valueInHEX60gensym139_1979719599, NTI2013265924), tail: nimCopy(null, tailInHEX60gensym139_1979719600, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym139_1979719598, NTI33554439), expected: []}, NTI1979713420);

  return result_1979719602;

}

function failImpl_1979719604(inputInHEX60gensym139_1979719605, expectedInHEX60gensym139_1979719606, tailInHEX60gensym139_1979719607) {
  var result_1979719609 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_1979719609 = nimCopy(result_1979719609, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym139_1979719606, NTI1979717608), tail: nimCopy(null, tailInHEX60gensym139_1979719607, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym139_1979719605, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);

  return result_1979719609;

}
      
function HEX3Aanonymous_1979719612(input_1979719613) {
            var Temporary2;
          var Temporary3;

        var result_1979719615 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979719616 = succeedImpl_1979719597;
          var fail_1979719617 = failImpl_1979719604;
          Label1: do {
            var tempHEX60gensym24_1979719630 = parse_1979714564(a_1979719583, input_1979719613);
            if ((tempHEX60gensym24_1979719630.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_1979719630;
            if (ConstSet104[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979719615 = nimCopy(result_1979719615, {kind: 1, fromInput: nimCopy(null, input_1979719613, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym24_1979719630.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979719636 = nimCopy(null, tempHEX60gensym24_1979719630, NTI1979713420);
          var Temporary3 = result1_1979719636;
          if (ConstSet105[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI2030043157)); }
          result_1979719615 = nimCopy(result_1979719615, succeed_1979719616(input_1979719613, fn_1979719585(Temporary3.value), result1_1979719636.tail), NTI1979713420);
          break BeforeRet;
        } while (false);

        return result_1979719615;

      }

  var result_1979719586 = null;

    Label1: do {
    } while (false);
    result_1979719586 = {body: HEX3Aanonymous_1979719612};

  return result_1979719586;

}

function HEX3EHEX3E_1979719458(a_1979719461, b_1979719462) {

function succeedImpl_1979719474(inputInHEX60gensym136_1979719475, valueInHEX60gensym136_1979719476, tailInHEX60gensym136_1979719477) {
  var result_1979719479 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_1979719479 = nimCopy(result_1979719479, {kind: 0, value: nimCopy(null, valueInHEX60gensym136_1979719476, NTI2013265924), tail: nimCopy(null, tailInHEX60gensym136_1979719477, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym136_1979719475, NTI33554439), expected: []}, NTI1979713420);

  return result_1979719479;

}

function failImpl_1979719481(inputInHEX60gensym136_1979719482, expectedInHEX60gensym136_1979719483, tailInHEX60gensym136_1979719484) {
  var result_1979719486 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_1979719486 = nimCopy(result_1979719486, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym136_1979719483, NTI1979717505), tail: nimCopy(null, tailInHEX60gensym136_1979719484, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym136_1979719482, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);

  return result_1979719486;

}
      
function HEX3Aanonymous_1979719489(input_1979719490) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_1979719492 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979719493 = succeedImpl_1979719474;
          var fail_1979719494 = failImpl_1979719481;
          Label1: do {
            var tempHEX60gensym34_1979719507 = parse_1979713530(a_1979719461, input_1979719490);
            if ((tempHEX60gensym34_1979719507.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_1979719507;
            if (ConstSet106[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979719492 = nimCopy(result_1979719492, {kind: 1, fromInput: nimCopy(null, input_1979719490, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym34_1979719507.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979719513 = nimCopy(null, tempHEX60gensym34_1979719507, NTI1979712330);
          Label3: do {
            var tempHEX60gensym36_1979719526 = parse_1979714564(b_1979719462, result1_1979719513.tail);
            if ((tempHEX60gensym36_1979719526.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_1979719526;
            if (ConstSet107[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI2030043157)); }
            result_1979719492 = nimCopy(result_1979719492, {kind: 1, fromInput: nimCopy(null, input_1979719490, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym36_1979719526.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);
            break BeforeRet;
            }
            
          } while (false);
          var result2_1979719532 = nimCopy(null, tempHEX60gensym36_1979719526, NTI1979713420);
          var Temporary5 = result2_1979719532;
          if (ConstSet108[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI2030043157)); }
          result_1979719492 = nimCopy(result_1979719492, succeed_1979719493(input_1979719490, Temporary5.value, result2_1979719532.tail), NTI1979713420);
          break BeforeRet;
        } while (false);

        return result_1979719492;

      }

  var result_1979719463 = null;

    Label1: do {
    } while (false);
    result_1979719463 = {body: HEX3Aanonymous_1979719489};

  return result_1979719463;

}

function HEX3EHEX3E_1979719362(a_1979719365, b_1979719366) {

function succeedImpl_1979719378(inputInHEX60gensym135_1979719379, valueInHEX60gensym135_1979719380, tailInHEX60gensym135_1979719381) {
  var result_1979719383 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1979719383 = nimCopy(result_1979719383, {kind: 0, value: valueInHEX60gensym135_1979719380, tail: nimCopy(null, tailInHEX60gensym135_1979719381, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym135_1979719379, NTI33554439), expected: []}, NTI2030043366);

  return result_1979719383;

}

function failImpl_1979719385(inputInHEX60gensym135_1979719386, expectedInHEX60gensym135_1979719387, tailInHEX60gensym135_1979719388) {
  var result_1979719390 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1979719390 = nimCopy(result_1979719390, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym135_1979719387, NTI1979717439), tail: nimCopy(null, tailInHEX60gensym135_1979719388, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym135_1979719386, NTI33554439), value: 0}, NTI2030043366);

  return result_1979719390;

}
      
function HEX3Aanonymous_1979719393(input_1979719394) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_1979719396 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979719397 = succeedImpl_1979719378;
          var fail_1979719398 = failImpl_1979719385;
          Label1: do {
            var tempHEX60gensym34_1979719411 = parse_1979713292(a_1979719365, input_1979719394);
            if ((tempHEX60gensym34_1979719411.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_1979719411;
            if (ConstSet109[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979719396 = nimCopy(result_1979719396, {kind: 1, fromInput: nimCopy(null, input_1979719394, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym34_1979719411.tail, NTI33554439), value: 0}, NTI2030043366);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979719417 = nimCopy(null, tempHEX60gensym34_1979719411, NTI2030043268);
          Label3: do {
            var tempHEX60gensym36_1979719430 = parse_2030044065(b_1979719366, result1_1979719417.tail);
            if ((tempHEX60gensym36_1979719430.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_1979719430;
            if (ConstSet110[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI2030043157)); }
            result_1979719396 = nimCopy(result_1979719396, {kind: 1, fromInput: nimCopy(null, input_1979719394, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym36_1979719430.tail, NTI33554439), value: 0}, NTI2030043366);
            break BeforeRet;
            }
            
          } while (false);
          var result2_1979719436 = nimCopy(null, tempHEX60gensym36_1979719430, NTI2030043366);
          var Temporary5 = result2_1979719436;
          if (ConstSet111[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI2030043157)); }
          result_1979719396 = nimCopy(result_1979719396, succeed_1979719397(input_1979719394, Temporary5.value, result2_1979719436.tail), NTI2030043366);
          break BeforeRet;
        } while (false);

        return result_1979719396;

      }

  var result_1979719367 = null;

    Label1: do {
    } while (false);
    result_1979719367 = {body: HEX3Aanonymous_1979719393};

  return result_1979719367;

}

function parseSaturatedNatural_687866172(s_687866173, b_687866174, b_687866174_Idx, start_687866175) {
      var Temporary1;
          var Temporary4;

  var result_687866176 = 0;

    var i_687866177 = start_687866175;
    if (((i_687866177 < (s_687866173).length) && (s_687866173[chckIndx(i_687866177, 0, (s_687866173).length - 1)] == 43))) {
    i_687866177 = addInt(i_687866177, 1);
    }
    
      if (!(i_687866177 < (s_687866173).length)) Temporary1 = false; else {        Temporary1 = (ConstSet116[s_687866173[chckIndx(i_687866177, 0, (s_687866173).length - 1)]] != undefined);      }    if (Temporary1) {
    b_687866174[b_687866174_Idx] = 0;
    Label2: do {
        Label3: while (true) {
          if (!(i_687866177 < (s_687866173).length)) Temporary4 = false; else {            Temporary4 = (ConstSet117[s_687866173[chckIndx(i_687866177, 0, (s_687866173).length - 1)]] != undefined);          }        if (!Temporary4) break Label3;
          var c_687866196 = subInt(s_687866173[chckIndx(i_687866177, 0, (s_687866173).length - 1)], 48);
          if ((b_687866174[b_687866174_Idx] <= divInt(subInt(2147483647, c_687866196), 10))) {
          b_687866174[b_687866174_Idx] = addInt(mulInt(b_687866174[b_687866174_Idx], 10), c_687866196);
          }
          else {
            b_687866174[b_687866174_Idx] = 2147483647;
          }
          
          i_687866177 = addInt(i_687866177, 1);
          Label5: do {
              Label6: while (true) {
              if (!((i_687866177 < (s_687866173).length) && (s_687866173[chckIndx(i_687866177, 0, (s_687866173).length - 1)] == 95))) break Label6;
                i_687866177 = addInt(i_687866177, 1);
              }
          } while (false);
        }
    } while (false);
    result_687866176 = subInt(i_687866177, start_687866175);
    }
    

  return result_687866176;

}

function parseStandardFormatSpecifier_1275068474(s_1275068475, start_1275068476, ignoreUnknownSuffix_1275068477) {
      var Temporary1;
      var Temporary2;
      var Temporary3;

  var result_1275068478 = ({fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0});

    result_1275068478.fill = 32;
    result_1275068478.align = 0;
    result_1275068478.sign = 45;
    var i_1275068480 = start_1275068476;
    if (((addInt(i_1275068480, 1) < (s_1275068475).length) && (ConstSet112[s_1275068475[chckIndx(addInt(i_1275068480, 1), 0, (s_1275068475).length - 1)]] != undefined))) {
    result_1275068478.fill = s_1275068475[chckIndx(i_1275068480, 0, (s_1275068475).length - 1)];
    result_1275068478.align = s_1275068475[chckIndx(addInt(i_1275068480, 1), 0, (s_1275068475).length - 1)];
    i_1275068480 = addInt(i_1275068480, 2);
    }
    else {
    if (((i_1275068480 < (s_1275068475).length) && (ConstSet113[s_1275068475[chckIndx(i_1275068480, 0, (s_1275068475).length - 1)]] != undefined))) {
    result_1275068478.align = s_1275068475[chckIndx(i_1275068480, 0, (s_1275068475).length - 1)];
    i_1275068480 = addInt(i_1275068480, 1);
    }
    }
    if (((i_1275068480 < (s_1275068475).length) && (ConstSet114[s_1275068475[chckIndx(i_1275068480, 0, (s_1275068475).length - 1)]] != undefined))) {
    result_1275068478.sign = s_1275068475[chckIndx(i_1275068480, 0, (s_1275068475).length - 1)];
    i_1275068480 = addInt(i_1275068480, 1);
    }
    
    if (((i_1275068480 < (s_1275068475).length) && (s_1275068475[chckIndx(i_1275068480, 0, (s_1275068475).length - 1)] == 35))) {
    result_1275068478.alternateForm = true;
    i_1275068480 = addInt(i_1275068480, 1);
    }
    
      if (!((addInt(i_1275068480, 1) < (s_1275068475).length) && (s_1275068475[chckIndx(i_1275068480, 0, (s_1275068475).length - 1)] == 48))) Temporary1 = false; else {        Temporary1 = (ConstSet115[s_1275068475[chckIndx(addInt(i_1275068480, 1), 0, (s_1275068475).length - 1)]] != undefined);      }    if (Temporary1) {
    result_1275068478.padWithZero = true;
    i_1275068480 = addInt(i_1275068480, 1);
    }
    
    var parsedLength_1275068517 = parseSaturatedNatural_687866172(s_1275068475, result_1275068478, "minimumWidth", i_1275068480);
    i_1275068480 = addInt(i_1275068480, parsedLength_1275068517);
    if (((i_1275068480 < (s_1275068475).length) && (s_1275068475[chckIndx(i_1275068480, 0, (s_1275068475).length - 1)] == 46))) {
    i_1275068480 = addInt(i_1275068480, 1);
    var parsedLengthB_1275068526 = parseSaturatedNatural_687866172(s_1275068475, result_1275068478, "precision", i_1275068480);
    i_1275068480 = addInt(i_1275068480, parsedLengthB_1275068526);
    }
    else {
      result_1275068478.precision = -1;
    }
    
      if (!(i_1275068480 < (s_1275068475).length)) Temporary2 = false; else {        Temporary2 = (ConstSet118[s_1275068475[chckIndx(i_1275068480, 0, (s_1275068475).length - 1)]] != undefined);      }    if (Temporary2) {
    result_1275068478.typ = s_1275068475[chckIndx(i_1275068480, 0, (s_1275068475).length - 1)];
    i_1275068480 = addInt(i_1275068480, 1);
    }
    
    result_1275068478.endPosition = i_1275068480;
      if (!!((i_1275068480 == (s_1275068475).length))) Temporary3 = false; else {        Temporary3 = !(ignoreUnknownSuffix_1275068477);      }    if (Temporary3) {
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_939527322(s_1275068475, HEX2EHEX2E_872415312(i_1275068480, 1)) || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    

  return result_1275068478;

}

function runeLenAt_939524161(s_939524162, i_939524163) {
  var result_939524164 = 0;

    if ((s_939524162[chckIndx(i_939524163, 0, (s_939524162).length - 1)] <= 127)) {
    result_939524164 = 1;
    }
    else {
    if (((s_939524162[chckIndx(i_939524163, 0, (s_939524162).length - 1)] >>> 5) == 6)) {
    result_939524164 = 2;
    }
    else {
    if (((s_939524162[chckIndx(i_939524163, 0, (s_939524162).length - 1)] >>> 4) == 14)) {
    result_939524164 = 3;
    }
    else {
    if (((s_939524162[chckIndx(i_939524163, 0, (s_939524162).length - 1)] >>> 3) == 30)) {
    result_939524164 = 4;
    }
    else {
    if (((s_939524162[chckIndx(i_939524163, 0, (s_939524162).length - 1)] >>> 2) == 62)) {
    result_939524164 = 5;
    }
    else {
    if (((s_939524162[chckIndx(i_939524163, 0, (s_939524162).length - 1)] >>> 1) == 126)) {
    result_939524164 = 6;
    }
    else {
      result_939524164 = 1;
    }
    }}}}}

  return result_939524164;

}

function runeOffset_939524733(s_939524734, pos_939524735, start_939524736) {
  var result_939524737 = 0;

  BeforeRet: do {
    var i_939524738 = 0;
    var o_939524739 = start_939524736;
    Label1: do {
        Label2: while (true) {
        if (!(i_939524738 < pos_939524735)) break Label2;
          o_939524739 = addInt(o_939524739, chckRange(runeLenAt_939524161(s_939524734, o_939524739), 0, 2147483647));
          if (((s_939524734).length <= o_939524739)) {
          result_939524737 = -1;
          break BeforeRet;
          }
          
          i_939524738 = addInt(i_939524738, 1);
        }
    } while (false);
    result_939524737 = o_939524739;
    break BeforeRet;
  } while (false);

  return result_939524737;

}

function validateUtf8_939524373(s_939524374) {
            var Temporary3;
            var Temporary4;
            var Temporary5;
            var Temporary6;
            var Temporary7;
            var Temporary8;

  var result_939524375 = 0;

  BeforeRet: do {
    var i_939524376 = 0;
    var L_939524377 = (s_939524374).length;
    Label1: do {
        Label2: while (true) {
        if (!(i_939524376 < L_939524377)) break Label2;
          if ((s_939524374[chckIndx(i_939524376, 0, (s_939524374).length - 1)] <= 127)) {
          i_939524376 = addInt(i_939524376, 1);
          }
          else {
          if (((s_939524374[chckIndx(i_939524376, 0, (s_939524374).length - 1)] >>> 5) == 6)) {
          if ((s_939524374[chckIndx(i_939524376, 0, (s_939524374).length - 1)] < 194)) {
          result_939524375 = i_939524376;
          break BeforeRet;
          }
          
            if (!(addInt(i_939524376, 1) < L_939524377)) Temporary3 = false; else {              Temporary3 = ((s_939524374[chckIndx(addInt(i_939524376, 1), 0, (s_939524374).length - 1)] >>> 6) == 2);            }          if (Temporary3) {
          i_939524376 = addInt(i_939524376, 2);
          }
          else {
            result_939524375 = i_939524376;
            break BeforeRet;
          }
          
          }
          else {
          if (((s_939524374[chckIndx(i_939524376, 0, (s_939524374).length - 1)] >>> 4) == 14)) {
            if (!(addInt(i_939524376, 2) < L_939524377)) Temporary5 = false; else {              Temporary5 = ((s_939524374[chckIndx(addInt(i_939524376, 1), 0, (s_939524374).length - 1)] >>> 6) == 2);            }            if (!Temporary5) Temporary4 = false; else {              Temporary4 = ((s_939524374[chckIndx(addInt(i_939524376, 2), 0, (s_939524374).length - 1)] >>> 6) == 2);            }          if (Temporary4) {
          i_939524376 = addInt(i_939524376, 3);
          }
          else {
            result_939524375 = i_939524376;
            break BeforeRet;
          }
          
          }
          else {
          if (((s_939524374[chckIndx(i_939524376, 0, (s_939524374).length - 1)] >>> 3) == 30)) {
            if (!(addInt(i_939524376, 3) < L_939524377)) Temporary8 = false; else {              Temporary8 = ((s_939524374[chckIndx(addInt(i_939524376, 1), 0, (s_939524374).length - 1)] >>> 6) == 2);            }            if (!Temporary8) Temporary7 = false; else {              Temporary7 = ((s_939524374[chckIndx(addInt(i_939524376, 2), 0, (s_939524374).length - 1)] >>> 6) == 2);            }            if (!Temporary7) Temporary6 = false; else {              Temporary6 = ((s_939524374[chckIndx(addInt(i_939524376, 3), 0, (s_939524374).length - 1)] >>> 6) == 2);            }          if (Temporary6) {
          i_939524376 = addInt(i_939524376, 4);
          }
          else {
            result_939524375 = i_939524376;
            break BeforeRet;
          }
          
          }
          else {
            result_939524375 = i_939524376;
            break BeforeRet;
          }
          }}}
        }
    } while (false);
    result_939524375 = -1;
    break BeforeRet;
  } while (false);

  return result_939524375;

}

function alignString_1275068436(s_1275068437, minimumWidth_1275068438, align_1275068439, fill_1275068440) {
      var Temporary1;

  var result_1275068441 = [];

    if ((minimumWidth_1275068438 == 0)) {
    result_1275068441 = nimCopy(null, s_1275068437, NTI33554439);
    }
    else {
      if ((validateUtf8_939524373(s_1275068437) == -1)) {
      Temporary1 = nucruneLen(s_1275068437);
      }
      else {
      Temporary1 = (s_1275068437).length;
      }
      
      var sRuneLen_1275068442 = Temporary1;
      var toFill_1275068443 = subInt(minimumWidth_1275068438, sRuneLen_1275068442);
      if ((toFill_1275068443 <= 0)) {
      result_1275068441 = nimCopy(null, s_1275068437, NTI33554439);
      }
      else {
      if (((align_1275068439 == 60) || (align_1275068439 == 0))) {
      result_1275068441 = nimCopy(null, (s_1275068437 || []).concat(nsuRepeatChar(fill_1275068440, chckRange(toFill_1275068443, 0, 2147483647)) || []), NTI33554439);
      }
      else {
      if ((align_1275068439 == 94)) {
      var half_1275068444 = divInt(toFill_1275068443, 2);
      result_1275068441 = nimCopy(null, (nsuRepeatChar(fill_1275068440, chckRange(half_1275068444, 0, 2147483647)) || []).concat(s_1275068437 || [],nsuRepeatChar(fill_1275068440, chckRange(subInt(toFill_1275068443, half_1275068444), 0, 2147483647)) || []), NTI33554439);
      }
      else {
        result_1275068441 = nimCopy(null, (nsuRepeatChar(fill_1275068440, chckRange(toFill_1275068443, 0, 2147483647)) || []).concat(s_1275068437 || []), NTI33554439);
      }
      }}
    }
    

  return result_1275068441;

}

function formatValue_1275068578(result_1275068579, result_1275068579_Idx, value_1275068580, specifier_1275068581) {
    var spec_1275068582 = parseStandardFormatSpecifier_1275068474(specifier_1275068581, 0, false);
    var value_1275068583 = nimCopy(null, value_1275068580, NTI33554439);
    switch (spec_1275068582.typ) {
    case 115:
    case 0:
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_1275068582.typ]), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    if (!((spec_1275068582.precision == -1))) {
    if ((spec_1275068582.precision < nucruneLen(value_1275068583))) {
    (value_1275068583.length = chckRange(runeOffset_939524733(value_1275068583, chckRange(spec_1275068582.precision, 0, 2147483647), 0), 0, 2147483647));
    }
    
    }
    
    result_1275068579[result_1275068579_Idx].push.apply(result_1275068579[result_1275068579_Idx], alignString_1275068436(value_1275068583, spec_1275068582.minimumWidth, spec_1275068582.align, spec_1275068582.fill));;

  
}

function row_2013265955(rect_2013265956) {
  var result_2013265957 = [];

    result_2013265957 = nimCopy(null, rect_2013265956.rows[chckIndx(0, 0, (rect_2013265956.rows).length - 1)], NTI33554439);

  return result_2013265957;

}

function nucRepeatRune(c_939530454, count_939530455) {
  var result_939530456 = [];

    var s_939530457 = HEX24_939524687(c_939530454);
    result_939530456 = nimCopy(null, mnewString(0), NTI33554439);
    Label1: do {
      var i_939530462 = 0;
      var colontmp__1962934646 = 0;
      colontmp__1962934646 = count_939530455;
      var i_1962934647 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1962934647 < colontmp__1962934646)) break Label3;
            i_939530462 = i_1962934647;
            result_939530456.push.apply(result_939530456, s_939530457);;
            i_1962934647 = addInt(i_1962934647, 1);
          }
      } while (false);
    } while (false);

  return result_939530456;

}

function center_2013266770(s_2013266771, width_2013266772, padding_2013266773) {
    var Temporary1;

  var result_2013266774 = [];

    var sLen_2013266775 = nucruneLen(s_2013266771);
    if ((width_2013266772 <= sLen_2013266775)) {
    Temporary1 = s_2013266771;
    }
    else {
      var diff_2013266776 = subInt(width_2013266772, sLen_2013266775);
      var left_2013266777 = divInt(diff_2013266776, 2);
      var right_2013266778 = subInt(diff_2013266776, left_2013266777);
    Temporary1 = (nucRepeatRune(padding_2013266773, chckRange(left_2013266777, 0, 2147483647)) || []).concat(s_2013266771 || [],nucRepeatRune(padding_2013266773, chckRange(right_2013266778, 0, 2147483647)) || []);
    }
    
    result_2013266774 = nimCopy(null, Temporary1, NTI33554439);

  return result_2013266774;

}

function HEX3Aanonymous_2013266779(s_2013266780, width_2013266781) {
  var result_2013266782 = [];

    result_2013266782 = nimCopy(null, center_2013266770(s_2013266780, chckRange(width_2013266781, 0, 2147483647), 32), NTI33554439);

  return result_2013266782;

}

function alignLeft_939530476(s_939530477, count_939530478, padding_939530479) {
  var result_939530480 = [];

    var sLen_939530481 = nucruneLen(s_939530477);
    if ((sLen_939530481 < count_939530478)) {
    var padStr_939530482 = HEX24_939524687(padding_939530479);
    result_939530480 = nimCopy(null, mnewString(0), NTI33554439);
    result_939530480.push.apply(result_939530480, s_939530477);;
    Label1: do {
      var i_939530487 = 0;
      var colontmp__1962934650 = 0;
      colontmp__1962934650 = count_939530478;
      var i_1962934651 = sLen_939530481;
      Label2: do {
          Label3: while (true) {
          if (!(i_1962934651 < colontmp__1962934650)) break Label3;
            i_939530487 = i_1962934651;
            result_939530480.push.apply(result_939530480, padStr_939530482);;
            i_1962934651 = addInt(i_1962934651, 1);
          }
      } while (false);
    } while (false);
    }
    else {
      result_939530480 = nimCopy(null, s_939530477, NTI33554439);
    }
    

  return result_939530480;

}

function HEX3Aanonymous_2013266783(s_2013266784, width_2013266785) {
  var result_2013266786 = [];

    result_2013266786 = nimCopy(null, alignLeft_939530476(s_2013266784, chckRange(width_2013266785, 0, 2147483647), 32), NTI33554439);

  return result_2013266786;

}

function nucAlignString(s_939530464, count_939530465, padding_939530466) {
  var result_939530467 = [];

    var sLen_939530468 = nucruneLen(s_939530464);
    if ((sLen_939530468 < count_939530465)) {
    var padStr_939530469 = HEX24_939524687(padding_939530466);
    result_939530467 = nimCopy(null, mnewString(0), NTI33554439);
    var spaces_939530470 = subInt(count_939530465, sLen_939530468);
    Label1: do {
      var i_939530475 = 0;
      var i_1962934654 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1962934654 < spaces_939530470)) break Label3;
            i_939530475 = i_1962934654;
            result_939530467.push.apply(result_939530467, padStr_939530469);;
            i_1962934654 = addInt(i_1962934654, 1);
          }
      } while (false);
    } while (false);
    result_939530467.push.apply(result_939530467, s_939530464);;
    }
    else {
      result_939530467 = nimCopy(null, s_939530464, NTI33554439);
    }
    

  return result_939530467;

}

function HEX3Aanonymous_2013266787(s_2013266788, width_2013266789) {
  var result_2013266790 = [];

    result_2013266790 = nimCopy(null, nucAlignString(s_2013266788, chckRange(width_2013266789, 0, 2147483647), 32), NTI33554439);

  return result_2013266790;

}

function stack_2013266801(rects_2013266802, baseline_2013266803, alignment_2013266804) {
  var result_2013266805 = ({rows: [], baseline: 0, width: 0, flag: 0});

    Label1: do {
      var iHEX60gensym42_2013266827 = 0;
      var resultHEX60gensym42_2013266834 = newSeq_2013266538(chckRange((rects_2013266802).length, 0, 2147483647));
      Label2: do {
        var it_2013266838 = ({rows: [], baseline: 0, width: 0, flag: 0});
        var i_1962934636 = 0;
        Label3: do {
            Label4: while (true) {
            if (!(i_1962934636 < (rects_2013266802).length)) break Label4;
              it_2013266838 = rects_2013266802[chckIndx(i_1962934636, 0, (rects_2013266802).length - 1)];
              resultHEX60gensym42_2013266834[chckIndx(iHEX60gensym42_2013266827, 0, (resultHEX60gensym42_2013266834).length - 1)] = it_2013266838.width;
              iHEX60gensym42_2013266827 = addInt(iHEX60gensym42_2013266827, 1);
              i_1962934636 = addInt(i_1962934636, 1);
            }
        } while (false);
      } while (false);
    } while (false);
    var width_2013266846 = max_2013266564(resultHEX60gensym42_2013266834);
    var alignFunc_2013266847 = alignFuncs_2013266791[chckIndx(alignment_2013266804, 0, (alignFuncs_2013266791).length - 1)];
    Label5: do {
      var rect_2013266851 = ({rows: [], baseline: 0, width: 0, flag: 0});
      var i_1962934643 = 0;
      Label6: do {
          Label7: while (true) {
          if (!(i_1962934643 < (rects_2013266802).length)) break Label7;
            rect_2013266851 = rects_2013266802[chckIndx(i_1962934643, 0, (rects_2013266802).length - 1)];
            Label8: do {
              var row_2013266855 = [];
              var i_1962934640 = 0;
              var L_1962934641 = (rect_2013266851.rows).length;
              Label9: do {
                  Label10: while (true) {
                  if (!(i_1962934640 < L_1962934641)) break Label10;
                    row_2013266855 = rect_2013266851.rows[chckIndx(i_1962934640, 0, (rect_2013266851.rows).length - 1)];
                    result_2013266805.rows.push(alignFunc_2013266847(row_2013266855, width_2013266846));;
                    i_1962934640 = addInt(i_1962934640, 1);
                    if (!(((rect_2013266851.rows).length == L_1962934641))) {
                    failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while (false);
            } while (false);
            i_1962934643 = addInt(i_1962934643, 1);
          }
      } while (false);
    } while (false);
    result_2013266805.baseline = baseline_2013266803;
    result_2013266805.width = width_2013266846;

  return result_2013266805;

}

function HEX3EHEX3E_1979720145(a_1979720148, b_1979720149) {

function succeedImpl_1979720161(inputInHEX60gensym151_1979720162, valueInHEX60gensym151_1979720163, tailInHEX60gensym151_1979720164) {
  var result_1979720166 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_1979720166 = nimCopy(result_1979720166, {kind: 0, value: nimCopy(null, valueInHEX60gensym151_1979720163, NTI2013265924), tail: nimCopy(null, tailInHEX60gensym151_1979720164, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym151_1979720162, NTI33554439), expected: []}, NTI1979713420);

  return result_1979720166;

}

function failImpl_1979720168(inputInHEX60gensym151_1979720169, expectedInHEX60gensym151_1979720170, tailInHEX60gensym151_1979720171) {
  var result_1979720173 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_1979720173 = nimCopy(result_1979720173, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym151_1979720170, NTI1979718047), tail: nimCopy(null, tailInHEX60gensym151_1979720171, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym151_1979720169, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);

  return result_1979720173;

}
      
function HEX3Aanonymous_1979720176(input_1979720177) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_1979720179 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979720180 = succeedImpl_1979720161;
          var fail_1979720181 = failImpl_1979720168;
          Label1: do {
            var tempHEX60gensym34_1979720194 = parse_1979713292(a_1979720148, input_1979720177);
            if ((tempHEX60gensym34_1979720194.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_1979720194;
            if (ConstSet119[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979720179 = nimCopy(result_1979720179, {kind: 1, fromInput: nimCopy(null, input_1979720177, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym34_1979720194.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979720200 = nimCopy(null, tempHEX60gensym34_1979720194, NTI2030043268);
          Label3: do {
            var tempHEX60gensym36_1979720213 = parse_1979714564(b_1979720149, result1_1979720200.tail);
            if ((tempHEX60gensym36_1979720213.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_1979720213;
            if (ConstSet120[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI2030043157)); }
            result_1979720179 = nimCopy(result_1979720179, {kind: 1, fromInput: nimCopy(null, input_1979720177, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym36_1979720213.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);
            break BeforeRet;
            }
            
          } while (false);
          var result2_1979720219 = nimCopy(null, tempHEX60gensym36_1979720213, NTI1979713420);
          var Temporary5 = result2_1979720219;
          if (ConstSet121[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI2030043157)); }
          result_1979720179 = nimCopy(result_1979720179, succeed_1979720180(input_1979720177, Temporary5.value, result2_1979720219.tail), NTI1979713420);
          break BeforeRet;
        } while (false);

        return result_1979720179;

      }

  var result_1979720150 = null;

    Label1: do {
    } while (false);
    result_1979720150 = {body: HEX3Aanonymous_1979720176};

  return result_1979720150;

}

function HEX7C_1979719713(a_1979719715, b_1979719716) {

function succeedImpl_1979719728(inputInHEX60gensym144_1979719729, valueInHEX60gensym144_1979719730, tailInHEX60gensym144_1979719731) {
  var result_1979719733 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979719733 = nimCopy(result_1979719733, {kind: 0, value: nimCopy(null, valueInHEX60gensym144_1979719730, NTI33554439), tail: nimCopy(null, tailInHEX60gensym144_1979719731, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym144_1979719729, NTI33554439), expected: []}, NTI2030043268);

  return result_1979719733;

}

function failImpl_1979719735(inputInHEX60gensym144_1979719736, expectedInHEX60gensym144_1979719737, tailInHEX60gensym144_1979719738) {
  var result_1979719740 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979719740 = nimCopy(result_1979719740, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym144_1979719737, NTI1979717694), tail: nimCopy(null, tailInHEX60gensym144_1979719738, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym144_1979719736, NTI33554439), value: []}, NTI2030043268);

  return result_1979719740;

}
      
function HEX3Aanonymous_1979719743(input_1979719744) {
          var Temporary1;
          var Temporary2;

        var result_1979719746 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979719747 = succeedImpl_1979719728;
          var fail_1979719748 = failImpl_1979719735;
          var result1_1979719761 = parse_1979713292(a_1979719715, input_1979719744);
          if ((result1_1979719761.kind == 0)) {
          result_1979719746 = nimCopy(result_1979719746, result1_1979719761, NTI2030043268);
          break BeforeRet;
          }
          
          var result2_1979719778 = parse_1979713292(b_1979719716, input_1979719744);
          if ((result2_1979719778.kind == 0)) {
          result_1979719746 = nimCopy(result_1979719746, result2_1979719778, NTI2030043268);
          break BeforeRet;
          }
          
          var Temporary1 = result1_1979719761;
          if (ConstSet122[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI2030043157)); }
          var Temporary2 = result2_1979719778;
          if (ConstSet123[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
          result_1979719746 = nimCopy(result_1979719746, fail_1979719748(input_1979719744, HEX26_2013266015(Temporary1.expected, Temporary2.expected), input_1979719744), NTI2030043268);
        } while (false);

        return result_1979719746;

      }

  var result_1979719717 = null;

    Label1: do {
    } while (false);
    result_1979719717 = {body: HEX3Aanonymous_1979719743};

  return result_1979719717;

}

function HEX26_1979719955(a_1979719960, b_1979719964) {

function succeedImpl_1979719979(inputInHEX60gensym148_1979719980, valueInHEX60gensym148_1979719981, tailInHEX60gensym148_1979719982) {
  var result_1979719984 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979719984 = nimCopy(result_1979719984, {kind: 0, value: nimCopy(null, valueInHEX60gensym148_1979719981, NTI1979717910), tail: nimCopy(null, tailInHEX60gensym148_1979719982, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym148_1979719980, NTI33554439), expected: []}, NTI1979713435);

  return result_1979719984;

}

function failImpl_1979719986(inputInHEX60gensym148_1979719987, expectedInHEX60gensym148_1979719988, tailInHEX60gensym148_1979719989) {
  var result_1979719991 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979719991 = nimCopy(result_1979719991, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym148_1979719988, NTI1979717916), tail: nimCopy(null, tailInHEX60gensym148_1979719989, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym148_1979719987, NTI33554439), value: []}, NTI1979713435);

  return result_1979719991;

}
      
function HEX3Aanonymous_1979719994(input_1979719995) {
            var Temporary2;
            var Temporary4;
          var Temporary5;
          var Temporary6;

        var result_1979719997 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979719998 = succeedImpl_1979719979;
          var fail_1979719999 = failImpl_1979719986;
          Label1: do {
            var tempHEX60gensym26_1979720012 = parse_1979714814(a_1979719960, input_1979719995);
            if ((tempHEX60gensym26_1979720012.kind == 1)) {
            var Temporary2 = tempHEX60gensym26_1979720012;
            if (ConstSet124[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979719997 = nimCopy(result_1979719997, {kind: 1, fromInput: nimCopy(null, input_1979719995, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym26_1979720012.tail, NTI33554439), value: []}, NTI1979713435);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979720018 = nimCopy(null, tempHEX60gensym26_1979720012, NTI1979713435);
          Label3: do {
            var tempHEX60gensym28_1979720031 = parse_1979714814(b_1979719964, result1_1979720018.tail);
            if ((tempHEX60gensym28_1979720031.kind == 1)) {
            var Temporary4 = tempHEX60gensym28_1979720031;
            if (ConstSet125[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI2030043157)); }
            result_1979719997 = nimCopy(result_1979719997, {kind: 1, fromInput: nimCopy(null, input_1979719995, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym28_1979720031.tail, NTI33554439), value: []}, NTI1979713435);
            break BeforeRet;
            }
            
          } while (false);
          var result2_1979720037 = nimCopy(null, tempHEX60gensym28_1979720031, NTI1979713435);
          var Temporary5 = result1_1979720018;
          if (ConstSet126[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI2030043157)); }
          var Temporary6 = result2_1979720037;
          if (ConstSet127[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI2030043157)); }
          result_1979719997 = nimCopy(result_1979719997, succeed_1979719998(input_1979719995, HEX26_1979715482(Temporary5.value, Temporary6.value), result2_1979720037.tail), NTI1979713435);
          break BeforeRet;
        } while (false);

        return result_1979719997;

      }

  var result_1979719968 = null;

    Label1: do {
    } while (false);
    result_1979719968 = {body: HEX3Aanonymous_1979719994};

  return result_1979719968;

}

function rowAsAtom_2013265958(rect_2013265959) {
    var Temporary1;

  var result_2013265960 = [];

    if ((nucruneLen(rect_2013265959.rows[chckIndx(0, 0, (rect_2013265959.rows).length - 1)]) == 1)) {
    Temporary1 = rect_2013265959.rows[chckIndx(0, 0, (rect_2013265959.rows).length - 1)];
    }
    else {
    Temporary1 = (makeNimstrLit("(") || []).concat(rect_2013265959.rows[chckIndx(0, 0, (rect_2013265959.rows).length - 1)] || [],makeNimstrLit(")") || []);
    }
    
    result_2013265960 = nimCopy(null, Temporary1, NTI33554439);

  return result_2013265960;

}

function max_1979720064(x_1979720066, y_1979720067) {
    var Temporary1;

  var result_1979720068 = 0;

    if ((y_1979720067 <= x_1979720066)) {
    Temporary1 = x_1979720066;
    }
    else {
    Temporary1 = y_1979720067;
    }
    
    result_1979720068 = Temporary1;

  return result_1979720068;

}

function nsuRepeatStr(s_654312452, n_654312453) {
  var result_654312454 = [];

    result_654312454 = nimCopy(null, mnewString(0), NTI33554439);
    Label1: do {
      var i_654312459 = 0;
      var colontmp__1325400237 = 0;
      colontmp__1325400237 = n_654312453;
      var res_1325400238 = 1;
      Label2: do {
          Label3: while (true) {
          if (!(res_1325400238 <= colontmp__1325400237)) break Label3;
            i_654312459 = res_1325400238;
            result_654312454.push.apply(result_654312454, s_654312452);;
            res_1325400238 = addInt(res_1325400238, 1);
          }
      } while (false);
    } while (false);

  return result_654312454;

}

function withFlag_2013266887(rect_2013266888, flag_2013266889) {
  var result_2013266890 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_2013266890 = nimCopy(result_2013266890, rect_2013266888, NTI2013265924);
    result_2013266890.flag = flag_2013266889;

  return result_2013266890;

}

function HEX5BHEX5DHEX3D_1979712892(s_1979712894, i_1979712895, x_1979712896) {
    s_1979712894[chckIndx(subInt((s_1979712894).length, i_1979712895), 0, (s_1979712894).length - 1)] = nimCopy(null, x_1979712896, NTI33554439);

  
}

function rawGet_1979711656(t_1979711659, key_1979711660, hc_1979711661, hc_1979711661_Idx) {
            var Temporary3;

  var result_1979711662 = 0;

  BeforeRet: do {
    hc_1979711661[hc_1979711661_Idx] = hash_1056965030(key_1979711660);
    if ((hc_1979711661[hc_1979711661_Idx] == 0)) {
    hc_1979711661[hc_1979711661_Idx] = 314159265;
    }
    
    if (((t_1979711659.data).length == 0)) {
    result_1979711662 = -1;
    break BeforeRet;
    }
    
    var h_1979711713 = (hc_1979711661[hc_1979711661_Idx] & (t_1979711659.data).length - 1);
    Label1: do {
        Label2: while (true) {
        if (!isFilled_1241514015(t_1979711659.data[chckIndx(h_1979711713, 0, (t_1979711659.data).length - 1)].Field0)) break Label2;
            if (!(t_1979711659.data[chckIndx(h_1979711713, 0, (t_1979711659.data).length - 1)].Field0 == hc_1979711661[hc_1979711661_Idx])) Temporary3 = false; else {              Temporary3 = eqStrings(t_1979711659.data[chckIndx(h_1979711713, 0, (t_1979711659.data).length - 1)].Field1, key_1979711660);            }          if (Temporary3) {
          result_1979711662 = h_1979711713;
          break BeforeRet;
          }
          
          h_1979711713 = nextTry_1241514018(h_1979711713, (t_1979711659.data).length - 1);
        }
    } while (false);
    result_1979711662 = subInt(-1, h_1979711713);
  } while (false);

  return result_1979711662;

}

function HEX5BHEX5D_1979712975(t_1979712978, key_1979712979) {
  var result_1979712980 = {Field0: [], Field1: [], Field2: []};

    var hcHEX60gensym20_1979712981 = [0];
    var indexHEX60gensym20_1979712988 = rawGet_1979711656(t_1979712978, key_1979712979, hcHEX60gensym20_1979712981, 0);
    if ((0 <= indexHEX60gensym20_1979712988)) {
    result_1979712980 = nimCopy(result_1979712980, t_1979712978.data[chckIndx(indexHEX60gensym20_1979712988, 0, (t_1979712978.data).length - 1)].Field2, NTI1979711495);
    }
    else {
    raiseKeyError_1493173732(key_1979712979);
    }
    

  return result_1979712980;

}

function substrEq_654311653(s_654311654, pos_654311655, substr_654311656) {
  var result_654311657 = false;

  BeforeRet: do {
    var i_654311658 = 0;
    var length_654311659 = (substr_654311656).length;
    Label1: do {
        Label2: while (true) {
        if (!(((i_654311658 < length_654311659) && (addInt(pos_654311655, i_654311658) < (s_654311654).length)) && (s_654311654[chckIndx(addInt(pos_654311655, i_654311658), 0, (s_654311654).length - 1)] == substr_654311656[chckIndx(i_654311658, 0, (substr_654311656).length - 1)]))) break Label2;
          i_654311658 = addInt(i_654311658, 1);
        }
    } while (false);
    result_654311657 = (i_654311658 == length_654311659);
    break BeforeRet;
  } while (false);

  return result_654311657;

}

function nsuSplitString(s_654311945, sep_654311946, maxsplit_654311947) {
  var result_654311948 = [];

    if (!((0 < (sep_654311946).length))) {
    failedAssertImpl_218103864(makeNimstrLit("strutils.nim(739, 11) `sep.len > 0` "));
    }
    
    result_654311948 = nimCopy(null, [], NTI654311798);
    Label1: do {
      var xHEX60gensym72_654311959 = [];
      var lastHEX60gensym41_1996488804 = 0;
      var splitsHEX60gensym41_1996488805 = maxsplit_654311947;
      Label2: do {
          Label3: while (true) {
          if (!(lastHEX60gensym41_1996488804 <= (s_654311945).length)) break Label3;
            var firstHEX60gensym41_1996488807 = lastHEX60gensym41_1996488804;
            Label4: do {
                Label5: while (true) {
                if (!((lastHEX60gensym41_1996488804 < (s_654311945).length) && !(substrEq_654311653(s_654311945, lastHEX60gensym41_1996488804, sep_654311946)))) break Label5;
                  lastHEX60gensym41_1996488804 = addInt(lastHEX60gensym41_1996488804, 1);
                }
            } while (false);
            if ((splitsHEX60gensym41_1996488805 == 0)) {
            lastHEX60gensym41_1996488804 = (s_654311945).length;
            }
            
            xHEX60gensym72_654311959 = substr_33557906(s_654311945, firstHEX60gensym41_1996488807, subInt(lastHEX60gensym41_1996488804, 1));
            var Temporary6 = nimCopy(null, xHEX60gensym72_654311959, NTI33554439);
            result_654311948.push(Temporary6);;
            if ((splitsHEX60gensym41_1996488805 == 0)) {
            break Label2;
            }
            
            splitsHEX60gensym41_1996488805 = subInt(splitsHEX60gensym41_1996488805, 1);
            lastHEX60gensym41_1996488804 = addInt(lastHEX60gensym41_1996488804, (sep_654311946).length);
          }
      } while (false);
    } while (false);

  return result_654311948;

}

function toTextRect_2013265970(s_2013265971, baseline_2013265972, flag_2013265973) {
  var result_2013265974 = ({rows: [], baseline: 0, width: 0, flag: 0});

  BeforeRet: do {
    if (eqStrings(s_2013265971, [])) {
    result_2013265974.flag = flag_2013265973;
    break BeforeRet;
    }
    
    result_2013265974.rows = nimCopy(null, nsuSplitString(s_2013265971, makeNimstrLit("\x0A"), -1), NTI654311786);
    result_2013265974.width = chckRange(nucruneLen(result_2013265974.rows[chckIndx(0, 0, (result_2013265974.rows).length - 1)]), 0, 2147483647);
    Label1: do {
      var row_2013265978 = [];
      var i_1996488798 = 0;
      var L_1996488799 = (result_2013265974.rows).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_1996488798 < L_1996488799)) break Label3;
            row_2013265978 = result_2013265974.rows[chckIndx(i_1996488798, 0, (result_2013265974.rows).length - 1)];
            if (!((nucruneLen(row_2013265978) == result_2013265974.width))) {
            raiseException({message: makeNimstrLit("All rows of a TextRect must be the same width"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
            }
            
            i_1996488798 = addInt(i_1996488798, 1);
            if (!(((result_2013265974.rows).length == L_1996488799))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_2013265974.baseline = baseline_2013265972;
    result_2013265974.flag = flag_2013265973;
  } while (false);

  return result_2013265974;

}

function HEX3EHEX3E_1979721259(a_1979721262, b_1979721263) {

function succeedImpl_1979721275(inputInHEX60gensym188_1979721276, valueInHEX60gensym188_1979721277, tailInHEX60gensym188_1979721278) {
  var result_1979721280 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979721280 = nimCopy(result_1979721280, {kind: 0, value: nimCopy(null, valueInHEX60gensym188_1979721277, NTI1979717886), tail: nimCopy(null, tailInHEX60gensym188_1979721278, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym188_1979721276, NTI33554439), expected: []}, NTI1979713435);

  return result_1979721280;

}

function failImpl_1979721282(inputInHEX60gensym188_1979721283, expectedInHEX60gensym188_1979721284, tailInHEX60gensym188_1979721285) {
  var result_1979721287 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1979721287 = nimCopy(result_1979721287, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym188_1979721284, NTI1979719025), tail: nimCopy(null, tailInHEX60gensym188_1979721285, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym188_1979721283, NTI33554439), value: []}, NTI1979713435);

  return result_1979721287;

}
      
function HEX3Aanonymous_1979721290(input_1979721291) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_1979721293 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979721294 = succeedImpl_1979721275;
          var fail_1979721295 = failImpl_1979721282;
          Label1: do {
            var tempHEX60gensym34_1979721308 = parse_1979713530(a_1979721262, input_1979721291);
            if ((tempHEX60gensym34_1979721308.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_1979721308;
            if (ConstSet128[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979721293 = nimCopy(result_1979721293, {kind: 1, fromInput: nimCopy(null, input_1979721291, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym34_1979721308.tail, NTI33554439), value: []}, NTI1979713435);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979721314 = nimCopy(null, tempHEX60gensym34_1979721308, NTI1979712330);
          Label3: do {
            var tempHEX60gensym36_1979721327 = parse_1979714814(b_1979721263, result1_1979721314.tail);
            if ((tempHEX60gensym36_1979721327.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_1979721327;
            if (ConstSet129[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI2030043157)); }
            result_1979721293 = nimCopy(result_1979721293, {kind: 1, fromInput: nimCopy(null, input_1979721291, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym36_1979721327.tail, NTI33554439), value: []}, NTI1979713435);
            break BeforeRet;
            }
            
          } while (false);
          var result2_1979721333 = nimCopy(null, tempHEX60gensym36_1979721327, NTI1979713435);
          var Temporary5 = result2_1979721333;
          if (ConstSet130[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI2030043157)); }
          result_1979721293 = nimCopy(result_1979721293, succeed_1979721294(input_1979721291, Temporary5.value, result2_1979721333.tail), NTI1979713435);
          break BeforeRet;
        } while (false);

        return result_1979721293;

      }

  var result_1979721264 = null;

    Label1: do {
    } while (false);
    result_1979721264 = {body: HEX3Aanonymous_1979721290};

  return result_1979721264;

}

function HEX3CHEX3C_1979721475(a_1979721478, b_1979721479) {

function succeedImpl_1979721491(inputInHEX60gensym192_1979721492, valueInHEX60gensym192_1979721493, tailInHEX60gensym192_1979721494) {
  var result_1979721496 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_1979721496 = nimCopy(result_1979721496, {kind: 0, value: nimCopy(null, valueInHEX60gensym192_1979721493, NTI2013265924), tail: nimCopy(null, tailInHEX60gensym192_1979721494, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym192_1979721492, NTI33554439), expected: []}, NTI1979713420);

  return result_1979721496;

}

function failImpl_1979721498(inputInHEX60gensym192_1979721499, expectedInHEX60gensym192_1979721500, tailInHEX60gensym192_1979721501) {
  var result_1979721503 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_1979721503 = nimCopy(result_1979721503, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym192_1979721500, NTI1979719180), tail: nimCopy(null, tailInHEX60gensym192_1979721501, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym192_1979721499, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);

  return result_1979721503;

}
      
function HEX3Aanonymous_1979721506(input_1979721507) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_1979721509 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979721510 = succeedImpl_1979721491;
          var fail_1979721511 = failImpl_1979721498;
          Label1: do {
            var tempHEX60gensym30_1979721524 = parse_1979714564(a_1979721478, input_1979721507);
            if ((tempHEX60gensym30_1979721524.kind == 1)) {
            var Temporary2 = tempHEX60gensym30_1979721524;
            if (ConstSet131[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979721509 = nimCopy(result_1979721509, {kind: 1, fromInput: nimCopy(null, input_1979721507, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym30_1979721524.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979721530 = nimCopy(null, tempHEX60gensym30_1979721524, NTI1979713420);
          Label3: do {
            var tempHEX60gensym32_1979721543 = parse_2030044065(b_1979721479, result1_1979721530.tail);
            if ((tempHEX60gensym32_1979721543.kind == 1)) {
            var Temporary4 = tempHEX60gensym32_1979721543;
            if (ConstSet132[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI2030043157)); }
            result_1979721509 = nimCopy(result_1979721509, {kind: 1, fromInput: nimCopy(null, input_1979721507, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym32_1979721543.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);
            break BeforeRet;
            }
            
          } while (false);
          var result2_1979721549 = nimCopy(null, tempHEX60gensym32_1979721543, NTI2030043366);
          var Temporary5 = result1_1979721530;
          if (ConstSet133[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI2030043157)); }
          result_1979721509 = nimCopy(result_1979721509, succeed_1979721510(input_1979721507, Temporary5.value, result2_1979721549.tail), NTI1979713420);
          break BeforeRet;
        } while (false);

        return result_1979721509;

      }

  var result_1979721480 = null;

    Label1: do {
    } while (false);
    result_1979721480 = {body: HEX3Aanonymous_1979721506};

  return result_1979721480;

}

function HEX3EHEX3E_1979721392(a_1979721395, b_1979721396) {

function succeedImpl_1979721408(inputInHEX60gensym191_1979721409, valueInHEX60gensym191_1979721410, tailInHEX60gensym191_1979721411) {
  var result_1979721413 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_1979721413 = nimCopy(result_1979721413, {kind: 0, value: nimCopy(null, valueInHEX60gensym191_1979721410, NTI2013265924), tail: nimCopy(null, tailInHEX60gensym191_1979721411, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym191_1979721409, NTI33554439), expected: []}, NTI1979713420);

  return result_1979721413;

}

function failImpl_1979721415(inputInHEX60gensym191_1979721416, expectedInHEX60gensym191_1979721417, tailInHEX60gensym191_1979721418) {
  var result_1979721420 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_1979721420 = nimCopy(result_1979721420, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym191_1979721417, NTI1979719119), tail: nimCopy(null, tailInHEX60gensym191_1979721418, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym191_1979721416, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);

  return result_1979721420;

}
      
function HEX3Aanonymous_1979721423(input_1979721424) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_1979721426 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979721427 = succeedImpl_1979721408;
          var fail_1979721428 = failImpl_1979721415;
          Label1: do {
            var tempHEX60gensym34_1979721441 = parse_2030044065(a_1979721395, input_1979721424);
            if ((tempHEX60gensym34_1979721441.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_1979721441;
            if (ConstSet134[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979721426 = nimCopy(result_1979721426, {kind: 1, fromInput: nimCopy(null, input_1979721424, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym34_1979721441.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979721447 = nimCopy(null, tempHEX60gensym34_1979721441, NTI2030043366);
          Label3: do {
            var tempHEX60gensym36_1979721460 = parse_1979714564(b_1979721396, result1_1979721447.tail);
            if ((tempHEX60gensym36_1979721460.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_1979721460;
            if (ConstSet135[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI2030043157)); }
            result_1979721426 = nimCopy(result_1979721426, {kind: 1, fromInput: nimCopy(null, input_1979721424, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym36_1979721460.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);
            break BeforeRet;
            }
            
          } while (false);
          var result2_1979721466 = nimCopy(null, tempHEX60gensym36_1979721460, NTI1979713420);
          var Temporary5 = result2_1979721466;
          if (ConstSet136[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI2030043157)); }
          result_1979721426 = nimCopy(result_1979721426, succeed_1979721427(input_1979721424, Temporary5.value, result2_1979721466.tail), NTI1979713420);
          break BeforeRet;
        } while (false);

        return result_1979721426;

      }

  var result_1979721397 = null;

    Label1: do {
    } while (false);
    result_1979721397 = {body: HEX3Aanonymous_1979721423};

  return result_1979721397;

}

function HEX3CHEX3C_1979721679(a_1979721682, b_1979721683) {

function succeedImpl_1979721695(inputInHEX60gensym193_1979721696, valueInHEX60gensym193_1979721697, tailInHEX60gensym193_1979721698) {
  var result_1979721700 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_1979721700 = nimCopy(result_1979721700, {kind: 0, value: nimCopy(null, valueInHEX60gensym193_1979721697, NTI2013265924), tail: nimCopy(null, tailInHEX60gensym193_1979721698, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym193_1979721696, NTI33554439), expected: []}, NTI1979713420);

  return result_1979721700;

}

function failImpl_1979721702(inputInHEX60gensym193_1979721703, expectedInHEX60gensym193_1979721704, tailInHEX60gensym193_1979721705) {
  var result_1979721707 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_1979721707 = nimCopy(result_1979721707, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym193_1979721704, NTI1979719301), tail: nimCopy(null, tailInHEX60gensym193_1979721705, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym193_1979721703, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);

  return result_1979721707;

}
      
function HEX3Aanonymous_1979721710(input_1979721711) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_1979721713 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979721714 = succeedImpl_1979721695;
          var fail_1979721715 = failImpl_1979721702;
          Label1: do {
            var tempHEX60gensym30_1979721728 = parse_1979714564(a_1979721682, input_1979721711);
            if ((tempHEX60gensym30_1979721728.kind == 1)) {
            var Temporary2 = tempHEX60gensym30_1979721728;
            if (ConstSet137[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979721713 = nimCopy(result_1979721713, {kind: 1, fromInput: nimCopy(null, input_1979721711, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym30_1979721728.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979721734 = nimCopy(null, tempHEX60gensym30_1979721728, NTI1979713420);
          Label3: do {
            var tempHEX60gensym32_1979721747 = parse_1979713530(b_1979721683, result1_1979721734.tail);
            if ((tempHEX60gensym32_1979721747.kind == 1)) {
            var Temporary4 = tempHEX60gensym32_1979721747;
            if (ConstSet138[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI2030043157)); }
            result_1979721713 = nimCopy(result_1979721713, {kind: 1, fromInput: nimCopy(null, input_1979721711, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym32_1979721747.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);
            break BeforeRet;
            }
            
          } while (false);
          var result2_1979721753 = nimCopy(null, tempHEX60gensym32_1979721747, NTI1979712330);
          var Temporary5 = result1_1979721734;
          if (ConstSet139[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI2030043157)); }
          result_1979721713 = nimCopy(result_1979721713, succeed_1979721714(input_1979721711, Temporary5.value, result2_1979721753.tail), NTI1979713420);
          break BeforeRet;
        } while (false);

        return result_1979721713;

      }

  var result_1979721684 = null;

    Label1: do {
    } while (false);
    result_1979721684 = {body: HEX3Aanonymous_1979721710};

  return result_1979721684;

}

function map_1979722530(a_1979722533, fn_1979722535) {

function succeedImpl_1979722547(inputInHEX60gensym212_1979722548, valueInHEX60gensym212_1979722549, tailInHEX60gensym212_1979722550) {
  var result_1979722552 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_1979722552 = nimCopy(result_1979722552, {kind: 0, value: nimCopy(null, valueInHEX60gensym212_1979722549, NTI2013265924), tail: nimCopy(null, tailInHEX60gensym212_1979722550, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym212_1979722548, NTI33554439), expected: []}, NTI1979713420);

  return result_1979722552;

}

function failImpl_1979722554(inputInHEX60gensym212_1979722555, expectedInHEX60gensym212_1979722556, tailInHEX60gensym212_1979722557) {
  var result_1979722559 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_1979722559 = nimCopy(result_1979722559, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym212_1979722556, NTI1979719932), tail: nimCopy(null, tailInHEX60gensym212_1979722557, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym212_1979722555, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);

  return result_1979722559;

}
      
function HEX3Aanonymous_1979722562(input_1979722563) {
            var Temporary2;
          var Temporary3;

        var result_1979722565 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979722566 = succeedImpl_1979722547;
          var fail_1979722567 = failImpl_1979722554;
          Label1: do {
            var tempHEX60gensym24_1979722580 = parse_1979717849(a_1979722533, input_1979722563);
            if ((tempHEX60gensym24_1979722580.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_1979722580;
            if (ConstSet140[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979722565 = nimCopy(result_1979722565, {kind: 1, fromInput: nimCopy(null, input_1979722563, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym24_1979722580.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979722586 = nimCopy(null, tempHEX60gensym24_1979722580, NTI1979715881);
          var Temporary3 = result1_1979722586;
          if (ConstSet141[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI2030043157)); }
          result_1979722565 = nimCopy(result_1979722565, succeed_1979722566(input_1979722563, fn_1979722535(Temporary3.value), result1_1979722586.tail), NTI1979713420);
          break BeforeRet;
        } while (false);

        return result_1979722565;

      }

  var result_1979722536 = null;

    Label1: do {
    } while (false);
    result_1979722536 = {body: HEX3Aanonymous_1979722562};

  return result_1979722536;

}

function nop_1979722658() {

function succeedImpl_1979722671(inputInHEX60gensym214_1979722672, valueInHEX60gensym214_1979722673, tailInHEX60gensym214_1979722674) {
  var result_1979722676 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_1979722676 = nimCopy(result_1979722676, {kind: 0, value: nimCopy(null, valueInHEX60gensym214_1979722673, NTI2013265924), tail: nimCopy(null, tailInHEX60gensym214_1979722674, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym214_1979722672, NTI33554439), expected: []}, NTI1979713420);

  return result_1979722676;

}

function failImpl_1979722678(inputInHEX60gensym214_1979722679, expectedInHEX60gensym214_1979722680, tailInHEX60gensym214_1979722681) {
  var result_1979722683 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_1979722683 = nimCopy(result_1979722683, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym214_1979722680, NTI1979720018), tail: nimCopy(null, tailInHEX60gensym214_1979722681, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym214_1979722679, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);

  return result_1979722683;

}
      
function HEX3Aanonymous_1979722686(input_1979722687) {
        var result_1979722689 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

          var succeed_1979722690 = succeedImpl_1979722671;
          var fail_1979722691 = failImpl_1979722678;
          result_1979722689 = nimCopy(result_1979722689, succeed_1979722690(input_1979722687, ({rows: [], baseline: 0, width: 0, flag: 0}), input_1979722687), NTI1979713420);

        return result_1979722689;

      }

  var result_1979722660 = null;

    Label1: do {
    } while (false);
    result_1979722660 = {body: HEX3Aanonymous_1979722686};

  return result_1979722660;

}

function isSome_1912602931(self_1912602933) {
  var result_1912602934 = false;

    result_1912602934 = self_1912602933.has;

  return result_1912602934;

}

function get_1929380058(self_1929380060, otherwise_1929380061) {
    var Temporary1;

  var result_1929380062 = [];

    if (isSome_1912602931(self_1929380060)) {
    Temporary1 = self_1929380060.val;
    }
    else {
    Temporary1 = otherwise_1929380061;
    }
    
    result_1929380062 = nimCopy(null, Temporary1, NTI33554439);

  return result_1929380062;

}

function hasJsBigInt_805306411() {
  var result_805306412 = false;

    result_805306412 = typeof BigInt != 'undefined'

  return result_805306412;

}

function hiXorLoJs_1056964693(a_1056964694, b_1056964695) {
  var result_1056964696 = 0n;

    var prod_1056964697 = (a_1056964694 * b_1056964695);
    var mask_1056964698 = BigInt("0xffffffffffffffff");
    result_1056964696 = ((prod_1056964697 >> BigInt("64")) ^ (prod_1056964697 & mask_1056964698));

  return result_1056964696;

}

function hashWangYi1_1056964786(x_1056964788) {
  var result_1056964789 = 0;

    if (hasJsBigInt_805306411()) {
    var P0HEX60gensym6_1056964808 = BigInt("0xa0761d6478bd642f");
    var P1HEX60gensym6_1056964809 = BigInt("0xe7037ed1a0b428db");
    var P58HEX60gensym6_1056964810 = BigInt("0xeb44accab455d16d");
    var resHEX60gensym6_1056964811 = hiXorLoJs_1056964693(hiXorLoJs_1056964693(P0HEX60gensym6_1056964808, (BigInt(x_1056964788) ^ P1HEX60gensym6_1056964809)), P58HEX60gensym6_1056964810);
    result_1056964789 = Number((() => { const i = resHEX60gensym6_1056964811, b = 32; return BigInt.asIntN(b, i) })());
    }
    else {
      result_1056964789 = (x_1056964788 & 4294967295);
    }
    

  return result_1056964789;

}

function hash_1996489179(x_1996489181) {
  var result_1996489182 = 0;

    result_1996489182 = hashWangYi1_1056964786(x_1996489181);

  return result_1996489182;

}

function HEX3DHEX3D_939525015(a_939525016, b_939525017) {
  var result_939525018 = false;

  BeforeRet: do {
    result_939525018 = (((a_939525016) | 0) == ((b_939525017) | 0));
    break BeforeRet;
  } while (false);

  return result_939525018;

}

function rawGet_1996489172(t_1996489175, key_1996489176, hc_1996489177, hc_1996489177_Idx) {
            var Temporary3;

  var result_1996489178 = 0;

  BeforeRet: do {
    hc_1996489177[hc_1996489177_Idx] = hash_1996489179(key_1996489176);
    if ((hc_1996489177[hc_1996489177_Idx] == 0)) {
    hc_1996489177[hc_1996489177_Idx] = 314159265;
    }
    
    if (((t_1996489175.data).length == 0)) {
    result_1996489178 = -1;
    break BeforeRet;
    }
    
    var h_1996489240 = (hc_1996489177[hc_1996489177_Idx] & (t_1996489175.data).length - 1);
    Label1: do {
        Label2: while (true) {
        if (!isFilled_1241514015(t_1996489175.data[chckIndx(h_1996489240, 0, (t_1996489175.data).length - 1)].Field0)) break Label2;
            if (!(t_1996489175.data[chckIndx(h_1996489240, 0, (t_1996489175.data).length - 1)].Field0 == hc_1996489177[hc_1996489177_Idx])) Temporary3 = false; else {              Temporary3 = HEX3DHEX3D_939525015(t_1996489175.data[chckIndx(h_1996489240, 0, (t_1996489175.data).length - 1)].Field1, key_1996489176);            }          if (Temporary3) {
          result_1996489178 = h_1996489240;
          break BeforeRet;
          }
          
          h_1996489240 = nextTry_1241514018(h_1996489240, (t_1996489175.data).length - 1);
        }
    } while (false);
    result_1996489178 = subInt(-1, h_1996489240);
  } while (false);

  return result_1996489178;

}

function hasKey_1979721832(t_1979721835, key_1979721836) {
  var result_1979721837 = false;

    var hc_1979721838 = [0];
    result_1979721837 = (0 <= rawGet_1996489172(t_1979721835, key_1979721836, hc_1979721838, 0));

  return result_1979721837;

}

function contains_1979721826(t_1979721829, key_1979721830) {
  var result_1979721831 = false;

  BeforeRet: do {
    result_1979721831 = hasKey_1979721832(t_1979721829, key_1979721830);
    break BeforeRet;
  } while (false);

  return result_1979721831;

}

function some_1912603075(val_1912603077) {
  var result_1912603078 = ({val: [], has: false});

    result_1912603078.has = true;
    result_1912603078.val = nimCopy(null, val_1912603077, NTI33554439);

  return result_1912603078;

}

function raiseKeyError_1979721978(key_1979721980) {
    raiseException({message: (makeNimstrLit("key not found: ") || []).concat(HEX24_939524687(key_1979721980) || []), parent: null, m_type: NTI33555126, name: null, trace: [], up: null}, "KeyError");

  
}

function HEX5BHEX5D_1979721911(t_1979721914, key_1979721915) {
  var result_1979721916 = [];

    var hcHEX60gensym20_1979721917 = [0];
    var indexHEX60gensym20_1979721924 = rawGet_1996489172(t_1979721914, key_1979721915, hcHEX60gensym20_1979721917, 0);
    if ((0 <= indexHEX60gensym20_1979721924)) {
    result_1979721916 = nimCopy(null, t_1979721914.data[chckIndx(indexHEX60gensym20_1979721924, 0, (t_1979721914.data).length - 1)].Field2, NTI33554439);
    }
    else {
    raiseKeyError_1979721978(key_1979721915);
    }
    

  return result_1979721916;

}

function HEX26_2013266757(left_2013266758, right_2013266759) {
  var result_2013266760 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_2013266760 = nimCopy(result_2013266760, join_2013266107([nimCopy(null, left_2013266758, NTI2013265924), nimCopy(null, right_2013266759, NTI2013265924)]), NTI2013265924);

  return result_2013266760;

}

function HEX3CHEX3C_1979723331(a_1979723334, b_1979723335) {

function succeedImpl_1979723347(inputInHEX60gensym228_1979723348, valueInHEX60gensym228_1979723349, tailInHEX60gensym228_1979723350) {
  var result_1979723352 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_1979723352 = nimCopy(result_1979723352, {kind: 0, value: nimCopy(null, valueInHEX60gensym228_1979723349, NTI2013265924), tail: nimCopy(null, tailInHEX60gensym228_1979723350, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym228_1979723348, NTI33554439), expected: []}, NTI1979713420);

  return result_1979723352;

}

function failImpl_1979723354(inputInHEX60gensym228_1979723355, expectedInHEX60gensym228_1979723356, tailInHEX60gensym228_1979723357) {
  var result_1979723359 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_1979723359 = nimCopy(result_1979723359, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym228_1979723356, NTI1979720637), tail: nimCopy(null, tailInHEX60gensym228_1979723357, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym228_1979723355, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);

  return result_1979723359;

}
      
function HEX3Aanonymous_1979723362(input_1979723363) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_1979723365 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1979723366 = succeedImpl_1979723347;
          var fail_1979723367 = failImpl_1979723354;
          Label1: do {
            var tempHEX60gensym30_1979723380 = parse_1979714564(a_1979723334, input_1979723363);
            if ((tempHEX60gensym30_1979723380.kind == 1)) {
            var Temporary2 = tempHEX60gensym30_1979723380;
            if (ConstSet143[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI2030043157)); }
            result_1979723365 = nimCopy(result_1979723365, {kind: 1, fromInput: nimCopy(null, input_1979723363, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym30_1979723380.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);
            break BeforeRet;
            }
            
          } while (false);
          var result1_1979723386 = nimCopy(null, tempHEX60gensym30_1979723380, NTI1979713420);
          Label3: do {
            var tempHEX60gensym32_1979723399 = parse_1979713292(b_1979723335, result1_1979723386.tail);
            if ((tempHEX60gensym32_1979723399.kind == 1)) {
            var Temporary4 = tempHEX60gensym32_1979723399;
            if (ConstSet144[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI2030043157)); }
            result_1979723365 = nimCopy(result_1979723365, {kind: 1, fromInput: nimCopy(null, input_1979723363, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI2030043171), tail: nimCopy(null, tempHEX60gensym32_1979723399.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI1979713420);
            break BeforeRet;
            }
            
          } while (false);
          var result2_1979723405 = nimCopy(null, tempHEX60gensym32_1979723399, NTI2030043268);
          var Temporary5 = result1_1979723386;
          if (ConstSet145[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI2030043157)); }
          result_1979723365 = nimCopy(result_1979723365, succeed_1979723366(input_1979723363, Temporary5.value, result2_1979723405.tail), NTI1979713420);
          break BeforeRet;
        } while (false);

        return result_1979723365;

      }

  var result_1979723336 = null;

    Label1: do {
    } while (false);
    result_1979723336 = {body: HEX3Aanonymous_1979723362};

  return result_1979723336;

}

function HEX24_2013265952(rect_2013265953) {
  var result_2013265954 = [];

    result_2013265954 = nimCopy(null, nsuJoinSep(rect_2013265953.rows, makeNimstrLit("\x0A")), NTI33554439);

  return result_2013265954;

}

function nsuCountLines(s_654313092) {
  var result_654313093 = 0;

    result_654313093 = 1;
    var i_654313094 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_654313094 < (s_654313092).length)) break Label2;
          switch (s_654313092[chckIndx(i_654313094, 0, (s_654313092).length - 1)]) {
          case 13:
            if (((addInt(i_654313094, 1) < (s_654313092).length) && (s_654313092[chckIndx(addInt(i_654313094, 1), 0, (s_654313092).length - 1)] == 10))) {
            i_654313094 = addInt(i_654313094, 1);
            }
            
            result_654313093 = addInt(result_654313093, 1);
            break;
          case 10:
            result_654313093 = addInt(result_654313093, 1);
            break;
          default: 
            break;
          }
          i_654313094 = addInt(i_654313094, 1);
        }
    } while (false);

  return result_654313093;

}

function nsuSplitLines(s_654312050, keepEol_654312051) {
            var Temporary6;

  var result_654312052 = [];

    result_654312052 = nimCopy(null, [], NTI654311904);
    Label1: do {
      var xHEX60gensym76_654312058 = [];
      var first_1962934727 = 0;
      var last_1962934728 = 0;
      var eolpos_1962934729 = 0;
      Label2: do {
          Label3: while (true) {
          if (!true) break Label3;
            Label4: do {
                Label5: while (true) {
                if (!((last_1962934728 < (s_654312050).length) && !((ConstSet147[s_654312050[chckIndx(last_1962934728, 0, (s_654312050).length - 1)]] != undefined)))) break Label5;
                  last_1962934728 = addInt(last_1962934728, 1);
                }
            } while (false);
            eolpos_1962934729 = last_1962934728;
            if ((last_1962934728 < (s_654312050).length)) {
            if ((s_654312050[chckIndx(last_1962934728, 0, (s_654312050).length - 1)] == 10)) {
            last_1962934728 = addInt(last_1962934728, 1);
            }
            else {
            if ((s_654312050[chckIndx(last_1962934728, 0, (s_654312050).length - 1)] == 13)) {
            last_1962934728 = addInt(last_1962934728, 1);
            if (((last_1962934728 < (s_654312050).length) && (s_654312050[chckIndx(last_1962934728, 0, (s_654312050).length - 1)] == 10))) {
            last_1962934728 = addInt(last_1962934728, 1);
            }
            
            }
            }
            }
            
            if (keepEol_654312051) {
            Temporary6 = subInt(last_1962934728, 1);
            }
            else {
            Temporary6 = subInt(eolpos_1962934729, 1);
            }
            
            xHEX60gensym76_654312058 = substr_33557906(s_654312050, first_1962934727, Temporary6);
            var Temporary7 = nimCopy(null, xHEX60gensym76_654312058, NTI33554439);
            result_654312052.push(Temporary7);;
            if ((eolpos_1962934729 == last_1962934728)) {
            break Label2;
            }
            
            first_1962934727 = last_1962934728;
          }
      } while (false);
    } while (false);

  return result_654312052;

}

function lineInfo_1979723424(result1_1979723426) {
  var result_1979723427 = {Field0: 0, Field1: 0};

    var prior_1979723446 = HEX5BHEX5D_939527322(result1_1979723426.fromInput, HEX2EHEX2E_872415312(0, addInt((result1_1979723426.tail).length, 1)));
    var lineNum_1979723447 = nsuCountLines(prior_1979723446);
    var lines_1979723448 = nsuSplitLines(prior_1979723446, false);
    var colmNum_1979723452 = addInt((lines_1979723448[chckIndx(subInt((lines_1979723448).length, 1), 0, (lines_1979723448).length - 1)]).length, 1);
    result_1979723427 = nimCopy(result_1979723427, {Field0: lineNum_1979723447, Field1: colmNum_1979723452}, NTI2030043189);

  return result_1979723427;

}

function mkDigit_1275068421(v_1275068422, typ_1275068423) {
      var Temporary1;

  var result_1275068424 = [];

    if (!((v_1275068422 < 26))) {
    failedAssertImpl_218103864(makeNimstrLit("strformat.nim(320, 9) `v < 26` "));
    }
    
    if ((v_1275068422 < 10)) {
    result_1275068424 = nimCopy(null, nimCharToStr(chckRange(addInt(48, v_1275068422), 0, 255)), NTI33554439);
    }
    else {
      if ((typ_1275068423 == 120)) {
      Temporary1 = 97;
      }
      else {
      Temporary1 = 65;
      }
      
      result_1275068424 = nimCopy(null, nimCharToStr(chckRange(subInt(addInt(Temporary1, v_1275068422), 10), 0, 255)), NTI33554439);
    }
    

  return result_1275068424;

}

function formatInt_1979723465(n_1979723467, radix_1979723468, spec_1979723469) {
    var Temporary1;
    var Temporary8;

  var result_1979723470 = [];

    var n_1979723473 = n_1979723467;
    var negative_1979723474 = (n_1979723473 < 0);
    if (negative_1979723474) {
    Temporary1 = ((~(n_1979723473) + 1) );
    }
    else {
    Temporary1 = n_1979723473;
    }
    
    var v_1979723475 = Temporary1;
    var xx_1979723476 = [];
    if (spec_1979723469.alternateForm) {
    switch (spec_1979723469.typ) {
    case 88:
      xx_1979723476 = nimCopy(null, makeNimstrLit("0x"), NTI33554439);
      break;
    case 120:
      xx_1979723476 = nimCopy(null, makeNimstrLit("0x"), NTI33554439);
      break;
    case 98:
      xx_1979723476 = nimCopy(null, makeNimstrLit("0b"), NTI33554439);
      break;
    case 111:
      xx_1979723476 = nimCopy(null, makeNimstrLit("0o"), NTI33554439);
      break;
    default: 
      break;
    }
    }
    
    if ((v_1979723475 == 0)) {
    result_1979723470 = nimCopy(null, makeNimstrLit("0"), NTI33554439);
    }
    else {
      result_1979723470 = nimCopy(null, [], NTI33554439);
      Label2: do {
          Label3: while (true) {
          if (!(0 < v_1979723475)) break Label3;
            var d_1979723477 = (v_1979723475 % radix_1979723468);
            v_1979723475 = Math.trunc(((v_1979723475 / radix_1979723468) ));
            result_1979723470.push.apply(result_1979723470, mkDigit_1275068421(chckRange(d_1979723477, -2147483648, 2147483647), spec_1979723469.typ));;
          }
      } while (false);
      Label4: do {
        var idx_1979723482 = 0;
        var colontmp__1962934734 = 0;
        colontmp__1962934734 = divInt((result_1979723470).length, 2);
        var i_1962934735 = 0;
        Label5: do {
            Label6: while (true) {
            if (!(i_1962934735 < colontmp__1962934734)) break Label6;
              idx_1979723482 = i_1962934735;
              var Temporary7 = result_1979723470[chckIndx(idx_1979723482, 0, (result_1979723470).length - 1)]; result_1979723470[chckIndx(idx_1979723482, 0, (result_1979723470).length - 1)] = result_1979723470[chckIndx(subInt(subInt((result_1979723470).length, idx_1979723482), 1), 0, (result_1979723470).length - 1)]; result_1979723470[chckIndx(subInt(subInt((result_1979723470).length, idx_1979723482), 1), 0, (result_1979723470).length - 1)] = Temporary7;              i_1962934735 = addInt(i_1962934735, 1);
            }
        } while (false);
      } while (false);
    }
    
    if (spec_1979723469.padWithZero) {
    if (negative_1979723474) Temporary8 = true; else {      Temporary8 = !((spec_1979723469.sign == 45));    }    var sign_1979723487 = Temporary8;
    var toFill_1979723491 = subInt(subInt(subInt(spec_1979723469.minimumWidth, (result_1979723470).length), (xx_1979723476).length), (sign_1979723487 ? 1 : 0));
    if ((0 < toFill_1979723491)) {
    result_1979723470 = nimCopy(null, (nsuRepeatChar(48, chckRange(toFill_1979723491, 0, 2147483647)) || []).concat(result_1979723470 || []), NTI33554439);
    }
    
    }
    
    if (negative_1979723474) {
    result_1979723470 = nimCopy(null, (makeNimstrLit("-") || []).concat(xx_1979723476 || [],result_1979723470 || []), NTI33554439);
    }
    else {
    if (!((spec_1979723469.sign == 45))) {
    result_1979723470 = nimCopy(null, [spec_1979723469.sign].concat(xx_1979723476 || [],result_1979723470 || []), NTI33554439);
    }
    else {
      result_1979723470 = nimCopy(null, (xx_1979723476 || []).concat(result_1979723470 || []), NTI33554439);
    }
    }
    if ((spec_1979723469.align == 60)) {
    Label9: do {
      var i_1979723496 = 0;
      var colontmp__1962934738 = 0;
      colontmp__1962934738 = (result_1979723470).length;
      var i_1962934739 = colontmp__1962934738;
      Label10: do {
          Label11: while (true) {
          if (!(i_1962934739 < spec_1979723469.minimumWidth)) break Label11;
            i_1979723496 = i_1962934739;
            addChar(result_1979723470, spec_1979723469.fill);;
            i_1962934739 = addInt(i_1962934739, 1);
          }
      } while (false);
    } while (false);
    }
    else {
      var toFill_1979723497 = subInt(spec_1979723469.minimumWidth, (result_1979723470).length);
      if ((spec_1979723469.align == 94)) {
      var half_1979723498 = divInt(toFill_1979723497, 2);
      result_1979723470 = nimCopy(null, (nsuRepeatChar(spec_1979723469.fill, chckRange(half_1979723498, 0, 2147483647)) || []).concat(result_1979723470 || [],nsuRepeatChar(spec_1979723469.fill, chckRange(subInt(toFill_1979723497, half_1979723498), 0, 2147483647)) || []), NTI33554439);
      }
      else {
        if ((0 < toFill_1979723497)) {
        result_1979723470 = nimCopy(null, (nsuRepeatChar(spec_1979723469.fill, chckRange(toFill_1979723497, 0, 2147483647)) || []).concat(result_1979723470 || []), NTI33554439);
        }
        
      }
      
    }
    

  return result_1979723470;

}

function formatValue_1979723457(result_1979723459, result_1979723459_Idx, value_1979723460, specifier_1979723461) {
  BeforeRet: do {
    if (((specifier_1979723461).length == 0)) {
    result_1979723459[result_1979723459_Idx].push.apply(result_1979723459[result_1979723459_Idx], HEX24_335544323(value_1979723460));;
    break BeforeRet;
    }
    
    var spec_1979723462 = parseStandardFormatSpecifier_1275068474(specifier_1979723461, 0, false);
    var radix_1979723463 = 10;
    switch (spec_1979723462.typ) {
    case 120:
    case 88:
      radix_1979723463 = 16;
      break;
    case 100:
    case 0:
      break;
    case 98:
      radix_1979723463 = 2;
      break;
    case 111:
      radix_1979723463 = 8;
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for number, expected one  of \'x\', \'X\', \'b\', \'d\', \'o\' but got: ") || []).concat([spec_1979723462.typ]), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    result_1979723459[result_1979723459_Idx].push.apply(result_1979723459[result_1979723459_Idx], formatInt_1979723465(value_1979723460, radix_1979723463, spec_1979723462));;
  } while (false);

  
}

function render_1979711499(latex_1979711500, oneLine_1979711501) {
    
function HEX3Aanonymous_1979713944(x_1979713964) {
      var result_1979713967 = [];

        result_1979713967 = nimCopy(null, [nimCopy(null, x_1979713964, NTI1979712373)], NTI1979712905);

      return result_1979713967;

    }
    
function HEX3Aanonymous_1979713432(x_1979713452) {
      var result_1979713455 = [];

        result_1979713455 = nimCopy(null, [nimCopy(null, x_1979713452, NTI33554439)], NTI1660944992);

      return result_1979713455;

    }
    
function HEX3Aanonymous_1979714159(x_1979714211) {
      var result_1979714214 = [];

        var resultHEX60gensym42_1979714223 = newSeq_452985301(0);
        Label1: do {
          var xHEX60gensym42_1979714227 = [];
          var i_1962934373 = 0;
          var L_1962934374 = (x_1979714211).length;
          Label2: do {
              Label3: while (true) {
              if (!(i_1962934373 < L_1962934374)) break Label3;
                xHEX60gensym42_1979714227 = x_1979714211[chckIndx(i_1962934373, 0, (x_1979714211).length - 1)];
                var a_1979714228 = nimCopy(null, resultHEX60gensym42_1979714223, NTI452985127);
                var b_1979714229 = nimCopy(null, xHEX60gensym42_1979714227, NTI1979712324);
                resultHEX60gensym42_1979714223 = nimCopy(null, HEX26_2013266015(a_1979714228, b_1979714229), NTI2013265977);
                i_1962934373 = addInt(i_1962934373, 1);
                if (!(((x_1979714211).length == L_1962934374))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
        result_1979714214 = nimCopy(null, resultHEX60gensym42_1979714223, NTI452985127);

      return result_1979714214;

    }
    
function HEX3Aanonymous_1979715228(x_1979715248) {
      var result_1979715251 = [];

        result_1979715251 = nimCopy(null, [nimCopy(null, x_1979715248, NTI1979713478)], NTI1979714029);

      return result_1979715251;

    }
    
function HEX3Aanonymous_1979714716(x_1979714736) {
      var result_1979714739 = [];

        result_1979714739 = nimCopy(null, [nimCopy(null, x_1979714736, NTI2013265924)], NTI1979713585);

      return result_1979714739;

    }
    
function HEX3Aanonymous_1979715443(x_1979715534) {
      var result_1979715537 = [];

        var resultHEX60gensym68_1979715546 = newSeq_2013266235(0);
        Label1: do {
          var xHEX60gensym68_1979715550 = [];
          var i_1962934412 = 0;
          var L_1962934413 = (x_1979715534).length;
          Label2: do {
              Label3: while (true) {
              if (!(i_1962934412 < L_1962934413)) break Label3;
                xHEX60gensym68_1979715550 = x_1979715534[chckIndx(i_1962934412, 0, (x_1979715534).length - 1)];
                var a_1979715551 = nimCopy(null, resultHEX60gensym68_1979715546, NTI2013266111);
                var b_1979715552 = nimCopy(null, xHEX60gensym68_1979715550, NTI1979713429);
                resultHEX60gensym68_1979715546 = nimCopy(null, HEX26_1979715482(a_1979715551, b_1979715552), NTI1979714458);
                i_1962934412 = addInt(i_1962934412, 1);
                if (!(((x_1979715534).length == L_1962934413))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
        result_1979715537 = nimCopy(null, resultHEX60gensym68_1979715546, NTI2013266111);

      return result_1979715537;

    }
    
function HEX3Aanonymous_1979715631(atoms_1979715647) {
      var result_1979715650 = ({rows: [], baseline: 0, width: 0, flag: 0});

        result_1979715650 = nimCopy(result_1979715650, join_2013266107(atoms_1979715647), NTI2013265924);

      return result_1979715650;

    }
    
function HEX3Aanonymous_1979715790(ch_1979715806) {
      var result_1979715809 = ({rows: [], baseline: 0, width: 0, flag: 0});

        result_1979715809 = nimCopy(result_1979715809, toTextRectOneLine_2013265989(nimCharToStr(ch_1979715806), 0, 1), NTI2013265924);

      return result_1979715809;

    }
    
function HEX3Aanonymous_1979715893(letter_1979715909) {
      var result_1979715912 = ({rows: [], baseline: 0, width: 0, flag: 0});

        result_1979715912 = nimCopy(result_1979715912, toTextRectOneLine_2013265989(inFont_1996488882(letter_1979715909, 0), 0, 1), NTI2013265924);

      return result_1979715912;

    }
    
function HEX3Aanonymous_1979715960(pair_1979715963) {
        
function HEX3Aanonymous_1979716582(x_1979716602) {
          var result_1979716605 = [];

            result_1979716605 = nimCopy(null, [nimCopy(null, x_1979716602, NTI1979712373)], NTI1979712905);

          return result_1979716605;

        }
        
function HEX3Aanonymous_1979716471(x_1979716491) {
          var result_1979716494 = [];

            result_1979716494 = nimCopy(null, [nimCopy(null, x_1979716491, NTI33554439)], NTI1660944992);

          return result_1979716494;

        }
        
function HEX3Aanonymous_1979716680(x_1979716715) {
          var result_1979716718 = [];

            var resultHEX60gensym87_1979716727 = newSeq_452985301(0);
            Label1: do {
              var xHEX60gensym87_1979716731 = [];
              var i_1962934547 = 0;
              var L_1962934548 = (x_1979716715).length;
              Label2: do {
                  Label3: while (true) {
                  if (!(i_1962934547 < L_1962934548)) break Label3;
                    xHEX60gensym87_1979716731 = x_1979716715[chckIndx(i_1962934547, 0, (x_1979716715).length - 1)];
                    var a_1979716732 = nimCopy(null, resultHEX60gensym87_1979716727, NTI452985127);
                    var b_1979716733 = nimCopy(null, xHEX60gensym87_1979716731, NTI1979712324);
                    resultHEX60gensym87_1979716727 = nimCopy(null, HEX26_2013266015(a_1979716732, b_1979716733), NTI2013265977);
                    i_1962934547 = addInt(i_1962934547, 1);
                    if (!(((x_1979716715).length == L_1962934548))) {
                    failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while (false);
            } while (false);
            result_1979716718 = nimCopy(null, resultHEX60gensym87_1979716727, NTI452985127);

          return result_1979716718;

        }
        
function HEX3Aanonymous_1979716791(letter_1979716806) {
          var result_1979716809 = ({rows: [], baseline: 0, width: 0, flag: 0});

            result_1979716809 = nimCopy(result_1979716809, toTextRectOneLine_2013265989(inFont_1996488882(letter_1979716806, font_1979715968), 0, 1), NTI2013265924);

          return result_1979716809;

        }

      var result_1979715966 = null;

        var name_1979715967 = nimCopy(null, pair_1979715963["Field0"], NTI33554439);
        var font_1979715968 = pair_1979715963["Field1"];
        result_1979715966 = map_1979715827(HEX7C_2030044209(HEX3CHEX3C_1979716322(HEX3CHEX3C_1979716239(HEX3EHEX3E_1979716060(HEX3EHEX3E_1979716143(HEX3EHEX3E_1979716060(HEX3EHEX3E_1979715977(s_2030043247(name_1979715967), ws_1979714300), c_2030043369(123)), ws_1979714300), alpha_1979715776), ws_1979714300), c_2030043369(125)), HEX3EHEX3E_1979716060(HEX3EHEX3E_1979715977(s_2030043247(name_1979715967), map_1979714243(HEX26_1979714009(map_1979713764(HEX2A_1979713102(whitespace_2030044190, HEX2EHEX2E_939524947(1, 2147483647).a), HEX3Aanonymous_1979716582), HEX2A_1979713588(HEX7C_1979713486(map_1979713246(whitespace_2030044190, HEX3Aanonymous_1979716471), nop_1979713110()), subInt(HEX2EHEX2E_939524947(1, 2147483647).b, HEX2EHEX2E_939524947(1, 2147483647).a))), HEX3Aanonymous_1979716680)), alpha_1979715776)), HEX3Aanonymous_1979716791);

      return result_1979715966;

    }
    
function HEX3Aanonymous_1979716993(entry_1979716996) {
        var Temporary1;
        
function HEX3Aanonymous_1979717160(x_1979717176) {
          var result_1979717179 = ({rows: [], baseline: 0, width: 0, flag: 0});

            result_1979717179 = nimCopy(result_1979717179, val_1979717001, NTI2013265924);

          return result_1979717179;

        }
          
function HEX3Aanonymous_1979717256(x_1979717272) {
            var result_1979717275 = ({rows: [], baseline: 0, width: 0, flag: 0});

              result_1979717275 = nimCopy(result_1979717275, val_1979717001, NTI2013265924);

            return result_1979717275;

          }

      var result_1979716999 = null;

        var key_1979717000 = nimCopy(null, entry_1979716996["Field0"], NTI33554439);
        var val_1979717001 = nimCopy(null, entry_1979716996["Field1"], NTI2013265924);
        if ((key_1979717000[chckIndx(0, 0, (key_1979717000).length - 1)] == 92)) {
        Temporary1 = map_1979717189(HEX3CHEX3C_1979717075(s_2030043247(key_1979717000), HEX21_1979717018(letter_2030044283)), HEX3Aanonymous_1979717160);
        }
        else {
        Temporary1 = map_1979717189(s_2030043247(key_1979717000), HEX3Aanonymous_1979717256);
        }
        
        result_1979716999 = Temporary1;

      return result_1979716999;

    }
    
function HEX3Aanonymous_1979718263(x_1979718283) {
      var result_1979718286 = [];

        result_1979718286 = nimCopy(null, [nimCopy(null, x_1979718283, NTI1979715913)], NTI1979716461);

      return result_1979718286;

    }
    
function HEX3Aanonymous_1979717743(x_1979717763) {
      var result_1979717766 = [];

        result_1979717766 = nimCopy(null, [x_1979717763], NTI1979716020);

      return result_1979717766;

    }
    
function HEX3Aanonymous_1979718478(x_1979718574) {
      var result_1979718577 = [];

        var resultHEX60gensym124_1979718586 = newSeq_1979718487(0);
        Label1: do {
          var xHEX60gensym124_1979718590 = [];
          var i_1962934600 = 0;
          var L_1962934601 = (x_1979718574).length;
          Label2: do {
              Label3: while (true) {
              if (!(i_1962934600 < L_1962934601)) break Label3;
                xHEX60gensym124_1979718590 = x_1979718574[chckIndx(i_1962934600, 0, (x_1979718574).length - 1)];
                var a_1979718591 = nimCopy(null, resultHEX60gensym124_1979718586, NTI1979716870);
                var b_1979718592 = nimCopy(null, xHEX60gensym124_1979718590, NTI1979715875);
                resultHEX60gensym124_1979718586 = nimCopy(null, HEX26_1979718522(a_1979718591, b_1979718592), NTI1979716893);
                i_1962934600 = addInt(i_1962934600, 1);
                if (!(((x_1979718574).length == L_1962934601))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
        result_1979718577 = nimCopy(null, resultHEX60gensym124_1979718586, NTI1979716870);

      return result_1979718577;

    }
    
function HEX3Aanonymous_1979718754(chars_1979718790) {
      var result_1979718793 = [];

        result_1979718793 = nimCopy(null, join_1979718761(chars_1979718790, []), NTI33554439);

      return result_1979718793;

    }
    
function HEX3Aanonymous_1979718872(name_1979718875) {
      var result_1979718878 = false;

        result_1979718878 = contains_1979718921(commands_1996491897, name_1979718875);

      return result_1979718878;

    }
    
function HEX3Aanonymous_1979719004(name_1979719143) {
      var result_1979719146 = ({rows: [], baseline: 0, width: 0, flag: 0});

        result_1979719146 = nimCopy(result_1979719146, HEX5BHEX5D_1979719064(commands_1996491897, name_1979719143), NTI2013265924);

      return result_1979719146;

    }
    
function HEX3Aanonymous_1979719221(entry_1979719224) {
        
function HEX3Aanonymous_1979719240(x_1979719256) {
          var result_1979719259 = ({rows: [], baseline: 0, width: 0, flag: 0});

            result_1979719259 = nimCopy(result_1979719259, val_1979719229, NTI2013265924);

          return result_1979719259;

        }

      var result_1979719227 = null;

        var key_1979719228 = nimCopy(null, entry_1979719224["Field0"], NTI33554439);
        var val_1979719229 = nimCopy(null, entry_1979719224["Field1"], NTI2013265924);
        result_1979719227 = map_1979717189(s_2030043247(key_1979719228), HEX3Aanonymous_1979719240);

      return result_1979719227;

    }
    
function HEX3Aanonymous_1979719334(entry_1979719337) {
        
function HEX3Aanonymous_1979719541(rect_1979719562) {
            var Temporary1;
              var Temporary2;

          var result_1979719565 = ({rows: [], baseline: 0, width: 0, flag: 0});

            var rect_1979719566 = nimCopy(null, rect_1979719562, NTI2013265924);
              if (!(rect_1979719566.width == 1)) Temporary2 = false; else {                Temporary2 = (height_2013265961(rect_1979719566) == 1);              }            if (Temporary2) {
            rect_1979719566.rows[chckIndx(0, 0, (rect_1979719566.rows).length - 1)].push.apply(rect_1979719566.rows[chckIndx(0, 0, (rect_1979719566.rows).length - 1)], val_1979719342.Field0);;
            Temporary1 = rect_1979719566;
            }
            else {
            if (oneLine_1979711501) {
            var fmtRes_1979719571 = [mnewString(0)];
            formatValue_1275068578(fmtRes_1979719571, 0, val_1979719342.Field0, []);
            fmtRes_1979719571[0].push.apply(fmtRes_1979719571[0], makeNimstrLit(" ("));;
            formatValue_1275068578(fmtRes_1979719571, 0, row_2013265955(rect_1979719566), []);
            fmtRes_1979719571[0].push.apply(fmtRes_1979719571[0], makeNimstrLit(")"));;
            Temporary1 = toTextRectOneLine_2013265989(fmtRes_1979719571[0], 0, 0);
            }
            else {
            Temporary1 = stack_2013266801([toTextRectOneLine_2013265989(val_1979719342.Field1, 0, 0), nimCopy(null, rect_1979719566, NTI2013265924)], addInt(1, rect_1979719566.baseline), 0);
            }
            }
            result_1979719565 = nimCopy(result_1979719565, Temporary1, NTI2013265924);

          return result_1979719565;

        }

      var result_1979719340 = null;

        var key_1979719341 = nimCopy(null, entry_1979719337["Field0"], NTI33554439);
        var val_1979719342 = nimCopy(null, entry_1979719337["Field1"], NTI1996489512);
        result_1979719340 = map_1979719580(HEX3EHEX3E_1979719458(HEX3EHEX3E_1979716143(HEX3EHEX3E_1979719362(s_2030043247(key_1979719341), HEX21_1979717018(letter_2030044283)), ws_1979714300), atom_1979714311), HEX3Aanonymous_1979719541);

      return result_1979719340;

    }
    
function HEX3Aanonymous_1979719835(x_1979719855) {
      var result_1979719858 = [];

        result_1979719858 = nimCopy(null, [nimCopy(null, x_1979719855, NTI2013265924)], NTI1979713585);

      return result_1979719858;

    }
    
function HEX3Aanonymous_1979719898(x_1979719918) {
      var result_1979719921 = [];

        result_1979719921 = nimCopy(null, [nimCopy(null, x_1979719918, NTI2013265924)], NTI1979713585);

      return result_1979719921;

    }
    
function HEX3Aanonymous_1979720050(fraction_1979720097) {
        var Temporary1;
            var Temporary2;
            var Temporary3;
              var Temporary4;

      var result_1979720100 = ({rows: [], baseline: 0, width: 0, flag: 0});

        var numerator_1979720101 = nimCopy(null, fraction_1979720097[chckIndx(0, 0, (fraction_1979720097).length - 1)], NTI2013265924);
        var denominator_1979720102 = nimCopy(null, fraction_1979720097[chckIndx(1, 0, (fraction_1979720097).length - 1)], NTI2013265924);
        if (oneLine_1979711501) {
        var fmtRes_1979720107 = [mnewString(0)];
        formatValue_1275068578(fmtRes_1979720107, 0, rowAsAtom_2013265958(numerator_1979720101), []);
        fmtRes_1979720107[0].push.apply(fmtRes_1979720107[0], makeNimstrLit(" / "));;
        formatValue_1275068578(fmtRes_1979720107, 0, rowAsAtom_2013265958(denominator_1979720102), []);
        Temporary1 = toTextRectOneLine_2013265989(fmtRes_1979720107[0], 0, 0);
        }
        else {
          var width_1979720112 = max_1979720064(numerator_1979720101.width, denominator_1979720102.width);
          var fractionLine_1979720113 = nsuRepeatStr(makeNimstrLit("\xE2\x94\x80"), width_1979720112);
          var flag_1979720114 = 5;
            if (!(numerator_1979720101.flag == 5)) Temporary3 = false; else {              Temporary3 = (numerator_1979720101.width == width_1979720112);            }            if (Temporary3) Temporary2 = true; else {              if (!(denominator_1979720102.flag == 5)) Temporary4 = false; else {                Temporary4 = (denominator_1979720102.width == width_1979720112);              }              Temporary2 = Temporary4;            }          if (Temporary2) {
          fractionLine_1979720113 = nimCopy(null, (makeNimstrLit("\xE2\x95\xB6") || []).concat(fractionLine_1979720113 || [],makeNimstrLit("\xE2\x95\xB4") || []), NTI33554439);
          flag_1979720114 = 0;
          }
          
        Temporary1 = withFlag_2013266887(stack_2013266801([nimCopy(null, numerator_1979720101, NTI2013265924), toTextRectOneLine_2013265989(fractionLine_1979720113, 0, 0), nimCopy(null, denominator_1979720102, NTI2013265924)], height_2013265961(numerator_1979720101), 0), flag_1979720114);
        }
        
        result_1979720100 = nimCopy(result_1979720100, Temporary1, NTI2013265924);

      return result_1979720100;

    }
    
function HEX3Aanonymous_1979720281(x_1979720301) {
      var result_1979720304 = [];

        result_1979720304 = nimCopy(null, [nimCopy(null, x_1979720301, NTI2013265924)], NTI1979713585);

      return result_1979720304;

    }
    
function HEX3Aanonymous_1979720344(x_1979720364) {
      var result_1979720367 = [];

        result_1979720367 = nimCopy(null, [nimCopy(null, x_1979720364, NTI2013265924)], NTI1979713585);

      return result_1979720367;

    }

function bigDelimiter_1979711503(delimiter_1979711504, height_1979711505, baseline_1979711506) {
  var result_1979711507 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_1979711507.rows = nimCopy(null, newSeq_452985301(height_1979711505), NTI452985127);
    result_1979711507.width = 1;
    result_1979711507.baseline = baseline_1979711506;
    switch (toJSStr(delimiter_1979711504)) {
    case "{":
      if ((height_1979711505 == 2)) {
      result_1979711507.rows[chckIndx(0, 0, (result_1979711507.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xB0"), NTI33554439);
      result_1979711507.rows[chckIndx(1, 0, (result_1979711507.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xB1"), NTI33554439);
      }
      else {
        result_1979711507.rows[chckIndx(0, 0, (result_1979711507.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xA7"), NTI33554439);
        Label1: do {
          var i_1979712891 = 0;
          var colontmp__1962934664 = 0;
          colontmp__1962934664 = subInt(height_1979711505, 1);
          var i_1962934665 = 1;
          Label2: do {
              Label3: while (true) {
              if (!(i_1962934665 < colontmp__1962934664)) break Label3;
                i_1979712891 = i_1962934665;
                result_1979711507.rows[chckIndx(i_1979712891, 0, (result_1979711507.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xAA"), NTI33554439);
                i_1962934665 = addInt(i_1962934665, 1);
              }
          } while (false);
        } while (false);
        result_1979711507.rows[chckIndx(divInt(height_1979711505, 2), 0, (result_1979711507.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xA8"), NTI33554439);
        HEX5BHEX5DHEX3D_1979712892(result_1979711507.rows, 1, makeNimstrLit("\xE2\x8E\xA9"));
      }
      
      break;
    case "}":
      if ((height_1979711505 == 2)) {
      result_1979711507.rows[chckIndx(0, 0, (result_1979711507.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xB1"), NTI33554439);
      result_1979711507.rows[chckIndx(1, 0, (result_1979711507.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xB0"), NTI33554439);
      }
      else {
        result_1979711507.rows[chckIndx(0, 0, (result_1979711507.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xAB"), NTI33554439);
        Label4: do {
          var i_1979712904 = 0;
          var colontmp__1962934668 = 0;
          colontmp__1962934668 = subInt(height_1979711505, 1);
          var i_1962934669 = 1;
          Label5: do {
              Label6: while (true) {
              if (!(i_1962934669 < colontmp__1962934668)) break Label6;
                i_1979712904 = i_1962934669;
                result_1979711507.rows[chckIndx(i_1979712904, 0, (result_1979711507.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xAA"), NTI33554439);
                i_1962934669 = addInt(i_1962934669, 1);
              }
          } while (false);
        } while (false);
        result_1979711507.rows[chckIndx(divInt(height_1979711505, 2), 0, (result_1979711507.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xAC"), NTI33554439);
        HEX5BHEX5DHEX3D_1979712892(result_1979711507.rows, 1, makeNimstrLit("\xE2\x8E\xAD"));
      }
      
      break;
    case "⟨":
      result_1979711507.width = chckRange(divInt(addInt(height_1979711505, 1), 2), 0, 2147483647);
      var widthDec_1979712910 = subInt(result_1979711507.width, 1);
      if ((modInt(height_1979711505, 2) == 1)) {
      result_1979711507.rows[chckIndx(divInt(height_1979711505, 2), 0, (result_1979711507.rows).length - 1)] = nimCopy(null, (makeNimstrLit("\xE2\x9F\xA8") || []).concat(nsuRepeatStr(makeNimstrLit(" "), chckRange(divInt(height_1979711505, 2), 0, 2147483647)) || []), NTI33554439);
      }
      
      Label7: do {
        var i_1979712915 = 0;
        var colontmp__1962934672 = 0;
        colontmp__1962934672 = divInt(height_1979711505, 2);
        var i_1962934673 = 0;
        Label8: do {
            Label9: while (true) {
            if (!(i_1962934673 < colontmp__1962934672)) break Label9;
              i_1979712915 = i_1962934673;
              result_1979711507.rows[chckIndx(i_1979712915, 0, (result_1979711507.rows).length - 1)] = nimCopy(null, (nsuRepeatStr(makeNimstrLit(" "), chckRange(subInt(widthDec_1979712910, i_1979712915), 0, 2147483647)) || []).concat(makeNimstrLit("\xE2\x95\xB1") || [],nsuRepeatStr(makeNimstrLit(" "), chckRange(i_1979712915, 0, 2147483647)) || []), NTI33554439);
              result_1979711507.rows[chckIndx(subInt(subInt(height_1979711505, 1), i_1979712915), 0, (result_1979711507.rows).length - 1)] = nimCopy(null, (nsuRepeatStr(makeNimstrLit(" "), chckRange(subInt(widthDec_1979712910, i_1979712915), 0, 2147483647)) || []).concat(makeNimstrLit("\xE2\x95\xB2") || [],nsuRepeatStr(makeNimstrLit(" "), chckRange(i_1979712915, 0, 2147483647)) || []), NTI33554439);
              i_1962934673 = addInt(i_1962934673, 1);
            }
        } while (false);
      } while (false);
      break;
    case "⟩":
      result_1979711507.width = chckRange(divInt(addInt(height_1979711505, 1), 2), 0, 2147483647);
      var widthDec_1979712916 = subInt(result_1979711507.width, 1);
      if ((modInt(height_1979711505, 2) == 1)) {
      result_1979711507.rows[chckIndx(divInt(height_1979711505, 2), 0, (result_1979711507.rows).length - 1)] = nimCopy(null, (nsuRepeatStr(makeNimstrLit(" "), chckRange(divInt(height_1979711505, 2), 0, 2147483647)) || []).concat(makeNimstrLit("\xE2\x9F\xA9") || []), NTI33554439);
      }
      
      Label10: do {
        var i_1979712921 = 0;
        var colontmp__1962934676 = 0;
        colontmp__1962934676 = divInt(height_1979711505, 2);
        var i_1962934677 = 0;
        Label11: do {
            Label12: while (true) {
            if (!(i_1962934677 < colontmp__1962934676)) break Label12;
              i_1979712921 = i_1962934677;
              result_1979711507.rows[chckIndx(i_1979712921, 0, (result_1979711507.rows).length - 1)] = nimCopy(null, (nsuRepeatStr(makeNimstrLit(" "), chckRange(i_1979712921, 0, 2147483647)) || []).concat(makeNimstrLit("\xE2\x95\xB2") || [],nsuRepeatStr(makeNimstrLit(" "), chckRange(subInt(widthDec_1979712916, i_1979712921), 0, 2147483647)) || []), NTI33554439);
              result_1979711507.rows[chckIndx(subInt(subInt(height_1979711505, 1), i_1979712921), 0, (result_1979711507.rows).length - 1)] = nimCopy(null, (nsuRepeatStr(makeNimstrLit(" "), chckRange(i_1979712921, 0, 2147483647)) || []).concat(makeNimstrLit("\xE2\x95\xB1") || [],nsuRepeatStr(makeNimstrLit(" "), chckRange(subInt(widthDec_1979712916, i_1979712921), 0, 2147483647)) || []), NTI33554439);
              i_1962934677 = addInt(i_1962934677, 1);
            }
        } while (false);
      } while (false);
      break;
    default: 
      var colontmp__1962934683 = HEX5BHEX5D_1979712975(delimiterParts_1979712879, delimiter_1979711504);
      var top_1979713045 = nimCopy(null, colontmp__1962934683["Field0"], NTI33554439);
      var mid_1979713046 = nimCopy(null, colontmp__1962934683["Field1"], NTI33554439);
      var bottom_1979713047 = nimCopy(null, colontmp__1962934683["Field2"], NTI33554439);
      result_1979711507.rows[chckIndx(0, 0, (result_1979711507.rows).length - 1)] = nimCopy(null, top_1979713045, NTI33554439);
      Label13: do {
        var i_1979713052 = 0;
        var colontmp__1962934680 = 0;
        colontmp__1962934680 = subInt(height_1979711505, 1);
        var i_1962934681 = 1;
        Label14: do {
            Label15: while (true) {
            if (!(i_1962934681 < colontmp__1962934680)) break Label15;
              i_1979713052 = i_1962934681;
              result_1979711507.rows[chckIndx(i_1979713052, 0, (result_1979711507.rows).length - 1)] = nimCopy(null, mid_1979713046, NTI33554439);
              i_1962934681 = addInt(i_1962934681, 1);
            }
        } while (false);
      } while (false);
      HEX5BHEX5DHEX3D_1979712892(result_1979711507.rows, 1, bottom_1979713047);
      break;
    }

  return result_1979711507;

}
    
function HEX3Aanonymous_1979720422(nk_1979720445) {
        var Temporary1;

      var result_1979720448 = ({rows: [], baseline: 0, width: 0, flag: 0});

        var n_1979720449 = nimCopy(null, nk_1979720445[chckIndx(0, 0, (nk_1979720445).length - 1)], NTI2013265924);
        var k_1979720450 = nimCopy(null, nk_1979720445[chckIndx(1, 0, (nk_1979720445).length - 1)], NTI2013265924);
        if (oneLine_1979711501) {
        var fmtRes_1979720455 = [mnewString(0)];
        fmtRes_1979720455[0].push.apply(fmtRes_1979720455[0], makeNimstrLit("C("));;
        formatValue_1275068578(fmtRes_1979720455, 0, row_2013265955(n_1979720449), []);
        fmtRes_1979720455[0].push.apply(fmtRes_1979720455[0], makeNimstrLit(", "));;
        formatValue_1275068578(fmtRes_1979720455, 0, row_2013265955(k_1979720450), []);
        fmtRes_1979720455[0].push.apply(fmtRes_1979720455[0], makeNimstrLit(")"));;
        Temporary1 = toTextRectOneLine_2013265989(fmtRes_1979720455[0], 0, 0);
        }
        else {
          var inside_1979720456 = stack_2013266801([nimCopy(null, n_1979720449, NTI2013265924), nimCopy(null, k_1979720450, NTI2013265924)], height_2013265961(n_1979720449), 0);
        Temporary1 = join_2013266107([bigDelimiter_1979711503(makeNimstrLit("("), height_2013265961(inside_1979720456), chckRange(inside_1979720456.baseline, 0, 2147483647)), nimCopy(null, inside_1979720456, NTI2013265924), bigDelimiter_1979711503(makeNimstrLit(")"), height_2013265961(inside_1979720456), chckRange(inside_1979720456.baseline, 0, 2147483647))]);
        }
        
        result_1979720448 = nimCopy(result_1979720448, Temporary1, NTI2013265924);

      return result_1979720448;

    }
    
function HEX3Aanonymous_1979720493(arg_1979720539) {
        var Temporary1;

      var result_1979720542 = ({rows: [], baseline: 0, width: 0, flag: 0});

        if (oneLine_1979711501) {
        var fmtRes_1979720547 = [mnewString(0)];
        fmtRes_1979720547[0].push.apply(fmtRes_1979720547[0], makeNimstrLit("["));;
        formatValue_1275068578(fmtRes_1979720547, 0, row_2013265955(arg_1979720539), []);
        fmtRes_1979720547[0].push.apply(fmtRes_1979720547[0], makeNimstrLit("]"));;
        Temporary1 = toTextRectOneLine_2013265989(fmtRes_1979720547[0], 0, 0);
        }
        else {
          var horizontal_1979720548 = toTextRectOneLine_2013265989(nsuRepeatStr(makeNimstrLit("\xE2\x94\x80"), arg_1979720539.width), 0, 0);
          var sandwich_1979720549 = stack_2013266801([nimCopy(null, horizontal_1979720548, NTI2013265924), nimCopy(null, arg_1979720539, NTI2013265924), nimCopy(null, horizontal_1979720548, NTI2013265924)], addInt(arg_1979720539.baseline, 1), 1);
          var left_1979720550 = ({rows: [], baseline: 0, width: 0, flag: 0});
          left_1979720550.rows = nimCopy(null, newSeq_452985301(height_2013265961(sandwich_1979720549)), NTI452985127);
          left_1979720550.width = 1;
          left_1979720550.baseline = sandwich_1979720549.baseline;
          Label2: do {
            var i_1979720562 = 0;
            var colontmp__1962934317 = 0;
            colontmp__1962934317 = subInt(height_2013265961(sandwich_1979720549), 1);
            var i_1962934318 = 1;
            Label3: do {
                Label4: while (true) {
                if (!(i_1962934318 < colontmp__1962934317)) break Label4;
                  i_1979720562 = i_1962934318;
                  left_1979720550.rows[chckIndx(i_1979720562, 0, (left_1979720550.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x94\x82"), NTI33554439);
                  i_1962934318 = addInt(i_1962934318, 1);
                }
            } while (false);
          } while (false);
          var right_1979720563 = nimCopy(null, left_1979720550, NTI2013265924);
          left_1979720550.rows[chckIndx(0, 0, (left_1979720550.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x94\x8C"), NTI33554439);
          HEX5BHEX5DHEX3D_1979712892(left_1979720550.rows, 1, makeNimstrLit("\xE2\x94\x94"));
          right_1979720563.rows[chckIndx(0, 0, (right_1979720563.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x94\x90"), NTI33554439);
          HEX5BHEX5DHEX3D_1979712892(right_1979720563.rows, 1, makeNimstrLit("\xE2\x94\x98"));
        Temporary1 = join_2013266107([nimCopy(null, left_1979720550, NTI2013265924), nimCopy(null, sandwich_1979720549, NTI2013265924), nimCopy(null, right_1979720563, NTI2013265924)]);
        }
        
        result_1979720542 = nimCopy(result_1979720542, Temporary1, NTI2013265924);

      return result_1979720542;

    }
    
function HEX3Aanonymous_1979720610(arg_1979720778) {
        var Temporary1;
          var Temporary2;

      var result_1979720781 = ({rows: [], baseline: 0, width: 0, flag: 0});

        if (oneLine_1979711501) {
        var fmtRes_1979720786 = [mnewString(0)];
        fmtRes_1979720786[0].push.apply(fmtRes_1979720786[0], makeNimstrLit("\xE2\x88\x9A"));;
        formatValue_1275068578(fmtRes_1979720786, 0, rowAsAtom_2013265958(arg_1979720778), []);
        Temporary1 = toTextRectOneLine_2013265989(fmtRes_1979720786[0], 0, 0);
        }
        else {
          var overbar_1979720787 = toTextRectOneLine_2013265989(nsuRepeatStr(makeNimstrLit("_"), arg_1979720778.width), 0, 0);
          if ((height_2013265961(arg_1979720778) == 1)) {
          Temporary2 = toTextRectOneLine_2013265989(makeNimstrLit("\xE2\x88\x9A"), 0, 0);
          }
          else {
            Label3: do {
              var resultHEX60gensym175_1979720802 = [];
              Label4: do {
                var xHEX60gensym175_1979720803 = 0;
                var colontmp__1962934322 = 0;
                colontmp__1962934322 = divInt(height_2013265961(arg_1979720778), 2);
                var res_1962934323 = colontmp__1962934322;
                Label5: do {
                    Label6: while (true) {
                    if (!(1 <= res_1962934323)) break Label6;
                      xHEX60gensym175_1979720803 = res_1962934323;
                      resultHEX60gensym175_1979720802.push(xHEX60gensym175_1979720803);;
                      res_1962934323 = subInt(res_1962934323, 1);
                    }
                } while (false);
              } while (false);
              var HEX3Atmp_1979720827 = nimCopy(null, resultHEX60gensym175_1979720802, NTI1979718616);
              var iHEX60gensym176_1979720830 = 0;
              var resultHEX60gensym176_1979720837 = newSeq_2013266235(chckRange((HEX3Atmp_1979720827).length, 0, 2147483647));
              Label7: do {
                var it_1979720841 = 0;
                var i_1962934327 = 0;
                var L_1962934328 = (HEX3Atmp_1979720827).length;
                Label8: do {
                    Label9: while (true) {
                    if (!(i_1962934327 < L_1962934328)) break Label9;
                      it_1979720841 = HEX3Atmp_1979720827[chckIndx(i_1962934327, 0, (HEX3Atmp_1979720827).length - 1)];
                      resultHEX60gensym176_1979720837[chckIndx(iHEX60gensym176_1979720830, 0, (resultHEX60gensym176_1979720837).length - 1)] = nimCopy(resultHEX60gensym176_1979720837[chckIndx(iHEX60gensym176_1979720830, 0, (resultHEX60gensym176_1979720837).length - 1)], toTextRect_2013265970(makeNimstrLit("\xE2\x95\xB2"), addInt(subInt(arg_1979720778.baseline, height_2013265961(arg_1979720778)), it_1979720841), 0), NTI2013265924);
                      iHEX60gensym176_1979720830 = addInt(iHEX60gensym176_1979720830, 1);
                      i_1962934327 = addInt(i_1962934327, 1);
                      if (!(((HEX3Atmp_1979720827).length == L_1962934328))) {
                      failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                } while (false);
              } while (false);
            } while (false);
            Label10: do {
              var resultHEX60gensym179_1979720860 = [];
              Label11: do {
                var xHEX60gensym179_1979720861 = 0;
                var colontmp__1962934332 = 0;
                colontmp__1962934332 = height_2013265961(arg_1979720778);
                var res_1962934333 = 1;
                Label12: do {
                    Label13: while (true) {
                    if (!(res_1962934333 <= colontmp__1962934332)) break Label13;
                      xHEX60gensym179_1979720861 = res_1962934333;
                      resultHEX60gensym179_1979720860.push(xHEX60gensym179_1979720861);;
                      res_1962934333 = addInt(res_1962934333, 1);
                    }
                } while (false);
              } while (false);
              var HEX3Atmp_1979720885 = nimCopy(null, resultHEX60gensym179_1979720860, NTI1979718671);
              var iHEX60gensym180_1979720888 = 0;
              var resultHEX60gensym180_1979720895 = newSeq_2013266235(chckRange((HEX3Atmp_1979720885).length, 0, 2147483647));
              Label14: do {
                var it_1979720899 = 0;
                var i_1962934336 = 0;
                var L_1962934337 = (HEX3Atmp_1979720885).length;
                Label15: do {
                    Label16: while (true) {
                    if (!(i_1962934336 < L_1962934337)) break Label16;
                      it_1979720899 = HEX3Atmp_1979720885[chckIndx(i_1962934336, 0, (HEX3Atmp_1979720885).length - 1)];
                      resultHEX60gensym180_1979720895[chckIndx(iHEX60gensym180_1979720888, 0, (resultHEX60gensym180_1979720895).length - 1)] = nimCopy(resultHEX60gensym180_1979720895[chckIndx(iHEX60gensym180_1979720888, 0, (resultHEX60gensym180_1979720895).length - 1)], toTextRect_2013265970(makeNimstrLit("\xE2\x95\xB1"), addInt(subInt(arg_1979720778.baseline, height_2013265961(arg_1979720778)), it_1979720899), 0), NTI2013265924);
                      iHEX60gensym180_1979720888 = addInt(iHEX60gensym180_1979720888, 1);
                      i_1962934336 = addInt(i_1962934336, 1);
                      if (!(((HEX3Atmp_1979720885).length == L_1962934337))) {
                      failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                } while (false);
              } while (false);
            } while (false);
          Temporary2 = join_2013266107(HEX26_1979715482(resultHEX60gensym176_1979720837, resultHEX60gensym180_1979720895));
          }
          
          var symbol_1979720908 = nimCopy(null, Temporary2, NTI2013265924);
        Temporary1 = join_2013266107([nimCopy(null, symbol_1979720908, NTI2013265924), stack_2013266801([nimCopy(null, overbar_1979720787, NTI2013265924), nimCopy(null, arg_1979720778, NTI2013265924)], addInt(arg_1979720778.baseline, 1), 1)]);
        }
        
        result_1979720781 = nimCopy(result_1979720781, Temporary1, NTI2013265924);

      return result_1979720781;

    }
    
function HEX3Aanonymous_1979720987(x_1979721007) {
      var result_1979721010 = [];

        result_1979721010 = nimCopy(null, [nimCopy(null, x_1979721007, NTI2013265924)], NTI1979713585);

      return result_1979721010;

    }
    
function HEX3Aanonymous_1979721050(x_1979721070) {
      var result_1979721073 = [];

        result_1979721073 = nimCopy(null, [nimCopy(null, x_1979721070, NTI2013265924)], NTI1979713585);

      return result_1979721073;

    }
    
function HEX3Aanonymous_1979721181(x_1979721201) {
      var result_1979721204 = [];

        result_1979721204 = nimCopy(null, [nimCopy(null, x_1979721201, NTI2013265924)], NTI1979713585);

      return result_1979721204;

    }
    
function HEX3Aanonymous_1979721342(things_1979721361) {
      var result_1979721364 = ({rows: [], baseline: 0, width: 0, flag: 0});

        var inside_1979721365 = nimCopy(null, things_1979721361[chckIndx(1, 0, (things_1979721361).length - 1)], NTI2013265924);
        var left_1979721366 = nimCopy(null, things_1979721361[chckIndx(0, 0, (things_1979721361).length - 1)], NTI2013265924);
        var right_1979721367 = nimCopy(null, things_1979721361[chckIndx(2, 0, (things_1979721361).length - 1)], NTI2013265924);
        if ((1 < height_2013265961(inside_1979721365))) {
        left_1979721366 = nimCopy(left_1979721366, bigDelimiter_1979711503(row_2013265955(left_1979721366), height_2013265961(inside_1979721365), chckRange(inside_1979721365.baseline, 0, 2147483647)), NTI2013265924);
        right_1979721367 = nimCopy(right_1979721367, bigDelimiter_1979711503(row_2013265955(right_1979721367), height_2013265961(inside_1979721365), chckRange(inside_1979721365.baseline, 0, 2147483647)), NTI2013265924);
        }
        
        result_1979721364 = nimCopy(result_1979721364, join_2013266107([nimCopy(null, left_1979721366, NTI2013265924), nimCopy(null, inside_1979721365, NTI2013265924), nimCopy(null, right_1979721367, NTI2013265924)]), NTI2013265924);

      return result_1979721364;

    }
    
function HEX3Aanonymous_1979722088(sup_1979722104) {
      var result_1979722107 = ({rows: [], baseline: 0, width: 0, flag: 0});

        result_1979722107 = nimCopy(result_1979722107, withFlag_2013266887(sup_1979722104, 7), NTI2013265924);

      return result_1979722107;

    }
    
function HEX3Aanonymous_1979722316(x_1979722336) {
      var result_1979722339 = [];

        result_1979722339 = nimCopy(null, [nimCopy(null, x_1979722336, NTI1979715913)], NTI1979716461);

      return result_1979722339;

    }
    
function HEX3Aanonymous_1979722197(x_1979722217) {
      var result_1979722220 = [];

        result_1979722220 = nimCopy(null, [x_1979722217], NTI1979716020);

      return result_1979722220;

    }
    
function HEX3Aanonymous_1979722414(x_1979722449) {
      var result_1979722452 = [];

        var resultHEX60gensym211_1979722461 = newSeq_1979718487(0);
        Label1: do {
          var xHEX60gensym211_1979722465 = [];
          var i_1962934699 = 0;
          var L_1962934700 = (x_1979722449).length;
          Label2: do {
              Label3: while (true) {
              if (!(i_1962934699 < L_1962934700)) break Label3;
                xHEX60gensym211_1979722465 = x_1979722449[chckIndx(i_1962934699, 0, (x_1979722449).length - 1)];
                var a_1979722466 = nimCopy(null, resultHEX60gensym211_1979722461, NTI1979716870);
                var b_1979722467 = nimCopy(null, xHEX60gensym211_1979722465, NTI1979715875);
                resultHEX60gensym211_1979722461 = nimCopy(null, HEX26_1979718522(a_1979722466, b_1979722467), NTI1979716893);
                i_1962934699 = addInt(i_1962934699, 1);
                if (!(((x_1979722449).length == L_1962934700))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
        result_1979722452 = nimCopy(null, resultHEX60gensym211_1979722461, NTI1979716870);

      return result_1979722452;

    }
    
function HEX3Aanonymous_1979722495(primes_1979722514) {
      var result_1979722517 = ({rows: [], baseline: 0, width: 0, flag: 0});

        result_1979722517 = nimCopy(result_1979722517, withFlag_2013266887(toTextRectOneLine_2013265989(nsuRepeatStr(makeNimstrLit("\xE2\x80\xB2"), chckRange((primes_1979722514).length, 0, 2147483647)), 0, 0), 7), NTI2013265924);

      return result_1979722517;

    }
    
function HEX3Aanonymous_1979722613(sub_1979722629) {
      var result_1979722632 = ({rows: [], baseline: 0, width: 0, flag: 0});

        result_1979722632 = nimCopy(result_1979722632, withFlag_2013266887(sub_1979722629, 6), NTI2013265924);

      return result_1979722632;

    }
    
function HEX3Aanonymous_1979723090(x_1979723110) {
      var result_1979723113 = [];

        result_1979723113 = nimCopy(null, [nimCopy(null, x_1979723110, NTI2013265924)], NTI1979713585);

      return result_1979723113;

    }
    
function HEX3Aanonymous_1979722734(x_1979722754) {
      var result_1979722757 = [];

        result_1979722757 = nimCopy(null, [nimCopy(null, x_1979722754, NTI2013265924)], NTI1979713585);

      return result_1979722757;

    }
    
function HEX3Aanonymous_1979722797(x_1979722817) {
      var result_1979722820 = [];

        result_1979722820 = nimCopy(null, [nimCopy(null, x_1979722817, NTI2013265924)], NTI1979713585);

      return result_1979722820;

    }
    
function HEX3Aanonymous_1979722914(x_1979722934) {
      var result_1979722937 = [];

        result_1979722937 = nimCopy(null, [nimCopy(null, x_1979722934, NTI2013265924)], NTI1979713585);

      return result_1979722937;

    }
    
function HEX3Aanonymous_1979722977(x_1979722997) {
      var result_1979723000 = [];

        result_1979723000 = nimCopy(null, [nimCopy(null, x_1979722997, NTI2013265924)], NTI1979713585);

      return result_1979723000;

    }

function translateIfPossible_1979721755(str_1979721756, table_1979721759) {
  var result_1979721761 = ({val: [], has: false});

  BeforeRet: do {
    var resultHEX60gensym194_1979721771 = [];
    Label1: do {
      var xHEX60gensym194_1979721772 = 0;
      var i_1962934706 = 0;
      var result_1962934707 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1962934706 < (str_1979721756).length)) break Label3;
            if ((str_1979721756[chckIndx(i_1962934706, 0, (str_1979721756).length - 1)] <= 127)) {
            result_1962934707 = chckRange(str_1979721756[chckIndx(i_1962934706, 0, (str_1979721756).length - 1)], -2147483648, 2147483647);
            i_1962934706 = addInt(i_1962934706, 1);
            }
            else {
            if (((str_1979721756[chckIndx(i_1962934706, 0, (str_1979721756).length - 1)] >>> 5) == 6)) {
            if ((i_1962934706 <= subInt((str_1979721756).length, 2))) {
            result_1962934707 = chckRange((((str_1979721756[chckIndx(i_1962934706, 0, (str_1979721756).length - 1)] & 31) << 6) | (str_1979721756[chckIndx(addInt(i_1962934706, 1), 0, (str_1979721756).length - 1)] & 63)), -2147483648, 2147483647);
            i_1962934706 = addInt(i_1962934706, 2);
            }
            else {
              result_1962934707 = 65533;
              i_1962934706 = addInt(i_1962934706, 1);
            }
            
            }
            else {
            if (((str_1979721756[chckIndx(i_1962934706, 0, (str_1979721756).length - 1)] >>> 4) == 14)) {
            if ((i_1962934706 <= subInt((str_1979721756).length, 3))) {
            result_1962934707 = chckRange(((((str_1979721756[chckIndx(i_1962934706, 0, (str_1979721756).length - 1)] & 15) << 12) | ((str_1979721756[chckIndx(addInt(i_1962934706, 1), 0, (str_1979721756).length - 1)] & 63) << 6)) | (str_1979721756[chckIndx(addInt(i_1962934706, 2), 0, (str_1979721756).length - 1)] & 63)), -2147483648, 2147483647);
            i_1962934706 = addInt(i_1962934706, 3);
            }
            else {
              result_1962934707 = 65533;
              i_1962934706 = addInt(i_1962934706, 1);
            }
            
            }
            else {
            if (((str_1979721756[chckIndx(i_1962934706, 0, (str_1979721756).length - 1)] >>> 3) == 30)) {
            if ((i_1962934706 <= subInt((str_1979721756).length, 4))) {
            result_1962934707 = chckRange((((((str_1979721756[chckIndx(i_1962934706, 0, (str_1979721756).length - 1)] & 7) << 18) | ((str_1979721756[chckIndx(addInt(i_1962934706, 1), 0, (str_1979721756).length - 1)] & 63) << 12)) | ((str_1979721756[chckIndx(addInt(i_1962934706, 2), 0, (str_1979721756).length - 1)] & 63) << 6)) | (str_1979721756[chckIndx(addInt(i_1962934706, 3), 0, (str_1979721756).length - 1)] & 63)), -2147483648, 2147483647);
            i_1962934706 = addInt(i_1962934706, 4);
            }
            else {
              result_1962934707 = 65533;
              i_1962934706 = addInt(i_1962934706, 1);
            }
            
            }
            else {
            if (((str_1979721756[chckIndx(i_1962934706, 0, (str_1979721756).length - 1)] >>> 2) == 62)) {
            if ((i_1962934706 <= subInt((str_1979721756).length, 5))) {
            result_1962934707 = chckRange(((((((str_1979721756[chckIndx(i_1962934706, 0, (str_1979721756).length - 1)] & 3) << 24) | ((str_1979721756[chckIndx(addInt(i_1962934706, 1), 0, (str_1979721756).length - 1)] & 63) << 18)) | ((str_1979721756[chckIndx(addInt(i_1962934706, 2), 0, (str_1979721756).length - 1)] & 63) << 12)) | ((str_1979721756[chckIndx(addInt(i_1962934706, 3), 0, (str_1979721756).length - 1)] & 63) << 6)) | (str_1979721756[chckIndx(addInt(i_1962934706, 4), 0, (str_1979721756).length - 1)] & 63)), -2147483648, 2147483647);
            i_1962934706 = addInt(i_1962934706, 5);
            }
            else {
              result_1962934707 = 65533;
              i_1962934706 = addInt(i_1962934706, 1);
            }
            
            }
            else {
            if (((str_1979721756[chckIndx(i_1962934706, 0, (str_1979721756).length - 1)] >>> 1) == 126)) {
            if ((i_1962934706 <= subInt((str_1979721756).length, 6))) {
            result_1962934707 = chckRange((((((((str_1979721756[chckIndx(i_1962934706, 0, (str_1979721756).length - 1)] & 1) << 30) | ((str_1979721756[chckIndx(addInt(i_1962934706, 1), 0, (str_1979721756).length - 1)] & 63) << 24)) | ((str_1979721756[chckIndx(addInt(i_1962934706, 2), 0, (str_1979721756).length - 1)] & 63) << 18)) | ((str_1979721756[chckIndx(addInt(i_1962934706, 3), 0, (str_1979721756).length - 1)] & 63) << 12)) | ((str_1979721756[chckIndx(addInt(i_1962934706, 4), 0, (str_1979721756).length - 1)] & 63) << 6)) | (str_1979721756[chckIndx(addInt(i_1962934706, 5), 0, (str_1979721756).length - 1)] & 63)), -2147483648, 2147483647);
            i_1962934706 = addInt(i_1962934706, 6);
            }
            else {
              result_1962934707 = 65533;
              i_1962934706 = addInt(i_1962934706, 1);
            }
            
            }
            else {
              result_1962934707 = chckRange(str_1979721756[chckIndx(i_1962934706, 0, (str_1979721756).length - 1)], -2147483648, 2147483647);
              i_1962934706 = addInt(i_1962934706, 1);
            }
            }}}}}
            xHEX60gensym194_1979721772 = result_1962934707;
            resultHEX60gensym194_1979721771.push(xHEX60gensym194_1979721772);;
          }
      } while (false);
    } while (false);
    var runes_1979721777 = nimCopy(null, resultHEX60gensym194_1979721771, NTI1979719351);
      var resultHEX60gensym195_1979721779 = true;
      Label4: do {
        var it_1979721783 = 0;
        var i_1962934711 = 0;
        var L_1962934712 = (runes_1979721777).length;
        Label5: do {
            Label6: while (true) {
            if (!(i_1962934711 < L_1962934712)) break Label6;
              it_1979721783 = runes_1979721777[chckIndx(i_1962934711, 0, (runes_1979721777).length - 1)];
              if (!(contains_1979721826(table_1979721759, it_1979721783))) {
              resultHEX60gensym195_1979721779 = false;
              break Label4;
              }
              
              i_1962934711 = addInt(i_1962934711, 1);
              if (!(((runes_1979721777).length == L_1962934712))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    if (resultHEX60gensym195_1979721779) {
    Label7: do {
      var iHEX60gensym197_1979721990 = 0;
      var resultHEX60gensym197_1979721997 = newSeq_452985301(chckRange((runes_1979721777).length, 0, 2147483647));
      Label8: do {
        var it_1979722001 = 0;
        var i_1962934716 = 0;
        var L_1962934717 = (runes_1979721777).length;
        Label9: do {
            Label10: while (true) {
            if (!(i_1962934716 < L_1962934717)) break Label10;
              it_1979722001 = runes_1979721777[chckIndx(i_1962934716, 0, (runes_1979721777).length - 1)];
              resultHEX60gensym197_1979721997[chckIndx(iHEX60gensym197_1979721990, 0, (resultHEX60gensym197_1979721997).length - 1)] = nimCopy(null, HEX5BHEX5D_1979721911(table_1979721759, it_1979722001), NTI33554439);
              iHEX60gensym197_1979721990 = addInt(iHEX60gensym197_1979721990, 1);
              i_1962934716 = addInt(i_1962934716, 1);
              if (!(((runes_1979721777).length == L_1962934717))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    } while (false);
    result_1979721761 = nimCopy(result_1979721761, some_1912603075(nsuJoinSep(resultHEX60gensym197_1979721997, [])), NTI1207959629);
    break BeforeRet;
    }
    
  } while (false);

  return result_1979721761;

}
    
function HEX3Aanonymous_1979723176(operands_1979723252) {
        var Temporary1;
          var Temporary2;
          var Temporary3;

      var result_1979723255 = ({rows: [], baseline: 0, width: 0, flag: 0});

        var base_1979723256 = nimCopy(null, operands_1979723252[chckIndx(0, 0, (operands_1979723252).length - 1)], NTI2013265924);
        var flag_1979723257 = base_1979723256.flag;
        base_1979723256.flag = 0;
        switch ((operands_1979723252).length) {
        case 1:
          Temporary1 = base_1979723256;
          break;
        case 3:
          if ((operands_1979723252[chckIndx(1, 0, (operands_1979723252).length - 1)].flag == 7)) {
          Temporary2 = {Field0: nimCopy(null, operands_1979723252[chckIndx(1, 0, (operands_1979723252).length - 1)], NTI2013265924), Field1: nimCopy(null, operands_1979723252[chckIndx(2, 0, (operands_1979723252).length - 1)], NTI2013265924)};
          }
          else {
          Temporary2 = {Field0: nimCopy(null, operands_1979723252[chckIndx(2, 0, (operands_1979723252).length - 1)], NTI2013265924), Field1: nimCopy(null, operands_1979723252[chckIndx(1, 0, (operands_1979723252).length - 1)], NTI2013265924)};
          }
          
          var colontmp__1962934703 = nimCopy(null, Temporary2, NTI1979720563);
          var sup_1979723265 = nimCopy(null, colontmp__1962934703["Field0"], NTI2013265924);
          var sub_1979723266 = nimCopy(null, colontmp__1962934703["Field1"], NTI2013265924);
          if (oneLine_1979711501) {
          var str_1979723267 = row_2013265955(base_1979723256);
          if (!(isEmpty_2013265967(sub_1979723266))) {
          str_1979723267.push.apply(str_1979723267, get_1929380058(translateIfPossible_1979721755(row_2013265955(sub_1979723266), subscripts_1996490402), (makeNimstrLit("_") || []).concat(rowAsAtom_2013265958(sub_1979723266) || [])));;
          }
          
          if (!(isEmpty_2013265967(sup_1979723265))) {
          str_1979723267.push.apply(str_1979723267, get_1929380058(translateIfPossible_1979721755(row_2013265955(sup_1979723265), superscripts_1996490397), (makeNimstrLit("^") || []).concat(rowAsAtom_2013265958(sup_1979723265) || [])));;
          }
          
          Temporary3 = toTextRectOneLine_2013265989(str_1979723267, 0, 0);
          }
          else {
          if ((ConstSet142[flag_1979723257] != undefined)) {
          Temporary3 = stack_2013266801([nimCopy(null, sup_1979723265, NTI2013265924), nimCopy(null, base_1979723256, NTI2013265924), nimCopy(null, sub_1979723266, NTI2013265924)], addInt(base_1979723256.baseline, height_2013265961(sup_1979723265)), 0);
          }
          else {
          Temporary3 = HEX26_2013266757(base_1979723256, stack_2013266801([extendDown_2013266049(sup_1979723265, height_2013265961(base_1979723256)), nimCopy(null, sub_1979723266, NTI2013265924)], addInt(base_1979723256.baseline, height_2013265961(sup_1979723265)), 1));
          }
          }
          Temporary1 = Temporary3;
          break;
        default: 
          Temporary1 = ({rows: [], baseline: 0, width: 0, flag: 0});
          break;
        }
        result_1979723255 = nimCopy(result_1979723255, withFlag_2013266887(Temporary1, flag_1979723257), NTI2013265924);

      return result_1979723255;

    }
    var Temporary13;
    var Temporary14;
      var Temporary15;

  var result_1979711502 = [];

    var ws_1979714300 = map_1979714243(HEX26_1979714009(map_1979713764(HEX2A_1979713102(whitespace_2030044190, HEX2EHEX2E_939524947(0, 2147483647).a), HEX3Aanonymous_1979713944), HEX2A_1979713588(HEX7C_1979713486(map_1979713246(whitespace_2030044190, HEX3Aanonymous_1979713432), nop_1979713110()), subInt(HEX2EHEX2E_939524947(0, 2147483647).b, HEX2EHEX2E_939524947(0, 2147483647).a))), HEX3Aanonymous_1979714159);
    var atom_1979714311 = {body: null};
    var expr_1979715753 = map_1979715660(map_1979715566(HEX26_1979715293(map_1979715048(HEX2A_1979714356(atom_1979714311, HEX2EHEX2E_939524947(0, 2147483647).a), HEX3Aanonymous_1979715228), HEX2A_1979714872(HEX7C_1979714770(map_1979714518(atom_1979714311, HEX3Aanonymous_1979714716), nop_1979714364()), subInt(HEX2EHEX2E_939524947(0, 2147483647).b, HEX2EHEX2E_939524947(0, 2147483647).a))), HEX3Aanonymous_1979715443), HEX3Aanonymous_1979715631);
    var alpha_1979715776 = HEX7C_2030044209(c_2030043543(HEX2EHEX2E_1996488909(65, 90)), c_2030043543(HEX2EHEX2E_1996488909(97, 122)));
    var digit_1979715884 = map_1979715827(c_2030043543(HEX2EHEX2E_1996488909(48, 57)), HEX3Aanonymous_1979715790);
    var sHEX60gensym88_1979716885 = map_1979716850(fontsByName_1996488814, HEX3Aanonymous_1979715960);
    if (!((0 < (sHEX60gensym88_1979716885).length))) {
    failedAssertImpl_218103864(makeNimstrLit("sequtils.nim(895, 10) `s`gensym88.len > 0` Can\'t fold empty sequences"));
    }
    
    var resultHEX60gensym88_1979716895 = null;
    resultHEX60gensym88_1979716895 = sHEX60gensym88_1979716885[chckIndx(0, 0, (sHEX60gensym88_1979716885).length - 1)];
    Label1: do {
      var iHEX60gensym88_1979716903 = 0;
      var colontmp__1962934301 = 0;
      colontmp__1962934301 = (sHEX60gensym88_1979716885).length;
      var i_1962934302 = 1;
      Label2: do {
          Label3: while (true) {
          if (!(i_1962934302 < colontmp__1962934301)) break Label3;
            iHEX60gensym88_1979716903 = i_1962934302;
            var a_1979716904 = resultHEX60gensym88_1979716895;
            var b_1979716905 = sHEX60gensym88_1979716885[chckIndx(iHEX60gensym88_1979716903, 0, (sHEX60gensym88_1979716885).length - 1)];
            resultHEX60gensym88_1979716895 = HEX7C_1979716914(a_1979716904, b_1979716905);
            i_1962934302 = addInt(i_1962934302, 1);
          }
      } while (false);
    } while (false);
    var latinLetter_1979716992 = HEX7C_1979716914(map_1979715827(alpha_1979715776, HEX3Aanonymous_1979715893), resultHEX60gensym88_1979716895);
    var sHEX60gensym98_1979717327 = map_1979717301(delimiters_1996488813, HEX3Aanonymous_1979716993);
    var nHEX60gensym98_1979717331 = (sHEX60gensym98_1979717327).length;
    if (!((0 < nHEX60gensym98_1979717331))) {
    failedAssertImpl_218103864(makeNimstrLit("sequtils.nim(965, 10) `n`gensym98 > 0` Can\'t fold empty sequences"));
    }
    
    var resultHEX60gensym98_1979717337 = sHEX60gensym98_1979717327[chckIndx(subInt(nHEX60gensym98_1979717331, 1), 0, (sHEX60gensym98_1979717327).length - 1)];
    Label4: do {
      var iHEX60gensym98_1979717343 = 0;
      var colontmp__1962934305 = 0;
      colontmp__1962934305 = subInt(nHEX60gensym98_1979717331, 2);
      var res_1962934306 = colontmp__1962934305;
      Label5: do {
          Label6: while (true) {
          if (!(0 <= res_1962934306)) break Label6;
            iHEX60gensym98_1979717343 = res_1962934306;
            var a_1979717344 = sHEX60gensym98_1979717327[chckIndx(iHEX60gensym98_1979717343, 0, (sHEX60gensym98_1979717327).length - 1)];
            var b_1979717345 = resultHEX60gensym98_1979717337;
            resultHEX60gensym98_1979717337 = HEX7C_1979716914(a_1979717344, b_1979717345);
            res_1962934306 = subInt(res_1962934306, 1);
          }
      } while (false);
    } while (false);
    var delimiter_1979717358 = resultHEX60gensym98_1979717337;
    var command_1979719220 = map_1979717189(validate_1979718941(map_1979718807(HEX3EHEX3E_1979718671(c_2030043369(92), map_1979718606(HEX26_1979718328(map_1979718083(HEX2A_1979717399(letter_2030044283, HEX2EHEX2E_939524947(1, 2147483647).a), HEX3Aanonymous_1979718263), HEX2A_1979717907(HEX7C_1979717805(map_1979717569(letter_2030044283, HEX3Aanonymous_1979717743), nop_1979717407()), subInt(HEX2EHEX2E_939524947(1, 2147483647).b, HEX2EHEX2E_939524947(1, 2147483647).a))), HEX3Aanonymous_1979718478)), HEX3Aanonymous_1979718754), HEX3Aanonymous_1979718872, makeNimstrLit("a command")), HEX3Aanonymous_1979719004);
    var sHEX60gensym131_1979719286 = map_1979717301(nonCommands_1996491921, HEX3Aanonymous_1979719221);
    var nHEX60gensym131_1979719290 = (sHEX60gensym131_1979719286).length;
    if (!((0 < nHEX60gensym131_1979719290))) {
    failedAssertImpl_218103864(makeNimstrLit("sequtils.nim(965, 10) `n`gensym131 > 0` Can\'t fold empty sequences"));
    }
    
    var resultHEX60gensym131_1979719296 = sHEX60gensym131_1979719286[chckIndx(subInt(nHEX60gensym131_1979719290, 1), 0, (sHEX60gensym131_1979719286).length - 1)];
    Label7: do {
      var iHEX60gensym131_1979719302 = 0;
      var colontmp__1962934309 = 0;
      colontmp__1962934309 = subInt(nHEX60gensym131_1979719290, 2);
      var res_1962934310 = colontmp__1962934309;
      Label8: do {
          Label9: while (true) {
          if (!(0 <= res_1962934310)) break Label9;
            iHEX60gensym131_1979719302 = res_1962934310;
            var a_1979719303 = sHEX60gensym131_1979719286[chckIndx(iHEX60gensym131_1979719302, 0, (sHEX60gensym131_1979719286).length - 1)];
            var b_1979719304 = resultHEX60gensym131_1979719296;
            resultHEX60gensym131_1979719296 = HEX7C_1979716914(a_1979719303, b_1979719304);
            res_1962934310 = subInt(res_1962934310, 1);
          }
      } while (false);
    } while (false);
    var nonCommand_1979719317 = resultHEX60gensym131_1979719296;
    var sHEX60gensym140_1979719673 = map_1979719646(simpleDiacritics_1996489023, HEX3Aanonymous_1979719334);
    var nHEX60gensym140_1979719677 = (sHEX60gensym140_1979719673).length;
    if (!((0 < nHEX60gensym140_1979719677))) {
    failedAssertImpl_218103864(makeNimstrLit("sequtils.nim(965, 10) `n`gensym140 > 0` Can\'t fold empty sequences"));
    }
    
    var resultHEX60gensym140_1979719683 = sHEX60gensym140_1979719673[chckIndx(subInt(nHEX60gensym140_1979719677, 1), 0, (sHEX60gensym140_1979719673).length - 1)];
    Label10: do {
      var iHEX60gensym140_1979719689 = 0;
      var colontmp__1962934313 = 0;
      colontmp__1962934313 = subInt(nHEX60gensym140_1979719677, 2);
      var res_1962934314 = colontmp__1962934313;
      Label11: do {
          Label12: while (true) {
          if (!(0 <= res_1962934314)) break Label12;
            iHEX60gensym140_1979719689 = res_1962934314;
            var a_1979719690 = sHEX60gensym140_1979719673[chckIndx(iHEX60gensym140_1979719689, 0, (sHEX60gensym140_1979719673).length - 1)];
            var b_1979719691 = resultHEX60gensym140_1979719683;
            resultHEX60gensym140_1979719683 = HEX7C_1979716914(a_1979719690, b_1979719691);
            res_1962934314 = subInt(res_1962934314, 1);
          }
      } while (false);
    } while (false);
    var simpleDiacritic_1979719704 = resultHEX60gensym140_1979719683;
    var frac_1979720220 = HEX3EHEX3E_1979720145(HEX7C_1979719713(HEX7C_1979719713(HEX7C_1979719713(s_2030043247(makeNimstrLit("\\frac")), s_2030043247(makeNimstrLit("\\tfrac"))), s_2030043247(makeNimstrLit("\\dfrac"))), s_2030043247(makeNimstrLit("\\cfrac"))), map_1979715660(HEX26_1979719955(map_1979714518(atom_1979714311, HEX3Aanonymous_1979719835), map_1979714518(atom_1979714311, HEX3Aanonymous_1979719898)), HEX3Aanonymous_1979720050));
    var binom_1979720484 = HEX3EHEX3E_1979720145(HEX7C_1979719713(HEX7C_1979719713(HEX7C_1979719713(s_2030043247(makeNimstrLit("\\binom")), s_2030043247(makeNimstrLit("\\tbinom"))), s_2030043247(makeNimstrLit("\\dbinom"))), s_2030043247(makeNimstrLit("\\cbinom"))), map_1979715660(HEX26_1979719955(map_1979714518(atom_1979714311, HEX3Aanonymous_1979720281), map_1979714518(atom_1979714311, HEX3Aanonymous_1979720344)), HEX3Aanonymous_1979720422));
    var boxed_1979720601 = HEX3EHEX3E_1979720145(s_2030043247(makeNimstrLit("\\boxed")), map_1979719580(atom_1979714311, HEX3Aanonymous_1979720493));
    var sqrt_1979720936 = HEX3EHEX3E_1979720145(s_2030043247(makeNimstrLit("\\sqrt")), map_1979719580(atom_1979714311, HEX3Aanonymous_1979720610));
    var leftright_1979721383 = map_1979715660(HEX3EHEX3E_1979721259(HEX3EHEX3E_1979715977(s_2030043247(makeNimstrLit("\\left")), ws_1979714300), HEX26_1979719955(HEX26_1979719955(map_1979714518(delimiter_1979717358, HEX3Aanonymous_1979720987), map_1979714518(HEX3EHEX3E_1979719458(ws_1979714300, expr_1979715753), HEX3Aanonymous_1979721050)), map_1979714518(HEX3EHEX3E_1979719458(HEX3EHEX3E_1979715977(s_2030043247(makeNimstrLit("\\right")), ws_1979714300), delimiter_1979717358), HEX3Aanonymous_1979721181))), HEX3Aanonymous_1979721342);
    var bracedExpr_1979721550 = HEX3CHEX3C_1979721475(HEX3EHEX3E_1979721392(c_2030043369(123), expr_1979715753), c_2030043369(125));
    var atom1_1979721754 = HEX3CHEX3C_1979721679(HEX7C_1979716914(HEX7C_1979716914(HEX7C_1979716914(HEX7C_1979716914(HEX7C_1979716914(HEX7C_1979716914(HEX7C_1979716914(HEX7C_1979716914(HEX7C_1979716914(HEX7C_1979716914(bracedExpr_1979721550, leftright_1979721383), digit_1979715884), latinLetter_1979716992), command_1979719220), nonCommand_1979719317), simpleDiacritic_1979719704), frac_1979720220), binom_1979720484), sqrt_1979720936), boxed_1979720601), ws_1979714300);
    var superscript_1979722591 = HEX7C_1979716914(map_1979719580(HEX3EHEX3E_1979721392(c_2030043369(94), atom1_1979721754), HEX3Aanonymous_1979722088), map_1979722530(map_1979718606(HEX26_1979718328(map_1979718083(HEX2A_1979717399(c_2030043369(39), HEX2EHEX2E_939524947(1, 2147483647).a), HEX3Aanonymous_1979722316), HEX2A_1979717907(HEX7C_1979717805(map_1979717569(c_2030043369(39), HEX3Aanonymous_1979722197), nop_1979717407()), subInt(HEX2EHEX2E_939524947(1, 2147483647).b, HEX2EHEX2E_939524947(1, 2147483647).a))), HEX3Aanonymous_1979722414), HEX3Aanonymous_1979722495));
    var subscript_1979722648 = map_1979719580(HEX3EHEX3E_1979721392(c_2030043369(95), atom1_1979721754), HEX3Aanonymous_1979722613);
    atom_1979714311.body = map_1979715660(HEX26_1979719955(map_1979714518(atom1_1979721754, HEX3Aanonymous_1979723090), HEX7C_1979714770(HEX7C_1979714770(HEX26_1979719955(map_1979714518(superscript_1979722591, HEX3Aanonymous_1979722734), map_1979714518(HEX7C_1979716914(subscript_1979722648, nop_1979722658()), HEX3Aanonymous_1979722797)), HEX26_1979719955(map_1979714518(subscript_1979722648, HEX3Aanonymous_1979722914), map_1979714518(HEX7C_1979716914(superscript_1979722591, nop_1979722658()), HEX3Aanonymous_1979722977))), nop_1979714364())), HEX3Aanonymous_1979723176).body;
    var completeExpr_1979723406 = HEX3CHEX3C_1979723331(expr_1979715753, eof_2030044188);
    var parsed_1979723419 = parse_1979714564(completeExpr_1979723406, latex_1979711500);
    if ((parsed_1979723419.kind == 0)) {
    var Temporary14 = parsed_1979723419;
    if (ConstSet146[Temporary14.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary14.kind, NTI2030043157)); }
    Temporary13 = HEX24_2013265952(Temporary14.value);
    }
    else {
      var colontmp__1962934722 = lineInfo_1979723424(parsed_1979723419);
      var lnNum_1979723453 = colontmp__1962934722["Field0"];
      var colNum_1979723454 = colontmp__1962934722["Field1"];
      var showing_1979723455 = (makeNimstrLit("    ") || []).concat((Temporary15 = nsuSplitLines(latex_1979711500, false), Temporary15)[chckIndx(subInt(lnNum_1979723453, 1), 0, (Temporary15).length - 1)] || [],makeNimstrLit("\x0A") || [],nsuRepeatChar(32, chckRange(addInt(colNum_1979723454, 3), 0, 2147483647)) || [],makeNimstrLit("^") || []);
      var fmtRes_1979723456 = [mnewString(0)];
      fmtRes_1979723456[0].push.apply(fmtRes_1979723456[0], makeNimstrLit("Parse error at line "));;
      formatValue_1979723457(fmtRes_1979723456, 0, lnNum_1979723453, []);
      fmtRes_1979723456[0].push.apply(fmtRes_1979723456[0], makeNimstrLit(", column "));;
      formatValue_1979723457(fmtRes_1979723456, 0, colNum_1979723454, []);
      fmtRes_1979723456[0].push.apply(fmtRes_1979723456[0], makeNimstrLit("\x0A"));;
      formatValue_1275068578(fmtRes_1979723456, 0, showing_1979723455, []);
      raiseException({message: nimCopy(null, fmtRes_1979723456[0], NTI33554439), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    result_1979711502 = nimCopy(null, Temporary13, NTI33554439);

  return result_1979711502;

}

function matext(latex_1962934280, opts_1962934281) {
  var result_1962934282 = null;

    var opts_1962934283 = opts_1962934281;
    if ((opts_1962934283 == undefined)) {
    opts_1962934283 = {};
    }
    
    result_1962934282 = toJSStr(render_1979711499(cstrToNimstr(latex_1962934280), (opts_1962934283.oneLine)));

  return result_1962934282;

}
export default matext;

function nextPowerOfTwo_704643275(x_704643276) {
  var result_704643277 = 0;

    result_704643277 = (x_704643276 - 1);
    result_704643277 = (result_704643277 | (result_704643277 >> 16));
    result_704643277 = (result_704643277 | (result_704643277 >> 8));
    result_704643277 = (result_704643277 | (result_704643277 >> 4));
    result_704643277 = (result_704643277 | (result_704643277 >> 2));
    result_704643277 = (result_704643277 | (result_704643277 >> 1));
    result_704643277 += (1 + ((x_704643276 <= 0) ? 1 : 0));

  return result_704643277;

}

function slotsNeeded_1241514026(count_1241514027) {
  var result_1241514028 = 0;

    result_1241514028 = nextPowerOfTwo_704643275(addInt(divInt(mulInt(count_1241514027, 3), 2), 4));

  return result_1241514028;

}

function rawGet_1308623027(t_1308623030, key_1308623031, hc_1308623032, hc_1308623032_Idx) {
            var Temporary3;

  var result_1308623033 = 0;

  BeforeRet: do {
    hc_1308623032[hc_1308623032_Idx] = hash_1056965030(key_1308623031);
    if ((hc_1308623032[hc_1308623032_Idx] == 0)) {
    hc_1308623032[hc_1308623032_Idx] = 314159265;
    }
    
    if (((t_1308623030.data).length == 0)) {
    result_1308623033 = -1;
    break BeforeRet;
    }
    
    var h_1308623045 = (hc_1308623032[hc_1308623032_Idx] & (t_1308623030.data).length - 1);
    Label1: do {
        Label2: while (true) {
        if (!isFilled_1241514015(t_1308623030.data[chckIndx(h_1308623045, 0, (t_1308623030.data).length - 1)].Field0)) break Label2;
            if (!(t_1308623030.data[chckIndx(h_1308623045, 0, (t_1308623030.data).length - 1)].Field0 == hc_1308623032[hc_1308623032_Idx])) Temporary3 = false; else {              Temporary3 = eqStrings(t_1308623030.data[chckIndx(h_1308623045, 0, (t_1308623030.data).length - 1)].Field1, key_1308623031);            }          if (Temporary3) {
          result_1308623033 = h_1308623045;
          break BeforeRet;
          }
          
          h_1308623045 = nextTry_1241514018(h_1308623045, (t_1308623030.data).length - 1);
        }
    } while (false);
    result_1308623033 = subInt(-1, h_1308623045);
  } while (false);

  return result_1308623033;

}

function mustRehash_1862271286(t_1862271288) {
  var result_1862271289 = false;

    if (!((t_1862271288.counter < (t_1862271288.data).length))) {
    failedAssertImpl_218103864(makeNimstrLit("hashcommon.nim(29, 9) `\x0At.counter < t.dataLen` "));
    }
    
    result_1862271289 = ((mulInt((t_1862271288.data).length, 2) < mulInt(t_1862271288.counter, 3)) || (subInt((t_1862271288.data).length, t_1862271288.counter) < 4));

  return result_1862271289;

}

function rawInsert_1862271735(t_1862271739, data_1862271740, data_1862271740_Idx, key_1862271741, val_1862271742, hc_1862271743, h_1862271744) {
    data_1862271740[data_1862271740_Idx][chckIndx(h_1862271744, 0, (data_1862271740[data_1862271740_Idx]).length - 1)].Field1 = nimCopy(null, key_1862271741, NTI33554439);
    data_1862271740[data_1862271740_Idx][chckIndx(h_1862271744, 0, (data_1862271740[data_1862271740_Idx]).length - 1)].Field2 = val_1862271742;
    data_1862271740[data_1862271740_Idx][chckIndx(h_1862271744, 0, (data_1862271740[data_1862271740_Idx]).length - 1)].Field0 = hc_1862271743;

  
}

function enlarge_1862271441(t_1862271444) {
    var n_1862271447 = [];
    n_1862271447 = new Array(chckRange(mulInt((t_1862271444.data).length, 2), 0, 2147483647)); for (var i = 0 ; i < chckRange(mulInt((t_1862271444.data).length, 2), 0, 2147483647) ; ++i) { n_1862271447[i] = {Field0: 0, Field1: [], Field2: null}; }    var Temporary1 = t_1862271444.data; t_1862271444.data = n_1862271447; n_1862271447 = Temporary1;    Label2: do {
      var i_1862271511 = 0;
      var colontmp__486540081 = 0;
      colontmp__486540081 = (n_1862271447).length - 1;
      var res_486540082 = 0;
      Label3: do {
          Label4: while (true) {
          if (!(res_486540082 <= colontmp__486540081)) break Label4;
            i_1862271511 = res_486540082;
            var eh_1862271565 = n_1862271447[chckIndx(i_1862271511, 0, (n_1862271447).length - 1)].Field0;
            if (isFilled_1241514015(eh_1862271565)) {
            var j_1862271569 = (eh_1862271565 & (t_1862271444.data).length - 1);
            Label5: do {
                Label6: while (true) {
                if (!isFilled_1241514015(t_1862271444.data[chckIndx(j_1862271569, 0, (t_1862271444.data).length - 1)].Field0)) break Label6;
                  j_1862271569 = nextTry_1241514018(j_1862271569, (t_1862271444.data).length - 1);
                }
            } while (false);
            rawInsert_1862271735(t_1862271444, t_1862271444, "data", n_1862271447[chckIndx(i_1862271511, 0, (n_1862271447).length - 1)].Field1, n_1862271447[chckIndx(i_1862271511, 0, (n_1862271447).length - 1)].Field2, eh_1862271565, j_1862271569);
            }
            
            res_486540082 = addInt(res_486540082, 1);
          }
      } while (false);
    } while (false);

  
}

function rawGetKnownHC_1862271905(t_1862271908, key_1862271909, hc_1862271910) {
  var result_1862271911 = 0;

  BeforeRet: do {
    if (((t_1862271908.data).length == 0)) {
    result_1862271911 = -1;
    break BeforeRet;
    }
    
    var h_1862271962 = (hc_1862271910 & (t_1862271908.data).length - 1);
    Label1: do {
        Label2: while (true) {
        if (!isFilled_1241514015(t_1862271908.data[chckIndx(h_1862271962, 0, (t_1862271908.data).length - 1)].Field0)) break Label2;
          if (((t_1862271908.data[chckIndx(h_1862271962, 0, (t_1862271908.data).length - 1)].Field0 == hc_1862271910) && eqStrings(t_1862271908.data[chckIndx(h_1862271962, 0, (t_1862271908.data).length - 1)].Field1, key_1862271909))) {
          result_1862271911 = h_1862271962;
          break BeforeRet;
          }
          
          h_1862271962 = nextTry_1241514018(h_1862271962, (t_1862271908.data).length - 1);
        }
    } while (false);
    result_1862271911 = subInt(-1, h_1862271962);
  } while (false);

  return result_1862271911;

}

function HEX5BHEX5DHEX3D_1862271113(t_1862271116, key_1862271117, val_1862271118) {
    if (((t_1862271116.data).length == 0)) {
    var correctSizeHEX60gensym8_1862271167 = slotsNeeded_1241514026(32);
    t_1862271116.counter = 0;
    t_1862271116.data = new Array(chckRange(correctSizeHEX60gensym8_1862271167, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym8_1862271167, 0, 2147483647) ; ++i) { t_1862271116.data[i] = {Field0: 0, Field1: [], Field2: null}; }    }
    
    var hc_1862271172 = [0];
    var index_1862271179 = rawGet_1308623027(t_1862271116, key_1862271117, hc_1862271172, 0);
    if ((0 <= index_1862271179)) {
    t_1862271116.data[chckIndx(index_1862271179, 0, (t_1862271116.data).length - 1)].Field2 = val_1862271118;
    }
    else {
      if (((t_1862271116.data).length == 0)) {
      var correctSizeHEX60gensym11_1862271281 = slotsNeeded_1241514026(32);
      t_1862271116.counter = 0;
      t_1862271116.data = new Array(chckRange(correctSizeHEX60gensym11_1862271281, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym11_1862271281, 0, 2147483647) ; ++i) { t_1862271116.data[i] = {Field0: 0, Field1: [], Field2: null}; }      }
      
      if (mustRehash_1862271286(t_1862271116)) {
      enlarge_1862271441(t_1862271116);
      index_1862271179 = rawGetKnownHC_1862271905(t_1862271116, key_1862271117, hc_1862271172[0]);
      }
      
      index_1862271179 = subInt(-1, index_1862271179);
      rawInsert_1862271735(t_1862271116, t_1862271116, "data", key_1862271117, val_1862271118, hc_1862271172[0], index_1862271179);
      t_1862271116.counter = addInt(t_1862271116.counter, 1);
    }
    

  
}

function HEX3DHEX3D_1879048215(x_1879048217, y_1879048218) {
  var result_1879048219 = false;

  BeforeRet: do {
    if (!((x_1879048217.kind == y_1879048218.kind))) {
    result_1879048219 = false;
    break BeforeRet;
    }
    
    if (!((x_1879048217.base == y_1879048218.base))) {
    result_1879048219 = false;
    break BeforeRet;
    }
    
    result_1879048219 = true;
    break BeforeRet;
  } while (false);

  return result_1879048219;

}

function nsuStrip(s_654313691, leading_654313692, trailing_654313693, chars_654313694) {
          var Temporary5;

  var result_654313695 = [];

    var first_654313696 = 0;
    var last_654313697 = subInt((s_654313691).length, 1);
    if (leading_654313692) {
    Label1: do {
        Label2: while (true) {
        if (!((first_654313696 <= last_654313697) && (chars_654313694[s_654313691[chckIndx(first_654313696, 0, (s_654313691).length - 1)]] != undefined))) break Label2;
          first_654313696 = addInt(first_654313696, 1);
        }
    } while (false);
    }
    
    if (trailing_654313693) {
    Label3: do {
        Label4: while (true) {
          if (!(first_654313696 <= last_654313697)) Temporary5 = false; else {            Temporary5 = (chars_654313694[s_654313691[chckIndx(last_654313697, 0, (s_654313691).length - 1)]] != undefined);          }        if (!Temporary5) break Label4;
          last_654313697 = subInt(last_654313697, 1);
        }
    } while (false);
    }
    
    result_654313695 = nimCopy(null, substr_33557906(s_654313691, first_654313696, last_654313697), NTI33554439);

  return result_654313695;

}

function initStack_1409286214(name_1409286216, len_1409286217, max_1409286218) {
  var result_1409286223 = ({name: [], top: 0, max: 0, frames: []});

    result_1409286223.name = nimCopy(null, name_1409286216, NTI33554439);
    if (result_1409286223.frames.length < chckRange(len_1409286217, 0, 2147483647)) { for (var i = result_1409286223.frames.length ; i < chckRange(len_1409286217, 0, 2147483647) ; ++i) result_1409286223.frames.push(0); }
               else { result_1409286223.frames.length = chckRange(len_1409286217, 0, 2147483647); };
    result_1409286223.max = max_1409286218;

  return result_1409286223;

}

function initStack_1325402851(name_1325402853, len_1325402854, max_1325402855) {
  var result_1325402856 = ({name: [], top: 0, max: 0, frames: []});

    result_1325402856.name = nimCopy(null, name_1325402853, NTI33554439);
    if (result_1325402856.frames.length < chckRange(len_1325402854, 0, 2147483647)) { for (var i = result_1325402856.frames.length ; i < chckRange(len_1325402854, 0, 2147483647) ; ++i) result_1325402856.frames.push(({cft: 0, name: [], si: 0, ck: 0, sPushed: []})); }
               else { result_1325402856.frames.length = chckRange(len_1325402854, 0, 2147483647); };
    result_1325402856.max = max_1325402855;

  return result_1325402856;

}

function initStack_1325402861(name_1325402863, len_1325402864, max_1325402865) {
  var result_1325402866 = ({name: [], top: 0, max: 0, frames: []});

    result_1325402866.name = nimCopy(null, name_1325402863, NTI33554439);
    if (result_1325402866.frames.length < chckRange(len_1325402864, 0, 2147483647)) { for (var i = result_1325402866.frames.length ; i < chckRange(len_1325402864, 0, 2147483647) ; ++i) result_1325402866.frames.push(({ip: 0, si: 0, rp: 0, cp: 0, pp: 0})); }
               else { result_1325402866.frames.length = chckRange(len_1325402864, 0, 2147483647); };
    result_1325402866.max = max_1325402865;

  return result_1325402866;

}

function grow_1409286243(s_1409286245) {
    var Temporary1;

    if ((s_1409286245.max <= s_1409286245.top)) {
    raiseException({message: (s_1409286245.name || []).concat(makeNimstrLit(" stack overflow, depth>") || [],HEX24_335544323(s_1409286245.max) || []), parent: null, m_type: NTI1358954537, matchLen: 0, matchMax: 0, name: null, trace: [], up: null}, "NPegException");
    }
    
    if (s_1409286245.frames.length < (Temporary1 = chckRange(mulInt((s_1409286245.frames).length, 2), 0, 2147483647), Temporary1)) { for (var i = s_1409286245.frames.length ; i < Temporary1 ; ++i) s_1409286245.frames.push(0); }
               else { s_1409286245.frames.length = Temporary1; };

  
}

function initMatchState_1325402841() {
  var result_1325402843 = ({ip: 0, si: 0, simax: 0, refs: ({data: [], counter: 0}), retStack: ({name: [], top: 0, max: 0, frames: []}), capStack: ({name: [], top: 0, max: 0, frames: []}), backStack: ({name: [], top: 0, max: 0, frames: []}), precStack: ({name: [], top: 0, max: 0, frames: []})});

    result_1325402843 = nimCopy(result_1325402843, {retStack: initStack_1409286214(makeNimstrLit("return"), 8, 1024), capStack: initStack_1325402851(makeNimstrLit("capture"), 8, 2147483647), backStack: initStack_1325402861(makeNimstrLit("backtrace"), 8, 1024), precStack: initStack_1409286214(makeNimstrLit("precedence"), 8, 16), ip: 0, si: 0, simax: 0, refs: ({data: [], counter: 0})}, NTI1325400336);
    if (((result_1325402843.precStack.frames).length <= result_1325402843.precStack.top)) {
    grow_1409286243(result_1325402843.precStack);
    }
    
    result_1325402843.precStack.frames[chckIndx(result_1325402843.precStack.top, 0, (result_1325402843.precStack.frames).length - 1)] = 0;
    result_1325402843.precStack.top = addInt(result_1325402843.precStack.top, 1);

  return result_1325402843;

}

function match_1325404806(p_1325404810, s_1325404811, userData_1325404812, userData_1325404812_Idx) {
  var result_1325404813 = ({ok: false, matchLen: 0, matchMax: 0, cs: ({capList: []})});

    var ms_1325404816 = [initMatchState_1325402841()];
    result_1325404813 = nimCopy(result_1325404813, p_1325404810.fn(ms_1325404816[0], s_1325404811, userData_1325404812, userData_1325404812_Idx), NTI1342177351);

  return result_1325404813;

}

function grow_1325400494(s_1325400496) {
    var Temporary1;

    if ((s_1325400496.max <= s_1325400496.top)) {
    raiseException({message: (s_1325400496.name || []).concat(makeNimstrLit(" stack overflow, depth>") || [],HEX24_335544323(s_1325400496.max) || []), parent: null, m_type: NTI1358954537, matchLen: 0, matchMax: 0, name: null, trace: [], up: null}, "NPegException");
    }
    
    if (s_1325400496.frames.length < (Temporary1 = chckRange(mulInt((s_1325400496.frames).length, 2), 0, 2147483647), Temporary1)) { for (var i = s_1325400496.frames.length ; i < Temporary1 ; ++i) s_1325400496.frames.push(({ip: 0, si: 0, rp: 0, cp: 0, pp: 0})); }
               else { s_1325400496.frames.length = Temporary1; };

  
}

function grow_1325400730(s_1325400732) {
    var Temporary1;

    if ((s_1325400732.max <= s_1325400732.top)) {
    raiseException({message: (s_1325400732.name || []).concat(makeNimstrLit(" stack overflow, depth>") || [],HEX24_335544323(s_1325400732.max) || []), parent: null, m_type: NTI1358954537, matchLen: 0, matchMax: 0, name: null, trace: [], up: null}, "NPegException");
    }
    
    if (s_1325400732.frames.length < (Temporary1 = chckRange(mulInt((s_1325400732.frames).length, 2), 0, 2147483647), Temporary1)) { for (var i = s_1325400732.frames.length ; i < Temporary1 ; ++i) s_1325400732.frames.push(({cft: 0, name: [], si: 0, ck: 0, sPushed: []})); }
               else { s_1325400732.frames.length = Temporary1; };

  
}

function newSeq_1342177461(len_1342177463) {
  var result_1342177464 = [];

    result_1342177464 = new Array(len_1342177463); for (var i = 0 ; i < len_1342177463 ; ++i) { result_1342177464[i] = null; }
  return result_1342177464;

}

function collectCaptures_1342177455(caps_1342177457) {
  var result_1342177458 = ({capList: []});

    var resultHEX60gensym1_1342177487 = newSeq_1342177461(0);
    Label1: do {
      var it_1342177509 = null;
      var i_486540122 = 0;
      var L_486540123 = (caps_1342177457.capList).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_486540122 < L_486540123)) break Label3;
            it_1342177509 = caps_1342177457.capList[chckIndx(i_486540122, 0, (caps_1342177457.capList).length - 1)];
            if ((ConstSet152[it_1342177509.ck] != undefined)) {
            resultHEX60gensym1_1342177487.push(it_1342177509);;
            }
            
            i_486540122 = addInt(i_486540122, 1);
            if (!(((caps_1342177457.capList).length == L_486540123))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_1342177458 = nimCopy(result_1342177458, {capList: nimCopy(null, resultHEX60gensym1_1342177487, NTI1342177382)}, NTI1342177354);

  return result_1342177458;

}

function findTop_1325401028(capStack_1325401034, fm_1325401035) {
  var result_1325401036 = 0;

    if ((fm_1325401035 == 1)) {
    var i_1325401042 = subInt(capStack_1325401034.top, 1);
    var depth_1325401043 = 0;
    Label1: do {
        Label2: while (true) {
        if (!true) break Label2;
            if (!((i_1325401042 < capStack_1325401034.top))) {
            failedAssertImpl_218103864(makeNimstrLit("stack.nim(44, 10) `i < capStack.top` "));
            }
            
          if ((capStack_1325401034.frames[chckIndx(i_1325401042, 0, (capStack_1325401034.frames).length - 1)].cft == 1)) {
          depth_1325401043 = addInt(depth_1325401043, 1);
          }
          else {
          depth_1325401043 = subInt(depth_1325401043, 1);
          }
          
          if ((depth_1325401043 == 0)) {
          break Label1;
          }
          
          i_1325401042 = subInt(i_1325401042, 1);
        }
    } while (false);
    result_1325401036 = i_1325401042;
    }
    

  return result_1325401036;

}

function HEX5BHEX5D_1325401372(cs_1325401374, i_1325401375) {
  var result_1325401376 = null;

    if (((cs_1325401374.capList).length <= i_1325401375)) {
    var msg_1325401383 = (makeNimstrLit("Capture out of range, ") || []).concat(HEX24_335544323(i_1325401375) || [],makeNimstrLit(" is not in [0..") || [],HEX24_335544323((cs_1325401374.capList).length - 1) || [],makeNimstrLit("]") || []);
    raiseException({message: nimCopy(null, msg_1325401383, NTI33554439), parent: null, m_type: NTI1358954537, matchLen: 0, matchMax: 0, name: null, trace: [], up: null}, "NPegException");
    }
    
    result_1325401376 = cs_1325401374.capList[chckIndx(i_1325401375, 0, (cs_1325401374.capList).length - 1)];

  return result_1325401376;

}

function slice_1358957431(s_1358957432, iFrom_1358957433, iTo_1358957434) {
  var result_1358957435 = [];

    var len_1358957436 = subInt(iTo_1358957434, iFrom_1358957433);
    (result_1358957435.length = chckRange(len_1358957436, 0, 2147483647));
    Label1: do {
      var i_1358957441 = 0;
      var i_486540130 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486540130 < len_1358957436)) break Label3;
            i_1358957441 = i_486540130;
            result_1358957435[chckIndx(i_1358957441, 0, (result_1358957435).length - 1)] = s_1358957432[chckIndx(addInt(i_1358957441, iFrom_1358957433), 0, (s_1358957432).length - 1)];
            i_486540130 = addInt(i_486540130, 1);
          }
      } while (false);
    } while (false);

  return result_1358957435;

}

function fixCaptures_1325400981(s_1325400983, capStack_1325400988, fm_1325400989) {
              var Temporary4;

  var result_1325400990 = ({capList: []});

    if (!((0 < capStack_1325400988.top))) {
    failedAssertImpl_218103864(makeNimstrLit("capture.nim(41, 10) `\x0A0 < capStack.top` "));
    }
    
      if (!((0 < capStack_1325400988.top))) {
      failedAssertImpl_218103864(makeNimstrLit("stack.nim(40, 10) `capStack.top > 0` "));
      }
      
    if (!((capStack_1325400988.frames[chckIndx(subInt(capStack_1325400988.top, 1), 0, (capStack_1325400988.frames).length - 1)].cft == 1))) {
    failedAssertImpl_218103864(makeNimstrLit("capture.nim(42, 10) `capStack.peek.cft == cftClose` "));
    }
    
    var stack_1325401017 = [initStack_1409286214(makeNimstrLit("captures"), 8, 2147483647)];
    var iFrom_1325401151 = findTop_1325401028(capStack_1325400988, fm_1325400989);
    Label1: do {
      var i_1325401156 = 0;
      var i_486540126 = iFrom_1325401151;
      Label2: do {
          Label3: while (true) {
          if (!(i_486540126 < capStack_1325400988.top)) break Label3;
            i_1325401156 = i_486540126;
            if (!((i_1325401156 < capStack_1325400988.top))) {
            failedAssertImpl_218103864(makeNimstrLit("stack.nim(44, 10) `i < capStack.top` "));
            }
            
            var c_1325401248 = nimCopy(null, capStack_1325400988.frames[chckIndx(i_1325401156, 0, (capStack_1325400988.frames).length - 1)], NTI1325400345);
            if ((c_1325401248.cft == 0)) {
            if (((stack_1325401017[0].frames).length <= stack_1325401017[0].top)) {
            grow_1409286243(stack_1325401017[0]);
            }
            
            stack_1325401017[0].frames[chckIndx(stack_1325401017[0].top, 0, (stack_1325401017[0].frames).length - 1)] = (result_1325400990.capList).length;
            stack_1325401017[0].top = addInt(stack_1325401017[0].top, 1);
            result_1325400990.capList.push({ck: c_1325401248.ck, si: c_1325401248.si, name: nimCopy(null, c_1325401248.name, NTI33554439), len: 0, s: []});;
            }
            else {
              if (!((0 < stack_1325401017[0].top))) {
              failedAssertImpl_218103864(makeNimstrLit("stack.nim(35, 10) `stack.top > 0` "));
              }
              
              stack_1325401017[0].top = subInt(stack_1325401017[0].top, 1);
              var i2_1325401286 = stack_1325401017[0].frames[chckIndx(stack_1325401017[0].top, 0, (stack_1325401017[0].frames).length - 1)];
              if (!((HEX5BHEX5D_1325401372(result_1325400990, i2_1325401286).ck == c_1325401248.ck))) {
              failedAssertImpl_218103864(makeNimstrLit("capture.nim(57, 14) `result[i2].ck == c.ck` "));
              }
              
              if ((c_1325401248.ck == 1)) {
              Temporary4 = c_1325401248.sPushed;
              }
              else {
              Temporary4 = slice_1358957431(s_1325400983, HEX5BHEX5D_1325401372(result_1325400990, i2_1325401286).si, c_1325401248.si);
              }
              
              HEX5BHEX5D_1325401372(result_1325400990, i2_1325401286).s = nimCopy(null, Temporary4, NTI33554439);
              HEX5BHEX5D_1325401372(result_1325400990, i2_1325401286).len = subInt(subInt((result_1325400990.capList).length, i2_1325401286), 1);
            }
            
            i_486540126 = addInt(i_486540126, 1);
          }
      } while (false);
    } while (false);
    if (!((stack_1325401017[0].top == 0))) {
    failedAssertImpl_218103864(makeNimstrLit("capture.nim(63, 10) `stack.top == 0` "));
    }
    
    capStack_1325400988.top = iFrom_1325401151;

  return result_1325400990;

}

function fnHEX60gensym315_1325403069(ms_NP_1325403072, s_NP_1325403073, output_1325403074, output_1325403074_Idx) {
              
function fn_1325403642(capture_1325403644, ms_NP_1325403646, output_1325403647, output_1325403647_Idx) {
                var result_1325403648 = false;

                  result_1325403648 = true;
                  output_1325403647[output_1325403647_Idx].push(nsuStrip(HEX5BHEX5D_1325401372(capture_1325403644, 1).s, true, true, ConstSet153));;

                return result_1325403648;

              }
              
function fn_1325404282(capture_1325404284, ms_NP_1325404286, output_1325404287, output_1325404287_Idx) {
                var result_1325404288 = false;

                  result_1325404288 = true;
                  output_1325404287[output_1325404287_Idx].push(nsuStrip(HEX5BHEX5D_1325401372(capture_1325404284, 1).s, true, true, ConstSet157));;

                return result_1325404288;

              }
      var Temporary7;

  var result_1325403075 = ({ok: false, matchLen: 0, matchMax: 0, cs: ({capList: []})});

    var ip_NP_1325403076 = chckRange(ms_NP_1325403072.ip, 0, 71);
    var si_NP_1325403077 = ms_NP_1325403072.si;
    var simax_NP_1325403078 = ms_NP_1325403072.simax;
    Label1: do {
        Label2: while (true) {
        if (!true) break Label2;
          switch (ip_NP_1325403076) {
          case 0:
            if (((ms_NP_1325403072.backStack.frames).length <= ms_NP_1325403072.backStack.top)) {
            grow_1325400494(ms_NP_1325403072.backStack);
            }
            
            ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)] = nimCopy(ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)], {ip: 61, si: addInt(si_NP_1325403077, 0), rp: ms_NP_1325403072.retStack.top, cp: ms_NP_1325403072.capStack.top, pp: ms_NP_1325403072.precStack.top}, NTI1392508932);
            ms_NP_1325403072.backStack.top = addInt(ms_NP_1325403072.backStack.top, 1);
            ip_NP_1325403076 = 1;
            break;
          case 1:
            if (((ms_NP_1325403072.capStack.frames).length <= ms_NP_1325403072.capStack.top)) {
            grow_1325400730(ms_NP_1325403072.capStack);
            }
            
            ms_NP_1325403072.capStack.frames[chckIndx(ms_NP_1325403072.capStack.top, 0, (ms_NP_1325403072.capStack.frames).length - 1)] = nimCopy(ms_NP_1325403072.capStack.frames[chckIndx(ms_NP_1325403072.capStack.top, 0, (ms_NP_1325403072.capStack.frames).length - 1)], {cft: 0, si: addInt(si_NP_1325403077, 0), ck: 2, name: [], sPushed: []}, NTI1325400345);
            ms_NP_1325403072.capStack.top = addInt(ms_NP_1325403072.capStack.top, 1);
            ip_NP_1325403076 = 2;
            break;
          case 2:
            if (((si_NP_1325403077 < (s_NP_1325403073).length) && (s_NP_1325403073[chckIndx(si_NP_1325403077, 0, (s_NP_1325403073).length - 1)] == 10))) {
            si_NP_1325403077 = addInt(si_NP_1325403077, 1);
            ip_NP_1325403076 = 3;
            }
            else {
              ip_NP_1325403076 = 11;
            }
            
            break;
          case 3:
            if (((ms_NP_1325403072.backStack.frames).length <= ms_NP_1325403072.backStack.top)) {
            grow_1325400494(ms_NP_1325403072.backStack);
            }
            
            ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)] = nimCopy(ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)], {ip: 11, si: addInt(si_NP_1325403077, -1), rp: ms_NP_1325403072.retStack.top, cp: ms_NP_1325403072.capStack.top, pp: ms_NP_1325403072.precStack.top}, NTI1392508932);
            ms_NP_1325403072.backStack.top = addInt(ms_NP_1325403072.backStack.top, 1);
            ip_NP_1325403076 = 4;
            break;
          case 4:
            Label3: do {
                Label4: while (true) {
                if (!((si_NP_1325403077 < (s_NP_1325403073).length) && (ConstSet149[s_NP_1325403073[chckIndx(si_NP_1325403077, 0, (s_NP_1325403073).length - 1)]] != undefined))) break Label4;
                  si_NP_1325403077 = addInt(si_NP_1325403077, 1);
                }
            } while (false);
            ip_NP_1325403076 = 5;
            break;
          case 5:
            if ((si_NP_1325403077 < (s_NP_1325403073).length)) {
            si_NP_1325403077 = addInt(si_NP_1325403077, 1);
            ip_NP_1325403076 = 6;
            }
            else {
              ip_NP_1325403076 = 9;
            }
            
            break;
          case 6:
            ip_NP_1325403076 = 8;
            break;
          case 7:
            ip_NP_1325403076 = 8;
            break;
          case 8:
            simax_NP_1325403078 = nimMax(simax_NP_1325403078, si_NP_1325403077);
            if ((0 < ms_NP_1325403072.backStack.top)) {
            if (!((0 < ms_NP_1325403072.backStack.top))) {
            failedAssertImpl_218103864(makeNimstrLit("stack.nim(35, 10) `ms_NP.backStack.top > 0` "));
            }
            
            ms_NP_1325403072.backStack.top = subInt(ms_NP_1325403072.backStack.top, 1);
            var tHEX60gensym249_1325403244 = nimCopy(null, ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)], NTI1392508932);
            var __1325403245 = {Field0: tHEX60gensym249_1325403244.ip, Field1: tHEX60gensym249_1325403244.si, Field2: tHEX60gensym249_1325403244.rp, Field3: tHEX60gensym249_1325403244.cp, Field4: tHEX60gensym249_1325403244.pp};
            ip_NP_1325403076 = chckRange(__1325403245["Field0"], 0, 71);
            si_NP_1325403077 = __1325403245["Field1"];
            ms_NP_1325403072.retStack.top = __1325403245["Field2"];
            ms_NP_1325403072.capStack.top = __1325403245["Field3"];
            ms_NP_1325403072.precStack.top = __1325403245["Field4"];
            }
            else {
              break Label1;
            }
            
            break;
          case 9:
            if (!((0 < ms_NP_1325403072.backStack.top))) {
            failedAssertImpl_218103864(makeNimstrLit("stack.nim(35, 10) `ms_NP.backStack.top > 0` "));
            }
            
            ms_NP_1325403072.backStack.top = subInt(ms_NP_1325403072.backStack.top, 1);
            var _ = ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)];
            ip_NP_1325403076 = 10;
            break;
          case 10:
            simax_NP_1325403078 = nimMax(simax_NP_1325403078, si_NP_1325403077);
            if ((0 < ms_NP_1325403072.backStack.top)) {
            if (!((0 < ms_NP_1325403072.backStack.top))) {
            failedAssertImpl_218103864(makeNimstrLit("stack.nim(35, 10) `ms_NP.backStack.top > 0` "));
            }
            
            ms_NP_1325403072.backStack.top = subInt(ms_NP_1325403072.backStack.top, 1);
            var tHEX60gensym251_1325403349 = nimCopy(null, ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)], NTI1392508932);
            var __1325403350 = {Field0: tHEX60gensym251_1325403349.ip, Field1: tHEX60gensym251_1325403349.si, Field2: tHEX60gensym251_1325403349.rp, Field3: tHEX60gensym251_1325403349.cp, Field4: tHEX60gensym251_1325403349.pp};
            ip_NP_1325403076 = chckRange(__1325403350["Field0"], 0, 71);
            si_NP_1325403077 = __1325403350["Field1"];
            ms_NP_1325403072.retStack.top = __1325403350["Field2"];
            ms_NP_1325403072.capStack.top = __1325403350["Field3"];
            ms_NP_1325403072.precStack.top = __1325403350["Field4"];
            }
            else {
              break Label1;
            }
            
            break;
          case 11:
            if (((ms_NP_1325403072.capStack.frames).length <= ms_NP_1325403072.capStack.top)) {
            grow_1325400730(ms_NP_1325403072.capStack);
            }
            
            ms_NP_1325403072.capStack.frames[chckIndx(ms_NP_1325403072.capStack.top, 0, (ms_NP_1325403072.capStack.frames).length - 1)] = nimCopy(ms_NP_1325403072.capStack.frames[chckIndx(ms_NP_1325403072.capStack.top, 0, (ms_NP_1325403072.capStack.frames).length - 1)], {cft: 0, si: addInt(si_NP_1325403077, 0), ck: 0, name: [], sPushed: []}, NTI1325400345);
            ms_NP_1325403072.capStack.top = addInt(ms_NP_1325403072.capStack.top, 1);
            ip_NP_1325403076 = 12;
            break;
          case 12:
            if (((ms_NP_1325403072.backStack.frames).length <= ms_NP_1325403072.backStack.top)) {
            grow_1325400494(ms_NP_1325403072.backStack);
            }
            
            ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)] = nimCopy(ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)], {ip: 27, si: addInt(si_NP_1325403077, 0), rp: ms_NP_1325403072.retStack.top, cp: ms_NP_1325403072.capStack.top, pp: ms_NP_1325403072.precStack.top}, NTI1392508932);
            ms_NP_1325403072.backStack.top = addInt(ms_NP_1325403072.backStack.top, 1);
            ip_NP_1325403076 = 13;
            break;
          case 13:
            if (((si_NP_1325403077 < (s_NP_1325403073).length) && (ConstSet150[s_NP_1325403073[chckIndx(si_NP_1325403077, 0, (s_NP_1325403073).length - 1)]] != undefined))) {
            si_NP_1325403077 = addInt(si_NP_1325403077, 1);
            ip_NP_1325403076 = 14;
            }
            else {
              ip_NP_1325403076 = 16;
            }
            
            break;
          case 14:
            ip_NP_1325403076 = 26;
            break;
          case 15:
            ip_NP_1325403076 = 16;
            break;
          case 16:
            if (((si_NP_1325403077 < (s_NP_1325403073).length) && (s_NP_1325403073[chckIndx(si_NP_1325403077, 0, (s_NP_1325403073).length - 1)] == 91))) {
            si_NP_1325403077 = addInt(si_NP_1325403077, 1);
            ip_NP_1325403076 = 17;
            }
            else {
              ip_NP_1325403076 = 71;
            }
            
            break;
          case 17:
            if (((ms_NP_1325403072.backStack.frames).length <= ms_NP_1325403072.backStack.top)) {
            grow_1325400494(ms_NP_1325403072.backStack);
            }
            
            ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)] = nimCopy(ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)], {ip: 25, si: addInt(si_NP_1325403077, 0), rp: ms_NP_1325403072.retStack.top, cp: ms_NP_1325403072.capStack.top, pp: ms_NP_1325403072.precStack.top}, NTI1392508932);
            ms_NP_1325403072.backStack.top = addInt(ms_NP_1325403072.backStack.top, 1);
            ip_NP_1325403076 = 18;
            break;
          case 18:
            if (((si_NP_1325403077 < (s_NP_1325403073).length) && (ConstSet151[s_NP_1325403073[chckIndx(si_NP_1325403077, 0, (s_NP_1325403073).length - 1)]] != undefined))) {
            si_NP_1325403077 = addInt(si_NP_1325403077, 1);
            ip_NP_1325403076 = 19;
            }
            else {
              ip_NP_1325403076 = 21;
            }
            
            break;
          case 19:
            ip_NP_1325403076 = 24;
            break;
          case 20:
            ip_NP_1325403076 = 21;
            break;
          case 21:
            if (((si_NP_1325403077 < (s_NP_1325403073).length) && (s_NP_1325403073[chckIndx(si_NP_1325403077, 0, (s_NP_1325403073).length - 1)] == 91))) {
            si_NP_1325403077 = addInt(si_NP_1325403077, 1);
            ip_NP_1325403076 = 22;
            }
            else {
              ip_NP_1325403076 = 71;
            }
            
            break;
          case 22:
            if (((ms_NP_1325403072.retStack.frames).length <= ms_NP_1325403072.retStack.top)) {
            grow_1409286243(ms_NP_1325403072.retStack);
            }
            
            ms_NP_1325403072.retStack.frames[chckIndx(ms_NP_1325403072.retStack.top, 0, (ms_NP_1325403072.retStack.frames).length - 1)] = addInt(ip_NP_1325403076, 1);
            ms_NP_1325403072.retStack.top = addInt(ms_NP_1325403072.retStack.top, 1);
            ip_NP_1325403076 = 62;
            break;
          case 23:
            if (((si_NP_1325403077 < (s_NP_1325403073).length) && (s_NP_1325403073[chckIndx(si_NP_1325403077, 0, (s_NP_1325403073).length - 1)] == 93))) {
            si_NP_1325403077 = addInt(si_NP_1325403077, 1);
            ip_NP_1325403076 = 24;
            }
            else {
              ip_NP_1325403076 = 71;
            }
            
            break;
          case 24:
            if (!((0 < ms_NP_1325403072.backStack.top))) {
            failedAssertImpl_218103864(makeNimstrLit("stack.nim(35, 10) `ms_NP.backStack.top > 0` "));
            }
            
            ms_NP_1325403072.backStack.top = subInt(ms_NP_1325403072.backStack.top, 1);
            var _ = ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)];
            ip_NP_1325403076 = 17;
            break;
          case 25:
            if (((si_NP_1325403077 < (s_NP_1325403073).length) && (s_NP_1325403073[chckIndx(si_NP_1325403077, 0, (s_NP_1325403073).length - 1)] == 93))) {
            si_NP_1325403077 = addInt(si_NP_1325403077, 1);
            ip_NP_1325403076 = 26;
            }
            else {
              ip_NP_1325403076 = 71;
            }
            
            break;
          case 26:
            if (!((0 < ms_NP_1325403072.backStack.top))) {
            failedAssertImpl_218103864(makeNimstrLit("stack.nim(35, 10) `ms_NP.backStack.top > 0` "));
            }
            
            ms_NP_1325403072.backStack.top = subInt(ms_NP_1325403072.backStack.top, 1);
            var _ = ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)];
            ip_NP_1325403076 = 12;
            break;
          case 27:
            if (((ms_NP_1325403072.capStack.frames).length <= ms_NP_1325403072.capStack.top)) {
            grow_1325400730(ms_NP_1325403072.capStack);
            }
            
            ms_NP_1325403072.capStack.frames[chckIndx(ms_NP_1325403072.capStack.top, 0, (ms_NP_1325403072.capStack.frames).length - 1)] = nimCopy(ms_NP_1325403072.capStack.frames[chckIndx(ms_NP_1325403072.capStack.top, 0, (ms_NP_1325403072.capStack.frames).length - 1)], {cft: 1, si: si_NP_1325403077, ck: 0, name: [], sPushed: []}, NTI1325400345);
            ms_NP_1325403072.capStack.top = addInt(ms_NP_1325403072.capStack.top, 1);
            ip_NP_1325403076 = 28;
            break;
          case 28:
            if (((ms_NP_1325403072.capStack.frames).length <= ms_NP_1325403072.capStack.top)) {
            grow_1325400730(ms_NP_1325403072.capStack);
            }
            
            ms_NP_1325403072.capStack.frames[chckIndx(ms_NP_1325403072.capStack.top, 0, (ms_NP_1325403072.capStack.frames).length - 1)] = nimCopy(ms_NP_1325403072.capStack.frames[chckIndx(ms_NP_1325403072.capStack.top, 0, (ms_NP_1325403072.capStack.frames).length - 1)], {cft: 1, si: si_NP_1325403077, ck: 2, name: [], sPushed: []}, NTI1325400345);
            ms_NP_1325403072.capStack.top = addInt(ms_NP_1325403072.capStack.top, 1);
            var captureHEX60gensym269_1325403641 = collectCaptures_1342177455(fixCaptures_1325400981(s_NP_1325403073, ms_NP_1325403072.capStack, 1));
            if (fn_1325403642(captureHEX60gensym269_1325403641, ms_NP_1325403072, output_1325403074, output_1325403074_Idx)) {
            ip_NP_1325403076 = 29;
            }
            else {
              ip_NP_1325403076 = 71;
            }
            
            break;
          case 29:
            if (((si_NP_1325403077 < (s_NP_1325403073).length) && (s_NP_1325403073[chckIndx(si_NP_1325403077, 0, (s_NP_1325403073).length - 1)] == 59))) {
            si_NP_1325403077 = addInt(si_NP_1325403077, 1);
            ip_NP_1325403076 = 30;
            }
            else {
              ip_NP_1325403076 = 60;
            }
            
            break;
          case 30:
            if (((ms_NP_1325403072.backStack.frames).length <= ms_NP_1325403072.backStack.top)) {
            grow_1325400494(ms_NP_1325403072.backStack);
            }
            
            ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)] = nimCopy(ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)], {ip: 60, si: addInt(si_NP_1325403077, -1), rp: ms_NP_1325403072.retStack.top, cp: ms_NP_1325403072.capStack.top, pp: ms_NP_1325403072.precStack.top}, NTI1392508932);
            ms_NP_1325403072.backStack.top = addInt(ms_NP_1325403072.backStack.top, 1);
            ip_NP_1325403076 = 31;
            break;
          case 31:
            if (((ms_NP_1325403072.capStack.frames).length <= ms_NP_1325403072.capStack.top)) {
            grow_1325400730(ms_NP_1325403072.capStack);
            }
            
            ms_NP_1325403072.capStack.frames[chckIndx(ms_NP_1325403072.capStack.top, 0, (ms_NP_1325403072.capStack.frames).length - 1)] = nimCopy(ms_NP_1325403072.capStack.frames[chckIndx(ms_NP_1325403072.capStack.top, 0, (ms_NP_1325403072.capStack.frames).length - 1)], {cft: 0, si: addInt(si_NP_1325403077, 0), ck: 2, name: [], sPushed: []}, NTI1325400345);
            ms_NP_1325403072.capStack.top = addInt(ms_NP_1325403072.capStack.top, 1);
            ip_NP_1325403076 = 32;
            break;
          case 32:
            if (((si_NP_1325403077 < (s_NP_1325403073).length) && (s_NP_1325403073[chckIndx(si_NP_1325403077, 0, (s_NP_1325403073).length - 1)] == 10))) {
            si_NP_1325403077 = addInt(si_NP_1325403077, 1);
            ip_NP_1325403076 = 33;
            }
            else {
              ip_NP_1325403076 = 41;
            }
            
            break;
          case 33:
            if (((ms_NP_1325403072.backStack.frames).length <= ms_NP_1325403072.backStack.top)) {
            grow_1325400494(ms_NP_1325403072.backStack);
            }
            
            ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)] = nimCopy(ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)], {ip: 41, si: addInt(si_NP_1325403077, -1), rp: ms_NP_1325403072.retStack.top, cp: ms_NP_1325403072.capStack.top, pp: ms_NP_1325403072.precStack.top}, NTI1392508932);
            ms_NP_1325403072.backStack.top = addInt(ms_NP_1325403072.backStack.top, 1);
            ip_NP_1325403076 = 34;
            break;
          case 34:
            Label5: do {
                Label6: while (true) {
                if (!((si_NP_1325403077 < (s_NP_1325403073).length) && (ConstSet154[s_NP_1325403073[chckIndx(si_NP_1325403077, 0, (s_NP_1325403073).length - 1)]] != undefined))) break Label6;
                  si_NP_1325403077 = addInt(si_NP_1325403077, 1);
                }
            } while (false);
            ip_NP_1325403076 = 35;
            break;
          case 35:
            if ((si_NP_1325403077 < (s_NP_1325403073).length)) {
            si_NP_1325403077 = addInt(si_NP_1325403077, 1);
            ip_NP_1325403076 = 36;
            }
            else {
              ip_NP_1325403076 = 39;
            }
            
            break;
          case 36:
            ip_NP_1325403076 = 38;
            break;
          case 37:
            ip_NP_1325403076 = 38;
            break;
          case 38:
            simax_NP_1325403078 = nimMax(simax_NP_1325403078, si_NP_1325403077);
            if ((0 < ms_NP_1325403072.backStack.top)) {
            if (!((0 < ms_NP_1325403072.backStack.top))) {
            failedAssertImpl_218103864(makeNimstrLit("stack.nim(35, 10) `ms_NP.backStack.top > 0` "));
            }
            
            ms_NP_1325403072.backStack.top = subInt(ms_NP_1325403072.backStack.top, 1);
            var tHEX60gensym279_1325403884 = nimCopy(null, ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)], NTI1392508932);
            var __1325403885 = {Field0: tHEX60gensym279_1325403884.ip, Field1: tHEX60gensym279_1325403884.si, Field2: tHEX60gensym279_1325403884.rp, Field3: tHEX60gensym279_1325403884.cp, Field4: tHEX60gensym279_1325403884.pp};
            ip_NP_1325403076 = chckRange(__1325403885["Field0"], 0, 71);
            si_NP_1325403077 = __1325403885["Field1"];
            ms_NP_1325403072.retStack.top = __1325403885["Field2"];
            ms_NP_1325403072.capStack.top = __1325403885["Field3"];
            ms_NP_1325403072.precStack.top = __1325403885["Field4"];
            }
            else {
              break Label1;
            }
            
            break;
          case 39:
            if (!((0 < ms_NP_1325403072.backStack.top))) {
            failedAssertImpl_218103864(makeNimstrLit("stack.nim(35, 10) `ms_NP.backStack.top > 0` "));
            }
            
            ms_NP_1325403072.backStack.top = subInt(ms_NP_1325403072.backStack.top, 1);
            var _ = ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)];
            ip_NP_1325403076 = 40;
            break;
          case 40:
            simax_NP_1325403078 = nimMax(simax_NP_1325403078, si_NP_1325403077);
            if ((0 < ms_NP_1325403072.backStack.top)) {
            if (!((0 < ms_NP_1325403072.backStack.top))) {
            failedAssertImpl_218103864(makeNimstrLit("stack.nim(35, 10) `ms_NP.backStack.top > 0` "));
            }
            
            ms_NP_1325403072.backStack.top = subInt(ms_NP_1325403072.backStack.top, 1);
            var tHEX60gensym281_1325403989 = nimCopy(null, ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)], NTI1392508932);
            var __1325403990 = {Field0: tHEX60gensym281_1325403989.ip, Field1: tHEX60gensym281_1325403989.si, Field2: tHEX60gensym281_1325403989.rp, Field3: tHEX60gensym281_1325403989.cp, Field4: tHEX60gensym281_1325403989.pp};
            ip_NP_1325403076 = chckRange(__1325403990["Field0"], 0, 71);
            si_NP_1325403077 = __1325403990["Field1"];
            ms_NP_1325403072.retStack.top = __1325403990["Field2"];
            ms_NP_1325403072.capStack.top = __1325403990["Field3"];
            ms_NP_1325403072.precStack.top = __1325403990["Field4"];
            }
            else {
              break Label1;
            }
            
            break;
          case 41:
            if (((ms_NP_1325403072.capStack.frames).length <= ms_NP_1325403072.capStack.top)) {
            grow_1325400730(ms_NP_1325403072.capStack);
            }
            
            ms_NP_1325403072.capStack.frames[chckIndx(ms_NP_1325403072.capStack.top, 0, (ms_NP_1325403072.capStack.frames).length - 1)] = nimCopy(ms_NP_1325403072.capStack.frames[chckIndx(ms_NP_1325403072.capStack.top, 0, (ms_NP_1325403072.capStack.frames).length - 1)], {cft: 0, si: addInt(si_NP_1325403077, 0), ck: 0, name: [], sPushed: []}, NTI1325400345);
            ms_NP_1325403072.capStack.top = addInt(ms_NP_1325403072.capStack.top, 1);
            ip_NP_1325403076 = 42;
            break;
          case 42:
            if (((ms_NP_1325403072.backStack.frames).length <= ms_NP_1325403072.backStack.top)) {
            grow_1325400494(ms_NP_1325403072.backStack);
            }
            
            ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)] = nimCopy(ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)], {ip: 57, si: addInt(si_NP_1325403077, 0), rp: ms_NP_1325403072.retStack.top, cp: ms_NP_1325403072.capStack.top, pp: ms_NP_1325403072.precStack.top}, NTI1392508932);
            ms_NP_1325403072.backStack.top = addInt(ms_NP_1325403072.backStack.top, 1);
            ip_NP_1325403076 = 43;
            break;
          case 43:
            if (((si_NP_1325403077 < (s_NP_1325403073).length) && (ConstSet155[s_NP_1325403073[chckIndx(si_NP_1325403077, 0, (s_NP_1325403073).length - 1)]] != undefined))) {
            si_NP_1325403077 = addInt(si_NP_1325403077, 1);
            ip_NP_1325403076 = 44;
            }
            else {
              ip_NP_1325403076 = 46;
            }
            
            break;
          case 44:
            ip_NP_1325403076 = 56;
            break;
          case 45:
            ip_NP_1325403076 = 46;
            break;
          case 46:
            if (((si_NP_1325403077 < (s_NP_1325403073).length) && (s_NP_1325403073[chckIndx(si_NP_1325403077, 0, (s_NP_1325403073).length - 1)] == 91))) {
            si_NP_1325403077 = addInt(si_NP_1325403077, 1);
            ip_NP_1325403076 = 47;
            }
            else {
              ip_NP_1325403076 = 71;
            }
            
            break;
          case 47:
            if (((ms_NP_1325403072.backStack.frames).length <= ms_NP_1325403072.backStack.top)) {
            grow_1325400494(ms_NP_1325403072.backStack);
            }
            
            ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)] = nimCopy(ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)], {ip: 55, si: addInt(si_NP_1325403077, 0), rp: ms_NP_1325403072.retStack.top, cp: ms_NP_1325403072.capStack.top, pp: ms_NP_1325403072.precStack.top}, NTI1392508932);
            ms_NP_1325403072.backStack.top = addInt(ms_NP_1325403072.backStack.top, 1);
            ip_NP_1325403076 = 48;
            break;
          case 48:
            if (((si_NP_1325403077 < (s_NP_1325403073).length) && (ConstSet156[s_NP_1325403073[chckIndx(si_NP_1325403077, 0, (s_NP_1325403073).length - 1)]] != undefined))) {
            si_NP_1325403077 = addInt(si_NP_1325403077, 1);
            ip_NP_1325403076 = 49;
            }
            else {
              ip_NP_1325403076 = 51;
            }
            
            break;
          case 49:
            ip_NP_1325403076 = 54;
            break;
          case 50:
            ip_NP_1325403076 = 51;
            break;
          case 51:
            if (((si_NP_1325403077 < (s_NP_1325403073).length) && (s_NP_1325403073[chckIndx(si_NP_1325403077, 0, (s_NP_1325403073).length - 1)] == 91))) {
            si_NP_1325403077 = addInt(si_NP_1325403077, 1);
            ip_NP_1325403076 = 52;
            }
            else {
              ip_NP_1325403076 = 71;
            }
            
            break;
          case 52:
            if (((ms_NP_1325403072.retStack.frames).length <= ms_NP_1325403072.retStack.top)) {
            grow_1409286243(ms_NP_1325403072.retStack);
            }
            
            ms_NP_1325403072.retStack.frames[chckIndx(ms_NP_1325403072.retStack.top, 0, (ms_NP_1325403072.retStack.frames).length - 1)] = addInt(ip_NP_1325403076, 1);
            ms_NP_1325403072.retStack.top = addInt(ms_NP_1325403072.retStack.top, 1);
            ip_NP_1325403076 = 62;
            break;
          case 53:
            if (((si_NP_1325403077 < (s_NP_1325403073).length) && (s_NP_1325403073[chckIndx(si_NP_1325403077, 0, (s_NP_1325403073).length - 1)] == 93))) {
            si_NP_1325403077 = addInt(si_NP_1325403077, 1);
            ip_NP_1325403076 = 54;
            }
            else {
              ip_NP_1325403076 = 71;
            }
            
            break;
          case 54:
            if (!((0 < ms_NP_1325403072.backStack.top))) {
            failedAssertImpl_218103864(makeNimstrLit("stack.nim(35, 10) `ms_NP.backStack.top > 0` "));
            }
            
            ms_NP_1325403072.backStack.top = subInt(ms_NP_1325403072.backStack.top, 1);
            var _ = ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)];
            ip_NP_1325403076 = 47;
            break;
          case 55:
            if (((si_NP_1325403077 < (s_NP_1325403073).length) && (s_NP_1325403073[chckIndx(si_NP_1325403077, 0, (s_NP_1325403073).length - 1)] == 93))) {
            si_NP_1325403077 = addInt(si_NP_1325403077, 1);
            ip_NP_1325403076 = 56;
            }
            else {
              ip_NP_1325403076 = 71;
            }
            
            break;
          case 56:
            if (!((0 < ms_NP_1325403072.backStack.top))) {
            failedAssertImpl_218103864(makeNimstrLit("stack.nim(35, 10) `ms_NP.backStack.top > 0` "));
            }
            
            ms_NP_1325403072.backStack.top = subInt(ms_NP_1325403072.backStack.top, 1);
            var _ = ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)];
            ip_NP_1325403076 = 42;
            break;
          case 57:
            if (((ms_NP_1325403072.capStack.frames).length <= ms_NP_1325403072.capStack.top)) {
            grow_1325400730(ms_NP_1325403072.capStack);
            }
            
            ms_NP_1325403072.capStack.frames[chckIndx(ms_NP_1325403072.capStack.top, 0, (ms_NP_1325403072.capStack.frames).length - 1)] = nimCopy(ms_NP_1325403072.capStack.frames[chckIndx(ms_NP_1325403072.capStack.top, 0, (ms_NP_1325403072.capStack.frames).length - 1)], {cft: 1, si: si_NP_1325403077, ck: 0, name: [], sPushed: []}, NTI1325400345);
            ms_NP_1325403072.capStack.top = addInt(ms_NP_1325403072.capStack.top, 1);
            ip_NP_1325403076 = 58;
            break;
          case 58:
            if (((ms_NP_1325403072.capStack.frames).length <= ms_NP_1325403072.capStack.top)) {
            grow_1325400730(ms_NP_1325403072.capStack);
            }
            
            ms_NP_1325403072.capStack.frames[chckIndx(ms_NP_1325403072.capStack.top, 0, (ms_NP_1325403072.capStack.frames).length - 1)] = nimCopy(ms_NP_1325403072.capStack.frames[chckIndx(ms_NP_1325403072.capStack.top, 0, (ms_NP_1325403072.capStack.frames).length - 1)], {cft: 1, si: si_NP_1325403077, ck: 2, name: [], sPushed: []}, NTI1325400345);
            ms_NP_1325403072.capStack.top = addInt(ms_NP_1325403072.capStack.top, 1);
            var captureHEX60gensym299_1325404281 = collectCaptures_1342177455(fixCaptures_1325400981(s_NP_1325403073, ms_NP_1325403072.capStack, 1));
            if (fn_1325404282(captureHEX60gensym299_1325404281, ms_NP_1325403072, output_1325403074, output_1325403074_Idx)) {
            ip_NP_1325403076 = 59;
            }
            else {
              ip_NP_1325403076 = 71;
            }
            
            break;
          case 59:
            if (!((0 < ms_NP_1325403072.backStack.top))) {
            failedAssertImpl_218103864(makeNimstrLit("stack.nim(35, 10) `ms_NP.backStack.top > 0` "));
            }
            
            ms_NP_1325403072.backStack.top = subInt(ms_NP_1325403072.backStack.top, 1);
            var _ = ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)];
            ip_NP_1325403076 = 29;
            break;
          case 60:
            if (!((0 < ms_NP_1325403072.backStack.top))) {
            failedAssertImpl_218103864(makeNimstrLit("stack.nim(35, 10) `ms_NP.backStack.top > 0` "));
            }
            
            ms_NP_1325403072.backStack.top = subInt(ms_NP_1325403072.backStack.top, 1);
            var _ = ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)];
            ip_NP_1325403076 = 61;
            break;
          case 61:
            if ((0 < ms_NP_1325403072.retStack.top)) {
            if (!((0 < ms_NP_1325403072.retStack.top))) {
            failedAssertImpl_218103864(makeNimstrLit("stack.nim(35, 10) `ms_NP.retStack.top > 0` "));
            }
            
            ms_NP_1325403072.retStack.top = subInt(ms_NP_1325403072.retStack.top, 1);
            ip_NP_1325403076 = chckRange(ms_NP_1325403072.retStack.frames[chckIndx(ms_NP_1325403072.retStack.top, 0, (ms_NP_1325403072.retStack.frames).length - 1)], 0, 71);
            }
            else {
              result_1325403075.ok = true;
              simax_NP_1325403078 = nimMax(simax_NP_1325403078, si_NP_1325403077);
              break Label1;
            }
            
            break;
          case 62:
            if (((ms_NP_1325403072.backStack.frames).length <= ms_NP_1325403072.backStack.top)) {
            grow_1325400494(ms_NP_1325403072.backStack);
            }
            
            ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)] = nimCopy(ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)], {ip: 70, si: addInt(si_NP_1325403077, 0), rp: ms_NP_1325403072.retStack.top, cp: ms_NP_1325403072.capStack.top, pp: ms_NP_1325403072.precStack.top}, NTI1392508932);
            ms_NP_1325403072.backStack.top = addInt(ms_NP_1325403072.backStack.top, 1);
            ip_NP_1325403076 = 63;
            break;
          case 63:
            if (((si_NP_1325403077 < (s_NP_1325403073).length) && (ConstSet158[s_NP_1325403073[chckIndx(si_NP_1325403077, 0, (s_NP_1325403073).length - 1)]] != undefined))) {
            si_NP_1325403077 = addInt(si_NP_1325403077, 1);
            ip_NP_1325403076 = 64;
            }
            else {
              ip_NP_1325403076 = 66;
            }
            
            break;
          case 64:
            ip_NP_1325403076 = 69;
            break;
          case 65:
            ip_NP_1325403076 = 66;
            break;
          case 66:
            if (((si_NP_1325403077 < (s_NP_1325403073).length) && (s_NP_1325403073[chckIndx(si_NP_1325403077, 0, (s_NP_1325403073).length - 1)] == 91))) {
            si_NP_1325403077 = addInt(si_NP_1325403077, 1);
            ip_NP_1325403076 = 67;
            }
            else {
              ip_NP_1325403076 = 71;
            }
            
            break;
          case 67:
            if (((ms_NP_1325403072.retStack.frames).length <= ms_NP_1325403072.retStack.top)) {
            grow_1409286243(ms_NP_1325403072.retStack);
            }
            
            ms_NP_1325403072.retStack.frames[chckIndx(ms_NP_1325403072.retStack.top, 0, (ms_NP_1325403072.retStack.frames).length - 1)] = addInt(ip_NP_1325403076, 1);
            ms_NP_1325403072.retStack.top = addInt(ms_NP_1325403072.retStack.top, 1);
            ip_NP_1325403076 = 62;
            break;
          case 68:
            if (((si_NP_1325403077 < (s_NP_1325403073).length) && (s_NP_1325403073[chckIndx(si_NP_1325403077, 0, (s_NP_1325403073).length - 1)] == 93))) {
            si_NP_1325403077 = addInt(si_NP_1325403077, 1);
            ip_NP_1325403076 = 69;
            }
            else {
              ip_NP_1325403076 = 71;
            }
            
            break;
          case 69:
            if (!((0 < ms_NP_1325403072.backStack.top))) {
            failedAssertImpl_218103864(makeNimstrLit("stack.nim(35, 10) `ms_NP.backStack.top > 0` "));
            }
            
            ms_NP_1325403072.backStack.top = subInt(ms_NP_1325403072.backStack.top, 1);
            var _ = ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)];
            ip_NP_1325403076 = 62;
            break;
          case 70:
            if ((0 < ms_NP_1325403072.retStack.top)) {
            if (!((0 < ms_NP_1325403072.retStack.top))) {
            failedAssertImpl_218103864(makeNimstrLit("stack.nim(35, 10) `ms_NP.retStack.top > 0` "));
            }
            
            ms_NP_1325403072.retStack.top = subInt(ms_NP_1325403072.retStack.top, 1);
            ip_NP_1325403076 = chckRange(ms_NP_1325403072.retStack.frames[chckIndx(ms_NP_1325403072.retStack.top, 0, (ms_NP_1325403072.retStack.frames).length - 1)], 0, 71);
            }
            else {
              result_1325403075.ok = true;
              simax_NP_1325403078 = nimMax(simax_NP_1325403078, si_NP_1325403077);
              break Label1;
            }
            
            break;
          case 71:
            simax_NP_1325403078 = nimMax(simax_NP_1325403078, si_NP_1325403077);
            if ((0 < ms_NP_1325403072.backStack.top)) {
            if (!((0 < ms_NP_1325403072.backStack.top))) {
            failedAssertImpl_218103864(makeNimstrLit("stack.nim(35, 10) `ms_NP.backStack.top > 0` "));
            }
            
            ms_NP_1325403072.backStack.top = subInt(ms_NP_1325403072.backStack.top, 1);
            var tHEX60gensym312_1325404752 = nimCopy(null, ms_NP_1325403072.backStack.frames[chckIndx(ms_NP_1325403072.backStack.top, 0, (ms_NP_1325403072.backStack.frames).length - 1)], NTI1392508932);
            var __1325404753 = {Field0: tHEX60gensym312_1325404752.ip, Field1: tHEX60gensym312_1325404752.si, Field2: tHEX60gensym312_1325404752.rp, Field3: tHEX60gensym312_1325404752.cp, Field4: tHEX60gensym312_1325404752.pp};
            ip_NP_1325403076 = chckRange(__1325404753["Field0"], 0, 71);
            si_NP_1325403077 = __1325404753["Field1"];
            ms_NP_1325403072.retStack.top = __1325404753["Field2"];
            ms_NP_1325403072.capStack.top = __1325404753["Field3"];
            ms_NP_1325403072.precStack.top = __1325404753["Field4"];
            }
            else {
              break Label1;
            }
            
            break;
          }
        }
    } while (false);
    ms_NP_1325403072.ip = ip_NP_1325403076;
    ms_NP_1325403072.si = si_NP_1325403077;
    ms_NP_1325403072.simax = simax_NP_1325403078;
    result_1325403075.matchLen = ms_NP_1325403072.si;
    result_1325403075.matchMax = ms_NP_1325403072.simax;
      if (!result_1325403075.ok) Temporary7 = false; else {        Temporary7 = (0 < ms_NP_1325403072.capStack.top);      }    if (Temporary7) {
    result_1325403075.cs = nimCopy(result_1325403075.cs, fixCaptures_1325400981(s_NP_1325403073, ms_NP_1325403072.capStack, 0), NTI1342177354);
    }
    

  return result_1325403075;

}

function isNimException_33556519() {
    return lastJSError && lastJSError.m_type;

  
}

function parseXidocArguments_1325404796(body_1325404797) {
    var Temporary2;

  var result_1325404798 = [[]];

  BeforeRet: do {
++excHandler;
    Temporary2 = framePtr;
    try {
    if (eqStrings(body_1325404797, [])) {
    result_1325404798[0] = nimCopy(null, newSeq_452985301(0), NTI452985127);
    break BeforeRet;
    }
    
    if (!(match_1325404806(xidocArgumentParser_1325404777, body_1325404797, result_1325404798, 0).ok)) {
    raiseException({message: makeNimstrLit("Parse error"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    }
    
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
    framePtr = Temporary2;
    if (lastJSError && (isObj(lastJSError.m_type, NTI1358954537))) {
    raiseException({message: makeNimstrLit("Parse error"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    }
    else {
    	reraiseException();
    }
    lastJSError = prevJSError;
    } finally {
    framePtr = Temporary2;
    }
  } while (false);

  return result_1325404798[0];

}

function none_1879048251() {
  var result_1879048258 = ({val: 0, has: false});

  return result_1879048258;

}

function isNone_1879048299(self_1879048301) {
  var result_1879048302 = false;

    result_1879048302 = !(self_1879048301.has);

  return result_1879048302;

}

function some_1879048304(val_1879048306) {
  var result_1879048307 = ({val: 0, has: false});

    result_1879048307.has = true;
    result_1879048307.val = val_1879048306;

  return result_1879048307;

}

function HEX3DHEX3D_1879048374(x_1879048376, y_1879048377) {
  var result_1879048378 = false;

  BeforeRet: do {
    if (!((x_1879048376.a == y_1879048377.a))) {
    result_1879048378 = false;
    break BeforeRet;
    }
    
    if (!((x_1879048376.b == y_1879048377.b))) {
    result_1879048378 = false;
    break BeforeRet;
    }
    
    result_1879048378 = true;
    break BeforeRet;
  } while (false);

  return result_1879048378;

}

function isSome_1879048393(self_1879048395) {
  var result_1879048396 = false;

    result_1879048396 = self_1879048395.has;

  return result_1879048396;

}

function len_1879048466(x_1879048469) {
  var result_1879048470 = 0;

    result_1879048470 = nimMax(0, addInt(subInt(x_1879048469.b, x_1879048469.a), 1));

  return result_1879048470;

}

function HEX5BHEX5D_1879048561(s_1879048565, x_1879048566) {
  var result_1879048567 = [];

    var a_1879048569 = x_1879048566.a;
    var L_1879048571 = addInt(subInt(x_1879048566.b, a_1879048569), 1);
    result_1879048567 = new Array(chckRange(L_1879048571, 0, 2147483647)); for (var i = 0 ; i < chckRange(L_1879048571, 0, 2147483647) ; ++i) { result_1879048567[i] = ({kind: 0, base: 0}); }    Label1: do {
      var i_1879048580 = 0;
      var i_486540134 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486540134 < L_1879048571)) break Label3;
            i_1879048580 = i_486540134;
            result_1879048567[chckIndx(i_1879048580, 0, (result_1879048567).length - 1)] = nimCopy(result_1879048567[chckIndx(i_1879048580, 0, (result_1879048567).length - 1)], s_1879048565[chckIndx(addInt(i_1879048580, a_1879048569), 0, (s_1879048565).length - 1)], NTI1207959559);
            i_486540134 = addInt(i_486540134, 1);
          }
      } while (false);
    } while (false);

  return result_1879048567;

}

function get_1879048520(self_1879048522) {
  var result_1879048523 = null;
  var result_1879048523_Idx = 0;

  BeforeRet: do {
    if (isNone_1879048299(self_1879048522)) {
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI1006632980, name: null, trace: [], up: null}, "UnpackDefect");
    }
    
    result_1879048523 = self_1879048522; result_1879048523_Idx = "val";
    break BeforeRet;
  } while (false);

  return [result_1879048523, result_1879048523_Idx];

}

function match_1325402833(p_1325402837, s_1325402838, userData_1325402839, userData_1325402839_Idx) {
  var result_1325402840 = ({ok: false, matchLen: 0, matchMax: 0, cs: ({capList: []})});

    var ms_1325402918 = [initMatchState_1325402841()];
    result_1325402840 = nimCopy(result_1325402840, p_1325402837.fn(ms_1325402918[0], s_1325402838, userData_1325402839, userData_1325402839_Idx), NTI1342177351);

  return result_1325402840;

}

function contains_654313111(s_654313112, sub_654313113) {
  var result_654313114 = false;

  BeforeRet: do {
    result_654313114 = (0 <= nsuFindStr(s_654313112, sub_654313113, 0, 0));
    break BeforeRet;
  } while (false);

  return result_654313114;

}

function fnHEX60gensym55_1325400443(ms_NP_1325400446, s_NP_1325400447, output_1325400448, output_1325400448_Idx) {
              
function fn_1325401703(capture_1325401705, ms_NP_1325401707, output_1325401708, output_1325401708_Idx) {
                var result_1325401709 = false;

                  result_1325401709 = true;
                  output_1325401708[output_1325401708_Idx].push({kind: 2, name: nimCopy(null, HEX5BHEX5D_1325401372(capture_1325401705, 1).s, NTI33554439), arg: nimCopy(null, HEX5BHEX5D_1325401372(capture_1325401705, 2).s, NTI33554439), str: [], newline: false});;

                return result_1325401709;

              }
              
function fn_1325402114(capture_1325402116, ms_NP_1325402118, output_1325402119, output_1325402119_Idx) {
                var result_1325402120 = false;

                  result_1325402120 = true;
                  output_1325402119[output_1325402119_Idx].push({kind: 0, str: nimCopy(null, HEX5BHEX5D_1325401372(capture_1325402116, 1).s, NTI33554439), newline: false, name: [], arg: []});;

                return result_1325402120;

              }
              
function fn_1325402390(capture_1325402392, ms_NP_1325402394, output_1325402395, output_1325402395_Idx) {
                var result_1325402396 = false;

                  result_1325402396 = true;
                  output_1325402395[output_1325402395_Idx].push({kind: 1, newline: contains_654313111(HEX5BHEX5D_1325401372(capture_1325402392, 1).s, makeNimstrLit("\x0A")), str: [], name: [], arg: []});;

                return result_1325402396;

              }
      var Temporary9;

  var result_1325400449 = ({ok: false, matchLen: 0, matchMax: 0, cs: ({capList: []})});

    var ip_NP_1325400450 = chckRange(ms_NP_1325400446.ip, 0, 51);
    var si_NP_1325400451 = ms_NP_1325400446.si;
    var simax_NP_1325400452 = ms_NP_1325400446.simax;
    Label1: do {
        Label2: while (true) {
        if (!true) break Label2;
          switch (ip_NP_1325400450) {
          case 0:
            if (((ms_NP_1325400446.backStack.frames).length <= ms_NP_1325400446.backStack.top)) {
            grow_1325400494(ms_NP_1325400446.backStack);
            }
            
            ms_NP_1325400446.backStack.frames[chckIndx(ms_NP_1325400446.backStack.top, 0, (ms_NP_1325400446.backStack.frames).length - 1)] = nimCopy(ms_NP_1325400446.backStack.frames[chckIndx(ms_NP_1325400446.backStack.top, 0, (ms_NP_1325400446.backStack.frames).length - 1)], {ip: 3, si: addInt(si_NP_1325400451, 0), rp: ms_NP_1325400446.retStack.top, cp: ms_NP_1325400446.capStack.top, pp: ms_NP_1325400446.precStack.top}, NTI1392508932);
            ms_NP_1325400446.backStack.top = addInt(ms_NP_1325400446.backStack.top, 1);
            ip_NP_1325400450 = 1;
            break;
          case 1:
            if (((ms_NP_1325400446.retStack.frames).length <= ms_NP_1325400446.retStack.top)) {
            grow_1409286243(ms_NP_1325400446.retStack);
            }
            
            ms_NP_1325400446.retStack.frames[chckIndx(ms_NP_1325400446.retStack.top, 0, (ms_NP_1325400446.retStack.frames).length - 1)] = addInt(ip_NP_1325400450, 1);
            ms_NP_1325400446.retStack.top = addInt(ms_NP_1325400446.retStack.top, 1);
            ip_NP_1325400450 = 8;
            break;
          case 2:
            if (!((0 < ms_NP_1325400446.backStack.top))) {
            failedAssertImpl_218103864(makeNimstrLit("stack.nim(35, 10) `ms_NP.backStack.top > 0` "));
            }
            
            ms_NP_1325400446.backStack.top = subInt(ms_NP_1325400446.backStack.top, 1);
            var _ = ms_NP_1325400446.backStack.frames[chckIndx(ms_NP_1325400446.backStack.top, 0, (ms_NP_1325400446.backStack.frames).length - 1)];
            ip_NP_1325400450 = 0;
            break;
          case 3:
            if ((si_NP_1325400451 < (s_NP_1325400447).length)) {
            si_NP_1325400451 = addInt(si_NP_1325400451, 1);
            ip_NP_1325400450 = 4;
            }
            else {
              ip_NP_1325400450 = 7;
            }
            
            break;
          case 4:
            ip_NP_1325400450 = 6;
            break;
          case 5:
            ip_NP_1325400450 = 6;
            break;
          case 6:
            simax_NP_1325400452 = nimMax(simax_NP_1325400452, si_NP_1325400451);
            if ((0 < ms_NP_1325400446.backStack.top)) {
            if (!((0 < ms_NP_1325400446.backStack.top))) {
            failedAssertImpl_218103864(makeNimstrLit("stack.nim(35, 10) `ms_NP.backStack.top > 0` "));
            }
            
            ms_NP_1325400446.backStack.top = subInt(ms_NP_1325400446.backStack.top, 1);
            var tHEX60gensym7_1325400637 = nimCopy(null, ms_NP_1325400446.backStack.frames[chckIndx(ms_NP_1325400446.backStack.top, 0, (ms_NP_1325400446.backStack.frames).length - 1)], NTI1392508932);
            var __1325400638 = {Field0: tHEX60gensym7_1325400637.ip, Field1: tHEX60gensym7_1325400637.si, Field2: tHEX60gensym7_1325400637.rp, Field3: tHEX60gensym7_1325400637.cp, Field4: tHEX60gensym7_1325400637.pp};
            ip_NP_1325400450 = chckRange(__1325400638["Field0"], 0, 51);
            si_NP_1325400451 = __1325400638["Field1"];
            ms_NP_1325400446.retStack.top = __1325400638["Field2"];
            ms_NP_1325400446.capStack.top = __1325400638["Field3"];
            ms_NP_1325400446.precStack.top = __1325400638["Field4"];
            }
            else {
              break Label1;
            }
            
            break;
          case 7:
            if ((0 < ms_NP_1325400446.retStack.top)) {
            if (!((0 < ms_NP_1325400446.retStack.top))) {
            failedAssertImpl_218103864(makeNimstrLit("stack.nim(35, 10) `ms_NP.retStack.top > 0` "));
            }
            
            ms_NP_1325400446.retStack.top = subInt(ms_NP_1325400446.retStack.top, 1);
            ip_NP_1325400450 = chckRange(ms_NP_1325400446.retStack.frames[chckIndx(ms_NP_1325400446.retStack.top, 0, (ms_NP_1325400446.retStack.frames).length - 1)], 0, 51);
            }
            else {
              result_1325400449.ok = true;
              simax_NP_1325400452 = nimMax(simax_NP_1325400452, si_NP_1325400451);
              break Label1;
            }
            
            break;
          case 8:
            if (((si_NP_1325400451 < (s_NP_1325400447).length) && (s_NP_1325400447[chckIndx(si_NP_1325400451, 0, (s_NP_1325400447).length - 1)] == 91))) {
            si_NP_1325400451 = addInt(si_NP_1325400451, 1);
            ip_NP_1325400450 = 9;
            }
            else {
              ip_NP_1325400450 = 27;
            }
            
            break;
          case 9:
            if (((ms_NP_1325400446.backStack.frames).length <= ms_NP_1325400446.backStack.top)) {
            grow_1325400494(ms_NP_1325400446.backStack);
            }
            
            ms_NP_1325400446.backStack.frames[chckIndx(ms_NP_1325400446.backStack.top, 0, (ms_NP_1325400446.backStack.frames).length - 1)] = nimCopy(ms_NP_1325400446.backStack.frames[chckIndx(ms_NP_1325400446.backStack.top, 0, (ms_NP_1325400446.backStack.frames).length - 1)], {ip: 27, si: addInt(si_NP_1325400451, -1), rp: ms_NP_1325400446.retStack.top, cp: ms_NP_1325400446.capStack.top, pp: ms_NP_1325400446.precStack.top}, NTI1392508932);
            ms_NP_1325400446.backStack.top = addInt(ms_NP_1325400446.backStack.top, 1);
            ip_NP_1325400450 = 10;
            break;
          case 10:
            if (((ms_NP_1325400446.capStack.frames).length <= ms_NP_1325400446.capStack.top)) {
            grow_1325400730(ms_NP_1325400446.capStack);
            }
            
            ms_NP_1325400446.capStack.frames[chckIndx(ms_NP_1325400446.capStack.top, 0, (ms_NP_1325400446.capStack.frames).length - 1)] = nimCopy(ms_NP_1325400446.capStack.frames[chckIndx(ms_NP_1325400446.capStack.top, 0, (ms_NP_1325400446.capStack.frames).length - 1)], {cft: 0, si: addInt(si_NP_1325400451, -1), ck: 2, name: [], sPushed: []}, NTI1325400345);
            ms_NP_1325400446.capStack.top = addInt(ms_NP_1325400446.capStack.top, 1);
            ip_NP_1325400450 = 11;
            break;
          case 11:
            if (((ms_NP_1325400446.capStack.frames).length <= ms_NP_1325400446.capStack.top)) {
            grow_1325400730(ms_NP_1325400446.capStack);
            }
            
            ms_NP_1325400446.capStack.frames[chckIndx(ms_NP_1325400446.capStack.top, 0, (ms_NP_1325400446.capStack.frames).length - 1)] = nimCopy(ms_NP_1325400446.capStack.frames[chckIndx(ms_NP_1325400446.capStack.top, 0, (ms_NP_1325400446.capStack.frames).length - 1)], {cft: 0, si: addInt(si_NP_1325400451, 0), ck: 0, name: [], sPushed: []}, NTI1325400345);
            ms_NP_1325400446.capStack.top = addInt(ms_NP_1325400446.capStack.top, 1);
            ip_NP_1325400450 = 12;
            break;
          case 12:
            Label3: do {
                Label4: while (true) {
                if (!((si_NP_1325400451 < (s_NP_1325400447).length) && (ConstSet159[s_NP_1325400447[chckIndx(si_NP_1325400451, 0, (s_NP_1325400447).length - 1)]] != undefined))) break Label4;
                  si_NP_1325400451 = addInt(si_NP_1325400451, 1);
                }
            } while (false);
            ip_NP_1325400450 = 13;
            break;
          case 13:
            if (((ms_NP_1325400446.capStack.frames).length <= ms_NP_1325400446.capStack.top)) {
            grow_1325400730(ms_NP_1325400446.capStack);
            }
            
            ms_NP_1325400446.capStack.frames[chckIndx(ms_NP_1325400446.capStack.top, 0, (ms_NP_1325400446.capStack.frames).length - 1)] = nimCopy(ms_NP_1325400446.capStack.frames[chckIndx(ms_NP_1325400446.capStack.top, 0, (ms_NP_1325400446.capStack.frames).length - 1)], {cft: 1, si: si_NP_1325400451, ck: 0, name: [], sPushed: []}, NTI1325400345);
            ms_NP_1325400446.capStack.top = addInt(ms_NP_1325400446.capStack.top, 1);
            ip_NP_1325400450 = 14;
            break;
          case 14:
            if (((ms_NP_1325400446.capStack.frames).length <= ms_NP_1325400446.capStack.top)) {
            grow_1325400730(ms_NP_1325400446.capStack);
            }
            
            ms_NP_1325400446.capStack.frames[chckIndx(ms_NP_1325400446.capStack.top, 0, (ms_NP_1325400446.capStack.frames).length - 1)] = nimCopy(ms_NP_1325400446.capStack.frames[chckIndx(ms_NP_1325400446.capStack.top, 0, (ms_NP_1325400446.capStack.frames).length - 1)], {cft: 0, si: addInt(si_NP_1325400451, 0), ck: 0, name: [], sPushed: []}, NTI1325400345);
            ms_NP_1325400446.capStack.top = addInt(ms_NP_1325400446.capStack.top, 1);
            ip_NP_1325400450 = 15;
            break;
          case 15:
            if (((ms_NP_1325400446.backStack.frames).length <= ms_NP_1325400446.backStack.top)) {
            grow_1325400494(ms_NP_1325400446.backStack);
            }
            
            ms_NP_1325400446.backStack.frames[chckIndx(ms_NP_1325400446.backStack.top, 0, (ms_NP_1325400446.backStack.frames).length - 1)] = nimCopy(ms_NP_1325400446.backStack.frames[chckIndx(ms_NP_1325400446.backStack.top, 0, (ms_NP_1325400446.backStack.frames).length - 1)], {ip: 23, si: addInt(si_NP_1325400451, 0), rp: ms_NP_1325400446.retStack.top, cp: ms_NP_1325400446.capStack.top, pp: ms_NP_1325400446.precStack.top}, NTI1392508932);
            ms_NP_1325400446.backStack.top = addInt(ms_NP_1325400446.backStack.top, 1);
            ip_NP_1325400450 = 16;
            break;
          case 16:
            if (((si_NP_1325400451 < (s_NP_1325400447).length) && (ConstSet160[s_NP_1325400447[chckIndx(si_NP_1325400451, 0, (s_NP_1325400447).length - 1)]] != undefined))) {
            si_NP_1325400451 = addInt(si_NP_1325400451, 1);
            ip_NP_1325400450 = 17;
            }
            else {
              ip_NP_1325400450 = 19;
            }
            
            break;
          case 17:
            ip_NP_1325400450 = 22;
            break;
          case 18:
            ip_NP_1325400450 = 19;
            break;
          case 19:
            if (((si_NP_1325400451 < (s_NP_1325400447).length) && (s_NP_1325400447[chckIndx(si_NP_1325400451, 0, (s_NP_1325400447).length - 1)] == 91))) {
            si_NP_1325400451 = addInt(si_NP_1325400451, 1);
            ip_NP_1325400450 = 20;
            }
            else {
              ip_NP_1325400450 = 51;
            }
            
            break;
          case 20:
            if (((ms_NP_1325400446.retStack.frames).length <= ms_NP_1325400446.retStack.top)) {
            grow_1409286243(ms_NP_1325400446.retStack);
            }
            
            ms_NP_1325400446.retStack.frames[chckIndx(ms_NP_1325400446.retStack.top, 0, (ms_NP_1325400446.retStack.frames).length - 1)] = addInt(ip_NP_1325400450, 1);
            ms_NP_1325400446.retStack.top = addInt(ms_NP_1325400446.retStack.top, 1);
            ip_NP_1325400450 = 42;
            break;
          case 21:
            if (((si_NP_1325400451 < (s_NP_1325400447).length) && (s_NP_1325400447[chckIndx(si_NP_1325400451, 0, (s_NP_1325400447).length - 1)] == 93))) {
            si_NP_1325400451 = addInt(si_NP_1325400451, 1);
            ip_NP_1325400450 = 22;
            }
            else {
              ip_NP_1325400450 = 51;
            }
            
            break;
          case 22:
            if (!((0 < ms_NP_1325400446.backStack.top))) {
            failedAssertImpl_218103864(makeNimstrLit("stack.nim(35, 10) `ms_NP.backStack.top > 0` "));
            }
            
            ms_NP_1325400446.backStack.top = subInt(ms_NP_1325400446.backStack.top, 1);
            var _ = ms_NP_1325400446.backStack.frames[chckIndx(ms_NP_1325400446.backStack.top, 0, (ms_NP_1325400446.backStack.frames).length - 1)];
            ip_NP_1325400450 = 15;
            break;
          case 23:
            if (((ms_NP_1325400446.capStack.frames).length <= ms_NP_1325400446.capStack.top)) {
            grow_1325400730(ms_NP_1325400446.capStack);
            }
            
            ms_NP_1325400446.capStack.frames[chckIndx(ms_NP_1325400446.capStack.top, 0, (ms_NP_1325400446.capStack.frames).length - 1)] = nimCopy(ms_NP_1325400446.capStack.frames[chckIndx(ms_NP_1325400446.capStack.top, 0, (ms_NP_1325400446.capStack.frames).length - 1)], {cft: 1, si: si_NP_1325400451, ck: 0, name: [], sPushed: []}, NTI1325400345);
            ms_NP_1325400446.capStack.top = addInt(ms_NP_1325400446.capStack.top, 1);
            ip_NP_1325400450 = 24;
            break;
          case 24:
            if (((si_NP_1325400451 < (s_NP_1325400447).length) && (s_NP_1325400447[chckIndx(si_NP_1325400451, 0, (s_NP_1325400447).length - 1)] == 93))) {
            si_NP_1325400451 = addInt(si_NP_1325400451, 1);
            ip_NP_1325400450 = 25;
            }
            else {
              ip_NP_1325400450 = 51;
            }
            
            break;
          case 25:
            if (((ms_NP_1325400446.capStack.frames).length <= ms_NP_1325400446.capStack.top)) {
            grow_1325400730(ms_NP_1325400446.capStack);
            }
            
            ms_NP_1325400446.capStack.frames[chckIndx(ms_NP_1325400446.capStack.top, 0, (ms_NP_1325400446.capStack.frames).length - 1)] = nimCopy(ms_NP_1325400446.capStack.frames[chckIndx(ms_NP_1325400446.capStack.top, 0, (ms_NP_1325400446.capStack.frames).length - 1)], {cft: 1, si: si_NP_1325400451, ck: 2, name: [], sPushed: []}, NTI1325400345);
            ms_NP_1325400446.capStack.top = addInt(ms_NP_1325400446.capStack.top, 1);
            var captureHEX60gensym26_1325401702 = collectCaptures_1342177455(fixCaptures_1325400981(s_NP_1325400447, ms_NP_1325400446.capStack, 1));
            if (fn_1325401703(captureHEX60gensym26_1325401702, ms_NP_1325400446, output_1325400448, output_1325400448_Idx)) {
            ip_NP_1325400450 = 26;
            }
            else {
              ip_NP_1325400450 = 51;
            }
            
            break;
          case 26:
            if (!((0 < ms_NP_1325400446.backStack.top))) {
            failedAssertImpl_218103864(makeNimstrLit("stack.nim(35, 10) `ms_NP.backStack.top > 0` "));
            }
            
            ms_NP_1325400446.backStack.top = subInt(ms_NP_1325400446.backStack.top, 1);
            var _ = ms_NP_1325400446.backStack.frames[chckIndx(ms_NP_1325400446.backStack.top, 0, (ms_NP_1325400446.backStack.frames).length - 1)];
            ip_NP_1325400450 = 41;
            break;
          case 27:
            if (((si_NP_1325400451 < (s_NP_1325400447).length) && (ConstSet161[s_NP_1325400447[chckIndx(si_NP_1325400451, 0, (s_NP_1325400447).length - 1)]] != undefined))) {
            si_NP_1325400451 = addInt(si_NP_1325400451, 1);
            ip_NP_1325400450 = 28;
            }
            else {
              ip_NP_1325400450 = 35;
            }
            
            break;
          case 28:
            if (((ms_NP_1325400446.backStack.frames).length <= ms_NP_1325400446.backStack.top)) {
            grow_1325400494(ms_NP_1325400446.backStack);
            }
            
            ms_NP_1325400446.backStack.frames[chckIndx(ms_NP_1325400446.backStack.top, 0, (ms_NP_1325400446.backStack.frames).length - 1)] = nimCopy(ms_NP_1325400446.backStack.frames[chckIndx(ms_NP_1325400446.backStack.top, 0, (ms_NP_1325400446.backStack.frames).length - 1)], {ip: 35, si: addInt(si_NP_1325400451, -1), rp: ms_NP_1325400446.retStack.top, cp: ms_NP_1325400446.capStack.top, pp: ms_NP_1325400446.precStack.top}, NTI1392508932);
            ms_NP_1325400446.backStack.top = addInt(ms_NP_1325400446.backStack.top, 1);
            ip_NP_1325400450 = 29;
            break;
          case 29:
            if (((ms_NP_1325400446.capStack.frames).length <= ms_NP_1325400446.capStack.top)) {
            grow_1325400730(ms_NP_1325400446.capStack);
            }
            
            ms_NP_1325400446.capStack.frames[chckIndx(ms_NP_1325400446.capStack.top, 0, (ms_NP_1325400446.capStack.frames).length - 1)] = nimCopy(ms_NP_1325400446.capStack.frames[chckIndx(ms_NP_1325400446.capStack.top, 0, (ms_NP_1325400446.capStack.frames).length - 1)], {cft: 0, si: addInt(si_NP_1325400451, -1), ck: 2, name: [], sPushed: []}, NTI1325400345);
            ms_NP_1325400446.capStack.top = addInt(ms_NP_1325400446.capStack.top, 1);
            ip_NP_1325400450 = 30;
            break;
          case 30:
            if (((ms_NP_1325400446.capStack.frames).length <= ms_NP_1325400446.capStack.top)) {
            grow_1325400730(ms_NP_1325400446.capStack);
            }
            
            ms_NP_1325400446.capStack.frames[chckIndx(ms_NP_1325400446.capStack.top, 0, (ms_NP_1325400446.capStack.frames).length - 1)] = nimCopy(ms_NP_1325400446.capStack.frames[chckIndx(ms_NP_1325400446.capStack.top, 0, (ms_NP_1325400446.capStack.frames).length - 1)], {cft: 0, si: addInt(si_NP_1325400451, -1), ck: 0, name: [], sPushed: []}, NTI1325400345);
            ms_NP_1325400446.capStack.top = addInt(ms_NP_1325400446.capStack.top, 1);
            ip_NP_1325400450 = 31;
            break;
          case 31:
            Label5: do {
                Label6: while (true) {
                if (!((si_NP_1325400451 < (s_NP_1325400447).length) && (ConstSet162[s_NP_1325400447[chckIndx(si_NP_1325400451, 0, (s_NP_1325400447).length - 1)]] != undefined))) break Label6;
                  si_NP_1325400451 = addInt(si_NP_1325400451, 1);
                }
            } while (false);
            ip_NP_1325400450 = 32;
            break;
          case 32:
            if (((ms_NP_1325400446.capStack.frames).length <= ms_NP_1325400446.capStack.top)) {
            grow_1325400730(ms_NP_1325400446.capStack);
            }
            
            ms_NP_1325400446.capStack.frames[chckIndx(ms_NP_1325400446.capStack.top, 0, (ms_NP_1325400446.capStack.frames).length - 1)] = nimCopy(ms_NP_1325400446.capStack.frames[chckIndx(ms_NP_1325400446.capStack.top, 0, (ms_NP_1325400446.capStack.frames).length - 1)], {cft: 1, si: si_NP_1325400451, ck: 0, name: [], sPushed: []}, NTI1325400345);
            ms_NP_1325400446.capStack.top = addInt(ms_NP_1325400446.capStack.top, 1);
            ip_NP_1325400450 = 33;
            break;
          case 33:
            if (((ms_NP_1325400446.capStack.frames).length <= ms_NP_1325400446.capStack.top)) {
            grow_1325400730(ms_NP_1325400446.capStack);
            }
            
            ms_NP_1325400446.capStack.frames[chckIndx(ms_NP_1325400446.capStack.top, 0, (ms_NP_1325400446.capStack.frames).length - 1)] = nimCopy(ms_NP_1325400446.capStack.frames[chckIndx(ms_NP_1325400446.capStack.top, 0, (ms_NP_1325400446.capStack.frames).length - 1)], {cft: 1, si: si_NP_1325400451, ck: 2, name: [], sPushed: []}, NTI1325400345);
            ms_NP_1325400446.capStack.top = addInt(ms_NP_1325400446.capStack.top, 1);
            var captureHEX60gensym34_1325402113 = collectCaptures_1342177455(fixCaptures_1325400981(s_NP_1325400447, ms_NP_1325400446.capStack, 1));
            if (fn_1325402114(captureHEX60gensym34_1325402113, ms_NP_1325400446, output_1325400448, output_1325400448_Idx)) {
            ip_NP_1325400450 = 34;
            }
            else {
              ip_NP_1325400450 = 51;
            }
            
            break;
          case 34:
            if (!((0 < ms_NP_1325400446.backStack.top))) {
            failedAssertImpl_218103864(makeNimstrLit("stack.nim(35, 10) `ms_NP.backStack.top > 0` "));
            }
            
            ms_NP_1325400446.backStack.top = subInt(ms_NP_1325400446.backStack.top, 1);
            var _ = ms_NP_1325400446.backStack.frames[chckIndx(ms_NP_1325400446.backStack.top, 0, (ms_NP_1325400446.backStack.frames).length - 1)];
            ip_NP_1325400450 = 41;
            break;
          case 35:
            if (((si_NP_1325400451 < (s_NP_1325400447).length) && (ConstSet163[s_NP_1325400447[chckIndx(si_NP_1325400451, 0, (s_NP_1325400447).length - 1)]] != undefined))) {
            si_NP_1325400451 = addInt(si_NP_1325400451, 1);
            ip_NP_1325400450 = 36;
            }
            else {
              ip_NP_1325400450 = 51;
            }
            
            break;
          case 36:
            if (((ms_NP_1325400446.capStack.frames).length <= ms_NP_1325400446.capStack.top)) {
            grow_1325400730(ms_NP_1325400446.capStack);
            }
            
            ms_NP_1325400446.capStack.frames[chckIndx(ms_NP_1325400446.capStack.top, 0, (ms_NP_1325400446.capStack.frames).length - 1)] = nimCopy(ms_NP_1325400446.capStack.frames[chckIndx(ms_NP_1325400446.capStack.top, 0, (ms_NP_1325400446.capStack.frames).length - 1)], {cft: 0, si: addInt(si_NP_1325400451, -1), ck: 2, name: [], sPushed: []}, NTI1325400345);
            ms_NP_1325400446.capStack.top = addInt(ms_NP_1325400446.capStack.top, 1);
            ip_NP_1325400450 = 37;
            break;
          case 37:
            if (((ms_NP_1325400446.capStack.frames).length <= ms_NP_1325400446.capStack.top)) {
            grow_1325400730(ms_NP_1325400446.capStack);
            }
            
            ms_NP_1325400446.capStack.frames[chckIndx(ms_NP_1325400446.capStack.top, 0, (ms_NP_1325400446.capStack.frames).length - 1)] = nimCopy(ms_NP_1325400446.capStack.frames[chckIndx(ms_NP_1325400446.capStack.top, 0, (ms_NP_1325400446.capStack.frames).length - 1)], {cft: 0, si: addInt(si_NP_1325400451, -1), ck: 0, name: [], sPushed: []}, NTI1325400345);
            ms_NP_1325400446.capStack.top = addInt(ms_NP_1325400446.capStack.top, 1);
            ip_NP_1325400450 = 38;
            break;
          case 38:
            Label7: do {
                Label8: while (true) {
                if (!((si_NP_1325400451 < (s_NP_1325400447).length) && (ConstSet164[s_NP_1325400447[chckIndx(si_NP_1325400451, 0, (s_NP_1325400447).length - 1)]] != undefined))) break Label8;
                  si_NP_1325400451 = addInt(si_NP_1325400451, 1);
                }
            } while (false);
            ip_NP_1325400450 = 39;
            break;
          case 39:
            if (((ms_NP_1325400446.capStack.frames).length <= ms_NP_1325400446.capStack.top)) {
            grow_1325400730(ms_NP_1325400446.capStack);
            }
            
            ms_NP_1325400446.capStack.frames[chckIndx(ms_NP_1325400446.capStack.top, 0, (ms_NP_1325400446.capStack.frames).length - 1)] = nimCopy(ms_NP_1325400446.capStack.frames[chckIndx(ms_NP_1325400446.capStack.top, 0, (ms_NP_1325400446.capStack.frames).length - 1)], {cft: 1, si: si_NP_1325400451, ck: 0, name: [], sPushed: []}, NTI1325400345);
            ms_NP_1325400446.capStack.top = addInt(ms_NP_1325400446.capStack.top, 1);
            ip_NP_1325400450 = 40;
            break;
          case 40:
            if (((ms_NP_1325400446.capStack.frames).length <= ms_NP_1325400446.capStack.top)) {
            grow_1325400730(ms_NP_1325400446.capStack);
            }
            
            ms_NP_1325400446.capStack.frames[chckIndx(ms_NP_1325400446.capStack.top, 0, (ms_NP_1325400446.capStack.frames).length - 1)] = nimCopy(ms_NP_1325400446.capStack.frames[chckIndx(ms_NP_1325400446.capStack.top, 0, (ms_NP_1325400446.capStack.frames).length - 1)], {cft: 1, si: si_NP_1325400451, ck: 2, name: [], sPushed: []}, NTI1325400345);
            ms_NP_1325400446.capStack.top = addInt(ms_NP_1325400446.capStack.top, 1);
            var captureHEX60gensym41_1325402389 = collectCaptures_1342177455(fixCaptures_1325400981(s_NP_1325400447, ms_NP_1325400446.capStack, 1));
            if (fn_1325402390(captureHEX60gensym41_1325402389, ms_NP_1325400446, output_1325400448, output_1325400448_Idx)) {
            ip_NP_1325400450 = 41;
            }
            else {
              ip_NP_1325400450 = 51;
            }
            
            break;
          case 41:
            if ((0 < ms_NP_1325400446.retStack.top)) {
            if (!((0 < ms_NP_1325400446.retStack.top))) {
            failedAssertImpl_218103864(makeNimstrLit("stack.nim(35, 10) `ms_NP.retStack.top > 0` "));
            }
            
            ms_NP_1325400446.retStack.top = subInt(ms_NP_1325400446.retStack.top, 1);
            ip_NP_1325400450 = chckRange(ms_NP_1325400446.retStack.frames[chckIndx(ms_NP_1325400446.retStack.top, 0, (ms_NP_1325400446.retStack.frames).length - 1)], 0, 51);
            }
            else {
              result_1325400449.ok = true;
              simax_NP_1325400452 = nimMax(simax_NP_1325400452, si_NP_1325400451);
              break Label1;
            }
            
            break;
          case 42:
            if (((ms_NP_1325400446.backStack.frames).length <= ms_NP_1325400446.backStack.top)) {
            grow_1325400494(ms_NP_1325400446.backStack);
            }
            
            ms_NP_1325400446.backStack.frames[chckIndx(ms_NP_1325400446.backStack.top, 0, (ms_NP_1325400446.backStack.frames).length - 1)] = nimCopy(ms_NP_1325400446.backStack.frames[chckIndx(ms_NP_1325400446.backStack.top, 0, (ms_NP_1325400446.backStack.frames).length - 1)], {ip: 50, si: addInt(si_NP_1325400451, 0), rp: ms_NP_1325400446.retStack.top, cp: ms_NP_1325400446.capStack.top, pp: ms_NP_1325400446.precStack.top}, NTI1392508932);
            ms_NP_1325400446.backStack.top = addInt(ms_NP_1325400446.backStack.top, 1);
            ip_NP_1325400450 = 43;
            break;
          case 43:
            if (((si_NP_1325400451 < (s_NP_1325400447).length) && (ConstSet165[s_NP_1325400447[chckIndx(si_NP_1325400451, 0, (s_NP_1325400447).length - 1)]] != undefined))) {
            si_NP_1325400451 = addInt(si_NP_1325400451, 1);
            ip_NP_1325400450 = 44;
            }
            else {
              ip_NP_1325400450 = 46;
            }
            
            break;
          case 44:
            ip_NP_1325400450 = 49;
            break;
          case 45:
            ip_NP_1325400450 = 46;
            break;
          case 46:
            if (((si_NP_1325400451 < (s_NP_1325400447).length) && (s_NP_1325400447[chckIndx(si_NP_1325400451, 0, (s_NP_1325400447).length - 1)] == 91))) {
            si_NP_1325400451 = addInt(si_NP_1325400451, 1);
            ip_NP_1325400450 = 47;
            }
            else {
              ip_NP_1325400450 = 51;
            }
            
            break;
          case 47:
            if (((ms_NP_1325400446.retStack.frames).length <= ms_NP_1325400446.retStack.top)) {
            grow_1409286243(ms_NP_1325400446.retStack);
            }
            
            ms_NP_1325400446.retStack.frames[chckIndx(ms_NP_1325400446.retStack.top, 0, (ms_NP_1325400446.retStack.frames).length - 1)] = addInt(ip_NP_1325400450, 1);
            ms_NP_1325400446.retStack.top = addInt(ms_NP_1325400446.retStack.top, 1);
            ip_NP_1325400450 = 42;
            break;
          case 48:
            if (((si_NP_1325400451 < (s_NP_1325400447).length) && (s_NP_1325400447[chckIndx(si_NP_1325400451, 0, (s_NP_1325400447).length - 1)] == 93))) {
            si_NP_1325400451 = addInt(si_NP_1325400451, 1);
            ip_NP_1325400450 = 49;
            }
            else {
              ip_NP_1325400450 = 51;
            }
            
            break;
          case 49:
            if (!((0 < ms_NP_1325400446.backStack.top))) {
            failedAssertImpl_218103864(makeNimstrLit("stack.nim(35, 10) `ms_NP.backStack.top > 0` "));
            }
            
            ms_NP_1325400446.backStack.top = subInt(ms_NP_1325400446.backStack.top, 1);
            var _ = ms_NP_1325400446.backStack.frames[chckIndx(ms_NP_1325400446.backStack.top, 0, (ms_NP_1325400446.backStack.frames).length - 1)];
            ip_NP_1325400450 = 42;
            break;
          case 50:
            if ((0 < ms_NP_1325400446.retStack.top)) {
            if (!((0 < ms_NP_1325400446.retStack.top))) {
            failedAssertImpl_218103864(makeNimstrLit("stack.nim(35, 10) `ms_NP.retStack.top > 0` "));
            }
            
            ms_NP_1325400446.retStack.top = subInt(ms_NP_1325400446.retStack.top, 1);
            ip_NP_1325400450 = chckRange(ms_NP_1325400446.retStack.frames[chckIndx(ms_NP_1325400446.retStack.top, 0, (ms_NP_1325400446.retStack.frames).length - 1)], 0, 51);
            }
            else {
              result_1325400449.ok = true;
              simax_NP_1325400452 = nimMax(simax_NP_1325400452, si_NP_1325400451);
              break Label1;
            }
            
            break;
          case 51:
            simax_NP_1325400452 = nimMax(simax_NP_1325400452, si_NP_1325400451);
            if ((0 < ms_NP_1325400446.backStack.top)) {
            if (!((0 < ms_NP_1325400446.backStack.top))) {
            failedAssertImpl_218103864(makeNimstrLit("stack.nim(35, 10) `ms_NP.backStack.top > 0` "));
            }
            
            ms_NP_1325400446.backStack.top = subInt(ms_NP_1325400446.backStack.top, 1);
            var tHEX60gensym52_1325402758 = nimCopy(null, ms_NP_1325400446.backStack.frames[chckIndx(ms_NP_1325400446.backStack.top, 0, (ms_NP_1325400446.backStack.frames).length - 1)], NTI1392508932);
            var __1325402759 = {Field0: tHEX60gensym52_1325402758.ip, Field1: tHEX60gensym52_1325402758.si, Field2: tHEX60gensym52_1325402758.rp, Field3: tHEX60gensym52_1325402758.cp, Field4: tHEX60gensym52_1325402758.pp};
            ip_NP_1325400450 = chckRange(__1325402759["Field0"], 0, 51);
            si_NP_1325400451 = __1325402759["Field1"];
            ms_NP_1325400446.retStack.top = __1325402759["Field2"];
            ms_NP_1325400446.capStack.top = __1325402759["Field3"];
            ms_NP_1325400446.precStack.top = __1325402759["Field4"];
            }
            else {
              break Label1;
            }
            
            break;
          }
        }
    } while (false);
    ms_NP_1325400446.ip = ip_NP_1325400450;
    ms_NP_1325400446.si = si_NP_1325400451;
    ms_NP_1325400446.simax = simax_NP_1325400452;
    result_1325400449.matchLen = ms_NP_1325400446.si;
    result_1325400449.matchMax = ms_NP_1325400446.simax;
      if (!result_1325400449.ok) Temporary9 = false; else {        Temporary9 = (0 < ms_NP_1325400446.capStack.top);      }    if (Temporary9) {
    result_1325400449.cs = nimCopy(result_1325400449.cs, fixCaptures_1325400981(s_NP_1325400447, ms_NP_1325400446.capStack, 0), NTI1342177354);
    }
    

  return result_1325400449;

}

function parseXidoc_1325402829(body_1325402830, verbose_1325402831) {
  var result_1325402832 = [[]];

    var match_1325402930 = match_1325402833(xidocParser_1325402810, body_1325402830, result_1325402832, 0);
    if (!(match_1325402930.ok)) {
    if (verbose_1325402831) {
    raiseException({message: nsuFormatSingleElem(makeNimstrLit("Parse error\x0ASuccessfully parsed: $1"), HEX5BHEX5D_939524972(body_1325402830, HEX2EHEX2E_939524947(0, match_1325402930.matchMax))), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    }
    else {
      raiseException({message: makeNimstrLit("Parse error"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    }
    
    }
    

  return result_1325402832[0];

}

function HEX5BHEX5D_33557742(s_33557743, s_33557743_Idx, i_33557744) {
  var result_33557745 = null;
  var result_33557745_Idx = 0;

    result_33557745 = s_33557743[s_33557743_Idx]; result_33557745_Idx = chckIndx(subInt((s_33557743[s_33557743_Idx]).length, i_33557744), 0, (s_33557743[s_33557743_Idx]).length - 1);

  return [result_33557745, result_33557745_Idx];

}

function find_872415280(a_872415283, item_872415284) {
  var result_872415285 = 0;

  BeforeRet: do {
    result_872415285 = 0;
    Label1: do {
      var i_872415289 = [];
      var i_486540148 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486540148 < (a_872415283).length)) break Label3;
            i_872415289 = a_872415283[chckIndx(i_486540148, 0, (a_872415283).length - 1)];
            if (eqStrings(i_872415289, item_872415284)) {
            break BeforeRet;
            }
            
            result_872415285 = addInt(result_872415285, 1);
            i_486540148 = addInt(i_486540148, 1);
          }
      } while (false);
    } while (false);
    result_872415285 = -1;
  } while (false);

  return result_872415285;

}

function contains_872415275(a_872415277, item_872415278) {
  var result_872415279 = false;

  BeforeRet: do {
    result_872415279 = (0 <= find_872415280(a_872415277, item_872415278));
    break BeforeRet;
  } while (false);

  return result_872415279;

}

function find_1308622902(a_1308622905, item_1308622906) {
  var result_1308622907 = 0;

  BeforeRet: do {
    result_1308622907 = 0;
    Label1: do {
      var i_1308622919 = 0;
      var i_486540152 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486540152 < (a_1308622905).length)) break Label3;
            i_1308622919 = a_1308622905[chckIndx(i_486540152, 0, (a_1308622905).length - 1)];
            if ((i_1308622919 == item_1308622906)) {
            break BeforeRet;
            }
            
            result_1308622907 = addInt(result_1308622907, 1);
            i_486540152 = addInt(i_486540152, 1);
          }
      } while (false);
    } while (false);
    result_1308622907 = -1;
  } while (false);

  return result_1308622907;

}

function contains_1308622897(a_1308622899, item_1308622900) {
  var result_1308622901 = false;

  BeforeRet: do {
    result_1308622901 = (0 <= find_1308622902(a_1308622899, item_1308622900));
    break BeforeRet;
  } while (false);

  return result_1308622901;

}

function HEX5BHEX5DHEX3D_33557757(s_33557758, s_33557758_Idx, i_33557759, x_33557760) {
    s_33557758[s_33557758_Idx][chckIndx(subInt((s_33557758[s_33557758_Idx]).length, i_33557759), 0, (s_33557758[s_33557758_Idx]).length - 1)] = x_33557760;

  
}

function addIfNeeded_1308622885(s1_1308622886, s1_1308622886_Idx, s2_1308622887) {
    var Temporary1;
      var Temporary2;

  BeforeRet: do {
    if (eqStrings(s1_1308622886[s1_1308622886_Idx], [])) {
    Temporary1 = 0;
    }
    else {
    Temporary1 = (Temporary2 = HEX5BHEX5D_33557742(s1_1308622886, s1_1308622886_Idx, 1), Temporary2)[0][Temporary2[1]];
    }
    
    var s1Last_1308622888 = Temporary1;
    if ((contains_872415275([makeNimstrLit(" "), makeNimstrLit("\x0A")], s2_1308622887) && contains_1308622897([32, 10], s1Last_1308622888))) {
    if ((eqStrings(s2_1308622887, makeNimstrLit("\x0A")) && (s1Last_1308622888 == 32))) {
    HEX5BHEX5DHEX3D_33557757(s1_1308622886, s1_1308622886_Idx, 1, 10);
    }
    
    break BeforeRet;
    }
    
    s1_1308622886[s1_1308622886_Idx].push.apply(s1_1308622886[s1_1308622886_Idx], s2_1308622887);;
  } while (false);

  
}

function nsuContinuesWith(s_654312773, substr_654312774, start_654312775) {
            var Temporary3;

  var result_654312776 = false;

  BeforeRet: do {
    var i_654312777 = 0;
    Label1: do {
        Label2: while (true) {
        if (!true) break Label2;
          if (((substr_654312774).length <= i_654312777)) {
          result_654312776 = true;
          break BeforeRet;
          }
          
            if (((s_654312773).length <= addInt(i_654312777, start_654312775))) Temporary3 = true; else {              Temporary3 = !((s_654312773[chckIndx(addInt(i_654312777, start_654312775), 0, (s_654312773).length - 1)] == substr_654312774[chckIndx(i_654312777, 0, (substr_654312774).length - 1)]));            }          if (Temporary3) {
          result_654312776 = false;
          break BeforeRet;
          }
          
          i_654312777 = addInt(i_654312777, 1);
        }
    } while (false);
  } while (false);

  return result_654312776;

}

function multiReplace_654313162(s_654313163, replacements_654313164) {
                      var Temporary10;

  var result_654313165 = [];

    result_654313165 = nimCopy(null, mnewString(0), NTI33554439);
    var i_654313166 = 0;
    var fastChk_654313167 = nimCopy(null, ConstSet169, NTI654312627);
    Label1: do {
      var sub_654313180 = [];
      var by_654313181 = [];
      var i_486540155 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486540155 < (replacements_654313164).length)) break Label3;
            sub_654313180 = replacements_654313164[chckIndx(i_486540155, 0, (replacements_654313164).length - 1)]["Field0"];
            by_654313181 = replacements_654313164[chckIndx(i_486540155, 0, (replacements_654313164).length - 1)]["Field1"];
            if ((0 < (sub_654313180).length)) {
            fastChk_654313167[sub_654313180[chckIndx(0, 0, (sub_654313180).length - 1)]] = true;
            }
            
            i_486540155 = addInt(i_486540155, 1);
          }
      } while (false);
    } while (false);
    Label4: do {
        Label5: while (true) {
        if (!(i_654313166 < (s_654313163).length)) break Label5;
          Label6: do {
            if ((fastChk_654313167[s_654313163[chckIndx(i_654313166, 0, (s_654313163).length - 1)]] != undefined)) {
            Label7: do {
              var sub_654313194 = [];
              var by_654313195 = [];
              var i_486540159 = 0;
              Label8: do {
                  Label9: while (true) {
                  if (!(i_486540159 < (replacements_654313164).length)) break Label9;
                    sub_654313194 = replacements_654313164[chckIndx(i_486540159, 0, (replacements_654313164).length - 1)]["Field0"];
                    by_654313195 = replacements_654313164[chckIndx(i_486540159, 0, (replacements_654313164).length - 1)]["Field1"];
                      if (!(0 < (sub_654313194).length)) Temporary10 = false; else {                        Temporary10 = nsuContinuesWith(s_654313163, sub_654313194, chckRange(i_654313166, 0, 2147483647));                      }                    if (Temporary10) {
                    result_654313165.push.apply(result_654313165, by_654313195);;
                    i_654313166 = addInt(i_654313166, (sub_654313194).length);
                    break Label6;
                    }
                    
                    i_486540159 = addInt(i_486540159, 1);
                  }
              } while (false);
            } while (false);
            }
            
            addChar(result_654313165, s_654313163[chckIndx(i_654313166, 0, (s_654313163).length - 1)]);;
            i_654313166 = addInt(i_654313166, 1);
          } while (false);
        }
    } while (false);

  return result_654313165;

}

function escapeText_1308622854(text_1308622855, target_1308622856) {
    var Temporary1;

  var result_1308622857 = [];

    switch (target_1308622856) {
    case 0:
      Temporary1 = multiReplace_654313162(text_1308622855, [{Field0: makeNimstrLit("<"), Field1: makeNimstrLit("&lt;")}, {Field0: makeNimstrLit("&"), Field1: makeNimstrLit("&amp;")}, {Field0: makeNimstrLit("\""), Field1: makeNimstrLit("&quot;")}]);
      break;
    case 1:
      Temporary1 = text_1308622855;
      break;
    case 2:
      Temporary1 = text_1308622855;
      break;
    }
    result_1308622857 = nimCopy(null, Temporary1, NTI33554439);

  return result_1308622857;

}

function isWhitespaceSensitive_1207959653(target_1207959654) {
  var result_1207959655 = false;

    result_1207959655 = (target_1207959654 == 2);

  return result_1207959655;

}

function hasKey_1308623020(t_1308623023, key_1308623024) {
  var result_1308623025 = false;

    var hc_1308623026 = [0];
    result_1308623025 = (0 <= rawGet_1308623027(t_1308623023, key_1308623024, hc_1308623026, 0));

  return result_1308623025;

}

function HEX5BHEX5D_1308623124(t_1308623127, key_1308623128) {
  var result_1308623129 = null;

    var hcHEX60gensym20_1308623130 = [0];
    var indexHEX60gensym20_1308623137 = rawGet_1308623027(t_1308623127, key_1308623128, hcHEX60gensym20_1308623130, 0);
    if ((0 <= indexHEX60gensym20_1308623137)) {
    result_1308623129 = t_1308623127.data[chckIndx(indexHEX60gensym20_1308623137, 0, (t_1308623127.data).length - 1)].Field2;
    }
    else {
    raiseKeyError_1493173732(key_1308623128);
    }
    

  return result_1308623129;

}

function pop_1308623161(s_1308623163, s_1308623163_Idx) {
  var result_1308623164 = ({args: ({data: [], counter: 0}), cmdArg: [], cmdName: [], commands: ({data: [], counter: 0}), lang: ({val: 0, has: false}), path: ({val: [], has: false})});

    var L_1308623168 = subInt((s_1308623163[s_1308623163_Idx]).length, 1);
    result_1308623164 = nimCopy(result_1308623164, s_1308623163[s_1308623163_Idx][chckIndx(L_1308623168, 0, (s_1308623163[s_1308623163_Idx]).length - 1)], NTI1207959561);
    if (s_1308623163[s_1308623163_Idx].length < chckRange(L_1308623168, 0, 2147483647)) { for (var i = s_1308623163[s_1308623163_Idx].length ; i < chckRange(L_1308623168, 0, 2147483647) ; ++i) s_1308623163[s_1308623163_Idx].push(({args: ({data: [], counter: 0}), cmdArg: [], cmdName: [], commands: ({data: [], counter: 0}), lang: ({val: 0, has: false}), path: ({val: [], has: false})})); }
               else { s_1308623163[s_1308623163_Idx].length = chckRange(L_1308623168, 0, 2147483647); };

  return result_1308623164;

}

function add_1308623177(x_1308623179, x_1308623179_Idx, y_1308623180) {
    var Temporary1;

    var xl_1308623185 = (x_1308623179[x_1308623179_Idx]).length;
    if (x_1308623179[x_1308623179_Idx].length < (Temporary1 = chckRange(addInt(xl_1308623185, (y_1308623180).length), 0, 2147483647), Temporary1)) { for (var i = x_1308623179[x_1308623179_Idx].length ; i < Temporary1 ; ++i) x_1308623179[x_1308623179_Idx].push(({typ: 0, str: [], list: [], opt: ({val: null})})); }
               else { x_1308623179[x_1308623179_Idx].length = Temporary1; };
    Label2: do {
      var i_1308623201 = 0;
      var colontmp__486540167 = 0;
      colontmp__486540167 = (y_1308623180).length - 1;
      var res_486540168 = 0;
      Label3: do {
          Label4: while (true) {
          if (!(res_486540168 <= colontmp__486540167)) break Label4;
            i_1308623201 = res_486540168;
            x_1308623179[x_1308623179_Idx][chckIndx(addInt(xl_1308623185, i_1308623201), 0, (x_1308623179[x_1308623179_Idx]).length - 1)] = nimCopy(x_1308623179[x_1308623179_Idx][chckIndx(addInt(xl_1308623185, i_1308623201), 0, (x_1308623179[x_1308623179_Idx]).length - 1)], y_1308623180[chckIndx(i_1308623201, 0, (y_1308623180).length - 1)], NTI1207959557);
            res_486540168 = addInt(res_486540168, 1);
          }
      } while (false);
    } while (false);

  
}

function expand_1308622933(doc_1308622934, str_1308622935, typ_1308622936) {
                var Temporary4;
                var Temporary5;
                var Temporary6;
                var Temporary7;
                var Temporary8;
                var Temporary9;
                var Temporary10;
                  var Temporary11;
                  var Temporary12;
                var Temporary13;
              var Temporary14;
              
function HEX3Aanonymous_1308622968() {
                var result_1308622969 = null;

                BeforeRet: do {
                  Label1: do {
                    var iHEX60gensym6_1308622978 = 0;
                    var colontmp__486540163 = 0;
                    colontmp__486540163 = subInt((doc_1308622934.stack).length, 1);
                    var res_486540164 = colontmp__486540163;
                    Label2: do {
                        Label3: while (true) {
                        if (!(0 <= res_486540164)) break Label3;
                          iHEX60gensym6_1308622978 = res_486540164;
                          var frameHEX60gensym6_1308622979 = nimCopy(null, doc_1308622934.stack[chckIndx(iHEX60gensym6_1308622978, 0, (doc_1308622934.stack).length - 1)], NTI1207959561);
                          if (hasKey_1308623020(frameHEX60gensym6_1308622979.commands, name_1308622965)) {
                          result_1308622969 = HEX5BHEX5D_1308623124(frameHEX60gensym6_1308622979.commands, name_1308622965);
                          break BeforeRet;
                          }
                          
                          res_486540164 = subInt(res_486540164, 1);
                        }
                    } while (false);
                  } while (false);
                } while (false);

                return result_1308622969;

              }
              var Temporary15;
              var Temporary17;
                  var Temporary18;
                  var Temporary19;
                  var Temporary20;
                  var Temporary21;
                  var Temporary22;
                  var Temporary23;
                  var Temporary24;
                  var Temporary26;
                  var Temporary27;

  var result_1308622937 = ({typ: 0, str: [], list: [], opt: ({val: null})});

    result_1308622937 = nimCopy(result_1308622937, {typ: typ_1308622936, str: [], list: [], opt: ({val: null})}, NTI1207959557);
    Label1: do {
      var node_1308622959 = null;
      var colontmp__486540137 = [];
      colontmp__486540137 = parseXidoc_1325402829(str_1308622935, doc_1308622934.verbose);
      var i_486540139 = 0;
      var L_486540140 = (colontmp__486540137).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_486540139 < L_486540140)) break Label3;
            node_1308622959 = colontmp__486540137[chckIndx(i_486540139, 0, (colontmp__486540137).length - 1)];
            switch (node_1308622959.kind) {
            case 0:
              switch (typ_1308622936) {
              case 0:
                var Temporary4 = result_1308622937;
                if (ConstSet166[Temporary4.typ]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'XidocValue\' using \'typ = "), reprDiscriminant(Temporary4.typ, NTI1207959556)); }
                var Temporary5 = node_1308622959;
                if (ConstSet167[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'XidocNode\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1325400067)); }
                addIfNeeded_1308622885(Temporary4, "str", Temporary5.str);
                break;
              case 1:
                var Temporary6 = result_1308622937;
                if (ConstSet168[Temporary6.typ]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'XidocValue\' using \'typ = "), reprDiscriminant(Temporary6.typ, NTI1207959556)); }
                var Temporary7 = node_1308622959;
                if (ConstSet170[Temporary7.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'XidocNode\' using \'kind = "), reprDiscriminant(Temporary7.kind, NTI1325400067)); }
                addIfNeeded_1308622885(Temporary6, "str", escapeText_1308622854(Temporary7.str, doc_1308622934.target));
                break;
              case 2:
                var Temporary8 = result_1308622937;
                if (ConstSet171[Temporary8.typ]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'XidocValue\' using \'typ = "), reprDiscriminant(Temporary8.typ, NTI1207959556)); }
                var Temporary9 = node_1308622959;
                if (ConstSet172[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'XidocNode\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI1325400067)); }
                Temporary8.list.push({typ: 0, str: nimCopy(null, Temporary9.str, NTI33554439), list: [], opt: ({val: null})});;
                break;
              case 3:
                break;
              }
              break;
            case 1:
              switch (typ_1308622936) {
              case 0:
              case 1:
                  var Temporary12 = node_1308622959;
                  if (ConstSet173[Temporary12.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'newline\' is not accessible for type \'XidocNode\' using \'kind = "), reprDiscriminant(Temporary12.kind, NTI1325400067)); }
                  if (!Temporary12.newline) Temporary11 = false; else {                    Temporary11 = !(isWhitespaceSensitive_1207959653(doc_1308622934.target));                  }                if (Temporary11) {
                Temporary10 = makeNimstrLit("\x0A");
                }
                else {
                Temporary10 = makeNimstrLit(" ");
                }
                
                var whitespace_1308622964 = nimCopy(null, Temporary10, NTI33554439);
                var Temporary13 = result_1308622937;
                if (ConstSet174[Temporary13.typ]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'XidocValue\' using \'typ = "), reprDiscriminant(Temporary13.typ, NTI1207959556)); }
                addIfNeeded_1308622885(Temporary13, "str", whitespace_1308622964);
                break;
              case 2:
                break;
              case 3:
                break;
              }
              break;
            case 2:
              var Temporary14 = node_1308622959;
              if (ConstSet175[Temporary14.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'name\' is not accessible for type \'XidocNode\' using \'kind = "), reprDiscriminant(Temporary14.kind, NTI1325400067)); }
              var name_1308622965 = nimCopy(null, Temporary14.name, NTI33554439);
              var command_1308623150 = HEX3Aanonymous_1308622968();
              if ((command_1308623150 == null)) {
              var fmtRes_1308623154 = [mnewString(0)];
              fmtRes_1308623154[0].push.apply(fmtRes_1308623154[0], makeNimstrLit("Command not found: "));;
              formatValue_1275068578(fmtRes_1308623154, 0, name_1308622965, []);
              raiseException({message: nimCopy(null, fmtRes_1308623154[0], NTI33554439), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
              }
              
              var Temporary15 = node_1308622959;
              if (ConstSet176[Temporary15.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'arg\' is not accessible for type \'XidocNode\' using \'kind = "), reprDiscriminant(Temporary15.kind, NTI1325400067)); }
              var frame_1308623155 = {cmdName: nimCopy(null, name_1308622965, NTI33554439), cmdArg: nimCopy(null, Temporary15.arg, NTI33554439), args: ({data: [], counter: 0}), commands: ({data: [], counter: 0}), lang: ({val: 0, has: false}), path: ({val: [], has: false})};
              var Temporary16 = nimCopy(null, frame_1308623155, NTI1207959561);
              doc_1308622934.stack.push(Temporary16);;
              var Temporary17 = node_1308622959;
              if (ConstSet177[Temporary17.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'arg\' is not accessible for type \'XidocNode\' using \'kind = "), reprDiscriminant(Temporary17.kind, NTI1325400067)); }
              var val_1308623160 = command_1308623150(Temporary17.arg);
              var _ = pop_1308623161(doc_1308622934, "stack");
              switch (typ_1308622936) {
              case 0:
                switch (val_1308623160.typ) {
                case 0:
                case 1:
                  var Temporary18 = result_1308622937;
                  if (ConstSet178[Temporary18.typ]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'XidocValue\' using \'typ = "), reprDiscriminant(Temporary18.typ, NTI1207959556)); }
                  var Temporary19 = val_1308623160;
                  if (ConstSet179[Temporary19.typ]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'XidocValue\' using \'typ = "), reprDiscriminant(Temporary19.typ, NTI1207959556)); }
                  addIfNeeded_1308622885(Temporary18, "str", Temporary19.str);
                  break;
                case 2:
                  raiseException({message: makeNimstrLit("Cannot convert a List to a String"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
                  break;
                case 3:
                  break;
                }
                break;
              case 1:
                switch (val_1308623160.typ) {
                case 0:
                  var Temporary20 = result_1308622937;
                  if (ConstSet180[Temporary20.typ]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'XidocValue\' using \'typ = "), reprDiscriminant(Temporary20.typ, NTI1207959556)); }
                  var Temporary21 = val_1308623160;
                  if (ConstSet181[Temporary21.typ]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'XidocValue\' using \'typ = "), reprDiscriminant(Temporary21.typ, NTI1207959556)); }
                  addIfNeeded_1308622885(Temporary20, "str", escapeText_1308622854(Temporary21.str, doc_1308622934.target));
                  break;
                case 1:
                  var Temporary22 = result_1308622937;
                  if (ConstSet182[Temporary22.typ]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'XidocValue\' using \'typ = "), reprDiscriminant(Temporary22.typ, NTI1207959556)); }
                  var Temporary23 = val_1308623160;
                  if (ConstSet183[Temporary23.typ]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'XidocValue\' using \'typ = "), reprDiscriminant(Temporary23.typ, NTI1207959556)); }
                  addIfNeeded_1308622885(Temporary22, "str", Temporary23.str);
                  break;
                case 2:
                  raiseException({message: makeNimstrLit("Cannot convert a List to a Markup"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
                  break;
                case 3:
                  break;
                }
                break;
              case 2:
                switch (val_1308623160.typ) {
                case 0:
                case 1:
                  var Temporary24 = result_1308622937;
                  if (ConstSet184[Temporary24.typ]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'XidocValue\' using \'typ = "), reprDiscriminant(Temporary24.typ, NTI1207959556)); }
                  var Temporary25 = nimCopy(null, val_1308623160, NTI1207959557);
                  Temporary24.list.push(Temporary25);;
                  break;
                case 2:
                  var Temporary26 = result_1308622937;
                  if (ConstSet185[Temporary26.typ]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'XidocValue\' using \'typ = "), reprDiscriminant(Temporary26.typ, NTI1207959556)); }
                  var Temporary27 = val_1308623160;
                  if (ConstSet186[Temporary27.typ]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'XidocValue\' using \'typ = "), reprDiscriminant(Temporary27.typ, NTI1207959556)); }
                  add_1308623177(Temporary26, "list", Temporary27.list);
                  break;
                case 3:
                  break;
                }
                break;
              case 3:
                break;
              }
              break;
            }
            i_486540139 = addInt(i_486540139, 1);
            if (!(((colontmp__486540137).length == L_486540140))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);

  return result_1308622937;

}

function map_1879048703(s_1879048706, op_1879048708) {
  var result_1879048709 = [];

    result_1879048709 = new Array(chckRange((s_1879048706).length, 0, 2147483647)); for (var i = 0 ; i < chckRange((s_1879048706).length, 0, 2147483647) ; ++i) { result_1879048709[i] = ({typ: 0, str: [], list: [], opt: ({val: null})}); }    Label1: do {
      var i_1879048724 = 0;
      var colontmp__486540171 = 0;
      colontmp__486540171 = (s_1879048706).length;
      var i_486540172 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486540172 < colontmp__486540171)) break Label3;
            i_1879048724 = i_486540172;
            result_1879048709[chckIndx(i_1879048724, 0, (result_1879048709).length - 1)] = nimCopy(result_1879048709[chckIndx(i_1879048724, 0, (result_1879048709).length - 1)], op_1879048708(s_1879048706[chckIndx(i_1879048724, 0, (s_1879048706).length - 1)]), NTI1207959557);
            i_486540172 = addInt(i_486540172, 1);
          }
      } while (false);
    } while (false);

  return result_1879048709;

}

function HEX5BHEX5D_1879048651(s_1879048655, x_1879048656) {
  var result_1879048657 = [];

    var a_1879048659 = x_1879048656.a;
    var L_1879048664 = addInt(subInt(subInt((s_1879048655).length, x_1879048656.b), a_1879048659), 1);
    result_1879048657 = new Array(chckRange(L_1879048664, 0, 2147483647)); for (var i = 0 ; i < chckRange(L_1879048664, 0, 2147483647) ; ++i) { result_1879048657[i] = []; }    Label1: do {
      var i_1879048673 = 0;
      var i_486540175 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486540175 < L_1879048664)) break Label3;
            i_1879048673 = i_486540175;
            result_1879048657[chckIndx(i_1879048673, 0, (result_1879048657).length - 1)] = nimCopy(null, s_1879048655[chckIndx(addInt(i_1879048673, a_1879048659), 0, (s_1879048655).length - 1)], NTI33554439);
            i_486540175 = addInt(i_486540175, 1);
          }
      } while (false);
    } while (false);

  return result_1879048657;

}

function HEX5BHEX5D_1879048755(s_1879048759, x_1879048760) {
  var result_1879048761 = [];

    var a_1879048763 = x_1879048760.a;
    var L_1879048768 = addInt(subInt(subInt((s_1879048759).length, x_1879048760.b), a_1879048763), 1);
    result_1879048761 = new Array(chckRange(L_1879048768, 0, 2147483647)); for (var i = 0 ; i < chckRange(L_1879048768, 0, 2147483647) ; ++i) { result_1879048761[i] = ({kind: 0, base: 0}); }    Label1: do {
      var i_1879048777 = 0;
      var i_486540178 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486540178 < L_1879048768)) break Label3;
            i_1879048777 = i_486540178;
            result_1879048761[chckIndx(i_1879048777, 0, (result_1879048761).length - 1)] = nimCopy(result_1879048761[chckIndx(i_1879048777, 0, (result_1879048761).length - 1)], s_1879048759[chckIndx(addInt(i_1879048777, a_1879048763), 0, (s_1879048759).length - 1)], NTI1207959559);
            i_486540178 = addInt(i_486540178, 1);
          }
      } while (false);
    } while (false);

  return result_1879048761;

}

function HEX5BHEX5D_1879048804(s_1879048806, i_1879048807) {
  var result_1879048808 = [];

    result_1879048808 = nimCopy(null, s_1879048806[chckIndx(subInt((s_1879048806).length, i_1879048807), 0, (s_1879048806).length - 1)], NTI33554439);

  return result_1879048808;

}

function new_1879048935() {
  var result_1879048938 = null;

  BeforeRet: do {
    var r_1879048940 = null;
    r_1879048940 = ({typ: 0, str: [], list: [], opt: ({val: null})});
    result_1879048938 = r_1879048940;
    break BeforeRet;
  } while (false);

  return result_1879048938;

}

function some_1879048954(val_1879048956) {
  var result_1879048957 = ({val: null});

    if (!(!((val_1879048956 == null)))) {
    failedAssertImpl_218103864(makeNimstrLit("options.nim(129, 5) `not val.isNil` "));
    }
    
    result_1879048957.val = val_1879048956;

  return result_1879048957;

}

function none_1879048971() {
  var result_1879048977 = ({val: null});

  return result_1879048977;

}

function expandArguments_1879048205(doc_1879048206, name_1879048207, arg_1879048208, types_1879048209) {
        var Temporary4;
        var Temporary7;
              
function expandIfNeeded_1879048491(doc_1879048492, arg_1879048493, typ_1879048494) {
                  var Temporary1;

                var result_1879048495 = ({typ: 0, str: [], list: [], opt: ({val: null})});

                  if ((typ_1879048494.kind == 3)) {
                  Temporary1 = {typ: 0, str: nimCopy(null, arg_1879048493, NTI33554439), list: [], opt: ({val: null})};
                  }
                  else {
                  Temporary1 = expand_1308622933(doc_1879048492, arg_1879048493, typ_1879048494.base);
                  }
                  
                  result_1879048495 = nimCopy(result_1879048495, Temporary1, NTI1207959557);

                return result_1879048495;

              }
      var Temporary12;
      
function HEX3Aanonymous_1879048692(arg_1879048699) {
        var result_1879048702 = ({typ: 0, str: [], list: [], opt: ({val: null})});

          result_1879048702 = nimCopy(result_1879048702, expand_1308622933(doc_1879048206, arg_1879048699, base_1879048641), NTI1207959557);

        return result_1879048702;

      }
        var Temporary15;
              var Temporary18;

  var result_1879048210 = [];

  BeforeRet: do {
    if ((((types_1879048209).length == 1) && HEX3DHEX3D_1879048215(types_1879048209[chckIndx(0, 0, (types_1879048209).length - 1)], Literal_1207959700))) {
    result_1879048210 = nimCopy(null, [{typ: 0, str: nimCopy(null, arg_1879048208, NTI33554439), list: [], opt: ({val: null})}], NTI1879048211);
    break BeforeRet;
    }
    
    if ((((types_1879048209).length == 1) && HEX3DHEX3D_1879048215(types_1879048209[chckIndx(0, 0, (types_1879048209).length - 1)], Raw_1207959699))) {
    result_1879048210 = nimCopy(null, [{typ: 0, str: nsuStrip(arg_1879048208, true, true, ConstSet148), list: [], opt: ({val: null})}], NTI1879048211);
    break BeforeRet;
    }
    
    var args_1879048250 = parseXidocArguments_1325404796(arg_1879048208);
    var starPos_1879048259 = [none_1879048251()];
    var questionPos_1879048270 = nimCopy(null, HEX2EHEX2E_939524947(0, -1), NTI721420349);
    Label1: do {
      var index_1879048293 = 0;
      var typ_1879048294 = ({kind: 0, base: 0});
      var i_486540087 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486540087 < (types_1879048209).length)) break Label3;
            index_1879048293 = i_486540087;
            typ_1879048294 = nimCopy(typ_1879048294, types_1879048209[chckIndx(i_486540087, 0, (types_1879048209).length - 1)], NTI1207959559);
            switch (typ_1879048294.kind) {
            case 2:
              if (isNone_1879048299(starPos_1879048259[0])) {
              starPos_1879048259[0] = nimCopy(starPos_1879048259[0], some_1879048304(index_1879048293), NTI1879048225);
              }
              else {
                raiseException({message: makeNimstrLit("There can only be one star parameter"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
              }
              
              break Label1;
              break;
            case 1:
              if (HEX3DHEX3D_1879048374(questionPos_1879048270, HEX2EHEX2E_939524947(0, -1))) {
              questionPos_1879048270 = nimCopy(questionPos_1879048270, HEX2EHEX2E_939524947(index_1879048293, index_1879048293), NTI721420349);
              }
              else {
                questionPos_1879048270.b = index_1879048293;
              }
              
              break;
            case 0:
            case 3:
            case 4:
              break;
            }
            i_486540087 = addInt(i_486540087, 1);
          }
      } while (false);
    } while (false);
    if (isSome_1879048393(starPos_1879048259[0])) {
    var minLen_1879048401 = subInt((types_1879048209).length, 1);
    if (((args_1879048250).length < minLen_1879048401)) {
    raiseException({message: nsuFormatOpenArray(makeNimstrLit("Command $1 needs at least $2 arguments, $3 given"), [nimCopy(null, name_1879048207, NTI33554439), HEX24_335544323(minLen_1879048401), HEX24_335544323((args_1879048250).length)]), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    }
    
    }
    else {
      var minLen_1879048477 = subInt((types_1879048209).length, len_1879048466(questionPos_1879048270));
      var maxLen_1879048481 = (types_1879048209).length;
        if (((args_1879048250).length < minLen_1879048477)) Temporary4 = true; else {          Temporary4 = (maxLen_1879048481 < (args_1879048250).length);        }      if (Temporary4) {
      raiseException({message: nsuFormatOpenArray(makeNimstrLit("Command $1 needs at least $2 and at most $3 arguments, $4 given"), [nimCopy(null, name_1879048207, NTI33554439), HEX24_335544323(minLen_1879048477), HEX24_335544323(maxLen_1879048481), HEX24_335544323((args_1879048250).length)]), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      }
      
    }
    
    if (isSome_1879048393(starPos_1879048259[0])) {
    Label5: do {
      Label6: do {
        var index_1879048613 = 0;
        var typ_1879048614 = ({kind: 0, base: 0});
        var colontmp__486540090 = [];
        colontmp__486540090 = HEX5BHEX5D_1879048561(types_1879048209, HEX2EHEX2E_939524947(0, subInt((Temporary7 = get_1879048520(starPos_1879048259[0]), Temporary7)[0][Temporary7[1]], 1)));
        var i_486540092 = 0;
        var L_486540093 = (colontmp__486540090).length;
        Label8: do {
            Label9: while (true) {
            if (!(i_486540092 < L_486540093)) break Label9;
              index_1879048613 = i_486540092;
              typ_1879048614 = nimCopy(typ_1879048614, colontmp__486540090[chckIndx(i_486540092, 0, (colontmp__486540090).length - 1)], NTI1207959559);
              var val_1879048615 = expandIfNeeded_1879048491(doc_1879048206, args_1879048250[chckIndx(index_1879048613, 0, (args_1879048250).length - 1)], typ_1879048614);
              var Temporary10 = nimCopy(null, val_1879048615, NTI1207959557);
              result_1879048210.push(Temporary10);;
              i_486540092 = addInt(i_486540092, 1);
              if (!(((colontmp__486540090).length == L_486540093))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    } while (false);
    Label11: do {
      var start_1879048636 = (Temporary12 = get_1879048520(starPos_1879048259[0]), Temporary12)[0][Temporary12[1]];
      var ende_1879048640 = subInt((types_1879048209).length, start_1879048636);
      var base_1879048641 = types_1879048209[chckIndx(start_1879048636, 0, (types_1879048209).length - 1)].base;
      var vals_1879048725 = map_1879048703(HEX5BHEX5D_1879048651(args_1879048250, HEX2EHEX2E_872415312(start_1879048636, ende_1879048640)), HEX3Aanonymous_1879048692);
      result_1879048210.push({typ: 2, list: nimCopy(null, vals_1879048725, NTI1879048532), str: [], opt: ({val: null})});;
    } while (false);
    Label13: do {
      Label14: do {
        var index_1879048783 = 0;
        var typ_1879048784 = ({kind: 0, base: 0});
        var colontmp__486540096 = [];
        colontmp__486540096 = HEX5BHEX5D_1879048755(types_1879048209, HEX2EHEX2E_872415312(addInt((Temporary15 = get_1879048520(starPos_1879048259[0]), Temporary15)[0][Temporary15[1]], 1), 1));
        var i_486540097 = 0;
        var L_486540098 = (colontmp__486540096).length;
        Label16: do {
            Label17: while (true) {
            if (!(i_486540097 < L_486540098)) break Label17;
              index_1879048783 = i_486540097;
              typ_1879048784 = nimCopy(typ_1879048784, colontmp__486540096[chckIndx(i_486540097, 0, (colontmp__486540096).length - 1)], NTI1207959559);
              var index_1879048803 = subInt(subInt(subInt((types_1879048209).length, index_1879048783), (Temporary18 = get_1879048520(starPos_1879048259[0]), Temporary18)[0][Temporary18[1]]), 1);
              var val_1879048812 = expandIfNeeded_1879048491(doc_1879048206, HEX5BHEX5D_1879048804(args_1879048250, index_1879048803), typ_1879048784);
              var Temporary19 = nimCopy(null, val_1879048812, NTI1207959557);
              result_1879048210.push(Temporary19);;
              i_486540097 = addInt(i_486540097, 1);
              if (!(((colontmp__486540096).length == L_486540098))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    } while (false);
    }
    else {
      Label20: do {
        Label21: do {
          var index_1879048843 = 0;
          var typ_1879048844 = ({kind: 0, base: 0});
          var colontmp__486540101 = [];
          colontmp__486540101 = HEX5BHEX5D_1879048561(types_1879048209, HEX2EHEX2E_939524947(0, subInt(questionPos_1879048270.a, 1)));
          var i_486540102 = 0;
          var L_486540103 = (colontmp__486540101).length;
          Label22: do {
              Label23: while (true) {
              if (!(i_486540102 < L_486540103)) break Label23;
                index_1879048843 = i_486540102;
                typ_1879048844 = nimCopy(typ_1879048844, colontmp__486540101[chckIndx(i_486540102, 0, (colontmp__486540101).length - 1)], NTI1207959559);
                var val_1879048845 = expandIfNeeded_1879048491(doc_1879048206, args_1879048250[chckIndx(index_1879048843, 0, (args_1879048250).length - 1)], typ_1879048844);
                var Temporary24 = nimCopy(null, val_1879048845, NTI1207959557);
                result_1879048210.push(Temporary24);;
                i_486540102 = addInt(i_486540102, 1);
                if (!(((colontmp__486540101).length == L_486540103))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
      } while (false);
      Label25: do {
        var minLen_1879048913 = subInt((types_1879048209).length, len_1879048466(questionPos_1879048270));
        var start_1879048914 = questionPos_1879048270.a;
        Label26: do {
          var index_1879048930 = 0;
          var typ_1879048931 = ({kind: 0, base: 0});
          var colontmp__486540106 = [];
          colontmp__486540106 = HEX5BHEX5D_1879048561(types_1879048209, questionPos_1879048270);
          var i_486540107 = 0;
          var L_486540108 = (colontmp__486540106).length;
          Label27: do {
              Label28: while (true) {
              if (!(i_486540107 < L_486540108)) break Label28;
                index_1879048930 = i_486540107;
                typ_1879048931 = nimCopy(typ_1879048931, colontmp__486540106[chckIndx(i_486540107, 0, (colontmp__486540106).length - 1)], NTI1207959559);
                if ((index_1879048930 < subInt((args_1879048250).length, minLen_1879048913))) {
                var val_1879048953 = new_1879048935();
                val_1879048953 = nimCopy(val_1879048953, expand_1308622933(doc_1879048206, args_1879048250[chckIndx(addInt(start_1879048914, index_1879048930), 0, (args_1879048250).length - 1)], typ_1879048931.base), NTI1207959557);
                result_1879048210.push({typ: 3, opt: some_1879048954(val_1879048953), str: [], list: []});;
                }
                else {
                result_1879048210.push({typ: 3, opt: none_1879048971(), str: [], list: []});;
                }
                
                i_486540107 = addInt(i_486540107, 1);
                if (!(((colontmp__486540106).length == L_486540108))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
      } while (false);
      Label29: do {
        Label30: do {
          var index_1879049003 = 0;
          var typ_1879049004 = ({kind: 0, base: 0});
          var colontmp__486540111 = [];
          colontmp__486540111 = HEX5BHEX5D_1879048755(types_1879048209, HEX2EHEX2E_872415312(addInt(questionPos_1879048270.b, 1), 1));
          var i_486540112 = 0;
          var L_486540113 = (colontmp__486540111).length;
          Label31: do {
              Label32: while (true) {
              if (!(i_486540112 < L_486540113)) break Label32;
                index_1879049003 = i_486540112;
                typ_1879049004 = nimCopy(typ_1879049004, colontmp__486540111[chckIndx(i_486540112, 0, (colontmp__486540111).length - 1)], NTI1207959559);
                var index_1879049008 = subInt(subInt(subInt((types_1879048209).length, index_1879049003), questionPos_1879048270.b), 1);
                var val_1879049013 = expandIfNeeded_1879048491(doc_1879048206, HEX5BHEX5D_1879048804(args_1879048250, index_1879049008), typ_1879049004);
                var Temporary33 = nimCopy(null, val_1879049013, NTI1207959557);
                result_1879048210.push(Temporary33);;
                i_486540112 = addInt(i_486540112, 1);
                if (!(((colontmp__486540111).length == L_486540113))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
      } while (false);
    }
    
  } while (false);

  return result_1879048210;

}

function to_1862271050(val_1862271052) {
    var Temporary1;

  var result_1862271054 = [];

    var Temporary1 = val_1862271052;
    if (ConstSet187[Temporary1.typ]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'XidocValue\' using \'typ = "), reprDiscriminant(Temporary1.typ, NTI1207959556)); }
    result_1862271054 = nimCopy(null, Temporary1.str, NTI33554439);

  return result_1862271054;

}

function HEX21_1207959672(typ_1207959673) {
  var result_1207959674 = ({kind: 0, base: 0});

    result_1207959674.kind = 0;
    result_1207959674.base = typ_1207959673;

  return result_1207959674;

}

function slotsNeeded_1040187441(count_1040187442) {
  var result_1040187443 = 0;

    result_1040187443 = nextPowerOfTwo_704643275(addInt(divInt(mulInt(count_1040187442, 3), 2), 4));

  return result_1040187443;

}

function isFilled_1040187430(hcode_1040187431) {
  var result_1040187432 = false;

    result_1040187432 = !((hcode_1040187431 == 0));

  return result_1040187432;

}

function nextTry_1040187433(h_1040187434, maxHash_1040187435) {
  var result_1040187436 = 0;

    result_1040187436 = (addInt(h_1040187434, 1) & maxHash_1040187435);

  return result_1040187436;

}

function rawGet_1946159810(t_1946159812, key_1946159813, hc_1946159814, hc_1946159814_Idx) {
            var Temporary3;

  var result_1946159815 = 0;

  BeforeRet: do {
    hc_1946159814[hc_1946159814_Idx] = hash_1056965030(key_1946159813);
    if ((hc_1946159814[hc_1946159814_Idx] == 0)) {
    hc_1946159814[hc_1946159814_Idx] = 314159265;
    }
    
    if (((t_1946159812.data).length == 0)) {
    result_1946159815 = -1;
    break BeforeRet;
    }
    
    var h_1946159877 = (hc_1946159814[hc_1946159814_Idx] & (t_1946159812.data).length - 1);
    Label1: do {
        Label2: while (true) {
        if (!isFilled_1040187430(t_1946159812.data[chckIndx(h_1946159877, 0, (t_1946159812.data).length - 1)].Field0)) break Label2;
            if (!(t_1946159812.data[chckIndx(h_1946159877, 0, (t_1946159812.data).length - 1)].Field0 == hc_1946159814[hc_1946159814_Idx])) Temporary3 = false; else {              Temporary3 = eqStrings(t_1946159812.data[chckIndx(h_1946159877, 0, (t_1946159812.data).length - 1)].Field2, key_1946159813);            }          if (Temporary3) {
          result_1946159815 = h_1946159877;
          break BeforeRet;
          }
          
          h_1946159877 = nextTry_1040187433(h_1946159877, (t_1946159812.data).length - 1);
        }
    } while (false);
    result_1946159815 = subInt(-1, h_1946159877);
  } while (false);

  return result_1946159815;

}

function mustRehash_1946160053(t_1946160055) {
  var result_1946160056 = false;

    if (!((t_1946160055.counter < (t_1946160055.data).length))) {
    failedAssertImpl_218103864(makeNimstrLit("hashcommon.nim(29, 9) `\x0At.counter < t.dataLen` "));
    }
    
    result_1946160056 = ((mulInt((t_1946160055.data).length, 2) < mulInt(t_1946160055.counter, 3)) || (subInt((t_1946160055.data).length, t_1946160055.counter) < 4));

  return result_1946160056;

}

function rawGetKnownHC_1946160548(t_1946160551, key_1946160552, hc_1946160553) {
  var result_1946160554 = 0;

  BeforeRet: do {
    if (((t_1946160551.data).length == 0)) {
    result_1946160554 = -1;
    break BeforeRet;
    }
    
    var h_1946160616 = (hc_1946160553 & (t_1946160551.data).length - 1);
    Label1: do {
        Label2: while (true) {
        if (!isFilled_1040187430(t_1946160551.data[chckIndx(h_1946160616, 0, (t_1946160551.data).length - 1)].Field0)) break Label2;
          if (((t_1946160551.data[chckIndx(h_1946160616, 0, (t_1946160551.data).length - 1)].Field0 == hc_1946160553) && eqStrings(t_1946160551.data[chckIndx(h_1946160616, 0, (t_1946160551.data).length - 1)].Field2, key_1946160552))) {
          result_1946160554 = h_1946160616;
          break BeforeRet;
          }
          
          h_1946160616 = nextTry_1040187433(h_1946160616, (t_1946160551.data).length - 1);
        }
    } while (false);
    result_1946160554 = subInt(-1, h_1946160616);
  } while (false);

  return result_1946160554;

}

function rawInsert_1946160917(s_1946160919, data_1946160920, data_1946160920_Idx, key_1946160921, hc_1946160922, h_1946160923) {
    if (((data_1946160920[data_1946160920_Idx]).length == 0)) {
    var correctSizeHEX60gensym164_1946160983 = slotsNeeded_1040187441(64);
    s_1946160919.first = -1;
    s_1946160919.last = -1;
    s_1946160919.counter = 0;
    s_1946160919.data = new Array(chckRange(correctSizeHEX60gensym164_1946160983, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym164_1946160983, 0, 2147483647) ; ++i) { s_1946160919.data[i] = {Field0: 0, Field1: 0, Field2: []}; }    }
    
    data_1946160920[data_1946160920_Idx][chckIndx(h_1946160923, 0, (data_1946160920[data_1946160920_Idx]).length - 1)].Field2 = nimCopy(null, key_1946160921, NTI33554439);
    data_1946160920[data_1946160920_Idx][chckIndx(h_1946160923, 0, (data_1946160920[data_1946160920_Idx]).length - 1)].Field0 = hc_1946160922;
    data_1946160920[data_1946160920_Idx][chckIndx(h_1946160923, 0, (data_1946160920[data_1946160920_Idx]).length - 1)].Field1 = -1;
    if ((s_1946160919.first < 0)) {
    s_1946160919.first = h_1946160923;
    }
    
    if ((0 <= s_1946160919.last)) {
    data_1946160920[data_1946160920_Idx][chckIndx(s_1946160919.last, 0, (data_1946160920[data_1946160920_Idx]).length - 1)].Field1 = h_1946160923;
    }
    
    s_1946160919.last = h_1946160923;

  
}

function enlarge_1946160247(s_1946160249) {
    var n_1946160251 = [];
    n_1946160251 = new Array(chckRange(mulInt((s_1946160249.data).length, 2), 0, 2147483647)); for (var i = 0 ; i < chckRange(mulInt((s_1946160249.data).length, 2), 0, 2147483647) ; ++i) { n_1946160251[i] = {Field0: 0, Field1: 0, Field2: []}; }    var h_1946160314 = s_1946160249.first;
    s_1946160249.first = -1;
    s_1946160249.last = -1;
    var Temporary1 = s_1946160249.data; s_1946160249.data = n_1946160251; n_1946160251 = Temporary1;    Label2: do {
        Label3: while (true) {
        if (!(0 <= h_1946160314)) break Label3;
          var nxt_1946160376 = n_1946160251[chckIndx(h_1946160314, 0, (n_1946160251).length - 1)].Field1;
          if (isFilled_1040187430(n_1946160251[chckIndx(h_1946160314, 0, (n_1946160251).length - 1)].Field0)) {
          var j_1946160791 = subInt(-1, rawGetKnownHC_1946160548(s_1946160249, n_1946160251[chckIndx(h_1946160314, 0, (n_1946160251).length - 1)].Field2, n_1946160251[chckIndx(h_1946160314, 0, (n_1946160251).length - 1)].Field0));
          rawInsert_1946160917(s_1946160249, s_1946160249, "data", n_1946160251[chckIndx(h_1946160314, 0, (n_1946160251).length - 1)].Field2, n_1946160251[chckIndx(h_1946160314, 0, (n_1946160251).length - 1)].Field0, j_1946160791);
          }
          
          h_1946160314 = nxt_1946160376;
        }
    } while (false);

  
}

function incl_1946159723(s_1946159725, key_1946159726) {
    if (((s_1946159725.data).length == 0)) {
    var correctSizeHEX60gensym155_1946159787 = slotsNeeded_1040187441(64);
    s_1946159725.first = -1;
    s_1946159725.last = -1;
    s_1946159725.counter = 0;
    s_1946159725.data = new Array(chckRange(correctSizeHEX60gensym155_1946159787, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym155_1946159787, 0, 2147483647) ; ++i) { s_1946159725.data[i] = {Field0: 0, Field1: 0, Field2: []}; }    }
    
    var hc_1946159802 = [0];
    var index_1946160052 = rawGet_1946159810(s_1946159725, key_1946159726, hc_1946159802, 0);
    if ((index_1946160052 < 0)) {
    if (mustRehash_1946160053(s_1946159725)) {
    enlarge_1946160247(s_1946159725);
    index_1946160052 = rawGetKnownHC_1946160548(s_1946159725, key_1946159726, hc_1946159802[0]);
    }
    
    rawInsert_1946160917(s_1946159725, s_1946159725, "data", key_1946159726, hc_1946159802[0], subInt(-1, index_1946160052));
    s_1946159725.counter = addInt(s_1946159725.counter, 1);
    }
    

  
}

function HEX7BHEX7D_1879049227(cmd_1879049228, arg_1879049229) {
    var Temporary1;

  var result_1879049230 = [];

    if (nsuStartsWith(cmd_1879049228, makeNimstrLit("\\"))) {
    Temporary1 = [];
    }
    else {
    Temporary1 = makeNimstrLit("\\");
    }
    
    result_1879049230 = nimCopy(null, (Temporary1 || []).concat(cmd_1879049228 || [],makeNimstrLit("{") || [],arg_1879049229 || [],makeNimstrLit("}") || []), NTI33554439);

  return result_1879049230;

}

function translate_1224736808(phrase_1224736809, lang_1224736810) {
  var result_1224736811 = [];

    result_1224736811 = nimCopy(null, translations_1224736789[chckIndx(phrase_1224736809, 0, (translations_1224736789).length - 1)][chckIndx(lang_1224736810, 0, (translations_1224736789[chckIndx(phrase_1224736809, 0, (translations_1224736789).length - 1)]).length - 1)], NTI33554439);

  return result_1224736811;

}

function isSome_1124074069(self_1124074071) {
  var result_1124074072 = false;

    result_1124074072 = self_1124074071.has;

  return result_1124074072;

}

function isNone_1124074094(self_1124074096) {
  var result_1124074097 = false;

    result_1124074097 = !(self_1124074096.has);

  return result_1124074097;

}

function get_1124074086(self_1124074088) {
  var result_1124074089 = 0;

    if (isNone_1124074094(self_1124074088)) {
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI1006632980, name: null, trace: [], up: null}, "UnpackDefect");
    }
    
    result_1124074089 = self_1124074088["val"];

  return result_1124074089;

}

function HEX5BHEX5D_1912602936(s_1912602938, i_1912602939) {
  var result_1912602940 = null;

    result_1912602940 = s_1912602938[chckIndx(subInt((s_1912602938).length, i_1912602939), 0, (s_1912602938).length - 1)];

  return result_1912602940;

}

function HEX3F_1207959693(typ_1207959694) {
  var result_1207959695 = ({kind: 0, base: 0});

    result_1207959695.kind = 1;
    result_1207959695.base = typ_1207959694;

  return result_1207959695;

}

function isNone_1191182386(self_1191182388) {
  var result_1191182389 = false;

    result_1191182389 = !(self_1191182388.has);

  return result_1191182389;

}

function get_1912602965(self_1912602967) {
  var result_1912602968 = [];

    if (isNone_1191182386(self_1912602967)) {
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI1006632980, name: null, trace: [], up: null}, "UnpackDefect");
    }
    
    result_1912602968 = self_1912602967["val"];

  return result_1912602968;

}

function isSome_1912603067(self_1912603069) {
  var result_1912603070 = false;

    result_1912603070 = !((self_1912603069.val == null));

  return result_1912603070;

}

function none_1912603080() {
  var result_1912603087 = ({val: [], has: false});

  return result_1912603087;

}

function map_1912603056(self_1912603059, callback_1912603061) {
    var Temporary1;

  var result_1912603062 = ({val: [], has: false});

    if (isSome_1912603067(self_1912603059)) {
    Temporary1 = some_1912603075(callback_1912603061(self_1912603059.val));
    }
    else {
    Temporary1 = none_1912603080();
    }
    
    result_1912603062 = nimCopy(result_1912603062, Temporary1, NTI1207959629);

  return result_1912603062;

}

function to_1912603022(val_1912603025) {
    var Temporary1;
    
function HEX3Aanonymous_1912603032(x_1912603043) {
      var result_1912603046 = [];

        result_1912603046 = nimCopy(null, to_1862271050(x_1912603043), NTI33554439);

      return result_1912603046;

    }

  var result_1912603027 = ({val: [], has: false});

    var Temporary1 = val_1912603025;
    if (ConstSet188[Temporary1.typ]===undefined) { raiseFieldError2(makeNimstrLit("field \'opt\' is not accessible for type \'XidocValue\' using \'typ = "), reprDiscriminant(Temporary1.typ, NTI1207959556)); }
    result_1912603027 = nimCopy(result_1912603027, map_1912603056(Temporary1.opt, HEX3Aanonymous_1912603032), NTI1207959629);

  return result_1912603027;

}

function binarySearch_939525109(c_939525110, tab_939525111, len_939525112, stride_939525113) {
      var Temporary3;

  var result_939525114 = 0;

  BeforeRet: do {
    var n_939525115 = len_939525112;
    var t_939525116 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(1 < n_939525115)) break Label2;
          var m_939525117 = divInt(n_939525115, 2);
          var p_939525118 = addInt(t_939525116, mulInt(m_939525117, stride_939525113));
          if ((tab_939525111[chckIndx(p_939525118, 0, (tab_939525111).length - 1)] <= ((c_939525110) | 0))) {
          t_939525116 = p_939525118;
          n_939525115 = subInt(n_939525115, m_939525117);
          }
          else {
            n_939525115 = m_939525117;
          }
          
        }
    } while (false);
      if (!!((n_939525115 == 0))) Temporary3 = false; else {        Temporary3 = (tab_939525111[chckIndx(t_939525116, 0, (tab_939525111).length - 1)] <= ((c_939525110) | 0));      }    if (Temporary3) {
    result_939525114 = t_939525116;
    break BeforeRet;
    }
    
    result_939525114 = -1;
    break BeforeRet;
  } while (false);

  return result_939525114;

}

function nucisUpper(c_939525239) {
      var Temporary1;
      var Temporary2;
      var Temporary3;

  var result_939525240 = false;

  BeforeRet: do {
    var c_939525241 = c_939525239;
    var p_939525249 = binarySearch_939525109(c_939525241, toLowerRanges_939525019, 45, 3);
      if (!(0 <= p_939525249)) Temporary2 = false; else {        Temporary2 = (toLowerRanges_939525019[chckIndx(p_939525249, 0, (toLowerRanges_939525019).length - 1)] <= ((c_939525241) | 0));      }      if (!Temporary2) Temporary1 = false; else {        Temporary1 = (((c_939525241) | 0) <= toLowerRanges_939525019[chckIndx(addInt(p_939525249, 1), 0, (toLowerRanges_939525019).length - 1)]);      }    if (Temporary1) {
    result_939525240 = true;
    break BeforeRet;
    }
    
    p_939525249 = binarySearch_939525109(c_939525241, toLowerSinglets_939525020, 610, 2);
      if (!(0 <= p_939525249)) Temporary3 = false; else {        Temporary3 = (((c_939525241) | 0) == toLowerSinglets_939525020[chckIndx(p_939525249, 0, (toLowerSinglets_939525020).length - 1)]);      }    if (Temporary3) {
    result_939525240 = true;
    break BeforeRet;
    }
    
  } while (false);

  return result_939525240;

}

function nucisLower(c_939525220) {
      var Temporary1;
      var Temporary2;
      var Temporary3;

  var result_939525221 = false;

  BeforeRet: do {
    var c_939525222 = c_939525220;
    var p_939525230 = binarySearch_939525109(c_939525222, toUpperRanges_939525021, 46, 3);
      if (!(0 <= p_939525230)) Temporary2 = false; else {        Temporary2 = (toUpperRanges_939525021[chckIndx(p_939525230, 0, (toUpperRanges_939525021).length - 1)] <= ((c_939525222) | 0));      }      if (!Temporary2) Temporary1 = false; else {        Temporary1 = (((c_939525222) | 0) <= toUpperRanges_939525021[chckIndx(addInt(p_939525230, 1), 0, (toUpperRanges_939525021).length - 1)]);      }    if (Temporary1) {
    result_939525221 = true;
    break BeforeRet;
    }
    
    p_939525230 = binarySearch_939525109(c_939525222, toUpperSinglets_939525022, 624, 2);
      if (!(0 <= p_939525230)) Temporary3 = false; else {        Temporary3 = (((c_939525222) | 0) == toUpperSinglets_939525022[chckIndx(p_939525230, 0, (toUpperSinglets_939525022).length - 1)]);      }    if (Temporary3) {
    result_939525221 = true;
    break BeforeRet;
    }
    
  } while (false);

  return result_939525221;

}

function nucisAlpha(c_939525258) {
      var Temporary1;
      var Temporary2;
      var Temporary3;

  var result_939525259 = false;

  BeforeRet: do {
    if ((nucisUpper(c_939525258) || nucisLower(c_939525258))) {
    result_939525259 = true;
    break BeforeRet;
    }
    
    var c_939525260 = c_939525258;
    var p_939525269 = binarySearch_939525109(c_939525260, alphaRanges_939525024, 471, 2);
      if (!(0 <= p_939525269)) Temporary2 = false; else {        Temporary2 = (alphaRanges_939525024[chckIndx(p_939525269, 0, (alphaRanges_939525024).length - 1)] <= ((c_939525260) | 0));      }      if (!Temporary2) Temporary1 = false; else {        Temporary1 = (((c_939525260) | 0) <= alphaRanges_939525024[chckIndx(addInt(p_939525269, 1), 0, (alphaRanges_939525024).length - 1)]);      }    if (Temporary1) {
    result_939525259 = true;
    break BeforeRet;
    }
    
    p_939525269 = binarySearch_939525109(c_939525260, alphaSinglets_939525025, 147, 1);
      if (!(0 <= p_939525269)) Temporary3 = false; else {        Temporary3 = (((c_939525260) | 0) == alphaSinglets_939525025[chckIndx(p_939525269, 0, (alphaSinglets_939525025).length - 1)]);      }    if (Temporary3) {
    result_939525259 = true;
    break BeforeRet;
    }
    
  } while (false);

  return result_939525259;

}

function nucisTitle(c_939525297) {
  var result_939525298 = false;

  BeforeRet: do {
    result_939525298 = (nucisUpper(c_939525297) && nucisLower(c_939525297));
    break BeforeRet;
  } while (false);

  return result_939525298;

}

function nucisWhiteSpace(c_939525300) {
      var Temporary1;
      var Temporary2;

  var result_939525301 = false;

  BeforeRet: do {
    var c_939525302 = c_939525300;
    var p_939525311 = binarySearch_939525109(c_939525302, spaceRanges_939525026, 10, 2);
      if (!(0 <= p_939525311)) Temporary2 = false; else {        Temporary2 = (spaceRanges_939525026[chckIndx(p_939525311, 0, (spaceRanges_939525026).length - 1)] <= ((c_939525302) | 0));      }      if (!Temporary2) Temporary1 = false; else {        Temporary1 = (((c_939525302) | 0) <= spaceRanges_939525026[chckIndx(addInt(p_939525311, 1), 0, (spaceRanges_939525026).length - 1)]);      }    if (Temporary1) {
    result_939525301 = true;
    break BeforeRet;
    }
    
  } while (false);

  return result_939525301;

}

function nuctoLower(c_939525120) {
      var Temporary1;
      var Temporary2;
      var Temporary3;

  var result_939525121 = 0;

  BeforeRet: do {
    var c_939525122 = c_939525120;
    var p_939525131 = binarySearch_939525109(c_939525122, toLowerRanges_939525019, 45, 3);
      if (!(0 <= p_939525131)) Temporary2 = false; else {        Temporary2 = (toLowerRanges_939525019[chckIndx(p_939525131, 0, (toLowerRanges_939525019).length - 1)] <= ((c_939525122) | 0));      }      if (!Temporary2) Temporary1 = false; else {        Temporary1 = (((c_939525122) | 0) <= toLowerRanges_939525019[chckIndx(addInt(p_939525131, 1), 0, (toLowerRanges_939525019).length - 1)]);      }    if (Temporary1) {
    result_939525121 = ((subInt(addInt(((c_939525122) | 0), toLowerRanges_939525019[chckIndx(addInt(p_939525131, 2), 0, (toLowerRanges_939525019).length - 1)]), 500)) | 0);
    break BeforeRet;
    }
    
    p_939525131 = binarySearch_939525109(c_939525122, toLowerSinglets_939525020, 610, 2);
      if (!(0 <= p_939525131)) Temporary3 = false; else {        Temporary3 = (((c_939525122) | 0) == toLowerSinglets_939525020[chckIndx(p_939525131, 0, (toLowerSinglets_939525020).length - 1)]);      }    if (Temporary3) {
    result_939525121 = ((subInt(addInt(((c_939525122) | 0), toLowerSinglets_939525020[chckIndx(addInt(p_939525131, 1), 0, (toLowerSinglets_939525020).length - 1)]), 500)) | 0);
    break BeforeRet;
    }
    
    result_939525121 = c_939525122;
    break BeforeRet;
  } while (false);

  return result_939525121;

}

function npegsrawMatch(s_1140851373, p_1140851374, start_1140851375, c_1140851376) {
    
function matchIt_1140851428(sHEX60gensym26_1140851429, pHEX60gensym26_1140851430, startHEX60gensym26_1140851431, cHEX60gensym26_1140851432) {
          var Temporary1;
                    var Temporary5;
                      var Temporary6;
                      var Temporary7;
                var Temporary10;
                  var Temporary11;
                  var Temporary12;
                var Temporary13;
                var Temporary14;
                  var Temporary15;
                  var Temporary16;
                  var Temporary17;
                var Temporary18;
                var Temporary19;
                var Temporary20;
                var Temporary21;
                  var Temporary22;
                  var Temporary23;
                  var Temporary24;
                var Temporary25;
                var Temporary26;
                var Temporary27;
                var Temporary28;
                var Temporary29;
                var Temporary30;
                  var Temporary31;
                  var Temporary32;
                  var Temporary33;
                var Temporary34;
                var Temporary35;
                var Temporary36;
                var Temporary37;
                var Temporary38;
                var Temporary39;
                var Temporary40;
                var Temporary41;
                  var Temporary42;
                  var Temporary43;
                  var Temporary44;
                var Temporary45;
                var Temporary46;
                var Temporary47;
                var Temporary48;
                var Temporary49;
                var Temporary50;
                var Temporary51;
                var Temporary52;
                var Temporary53;
                var Temporary54;
                  var Temporary55;
                  var Temporary56;
                  var Temporary57;
                var Temporary58;
                var Temporary59;
                var Temporary60;
                var Temporary61;
                var Temporary62;
                var Temporary63;
                var Temporary64;
                var Temporary65;
                var Temporary66;
                var Temporary67;
                var Temporary68;
                var Temporary69;
                  var Temporary70;
                  var Temporary71;
                var Temporary74;
                      var Temporary77;
                        var Temporary78;
                        var Temporary79;
                      var Temporary80;
                      var Temporary81;
                        var Temporary82;
                        var Temporary83;
                        var Temporary84;
                      var Temporary85;
                      var Temporary86;
                      var Temporary87;
                      var Temporary88;
                        var Temporary89;
                        var Temporary90;
                        var Temporary91;
                      var Temporary92;
                      var Temporary93;
                      var Temporary94;
                      var Temporary95;
                      var Temporary96;
                      var Temporary97;
                        var Temporary98;
                        var Temporary99;
                        var Temporary100;
                      var Temporary101;
                      var Temporary102;
                      var Temporary103;
                      var Temporary104;
                      var Temporary105;
                      var Temporary106;
                      var Temporary107;
                      var Temporary108;
                        var Temporary109;
                        var Temporary110;
                        var Temporary111;
                      var Temporary112;
                      var Temporary113;
                      var Temporary114;
                      var Temporary115;
                      var Temporary116;
                      var Temporary117;
                      var Temporary118;
                      var Temporary119;
                      var Temporary120;
                      var Temporary121;
                        var Temporary122;
                        var Temporary123;
                        var Temporary124;
                      var Temporary125;
                      var Temporary126;
                      var Temporary127;
                      var Temporary128;
                      var Temporary129;
                      var Temporary130;
                      var Temporary131;
                      var Temporary132;
                      var Temporary133;
                      var Temporary134;
                      var Temporary135;
                      var Temporary136;
                        var Temporary137;
                        var Temporary138;
                  var Temporary141;
            var Temporary142;
              var Temporary143;
            var Temporary144;
              var Temporary145;
          var Temporary146;
            var Temporary148;
                  var Temporary151;
                  var Temporary152;
            var Temporary154;
                  var Temporary157;
                  var Temporary158;
                var Temporary161;
                var Temporary162;
                var Temporary165;
                var Temporary166;
                var Temporary169;
                var Temporary170;
          var Temporary171;
                var Temporary176;
                  var Temporary177;
          var Temporary178;
          var Temporary179;
          var Temporary180;
          var Temporary181;
          var Temporary182;
          var Temporary183;
            var Temporary184;
            var Temporary185;
              var Temporary186;
              var Temporary187;
            var Temporary188;
            var Temporary189;
          
function matchBackRef_1140851434(sHEX60gensym26_1140851435, pHEX60gensym26_1140851436, startHEX60gensym26_1140851437, cHEX60gensym26_1140851438) {
              var Temporary1;
                var Temporary2;

            var result_1140851439 = 0;

            BeforeRet: do {
              var Temporary1 = pHEX60gensym26_1140851436;
              if (ConstSet279[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'index\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI1140850693)); }
              var indexHEX60gensym26_1140851440 = Temporary1.index;
              if ((indexHEX60gensym26_1140851440 < 0)) {
              indexHEX60gensym26_1140851440 = addInt(indexHEX60gensym26_1140851440, cHEX60gensym26_1140851438.ml);
              }
              
                if ((indexHEX60gensym26_1140851440 < 0)) Temporary2 = true; else {                  Temporary2 = (cHEX60gensym26_1140851438.ml <= indexHEX60gensym26_1140851440);                }              if (Temporary2) {
              result_1140851439 = -1;
              break BeforeRet;
              }
              
              var colontmp__486540220 = nimCopy(null, cHEX60gensym26_1140851438.matches[chckIndx(indexHEX60gensym26_1140851440, 0, (cHEX60gensym26_1140851438.matches).length - 1)], NTI1140851221);
              var aHEX60gensym26_1140851445 = colontmp__486540220["Field0"];
              var bHEX60gensym26_1140851446 = colontmp__486540220["Field1"];
              var nHEX60gensym26_1140851447 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});
              switch (pHEX60gensym26_1140851436.kind) {
              case 25:
                nHEX60gensym26_1140851447 = nimCopy(nHEX60gensym26_1140851447, {kind: 9, term: substr_33557906(sHEX60gensym26_1140851435, aHEX60gensym26_1140851445, bHEX60gensym26_1140851446), ch: 0, charChoice: null, nt: null, index: 0, sons: []}, NTI1140850696);
                break;
              case 27:
                nHEX60gensym26_1140851447 = nimCopy(nHEX60gensym26_1140851447, {kind: 11, term: substr_33557906(sHEX60gensym26_1140851435, aHEX60gensym26_1140851445, bHEX60gensym26_1140851446), ch: 0, charChoice: null, nt: null, index: 0, sons: []}, NTI1140850696);
                break;
              case 26:
                nHEX60gensym26_1140851447 = nimCopy(nHEX60gensym26_1140851447, {kind: 10, term: substr_33557906(sHEX60gensym26_1140851435, aHEX60gensym26_1140851445, bHEX60gensym26_1140851446), ch: 0, charChoice: null, nt: null, index: 0, sons: []}, NTI1140850696);
                break;
              default: 
                if (true) {
                failedAssertImpl_218103864(makeNimstrLit("pegs.nim(579, 19) `false` impossible case"));
                }
                
                break;
              }
              result_1140851439 = matchIt_1140851428(sHEX60gensym26_1140851435, nHEX60gensym26_1140851447, startHEX60gensym26_1140851437, cHEX60gensym26_1140851438);
            } while (false);

            return result_1140851439;

          }

      var result_1140851433 = 0;

      BeforeRet: do {
        switch (pHEX60gensym26_1140851430.kind) {
        case 0:
          result_1140851433 = 0;
          break;
        case 1:
          if ((startHEX60gensym26_1140851431 < (sHEX60gensym26_1140851429).length)) {
          result_1140851433 = 1;
          }
          else {
            result_1140851433 = -1;
          }
          
          break;
        case 2:
          if ((startHEX60gensym26_1140851431 < (sHEX60gensym26_1140851429).length)) {
          result_1140851433 = runeLenAt_939524161(sHEX60gensym26_1140851429, chckRange(startHEX60gensym26_1140851431, 0, 2147483647));
          }
          else {
            result_1140851433 = -1;
          }
          
          break;
        case 4:
          if ((startHEX60gensym26_1140851431 < (sHEX60gensym26_1140851429).length)) {
          var aHEX60gensym26_1140851453 = 0;
          result_1140851433 = startHEX60gensym26_1140851431;
          if ((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] <= 127)) {
          aHEX60gensym26_1140851453 = chckRange(sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)], -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 1);
          }
          else {
          if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 5) == 6)) {
          if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 2))) {
          aHEX60gensym26_1140851453 = chckRange((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 31) << 6) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 2);
          }
          else {
            aHEX60gensym26_1140851453 = 65533;
            result_1140851433 = addInt(result_1140851433, 1);
          }
          
          }
          else {
          if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 4) == 14)) {
          if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 3))) {
          aHEX60gensym26_1140851453 = chckRange(((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 15) << 12) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 6)) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 2), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 3);
          }
          else {
            aHEX60gensym26_1140851453 = 65533;
            result_1140851433 = addInt(result_1140851433, 1);
          }
          
          }
          else {
          if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 3) == 30)) {
          if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 4))) {
          aHEX60gensym26_1140851453 = chckRange((((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 7) << 18) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 12)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 2), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 6)) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 3), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 4);
          }
          else {
            aHEX60gensym26_1140851453 = 65533;
            result_1140851433 = addInt(result_1140851433, 1);
          }
          
          }
          else {
          if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 2) == 62)) {
          if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 5))) {
          aHEX60gensym26_1140851453 = chckRange(((((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 3) << 24) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 18)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 2), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 12)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 3), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 6)) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 4), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 5);
          }
          else {
            aHEX60gensym26_1140851453 = 65533;
            result_1140851433 = addInt(result_1140851433, 1);
          }
          
          }
          else {
          if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 1) == 126)) {
          if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 6))) {
          aHEX60gensym26_1140851453 = chckRange((((((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 1) << 30) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 24)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 2), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 18)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 3), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 12)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 4), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 6)) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 5), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 6);
          }
          else {
            aHEX60gensym26_1140851453 = 65533;
            result_1140851433 = addInt(result_1140851433, 1);
          }
          
          }
          else {
            aHEX60gensym26_1140851453 = chckRange(sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)], -2147483648, 2147483647);
            result_1140851433 = addInt(result_1140851433, 1);
          }
          }}}}}
          if (nucisAlpha(aHEX60gensym26_1140851453)) {
          result_1140851433 = subInt(result_1140851433, startHEX60gensym26_1140851431);
          }
          else {
            result_1140851433 = -1;
          }
          
          }
          else {
            result_1140851433 = -1;
          }
          
          break;
        case 5:
          if ((startHEX60gensym26_1140851431 < (sHEX60gensym26_1140851429).length)) {
          var aHEX60gensym26_1140851666 = 0;
          result_1140851433 = startHEX60gensym26_1140851431;
          if ((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] <= 127)) {
          aHEX60gensym26_1140851666 = chckRange(sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)], -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 1);
          }
          else {
          if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 5) == 6)) {
          if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 2))) {
          aHEX60gensym26_1140851666 = chckRange((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 31) << 6) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 2);
          }
          else {
            aHEX60gensym26_1140851666 = 65533;
            result_1140851433 = addInt(result_1140851433, 1);
          }
          
          }
          else {
          if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 4) == 14)) {
          if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 3))) {
          aHEX60gensym26_1140851666 = chckRange(((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 15) << 12) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 6)) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 2), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 3);
          }
          else {
            aHEX60gensym26_1140851666 = 65533;
            result_1140851433 = addInt(result_1140851433, 1);
          }
          
          }
          else {
          if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 3) == 30)) {
          if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 4))) {
          aHEX60gensym26_1140851666 = chckRange((((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 7) << 18) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 12)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 2), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 6)) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 3), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 4);
          }
          else {
            aHEX60gensym26_1140851666 = 65533;
            result_1140851433 = addInt(result_1140851433, 1);
          }
          
          }
          else {
          if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 2) == 62)) {
          if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 5))) {
          aHEX60gensym26_1140851666 = chckRange(((((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 3) << 24) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 18)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 2), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 12)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 3), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 6)) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 4), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 5);
          }
          else {
            aHEX60gensym26_1140851666 = 65533;
            result_1140851433 = addInt(result_1140851433, 1);
          }
          
          }
          else {
          if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 1) == 126)) {
          if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 6))) {
          aHEX60gensym26_1140851666 = chckRange((((((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 1) << 30) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 24)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 2), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 18)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 3), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 12)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 4), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 6)) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 5), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 6);
          }
          else {
            aHEX60gensym26_1140851666 = 65533;
            result_1140851433 = addInt(result_1140851433, 1);
          }
          
          }
          else {
            aHEX60gensym26_1140851666 = chckRange(sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)], -2147483648, 2147483647);
            result_1140851433 = addInt(result_1140851433, 1);
          }
          }}}}}
          if (nucisLower(aHEX60gensym26_1140851666)) {
          result_1140851433 = subInt(result_1140851433, startHEX60gensym26_1140851431);
          }
          else {
            result_1140851433 = -1;
          }
          
          }
          else {
            result_1140851433 = -1;
          }
          
          break;
        case 6:
          if ((startHEX60gensym26_1140851431 < (sHEX60gensym26_1140851429).length)) {
          var aHEX60gensym26_1140851879 = 0;
          result_1140851433 = startHEX60gensym26_1140851431;
          if ((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] <= 127)) {
          aHEX60gensym26_1140851879 = chckRange(sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)], -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 1);
          }
          else {
          if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 5) == 6)) {
          if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 2))) {
          aHEX60gensym26_1140851879 = chckRange((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 31) << 6) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 2);
          }
          else {
            aHEX60gensym26_1140851879 = 65533;
            result_1140851433 = addInt(result_1140851433, 1);
          }
          
          }
          else {
          if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 4) == 14)) {
          if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 3))) {
          aHEX60gensym26_1140851879 = chckRange(((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 15) << 12) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 6)) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 2), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 3);
          }
          else {
            aHEX60gensym26_1140851879 = 65533;
            result_1140851433 = addInt(result_1140851433, 1);
          }
          
          }
          else {
          if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 3) == 30)) {
          if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 4))) {
          aHEX60gensym26_1140851879 = chckRange((((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 7) << 18) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 12)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 2), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 6)) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 3), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 4);
          }
          else {
            aHEX60gensym26_1140851879 = 65533;
            result_1140851433 = addInt(result_1140851433, 1);
          }
          
          }
          else {
          if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 2) == 62)) {
          if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 5))) {
          aHEX60gensym26_1140851879 = chckRange(((((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 3) << 24) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 18)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 2), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 12)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 3), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 6)) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 4), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 5);
          }
          else {
            aHEX60gensym26_1140851879 = 65533;
            result_1140851433 = addInt(result_1140851433, 1);
          }
          
          }
          else {
          if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 1) == 126)) {
          if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 6))) {
          aHEX60gensym26_1140851879 = chckRange((((((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 1) << 30) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 24)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 2), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 18)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 3), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 12)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 4), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 6)) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 5), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 6);
          }
          else {
            aHEX60gensym26_1140851879 = 65533;
            result_1140851433 = addInt(result_1140851433, 1);
          }
          
          }
          else {
            aHEX60gensym26_1140851879 = chckRange(sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)], -2147483648, 2147483647);
            result_1140851433 = addInt(result_1140851433, 1);
          }
          }}}}}
          if (nucisUpper(aHEX60gensym26_1140851879)) {
          result_1140851433 = subInt(result_1140851433, startHEX60gensym26_1140851431);
          }
          else {
            result_1140851433 = -1;
          }
          
          }
          else {
            result_1140851433 = -1;
          }
          
          break;
        case 7:
          if ((startHEX60gensym26_1140851431 < (sHEX60gensym26_1140851429).length)) {
          var aHEX60gensym26_1140852092 = 0;
          result_1140851433 = startHEX60gensym26_1140851431;
          if ((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] <= 127)) {
          aHEX60gensym26_1140852092 = chckRange(sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)], -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 1);
          }
          else {
          if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 5) == 6)) {
          if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 2))) {
          aHEX60gensym26_1140852092 = chckRange((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 31) << 6) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 2);
          }
          else {
            aHEX60gensym26_1140852092 = 65533;
            result_1140851433 = addInt(result_1140851433, 1);
          }
          
          }
          else {
          if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 4) == 14)) {
          if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 3))) {
          aHEX60gensym26_1140852092 = chckRange(((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 15) << 12) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 6)) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 2), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 3);
          }
          else {
            aHEX60gensym26_1140852092 = 65533;
            result_1140851433 = addInt(result_1140851433, 1);
          }
          
          }
          else {
          if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 3) == 30)) {
          if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 4))) {
          aHEX60gensym26_1140852092 = chckRange((((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 7) << 18) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 12)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 2), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 6)) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 3), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 4);
          }
          else {
            aHEX60gensym26_1140852092 = 65533;
            result_1140851433 = addInt(result_1140851433, 1);
          }
          
          }
          else {
          if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 2) == 62)) {
          if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 5))) {
          aHEX60gensym26_1140852092 = chckRange(((((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 3) << 24) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 18)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 2), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 12)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 3), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 6)) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 4), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 5);
          }
          else {
            aHEX60gensym26_1140852092 = 65533;
            result_1140851433 = addInt(result_1140851433, 1);
          }
          
          }
          else {
          if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 1) == 126)) {
          if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 6))) {
          aHEX60gensym26_1140852092 = chckRange((((((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 1) << 30) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 24)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 2), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 18)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 3), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 12)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 4), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 6)) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 5), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 6);
          }
          else {
            aHEX60gensym26_1140852092 = 65533;
            result_1140851433 = addInt(result_1140851433, 1);
          }
          
          }
          else {
            aHEX60gensym26_1140852092 = chckRange(sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)], -2147483648, 2147483647);
            result_1140851433 = addInt(result_1140851433, 1);
          }
          }}}}}
          if (nucisTitle(aHEX60gensym26_1140852092)) {
          result_1140851433 = subInt(result_1140851433, startHEX60gensym26_1140851431);
          }
          else {
            result_1140851433 = -1;
          }
          
          }
          else {
            result_1140851433 = -1;
          }
          
          break;
        case 8:
          if ((startHEX60gensym26_1140851431 < (sHEX60gensym26_1140851429).length)) {
          var aHEX60gensym26_1140852305 = 0;
          result_1140851433 = startHEX60gensym26_1140851431;
          if ((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] <= 127)) {
          aHEX60gensym26_1140852305 = chckRange(sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)], -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 1);
          }
          else {
          if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 5) == 6)) {
          if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 2))) {
          aHEX60gensym26_1140852305 = chckRange((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 31) << 6) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 2);
          }
          else {
            aHEX60gensym26_1140852305 = 65533;
            result_1140851433 = addInt(result_1140851433, 1);
          }
          
          }
          else {
          if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 4) == 14)) {
          if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 3))) {
          aHEX60gensym26_1140852305 = chckRange(((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 15) << 12) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 6)) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 2), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 3);
          }
          else {
            aHEX60gensym26_1140852305 = 65533;
            result_1140851433 = addInt(result_1140851433, 1);
          }
          
          }
          else {
          if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 3) == 30)) {
          if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 4))) {
          aHEX60gensym26_1140852305 = chckRange((((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 7) << 18) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 12)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 2), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 6)) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 3), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 4);
          }
          else {
            aHEX60gensym26_1140852305 = 65533;
            result_1140851433 = addInt(result_1140851433, 1);
          }
          
          }
          else {
          if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 2) == 62)) {
          if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 5))) {
          aHEX60gensym26_1140852305 = chckRange(((((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 3) << 24) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 18)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 2), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 12)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 3), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 6)) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 4), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 5);
          }
          else {
            aHEX60gensym26_1140852305 = 65533;
            result_1140851433 = addInt(result_1140851433, 1);
          }
          
          }
          else {
          if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 1) == 126)) {
          if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 6))) {
          aHEX60gensym26_1140852305 = chckRange((((((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 1) << 30) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 24)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 2), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 18)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 3), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 12)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 4), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 6)) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 5), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
          result_1140851433 = addInt(result_1140851433, 6);
          }
          else {
            aHEX60gensym26_1140852305 = 65533;
            result_1140851433 = addInt(result_1140851433, 1);
          }
          
          }
          else {
            aHEX60gensym26_1140852305 = chckRange(sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)], -2147483648, 2147483647);
            result_1140851433 = addInt(result_1140851433, 1);
          }
          }}}}}
          if (nucisWhiteSpace(aHEX60gensym26_1140852305)) {
          result_1140851433 = subInt(result_1140851433, startHEX60gensym26_1140851431);
          }
          else {
            result_1140851433 = -1;
          }
          
          }
          else {
            result_1140851433 = -1;
          }
          
          break;
        case 20:
          result_1140851433 = subInt((sHEX60gensym26_1140851429).length, startHEX60gensym26_1140851431);
          break;
        case 3:
          if (((startHEX60gensym26_1140851431 < (sHEX60gensym26_1140851429).length) && (sHEX60gensym26_1140851429[chckIndx(startHEX60gensym26_1140851431, 0, (sHEX60gensym26_1140851429).length - 1)] == 10))) {
          result_1140851433 = 1;
          }
          else {
          if (((startHEX60gensym26_1140851431 < (sHEX60gensym26_1140851429).length) && (sHEX60gensym26_1140851429[chckIndx(startHEX60gensym26_1140851431, 0, (sHEX60gensym26_1140851429).length - 1)] == 13))) {
          if (((addInt(startHEX60gensym26_1140851431, 1) < (sHEX60gensym26_1140851429).length) && (sHEX60gensym26_1140851429[chckIndx(addInt(startHEX60gensym26_1140851431, 1), 0, (sHEX60gensym26_1140851429).length - 1)] == 10))) {
          result_1140851433 = 2;
          }
          else {
            result_1140851433 = 1;
          }
          
          }
          else {
            result_1140851433 = -1;
          }
          }
          break;
        case 9:
          var Temporary1 = pHEX60gensym26_1140851430;
          if (ConstSet189[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI1140850693)); }
          result_1140851433 = (Temporary1.term).length;
          Label2: do {
            var iHEX60gensym26_1140852522 = 0;
            var colontmp__486540193 = 0;
            colontmp__486540193 = subInt(result_1140851433, 1);
            var res_486540194 = 0;
            Label3: do {
                Label4: while (true) {
                if (!(res_486540194 <= colontmp__486540193)) break Label4;
                  iHEX60gensym26_1140852522 = res_486540194;
                    if (((sHEX60gensym26_1140851429).length <= addInt(startHEX60gensym26_1140851431, iHEX60gensym26_1140852522))) Temporary5 = true; else {                      var Temporary6 = pHEX60gensym26_1140851430;
                      if (ConstSet190[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI1140850693)); }
                      Temporary5 = !(((Temporary7 = Temporary6.term, Temporary7)[chckIndx(iHEX60gensym26_1140852522, 0, (Temporary7).length - 1)] == sHEX60gensym26_1140851429[chckIndx(addInt(startHEX60gensym26_1140851431, iHEX60gensym26_1140852522), 0, (sHEX60gensym26_1140851429).length - 1)]));                    }                  if (Temporary5) {
                  result_1140851433 = -1;
                  break Label2;
                  }
                  
                  res_486540194 = addInt(res_486540194, 1);
                }
            } while (false);
          } while (false);
          break;
        case 10:
          var iHEX60gensym26_1140852523 = 0;
          var aHEX60gensym26_1140852524 = 0;
          var bHEX60gensym26_1140852525 = 0;
          result_1140851433 = startHEX60gensym26_1140851431;
          Label8: do {
              Label9: while (true) {
                var Temporary10 = pHEX60gensym26_1140851430;
                if (ConstSet191[Temporary10.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary10.kind, NTI1140850693)); }
              if (!(iHEX60gensym26_1140852523 < (Temporary10.term).length)) break Label9;
                if (((sHEX60gensym26_1140851429).length <= result_1140851433)) {
                result_1140851433 = -1;
                break Label8;
                }
                
                  var Temporary11 = pHEX60gensym26_1140851430;
                  if (ConstSet192[Temporary11.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary11.kind, NTI1140850693)); }
                if (((Temporary12 = Temporary11.term, Temporary12)[chckIndx(iHEX60gensym26_1140852523, 0, (Temporary12).length - 1)] <= 127)) {
                var Temporary13 = pHEX60gensym26_1140851430;
                if (ConstSet193[Temporary13.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary13.kind, NTI1140850693)); }
                aHEX60gensym26_1140852524 = chckRange((Temporary14 = Temporary13.term, Temporary14)[chckIndx(iHEX60gensym26_1140852523, 0, (Temporary14).length - 1)], -2147483648, 2147483647);
                iHEX60gensym26_1140852523 = addInt(iHEX60gensym26_1140852523, 1);
                }
                else {
                  var Temporary15 = pHEX60gensym26_1140851430;
                  if (ConstSet194[Temporary15.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary15.kind, NTI1140850693)); }
                if ((((Temporary16 = Temporary15.term, Temporary16)[chckIndx(iHEX60gensym26_1140852523, 0, (Temporary16).length - 1)] >>> 5) == 6)) {
                  var Temporary17 = pHEX60gensym26_1140851430;
                  if (ConstSet195[Temporary17.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary17.kind, NTI1140850693)); }
                if ((iHEX60gensym26_1140852523 <= subInt((Temporary17.term).length, 2))) {
                var Temporary18 = pHEX60gensym26_1140851430;
                if (ConstSet196[Temporary18.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary18.kind, NTI1140850693)); }
                var Temporary20 = pHEX60gensym26_1140851430;
                if (ConstSet197[Temporary20.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary20.kind, NTI1140850693)); }
                aHEX60gensym26_1140852524 = chckRange(((((Temporary19 = Temporary18.term, Temporary19)[chckIndx(iHEX60gensym26_1140852523, 0, (Temporary19).length - 1)] & 31) << 6) | ((Temporary21 = Temporary20.term, Temporary21)[chckIndx(addInt(iHEX60gensym26_1140852523, 1), 0, (Temporary21).length - 1)] & 63)), -2147483648, 2147483647);
                iHEX60gensym26_1140852523 = addInt(iHEX60gensym26_1140852523, 2);
                }
                else {
                  aHEX60gensym26_1140852524 = 65533;
                  iHEX60gensym26_1140852523 = addInt(iHEX60gensym26_1140852523, 1);
                }
                
                }
                else {
                  var Temporary22 = pHEX60gensym26_1140851430;
                  if (ConstSet198[Temporary22.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary22.kind, NTI1140850693)); }
                if ((((Temporary23 = Temporary22.term, Temporary23)[chckIndx(iHEX60gensym26_1140852523, 0, (Temporary23).length - 1)] >>> 4) == 14)) {
                  var Temporary24 = pHEX60gensym26_1140851430;
                  if (ConstSet199[Temporary24.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary24.kind, NTI1140850693)); }
                if ((iHEX60gensym26_1140852523 <= subInt((Temporary24.term).length, 3))) {
                var Temporary25 = pHEX60gensym26_1140851430;
                if (ConstSet200[Temporary25.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary25.kind, NTI1140850693)); }
                var Temporary27 = pHEX60gensym26_1140851430;
                if (ConstSet201[Temporary27.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary27.kind, NTI1140850693)); }
                var Temporary29 = pHEX60gensym26_1140851430;
                if (ConstSet202[Temporary29.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary29.kind, NTI1140850693)); }
                aHEX60gensym26_1140852524 = chckRange((((((Temporary26 = Temporary25.term, Temporary26)[chckIndx(iHEX60gensym26_1140852523, 0, (Temporary26).length - 1)] & 15) << 12) | (((Temporary28 = Temporary27.term, Temporary28)[chckIndx(addInt(iHEX60gensym26_1140852523, 1), 0, (Temporary28).length - 1)] & 63) << 6)) | ((Temporary30 = Temporary29.term, Temporary30)[chckIndx(addInt(iHEX60gensym26_1140852523, 2), 0, (Temporary30).length - 1)] & 63)), -2147483648, 2147483647);
                iHEX60gensym26_1140852523 = addInt(iHEX60gensym26_1140852523, 3);
                }
                else {
                  aHEX60gensym26_1140852524 = 65533;
                  iHEX60gensym26_1140852523 = addInt(iHEX60gensym26_1140852523, 1);
                }
                
                }
                else {
                  var Temporary31 = pHEX60gensym26_1140851430;
                  if (ConstSet203[Temporary31.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary31.kind, NTI1140850693)); }
                if ((((Temporary32 = Temporary31.term, Temporary32)[chckIndx(iHEX60gensym26_1140852523, 0, (Temporary32).length - 1)] >>> 3) == 30)) {
                  var Temporary33 = pHEX60gensym26_1140851430;
                  if (ConstSet204[Temporary33.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary33.kind, NTI1140850693)); }
                if ((iHEX60gensym26_1140852523 <= subInt((Temporary33.term).length, 4))) {
                var Temporary34 = pHEX60gensym26_1140851430;
                if (ConstSet205[Temporary34.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary34.kind, NTI1140850693)); }
                var Temporary36 = pHEX60gensym26_1140851430;
                if (ConstSet206[Temporary36.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary36.kind, NTI1140850693)); }
                var Temporary38 = pHEX60gensym26_1140851430;
                if (ConstSet207[Temporary38.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary38.kind, NTI1140850693)); }
                var Temporary40 = pHEX60gensym26_1140851430;
                if (ConstSet208[Temporary40.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary40.kind, NTI1140850693)); }
                aHEX60gensym26_1140852524 = chckRange(((((((Temporary35 = Temporary34.term, Temporary35)[chckIndx(iHEX60gensym26_1140852523, 0, (Temporary35).length - 1)] & 7) << 18) | (((Temporary37 = Temporary36.term, Temporary37)[chckIndx(addInt(iHEX60gensym26_1140852523, 1), 0, (Temporary37).length - 1)] & 63) << 12)) | (((Temporary39 = Temporary38.term, Temporary39)[chckIndx(addInt(iHEX60gensym26_1140852523, 2), 0, (Temporary39).length - 1)] & 63) << 6)) | ((Temporary41 = Temporary40.term, Temporary41)[chckIndx(addInt(iHEX60gensym26_1140852523, 3), 0, (Temporary41).length - 1)] & 63)), -2147483648, 2147483647);
                iHEX60gensym26_1140852523 = addInt(iHEX60gensym26_1140852523, 4);
                }
                else {
                  aHEX60gensym26_1140852524 = 65533;
                  iHEX60gensym26_1140852523 = addInt(iHEX60gensym26_1140852523, 1);
                }
                
                }
                else {
                  var Temporary42 = pHEX60gensym26_1140851430;
                  if (ConstSet209[Temporary42.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary42.kind, NTI1140850693)); }
                if ((((Temporary43 = Temporary42.term, Temporary43)[chckIndx(iHEX60gensym26_1140852523, 0, (Temporary43).length - 1)] >>> 2) == 62)) {
                  var Temporary44 = pHEX60gensym26_1140851430;
                  if (ConstSet210[Temporary44.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary44.kind, NTI1140850693)); }
                if ((iHEX60gensym26_1140852523 <= subInt((Temporary44.term).length, 5))) {
                var Temporary45 = pHEX60gensym26_1140851430;
                if (ConstSet211[Temporary45.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary45.kind, NTI1140850693)); }
                var Temporary47 = pHEX60gensym26_1140851430;
                if (ConstSet212[Temporary47.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary47.kind, NTI1140850693)); }
                var Temporary49 = pHEX60gensym26_1140851430;
                if (ConstSet213[Temporary49.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary49.kind, NTI1140850693)); }
                var Temporary51 = pHEX60gensym26_1140851430;
                if (ConstSet214[Temporary51.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary51.kind, NTI1140850693)); }
                var Temporary53 = pHEX60gensym26_1140851430;
                if (ConstSet215[Temporary53.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary53.kind, NTI1140850693)); }
                aHEX60gensym26_1140852524 = chckRange((((((((Temporary46 = Temporary45.term, Temporary46)[chckIndx(iHEX60gensym26_1140852523, 0, (Temporary46).length - 1)] & 3) << 24) | (((Temporary48 = Temporary47.term, Temporary48)[chckIndx(addInt(iHEX60gensym26_1140852523, 1), 0, (Temporary48).length - 1)] & 63) << 18)) | (((Temporary50 = Temporary49.term, Temporary50)[chckIndx(addInt(iHEX60gensym26_1140852523, 2), 0, (Temporary50).length - 1)] & 63) << 12)) | (((Temporary52 = Temporary51.term, Temporary52)[chckIndx(addInt(iHEX60gensym26_1140852523, 3), 0, (Temporary52).length - 1)] & 63) << 6)) | ((Temporary54 = Temporary53.term, Temporary54)[chckIndx(addInt(iHEX60gensym26_1140852523, 4), 0, (Temporary54).length - 1)] & 63)), -2147483648, 2147483647);
                iHEX60gensym26_1140852523 = addInt(iHEX60gensym26_1140852523, 5);
                }
                else {
                  aHEX60gensym26_1140852524 = 65533;
                  iHEX60gensym26_1140852523 = addInt(iHEX60gensym26_1140852523, 1);
                }
                
                }
                else {
                  var Temporary55 = pHEX60gensym26_1140851430;
                  if (ConstSet216[Temporary55.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary55.kind, NTI1140850693)); }
                if ((((Temporary56 = Temporary55.term, Temporary56)[chckIndx(iHEX60gensym26_1140852523, 0, (Temporary56).length - 1)] >>> 1) == 126)) {
                  var Temporary57 = pHEX60gensym26_1140851430;
                  if (ConstSet217[Temporary57.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary57.kind, NTI1140850693)); }
                if ((iHEX60gensym26_1140852523 <= subInt((Temporary57.term).length, 6))) {
                var Temporary58 = pHEX60gensym26_1140851430;
                if (ConstSet218[Temporary58.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary58.kind, NTI1140850693)); }
                var Temporary60 = pHEX60gensym26_1140851430;
                if (ConstSet219[Temporary60.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary60.kind, NTI1140850693)); }
                var Temporary62 = pHEX60gensym26_1140851430;
                if (ConstSet220[Temporary62.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary62.kind, NTI1140850693)); }
                var Temporary64 = pHEX60gensym26_1140851430;
                if (ConstSet221[Temporary64.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary64.kind, NTI1140850693)); }
                var Temporary66 = pHEX60gensym26_1140851430;
                if (ConstSet222[Temporary66.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary66.kind, NTI1140850693)); }
                var Temporary68 = pHEX60gensym26_1140851430;
                if (ConstSet223[Temporary68.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary68.kind, NTI1140850693)); }
                aHEX60gensym26_1140852524 = chckRange(((((((((Temporary59 = Temporary58.term, Temporary59)[chckIndx(iHEX60gensym26_1140852523, 0, (Temporary59).length - 1)] & 1) << 30) | (((Temporary61 = Temporary60.term, Temporary61)[chckIndx(addInt(iHEX60gensym26_1140852523, 1), 0, (Temporary61).length - 1)] & 63) << 24)) | (((Temporary63 = Temporary62.term, Temporary63)[chckIndx(addInt(iHEX60gensym26_1140852523, 2), 0, (Temporary63).length - 1)] & 63) << 18)) | (((Temporary65 = Temporary64.term, Temporary65)[chckIndx(addInt(iHEX60gensym26_1140852523, 3), 0, (Temporary65).length - 1)] & 63) << 12)) | (((Temporary67 = Temporary66.term, Temporary67)[chckIndx(addInt(iHEX60gensym26_1140852523, 4), 0, (Temporary67).length - 1)] & 63) << 6)) | ((Temporary69 = Temporary68.term, Temporary69)[chckIndx(addInt(iHEX60gensym26_1140852523, 5), 0, (Temporary69).length - 1)] & 63)), -2147483648, 2147483647);
                iHEX60gensym26_1140852523 = addInt(iHEX60gensym26_1140852523, 6);
                }
                else {
                  aHEX60gensym26_1140852524 = 65533;
                  iHEX60gensym26_1140852523 = addInt(iHEX60gensym26_1140852523, 1);
                }
                
                }
                else {
                  var Temporary70 = pHEX60gensym26_1140851430;
                  if (ConstSet224[Temporary70.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary70.kind, NTI1140850693)); }
                  aHEX60gensym26_1140852524 = chckRange((Temporary71 = Temporary70.term, Temporary71)[chckIndx(iHEX60gensym26_1140852523, 0, (Temporary71).length - 1)], -2147483648, 2147483647);
                  iHEX60gensym26_1140852523 = addInt(iHEX60gensym26_1140852523, 1);
                }
                }}}}}
                if ((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] <= 127)) {
                bHEX60gensym26_1140852525 = chckRange(sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)], -2147483648, 2147483647);
                result_1140851433 = addInt(result_1140851433, 1);
                }
                else {
                if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 5) == 6)) {
                if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 2))) {
                bHEX60gensym26_1140852525 = chckRange((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 31) << 6) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
                result_1140851433 = addInt(result_1140851433, 2);
                }
                else {
                  bHEX60gensym26_1140852525 = 65533;
                  result_1140851433 = addInt(result_1140851433, 1);
                }
                
                }
                else {
                if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 4) == 14)) {
                if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 3))) {
                bHEX60gensym26_1140852525 = chckRange(((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 15) << 12) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 6)) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 2), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
                result_1140851433 = addInt(result_1140851433, 3);
                }
                else {
                  bHEX60gensym26_1140852525 = 65533;
                  result_1140851433 = addInt(result_1140851433, 1);
                }
                
                }
                else {
                if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 3) == 30)) {
                if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 4))) {
                bHEX60gensym26_1140852525 = chckRange((((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 7) << 18) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 12)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 2), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 6)) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 3), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
                result_1140851433 = addInt(result_1140851433, 4);
                }
                else {
                  bHEX60gensym26_1140852525 = 65533;
                  result_1140851433 = addInt(result_1140851433, 1);
                }
                
                }
                else {
                if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 2) == 62)) {
                if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 5))) {
                bHEX60gensym26_1140852525 = chckRange(((((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 3) << 24) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 18)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 2), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 12)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 3), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 6)) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 4), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
                result_1140851433 = addInt(result_1140851433, 5);
                }
                else {
                  bHEX60gensym26_1140852525 = 65533;
                  result_1140851433 = addInt(result_1140851433, 1);
                }
                
                }
                else {
                if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 1) == 126)) {
                if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 6))) {
                bHEX60gensym26_1140852525 = chckRange((((((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 1) << 30) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 24)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 2), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 18)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 3), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 12)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 4), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 6)) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 5), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
                result_1140851433 = addInt(result_1140851433, 6);
                }
                else {
                  bHEX60gensym26_1140852525 = 65533;
                  result_1140851433 = addInt(result_1140851433, 1);
                }
                
                }
                else {
                  bHEX60gensym26_1140852525 = chckRange(sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)], -2147483648, 2147483647);
                  result_1140851433 = addInt(result_1140851433, 1);
                }
                }}}}}
                if (!(HEX3DHEX3D_939525015(nuctoLower(aHEX60gensym26_1140852524), nuctoLower(bHEX60gensym26_1140852525)))) {
                result_1140851433 = -1;
                break Label8;
                }
                
              }
          } while (false);
          result_1140851433 = subInt(result_1140851433, startHEX60gensym26_1140851431);
          break;
        case 11:
          var iHEX60gensym26_1140852946 = 0;
          var aHEX60gensym26_1140852947 = 0;
          var bHEX60gensym26_1140852948 = 0;
          result_1140851433 = startHEX60gensym26_1140851431;
          Label72: do {
              Label73: while (true) {
                var Temporary74 = pHEX60gensym26_1140851430;
                if (ConstSet225[Temporary74.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary74.kind, NTI1140850693)); }
              if (!(iHEX60gensym26_1140852946 < (Temporary74.term).length)) break Label73;
                Label75: do {
                    Label76: while (true) {
                      var Temporary77 = pHEX60gensym26_1140851430;
                      if (ConstSet226[Temporary77.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary77.kind, NTI1140850693)); }
                    if (!(iHEX60gensym26_1140852946 < (Temporary77.term).length)) break Label76;
                        var Temporary78 = pHEX60gensym26_1140851430;
                        if (ConstSet227[Temporary78.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary78.kind, NTI1140850693)); }
                      if (((Temporary79 = Temporary78.term, Temporary79)[chckIndx(iHEX60gensym26_1140852946, 0, (Temporary79).length - 1)] <= 127)) {
                      var Temporary80 = pHEX60gensym26_1140851430;
                      if (ConstSet228[Temporary80.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary80.kind, NTI1140850693)); }
                      aHEX60gensym26_1140852947 = chckRange((Temporary81 = Temporary80.term, Temporary81)[chckIndx(iHEX60gensym26_1140852946, 0, (Temporary81).length - 1)], -2147483648, 2147483647);
                      iHEX60gensym26_1140852946 = addInt(iHEX60gensym26_1140852946, 1);
                      }
                      else {
                        var Temporary82 = pHEX60gensym26_1140851430;
                        if (ConstSet229[Temporary82.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary82.kind, NTI1140850693)); }
                      if ((((Temporary83 = Temporary82.term, Temporary83)[chckIndx(iHEX60gensym26_1140852946, 0, (Temporary83).length - 1)] >>> 5) == 6)) {
                        var Temporary84 = pHEX60gensym26_1140851430;
                        if (ConstSet230[Temporary84.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary84.kind, NTI1140850693)); }
                      if ((iHEX60gensym26_1140852946 <= subInt((Temporary84.term).length, 2))) {
                      var Temporary85 = pHEX60gensym26_1140851430;
                      if (ConstSet231[Temporary85.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary85.kind, NTI1140850693)); }
                      var Temporary87 = pHEX60gensym26_1140851430;
                      if (ConstSet232[Temporary87.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary87.kind, NTI1140850693)); }
                      aHEX60gensym26_1140852947 = chckRange(((((Temporary86 = Temporary85.term, Temporary86)[chckIndx(iHEX60gensym26_1140852946, 0, (Temporary86).length - 1)] & 31) << 6) | ((Temporary88 = Temporary87.term, Temporary88)[chckIndx(addInt(iHEX60gensym26_1140852946, 1), 0, (Temporary88).length - 1)] & 63)), -2147483648, 2147483647);
                      iHEX60gensym26_1140852946 = addInt(iHEX60gensym26_1140852946, 2);
                      }
                      else {
                        aHEX60gensym26_1140852947 = 65533;
                        iHEX60gensym26_1140852946 = addInt(iHEX60gensym26_1140852946, 1);
                      }
                      
                      }
                      else {
                        var Temporary89 = pHEX60gensym26_1140851430;
                        if (ConstSet233[Temporary89.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary89.kind, NTI1140850693)); }
                      if ((((Temporary90 = Temporary89.term, Temporary90)[chckIndx(iHEX60gensym26_1140852946, 0, (Temporary90).length - 1)] >>> 4) == 14)) {
                        var Temporary91 = pHEX60gensym26_1140851430;
                        if (ConstSet234[Temporary91.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary91.kind, NTI1140850693)); }
                      if ((iHEX60gensym26_1140852946 <= subInt((Temporary91.term).length, 3))) {
                      var Temporary92 = pHEX60gensym26_1140851430;
                      if (ConstSet235[Temporary92.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary92.kind, NTI1140850693)); }
                      var Temporary94 = pHEX60gensym26_1140851430;
                      if (ConstSet236[Temporary94.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary94.kind, NTI1140850693)); }
                      var Temporary96 = pHEX60gensym26_1140851430;
                      if (ConstSet237[Temporary96.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary96.kind, NTI1140850693)); }
                      aHEX60gensym26_1140852947 = chckRange((((((Temporary93 = Temporary92.term, Temporary93)[chckIndx(iHEX60gensym26_1140852946, 0, (Temporary93).length - 1)] & 15) << 12) | (((Temporary95 = Temporary94.term, Temporary95)[chckIndx(addInt(iHEX60gensym26_1140852946, 1), 0, (Temporary95).length - 1)] & 63) << 6)) | ((Temporary97 = Temporary96.term, Temporary97)[chckIndx(addInt(iHEX60gensym26_1140852946, 2), 0, (Temporary97).length - 1)] & 63)), -2147483648, 2147483647);
                      iHEX60gensym26_1140852946 = addInt(iHEX60gensym26_1140852946, 3);
                      }
                      else {
                        aHEX60gensym26_1140852947 = 65533;
                        iHEX60gensym26_1140852946 = addInt(iHEX60gensym26_1140852946, 1);
                      }
                      
                      }
                      else {
                        var Temporary98 = pHEX60gensym26_1140851430;
                        if (ConstSet238[Temporary98.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary98.kind, NTI1140850693)); }
                      if ((((Temporary99 = Temporary98.term, Temporary99)[chckIndx(iHEX60gensym26_1140852946, 0, (Temporary99).length - 1)] >>> 3) == 30)) {
                        var Temporary100 = pHEX60gensym26_1140851430;
                        if (ConstSet239[Temporary100.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary100.kind, NTI1140850693)); }
                      if ((iHEX60gensym26_1140852946 <= subInt((Temporary100.term).length, 4))) {
                      var Temporary101 = pHEX60gensym26_1140851430;
                      if (ConstSet240[Temporary101.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary101.kind, NTI1140850693)); }
                      var Temporary103 = pHEX60gensym26_1140851430;
                      if (ConstSet241[Temporary103.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary103.kind, NTI1140850693)); }
                      var Temporary105 = pHEX60gensym26_1140851430;
                      if (ConstSet242[Temporary105.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary105.kind, NTI1140850693)); }
                      var Temporary107 = pHEX60gensym26_1140851430;
                      if (ConstSet243[Temporary107.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary107.kind, NTI1140850693)); }
                      aHEX60gensym26_1140852947 = chckRange(((((((Temporary102 = Temporary101.term, Temporary102)[chckIndx(iHEX60gensym26_1140852946, 0, (Temporary102).length - 1)] & 7) << 18) | (((Temporary104 = Temporary103.term, Temporary104)[chckIndx(addInt(iHEX60gensym26_1140852946, 1), 0, (Temporary104).length - 1)] & 63) << 12)) | (((Temporary106 = Temporary105.term, Temporary106)[chckIndx(addInt(iHEX60gensym26_1140852946, 2), 0, (Temporary106).length - 1)] & 63) << 6)) | ((Temporary108 = Temporary107.term, Temporary108)[chckIndx(addInt(iHEX60gensym26_1140852946, 3), 0, (Temporary108).length - 1)] & 63)), -2147483648, 2147483647);
                      iHEX60gensym26_1140852946 = addInt(iHEX60gensym26_1140852946, 4);
                      }
                      else {
                        aHEX60gensym26_1140852947 = 65533;
                        iHEX60gensym26_1140852946 = addInt(iHEX60gensym26_1140852946, 1);
                      }
                      
                      }
                      else {
                        var Temporary109 = pHEX60gensym26_1140851430;
                        if (ConstSet244[Temporary109.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary109.kind, NTI1140850693)); }
                      if ((((Temporary110 = Temporary109.term, Temporary110)[chckIndx(iHEX60gensym26_1140852946, 0, (Temporary110).length - 1)] >>> 2) == 62)) {
                        var Temporary111 = pHEX60gensym26_1140851430;
                        if (ConstSet245[Temporary111.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary111.kind, NTI1140850693)); }
                      if ((iHEX60gensym26_1140852946 <= subInt((Temporary111.term).length, 5))) {
                      var Temporary112 = pHEX60gensym26_1140851430;
                      if (ConstSet246[Temporary112.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary112.kind, NTI1140850693)); }
                      var Temporary114 = pHEX60gensym26_1140851430;
                      if (ConstSet247[Temporary114.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary114.kind, NTI1140850693)); }
                      var Temporary116 = pHEX60gensym26_1140851430;
                      if (ConstSet248[Temporary116.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary116.kind, NTI1140850693)); }
                      var Temporary118 = pHEX60gensym26_1140851430;
                      if (ConstSet249[Temporary118.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary118.kind, NTI1140850693)); }
                      var Temporary120 = pHEX60gensym26_1140851430;
                      if (ConstSet250[Temporary120.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary120.kind, NTI1140850693)); }
                      aHEX60gensym26_1140852947 = chckRange((((((((Temporary113 = Temporary112.term, Temporary113)[chckIndx(iHEX60gensym26_1140852946, 0, (Temporary113).length - 1)] & 3) << 24) | (((Temporary115 = Temporary114.term, Temporary115)[chckIndx(addInt(iHEX60gensym26_1140852946, 1), 0, (Temporary115).length - 1)] & 63) << 18)) | (((Temporary117 = Temporary116.term, Temporary117)[chckIndx(addInt(iHEX60gensym26_1140852946, 2), 0, (Temporary117).length - 1)] & 63) << 12)) | (((Temporary119 = Temporary118.term, Temporary119)[chckIndx(addInt(iHEX60gensym26_1140852946, 3), 0, (Temporary119).length - 1)] & 63) << 6)) | ((Temporary121 = Temporary120.term, Temporary121)[chckIndx(addInt(iHEX60gensym26_1140852946, 4), 0, (Temporary121).length - 1)] & 63)), -2147483648, 2147483647);
                      iHEX60gensym26_1140852946 = addInt(iHEX60gensym26_1140852946, 5);
                      }
                      else {
                        aHEX60gensym26_1140852947 = 65533;
                        iHEX60gensym26_1140852946 = addInt(iHEX60gensym26_1140852946, 1);
                      }
                      
                      }
                      else {
                        var Temporary122 = pHEX60gensym26_1140851430;
                        if (ConstSet251[Temporary122.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary122.kind, NTI1140850693)); }
                      if ((((Temporary123 = Temporary122.term, Temporary123)[chckIndx(iHEX60gensym26_1140852946, 0, (Temporary123).length - 1)] >>> 1) == 126)) {
                        var Temporary124 = pHEX60gensym26_1140851430;
                        if (ConstSet252[Temporary124.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary124.kind, NTI1140850693)); }
                      if ((iHEX60gensym26_1140852946 <= subInt((Temporary124.term).length, 6))) {
                      var Temporary125 = pHEX60gensym26_1140851430;
                      if (ConstSet253[Temporary125.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary125.kind, NTI1140850693)); }
                      var Temporary127 = pHEX60gensym26_1140851430;
                      if (ConstSet254[Temporary127.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary127.kind, NTI1140850693)); }
                      var Temporary129 = pHEX60gensym26_1140851430;
                      if (ConstSet255[Temporary129.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary129.kind, NTI1140850693)); }
                      var Temporary131 = pHEX60gensym26_1140851430;
                      if (ConstSet256[Temporary131.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary131.kind, NTI1140850693)); }
                      var Temporary133 = pHEX60gensym26_1140851430;
                      if (ConstSet257[Temporary133.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary133.kind, NTI1140850693)); }
                      var Temporary135 = pHEX60gensym26_1140851430;
                      if (ConstSet258[Temporary135.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary135.kind, NTI1140850693)); }
                      aHEX60gensym26_1140852947 = chckRange(((((((((Temporary126 = Temporary125.term, Temporary126)[chckIndx(iHEX60gensym26_1140852946, 0, (Temporary126).length - 1)] & 1) << 30) | (((Temporary128 = Temporary127.term, Temporary128)[chckIndx(addInt(iHEX60gensym26_1140852946, 1), 0, (Temporary128).length - 1)] & 63) << 24)) | (((Temporary130 = Temporary129.term, Temporary130)[chckIndx(addInt(iHEX60gensym26_1140852946, 2), 0, (Temporary130).length - 1)] & 63) << 18)) | (((Temporary132 = Temporary131.term, Temporary132)[chckIndx(addInt(iHEX60gensym26_1140852946, 3), 0, (Temporary132).length - 1)] & 63) << 12)) | (((Temporary134 = Temporary133.term, Temporary134)[chckIndx(addInt(iHEX60gensym26_1140852946, 4), 0, (Temporary134).length - 1)] & 63) << 6)) | ((Temporary136 = Temporary135.term, Temporary136)[chckIndx(addInt(iHEX60gensym26_1140852946, 5), 0, (Temporary136).length - 1)] & 63)), -2147483648, 2147483647);
                      iHEX60gensym26_1140852946 = addInt(iHEX60gensym26_1140852946, 6);
                      }
                      else {
                        aHEX60gensym26_1140852947 = 65533;
                        iHEX60gensym26_1140852946 = addInt(iHEX60gensym26_1140852946, 1);
                      }
                      
                      }
                      else {
                        var Temporary137 = pHEX60gensym26_1140851430;
                        if (ConstSet259[Temporary137.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary137.kind, NTI1140850693)); }
                        aHEX60gensym26_1140852947 = chckRange((Temporary138 = Temporary137.term, Temporary138)[chckIndx(iHEX60gensym26_1140852946, 0, (Temporary138).length - 1)], -2147483648, 2147483647);
                        iHEX60gensym26_1140852946 = addInt(iHEX60gensym26_1140852946, 1);
                      }
                      }}}}}
                      if (!(HEX3DHEX3D_939525015(aHEX60gensym26_1140852947, 95))) {
                      break Label75;
                      }
                      
                    }
                } while (false);
                Label139: do {
                    Label140: while (true) {
                    if (!(result_1140851433 < (sHEX60gensym26_1140851429).length)) break Label140;
                      if ((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] <= 127)) {
                      bHEX60gensym26_1140852948 = chckRange(sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)], -2147483648, 2147483647);
                      result_1140851433 = addInt(result_1140851433, 1);
                      }
                      else {
                      if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 5) == 6)) {
                      if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 2))) {
                      bHEX60gensym26_1140852948 = chckRange((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 31) << 6) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
                      result_1140851433 = addInt(result_1140851433, 2);
                      }
                      else {
                        bHEX60gensym26_1140852948 = 65533;
                        result_1140851433 = addInt(result_1140851433, 1);
                      }
                      
                      }
                      else {
                      if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 4) == 14)) {
                      if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 3))) {
                      bHEX60gensym26_1140852948 = chckRange(((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 15) << 12) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 6)) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 2), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
                      result_1140851433 = addInt(result_1140851433, 3);
                      }
                      else {
                        bHEX60gensym26_1140852948 = 65533;
                        result_1140851433 = addInt(result_1140851433, 1);
                      }
                      
                      }
                      else {
                      if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 3) == 30)) {
                      if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 4))) {
                      bHEX60gensym26_1140852948 = chckRange((((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 7) << 18) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 12)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 2), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 6)) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 3), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
                      result_1140851433 = addInt(result_1140851433, 4);
                      }
                      else {
                        bHEX60gensym26_1140852948 = 65533;
                        result_1140851433 = addInt(result_1140851433, 1);
                      }
                      
                      }
                      else {
                      if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 2) == 62)) {
                      if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 5))) {
                      bHEX60gensym26_1140852948 = chckRange(((((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 3) << 24) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 18)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 2), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 12)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 3), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 6)) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 4), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
                      result_1140851433 = addInt(result_1140851433, 5);
                      }
                      else {
                        bHEX60gensym26_1140852948 = 65533;
                        result_1140851433 = addInt(result_1140851433, 1);
                      }
                      
                      }
                      else {
                      if (((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] >>> 1) == 126)) {
                      if ((result_1140851433 <= subInt((sHEX60gensym26_1140851429).length, 6))) {
                      bHEX60gensym26_1140852948 = chckRange((((((((sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)] & 1) << 30) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 1), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 24)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 2), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 18)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 3), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 12)) | ((sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 4), 0, (sHEX60gensym26_1140851429).length - 1)] & 63) << 6)) | (sHEX60gensym26_1140851429[chckIndx(addInt(result_1140851433, 5), 0, (sHEX60gensym26_1140851429).length - 1)] & 63)), -2147483648, 2147483647);
                      result_1140851433 = addInt(result_1140851433, 6);
                      }
                      else {
                        bHEX60gensym26_1140852948 = 65533;
                        result_1140851433 = addInt(result_1140851433, 1);
                      }
                      
                      }
                      else {
                        bHEX60gensym26_1140852948 = chckRange(sHEX60gensym26_1140851429[chckIndx(result_1140851433, 0, (sHEX60gensym26_1140851429).length - 1)], -2147483648, 2147483647);
                        result_1140851433 = addInt(result_1140851433, 1);
                      }
                      }}}}}
                      if (!(HEX3DHEX3D_939525015(bHEX60gensym26_1140852948, 95))) {
                      break Label139;
                      }
                      
                    }
                } while (false);
                if (((sHEX60gensym26_1140851429).length <= result_1140851433)) {
                  var Temporary141 = pHEX60gensym26_1140851430;
                  if (ConstSet260[Temporary141.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary141.kind, NTI1140850693)); }
                if (((Temporary141.term).length <= iHEX60gensym26_1140852946)) {
                break Label72;
                }
                else {
                  result_1140851433 = -1;
                  break Label72;
                }
                
                }
                else {
                if (!(HEX3DHEX3D_939525015(nuctoLower(aHEX60gensym26_1140852947), nuctoLower(bHEX60gensym26_1140852948)))) {
                result_1140851433 = -1;
                break Label72;
                }
                }
              }
          } while (false);
          result_1140851433 = subInt(result_1140851433, startHEX60gensym26_1140851431);
          break;
        case 12:
            if (!(startHEX60gensym26_1140851431 < (sHEX60gensym26_1140851429).length)) Temporary142 = false; else {              var Temporary143 = pHEX60gensym26_1140851430;
              if (ConstSet261[Temporary143.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'ch\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary143.kind, NTI1140850693)); }
              Temporary142 = (Temporary143.ch == sHEX60gensym26_1140851429[chckIndx(startHEX60gensym26_1140851431, 0, (sHEX60gensym26_1140851429).length - 1)]);            }          if (Temporary142) {
          result_1140851433 = 1;
          }
          else {
            result_1140851433 = -1;
          }
          
          break;
        case 13:
            if (!(startHEX60gensym26_1140851431 < (sHEX60gensym26_1140851429).length)) Temporary144 = false; else {              var Temporary145 = pHEX60gensym26_1140851430;
              if (ConstSet262[Temporary145.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'charChoice\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary145.kind, NTI1140850693)); }
              Temporary144 = (Temporary145.charChoice[sHEX60gensym26_1140851429[chckIndx(startHEX60gensym26_1140851431, 0, (sHEX60gensym26_1140851429).length - 1)]] != undefined);            }          if (Temporary144) {
          result_1140851433 = 1;
          }
          else {
            result_1140851433 = -1;
          }
          
          break;
        case 14:
          var oldMlHEX60gensym26_1140853373 = cHEX60gensym26_1140851432.ml;
          var Temporary146 = pHEX60gensym26_1140851430;
          if (ConstSet263[Temporary146.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'nt\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary146.kind, NTI1140850693)); }
          result_1140851433 = matchIt_1140851428(sHEX60gensym26_1140851429, Temporary146.nt.rule, startHEX60gensym26_1140851431, cHEX60gensym26_1140851432);
          if ((result_1140851433 < 0)) {
          cHEX60gensym26_1140851432.ml = oldMlHEX60gensym26_1140853373;
          }
          
          break;
        case 15:
          var oldMlHEX60gensym26_1140853374 = cHEX60gensym26_1140851432.ml;
          result_1140851433 = 0;
          Label147: do {
            var iHEX60gensym26_1140853382 = 0;
            var colontmp__486540201 = 0;
            var Temporary148 = pHEX60gensym26_1140851430;
            if (ConstSet264[Temporary148.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary148.kind, NTI1140850693)); }
            colontmp__486540201 = (Temporary148.sons).length - 1;
            var res_486540202 = 0;
            Label149: do {
                Label150: while (true) {
                if (!(res_486540202 <= colontmp__486540201)) break Label150;
                  iHEX60gensym26_1140853382 = res_486540202;
                  var Temporary151 = pHEX60gensym26_1140851430;
                  if (ConstSet265[Temporary151.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary151.kind, NTI1140850693)); }
                  var xHEX60gensym26_1140853383 = matchIt_1140851428(sHEX60gensym26_1140851429, (Temporary152 = Temporary151.sons, Temporary152)[chckIndx(iHEX60gensym26_1140853382, 0, (Temporary152).length - 1)], addInt(startHEX60gensym26_1140851431, result_1140851433), cHEX60gensym26_1140851432);
                  if ((xHEX60gensym26_1140853383 < 0)) {
                  cHEX60gensym26_1140851432.ml = oldMlHEX60gensym26_1140853374;
                  result_1140851433 = -1;
                  break Label147;
                  }
                  else {
                  result_1140851433 = addInt(result_1140851433, xHEX60gensym26_1140853383);
                  }
                  
                  res_486540202 = addInt(res_486540202, 1);
                }
            } while (false);
          } while (false);
          break;
        case 16:
          var oldMlHEX60gensym26_1140853388 = cHEX60gensym26_1140851432.ml;
          Label153: do {
            var iHEX60gensym26_1140853396 = 0;
            var colontmp__486540205 = 0;
            var Temporary154 = pHEX60gensym26_1140851430;
            if (ConstSet266[Temporary154.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary154.kind, NTI1140850693)); }
            colontmp__486540205 = (Temporary154.sons).length - 1;
            var res_486540206 = 0;
            Label155: do {
                Label156: while (true) {
                if (!(res_486540206 <= colontmp__486540205)) break Label156;
                  iHEX60gensym26_1140853396 = res_486540206;
                  var Temporary157 = pHEX60gensym26_1140851430;
                  if (ConstSet267[Temporary157.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary157.kind, NTI1140850693)); }
                  result_1140851433 = matchIt_1140851428(sHEX60gensym26_1140851429, (Temporary158 = Temporary157.sons, Temporary158)[chckIndx(iHEX60gensym26_1140853396, 0, (Temporary158).length - 1)], startHEX60gensym26_1140851431, cHEX60gensym26_1140851432);
                  if ((0 <= result_1140851433)) {
                  break Label153;
                  }
                  
                  cHEX60gensym26_1140851432.ml = oldMlHEX60gensym26_1140853388;
                  res_486540206 = addInt(res_486540206, 1);
                }
            } while (false);
          } while (false);
          break;
        case 28:
          var oldMlHEX60gensym26_1140853397 = cHEX60gensym26_1140851432.ml;
          result_1140851433 = 0;
          Label159: do {
              Label160: while (true) {
              if (!(addInt(startHEX60gensym26_1140851431, result_1140851433) <= (sHEX60gensym26_1140851429).length)) break Label160;
                var Temporary161 = pHEX60gensym26_1140851430;
                if (ConstSet268[Temporary161.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary161.kind, NTI1140850693)); }
                var xHEX60gensym26_1140853398 = matchIt_1140851428(sHEX60gensym26_1140851429, (Temporary162 = Temporary161.sons, Temporary162)[chckIndx(0, 0, (Temporary162).length - 1)], addInt(startHEX60gensym26_1140851431, result_1140851433), cHEX60gensym26_1140851432);
                if ((0 <= xHEX60gensym26_1140853398)) {
                result_1140851433 = addInt(result_1140851433, xHEX60gensym26_1140853398);
                break BeforeRet;
                }
                
                result_1140851433 = addInt(result_1140851433, 1);
              }
          } while (false);
          result_1140851433 = -1;
          cHEX60gensym26_1140851432.ml = oldMlHEX60gensym26_1140853397;
          break;
        case 29:
          var idxHEX60gensym26_1140853407 = cHEX60gensym26_1140851432.ml;
          cHEX60gensym26_1140851432.ml = addInt(cHEX60gensym26_1140851432.ml, 1);
          result_1140851433 = 0;
          Label163: do {
              Label164: while (true) {
              if (!(addInt(startHEX60gensym26_1140851431, result_1140851433) <= (sHEX60gensym26_1140851429).length)) break Label164;
                var Temporary165 = pHEX60gensym26_1140851430;
                if (ConstSet269[Temporary165.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary165.kind, NTI1140850693)); }
                var xHEX60gensym26_1140853412 = matchIt_1140851428(sHEX60gensym26_1140851429, (Temporary166 = Temporary165.sons, Temporary166)[chckIndx(0, 0, (Temporary166).length - 1)], addInt(startHEX60gensym26_1140851431, result_1140851433), cHEX60gensym26_1140851432);
                if ((0 <= xHEX60gensym26_1140853412)) {
                if ((idxHEX60gensym26_1140853407 < 20)) {
                var colontmp__486540210 = startHEX60gensym26_1140851431;
                var colontmp__486540211 = subInt(addInt(startHEX60gensym26_1140851431, result_1140851433), 1);
                cHEX60gensym26_1140851432.matches[chckIndx(idxHEX60gensym26_1140853407, 0, (cHEX60gensym26_1140851432.matches).length - 1)] = nimCopy(cHEX60gensym26_1140851432.matches[chckIndx(idxHEX60gensym26_1140853407, 0, (cHEX60gensym26_1140851432.matches).length - 1)], {Field0: colontmp__486540210, Field1: colontmp__486540211}, NTI1140851221);
                }
                
                result_1140851433 = addInt(result_1140851433, xHEX60gensym26_1140853412);
                break BeforeRet;
                }
                
                result_1140851433 = addInt(result_1140851433, 1);
              }
          } while (false);
          result_1140851433 = -1;
          cHEX60gensym26_1140851432.ml = idxHEX60gensym26_1140853407;
          break;
        case 17:
          result_1140851433 = 0;
          Label167: do {
              Label168: while (true) {
              if (!true) break Label168;
                var Temporary169 = pHEX60gensym26_1140851430;
                if (ConstSet270[Temporary169.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary169.kind, NTI1140850693)); }
                var xHEX60gensym26_1140853421 = matchIt_1140851428(sHEX60gensym26_1140851429, (Temporary170 = Temporary169.sons, Temporary170)[chckIndx(0, 0, (Temporary170).length - 1)], addInt(startHEX60gensym26_1140851431, result_1140851433), cHEX60gensym26_1140851432);
                if ((xHEX60gensym26_1140853421 <= 0)) {
                break Label167;
                }
                
                result_1140851433 = addInt(result_1140851433, xHEX60gensym26_1140853421);
              }
          } while (false);
          break;
        case 18:
          result_1140851433 = 0;
          var Temporary171 = pHEX60gensym26_1140851430;
          if (ConstSet271[Temporary171.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'ch\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary171.kind, NTI1140850693)); }
          var chHEX60gensym26_1140853426 = Temporary171.ch;
          Label172: do {
              Label173: while (true) {
              if (!((addInt(startHEX60gensym26_1140851431, result_1140851433) < (sHEX60gensym26_1140851429).length) && (chHEX60gensym26_1140853426 == sHEX60gensym26_1140851429[chckIndx(addInt(startHEX60gensym26_1140851431, result_1140851433), 0, (sHEX60gensym26_1140851429).length - 1)]))) break Label173;
                result_1140851433 = addInt(result_1140851433, 1);
              }
          } while (false);
          break;
        case 19:
          result_1140851433 = 0;
          Label174: do {
              Label175: while (true) {
                if (!(addInt(startHEX60gensym26_1140851431, result_1140851433) < (sHEX60gensym26_1140851429).length)) Temporary176 = false; else {                  var Temporary177 = pHEX60gensym26_1140851430;
                  if (ConstSet272[Temporary177.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'charChoice\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary177.kind, NTI1140850693)); }
                  Temporary176 = (Temporary177.charChoice[sHEX60gensym26_1140851429[chckIndx(addInt(startHEX60gensym26_1140851431, result_1140851433), 0, (sHEX60gensym26_1140851429).length - 1)]] != undefined);                }              if (!Temporary176) break Label175;
                result_1140851433 = addInt(result_1140851433, 1);
              }
          } while (false);
          break;
        case 21:
          var Temporary178 = pHEX60gensym26_1140851430;
          if (ConstSet273[Temporary178.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary178.kind, NTI1140850693)); }
          result_1140851433 = nimMax(0, matchIt_1140851428(sHEX60gensym26_1140851429, (Temporary179 = Temporary178.sons, Temporary179)[chckIndx(0, 0, (Temporary179).length - 1)], startHEX60gensym26_1140851431, cHEX60gensym26_1140851432));
          break;
        case 22:
          var oldMlHEX60gensym26_1140853439 = cHEX60gensym26_1140851432.ml;
          var Temporary180 = pHEX60gensym26_1140851430;
          if (ConstSet274[Temporary180.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary180.kind, NTI1140850693)); }
          result_1140851433 = matchIt_1140851428(sHEX60gensym26_1140851429, (Temporary181 = Temporary180.sons, Temporary181)[chckIndx(0, 0, (Temporary181).length - 1)], startHEX60gensym26_1140851431, cHEX60gensym26_1140851432);
          if ((0 <= result_1140851433)) {
          result_1140851433 = 0;
          }
          else {
            cHEX60gensym26_1140851432.ml = oldMlHEX60gensym26_1140853439;
          }
          
          break;
        case 23:
          var oldMlHEX60gensym26_1140853440 = cHEX60gensym26_1140851432.ml;
          var Temporary182 = pHEX60gensym26_1140851430;
          if (ConstSet275[Temporary182.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary182.kind, NTI1140850693)); }
          result_1140851433 = matchIt_1140851428(sHEX60gensym26_1140851429, (Temporary183 = Temporary182.sons, Temporary183)[chckIndx(0, 0, (Temporary183).length - 1)], startHEX60gensym26_1140851431, cHEX60gensym26_1140851432);
          if ((result_1140851433 < 0)) {
          result_1140851433 = 0;
          }
          else {
            cHEX60gensym26_1140851432.ml = oldMlHEX60gensym26_1140853440;
            result_1140851433 = -1;
          }
          
          break;
        case 24:
            var Temporary185 = pHEX60gensym26_1140851430;
            if (ConstSet276[Temporary185.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary185.kind, NTI1140850693)); }
            if (((Temporary185.sons).length == 0)) Temporary184 = true; else {              var Temporary186 = pHEX60gensym26_1140851430;
              if (ConstSet277[Temporary186.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary186.kind, NTI1140850693)); }
              Temporary184 = ((Temporary187 = Temporary186.sons, Temporary187)[chckIndx(0, 0, (Temporary187).length - 1)].kind == 0);            }          if (Temporary184) {
          cHEX60gensym26_1140851432.ml = subInt(cHEX60gensym26_1140851432.ml, 1);
          var colontmp__486540215 = 0;
          var colontmp__486540216 = 0;
          cHEX60gensym26_1140851432.matches[chckIndx(cHEX60gensym26_1140851432.ml, 0, (cHEX60gensym26_1140851432.matches).length - 1)] = nimCopy(cHEX60gensym26_1140851432.matches[chckIndx(cHEX60gensym26_1140851432.ml, 0, (cHEX60gensym26_1140851432.matches).length - 1)], {Field0: colontmp__486540215, Field1: colontmp__486540216}, NTI1140851221);
          result_1140851433 = 0;
          }
          else {
            var idxHEX60gensym26_1140853452 = cHEX60gensym26_1140851432.ml;
            var Temporary188 = pHEX60gensym26_1140851430;
            if (ConstSet278[Temporary188.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary188.kind, NTI1140850693)); }
            result_1140851433 = matchIt_1140851428(sHEX60gensym26_1140851429, (Temporary189 = Temporary188.sons, Temporary189)[chckIndx(0, 0, (Temporary189).length - 1)], startHEX60gensym26_1140851431, cHEX60gensym26_1140851432);
            if ((0 <= result_1140851433)) {
            cHEX60gensym26_1140851432.ml = addInt(cHEX60gensym26_1140851432.ml, 1);
            if ((idxHEX60gensym26_1140853452 < 20)) {
            var colontmp__486540217 = startHEX60gensym26_1140851431;
            var colontmp__486540218 = subInt(addInt(startHEX60gensym26_1140851431, result_1140851433), 1);
            cHEX60gensym26_1140851432.matches[chckIndx(idxHEX60gensym26_1140853452, 0, (cHEX60gensym26_1140851432.matches).length - 1)] = nimCopy(cHEX60gensym26_1140851432.matches[chckIndx(idxHEX60gensym26_1140853452, 0, (cHEX60gensym26_1140851432.matches).length - 1)], {Field0: colontmp__486540217, Field1: colontmp__486540218}, NTI1140851221);
            }
            
            }
            
          }
          
          break;
        case 25:
          result_1140851433 = matchBackRef_1140851434(sHEX60gensym26_1140851429, pHEX60gensym26_1140851430, startHEX60gensym26_1140851431, cHEX60gensym26_1140851432);
          break;
        case 26:
          result_1140851433 = matchBackRef_1140851434(sHEX60gensym26_1140851429, pHEX60gensym26_1140851430, startHEX60gensym26_1140851431, cHEX60gensym26_1140851432);
          break;
        case 27:
          result_1140851433 = matchBackRef_1140851434(sHEX60gensym26_1140851429, pHEX60gensym26_1140851430, startHEX60gensym26_1140851431, cHEX60gensym26_1140851432);
          break;
        case 32:
          if ((cHEX60gensym26_1140851432.origStart == startHEX60gensym26_1140851431)) {
          result_1140851433 = 0;
          }
          else {
            result_1140851433 = -1;
          }
          
          break;
        case 30:
        case 31:
          if (true) {
          failedAssertImpl_218103864(makeNimstrLit("pegs.nim(861, 31) `false` "));
          }
          
          break;
        }
      } while (false);

      return result_1140851433;

    }

  var result_1140851377 = 0;

    result_1140851377 = matchIt_1140851428(s_1140851373, p_1140851374, start_1140851375, c_1140851376);

  return result_1140851377;

}

function substr_33557918(s_33557919, first_33557920) {
  var result_33557921 = [];

    result_33557921 = nimCopy(null, substr_33557906(s_33557919, first_33557920, (s_33557919).length - 1), NTI33554439);

  return result_33557921;

}

function npegsreplacef(s_1140853699, sub_1140853700, by_1140853701) {
  var result_1140853702 = [[]];

    result_1140853702[0] = nimCopy(null, [], NTI33554439);
    var i_1140853703 = 0;
    var caps_1140853704 = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []];
    var c_1140853705 = [({matches: [{Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}], ml: 0, origStart: 0})];
    Label1: do {
        Label2: while (true) {
        if (!(i_1140853703 < (s_1140853699).length)) break Label2;
          c_1140853705[0].ml = 0;
          var x_1140853706 = npegsrawMatch(s_1140853699, sub_1140853700, i_1140853703, c_1140853705[0]);
          if ((x_1140853706 <= 0)) {
          addChar(result_1140853702[0], s_1140853699[chckIndx(i_1140853703, 0, (s_1140853699).length - 1)]);;
          i_1140853703 = addInt(i_1140853703, 1);
          }
          else {
            Label3: do {
              var kHEX60gensym579_1140853718 = 0;
              var colontmp__486540189 = 0;
              colontmp__486540189 = subInt(c_1140853705[0].ml, 1);
              var res_486540190 = 0;
              Label4: do {
                  Label5: while (true) {
                  if (!(res_486540190 <= colontmp__486540189)) break Label5;
                    kHEX60gensym579_1140853718 = res_486540190;
                    var startIdxHEX60gensym579_1140853719 = c_1140853705[0].matches[chckIndx(kHEX60gensym579_1140853718, 0, (c_1140853705[0].matches).length - 1)]["Field0"];
                    var endIdxHEX60gensym579_1140853720 = c_1140853705[0].matches[chckIndx(kHEX60gensym579_1140853718, 0, (c_1140853705[0].matches).length - 1)]["Field1"];
                    if (!((startIdxHEX60gensym579_1140853719 == -1))) {
                    caps_1140853704[chckIndx(kHEX60gensym579_1140853718, 0, (caps_1140853704).length - 1)] = nimCopy(null, substr_33557906(s_1140853699, startIdxHEX60gensym579_1140853719, endIdxHEX60gensym579_1140853720), NTI33554439);
                    }
                    else {
                      caps_1140853704[chckIndx(kHEX60gensym579_1140853718, 0, (caps_1140853704).length - 1)] = nimCopy(null, [], NTI33554439);
                    }
                    
                    res_486540190 = addInt(res_486540190, 1);
                  }
              } while (false);
            } while (false);
            nsuAddf(result_1140853702, 0, by_1140853701, caps_1140853704);
            i_1140853703 = addInt(i_1140853703, x_1140853706);
          }
          
        }
    } while (false);
    result_1140853702[0].push.apply(result_1140853702[0], substr_33557918(s_1140853699, i_1140853703));;

  return result_1140853702[0];

}

function init_1140853951(L_1140853952, input_1140853953, filename_1140853954, line_1140853955, col_1140853956) {
    L_1140853952.buf = nimCopy(null, input_1140853953, NTI33554439);
    L_1140853952.bufpos = 0;
    L_1140853952.lineNumber = line_1140853955;
    L_1140853952.colOffset = col_1140853956;
    L_1140853952.lineStart = 0;
    L_1140853952.filename = nimCopy(null, filename_1140853954, NTI33554439);

  
}

function handleCR_1140853921(L_1140853922, pos_1140853923) {
      var Temporary1;

  var result_1140853924 = 0;

    if (!((L_1140853922.buf[chckIndx(pos_1140853923, 0, (L_1140853922.buf).length - 1)] == 13))) {
    failedAssertImpl_218103864(makeNimstrLit("pegs.nim(1453, 9) `L.buf[pos] == \'\\r\'` "));
    }
    
    L_1140853922.lineNumber = addInt(L_1140853922.lineNumber, 1);
    result_1140853924 = addInt(pos_1140853923, 1);
      if (!(result_1140853924 < (L_1140853922.buf).length)) Temporary1 = false; else {        Temporary1 = (L_1140853922.buf[chckIndx(result_1140853924, 0, (L_1140853922.buf).length - 1)] == 10);      }    if (Temporary1) {
    result_1140853924 = addInt(result_1140853924, 1);
    }
    
    L_1140853922.lineStart = result_1140853924;

  return result_1140853924;

}

function handleLF_1140853938(L_1140853939, pos_1140853940) {
  var result_1140853941 = 0;

    if (!((L_1140853939.buf[chckIndx(pos_1140853940, 0, (L_1140853939.buf).length - 1)] == 10))) {
    failedAssertImpl_218103864(makeNimstrLit("pegs.nim(1460, 9) `L.buf[pos] == \'\\n\'` "));
    }
    
    L_1140853939.lineNumber = addInt(L_1140853939.lineNumber, 1);
    result_1140853941 = addInt(pos_1140853940, 1);
    L_1140853939.lineStart = result_1140853941;

  return result_1140853941;

}

function skip_1140854079(c_1140854080) {
                  var Temporary5;

    var pos_1140854081 = c_1140854080.bufpos;
    Label1: do {
        Label2: while (true) {
        if (!(pos_1140854081 < (c_1140854080.buf).length)) break Label2;
          switch (c_1140854080.buf[chckIndx(pos_1140854081, 0, (c_1140854080.buf).length - 1)]) {
          case 32:
          case 9:
            pos_1140854081 = addInt(pos_1140854081, 1);
            break;
          case 35:
            Label3: do {
                Label4: while (true) {
                  if (!(pos_1140854081 < (c_1140854080.buf).length)) Temporary5 = false; else {                    Temporary5 = !((ConstSet281[c_1140854080.buf[chckIndx(pos_1140854081, 0, (c_1140854080.buf).length - 1)]] != undefined));                  }                if (!Temporary5) break Label4;
                  pos_1140854081 = addInt(pos_1140854081, 1);
                }
            } while (false);
            break;
          case 13:
            pos_1140854081 = handleCR_1140853921(c_1140854080, pos_1140854081);
            break;
          case 10:
            pos_1140854081 = handleLF_1140853938(c_1140854080, pos_1140854081);
            break;
          default: 
            break Label1;
            break;
          }
        }
    } while (false);
    c_1140854080.bufpos = pos_1140854081;

  
}

function handleHexChar_1157627905(c_1157627906, x_1157627907, x_1157627907_Idx) {
  var result_1157627908 = false;

    result_1157627908 = true;
    switch (c_1157627906) {
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      x_1157627907[x_1157627907_Idx] = ((x_1157627907[x_1157627907_Idx] << 4) | subInt(c_1157627906, 48));
      break;
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
      x_1157627907[x_1157627907_Idx] = ((x_1157627907[x_1157627907_Idx] << 4) | addInt(subInt(c_1157627906, 97), 10));
      break;
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
      x_1157627907[x_1157627907_Idx] = ((x_1157627907[x_1157627907_Idx] << 4) | addInt(subInt(c_1157627906, 65), 10));
      break;
    default: 
      result_1157627908 = false;
      break;
    }

  return result_1157627908;

}

function getEscapedChar_1140853980(c_1140853981, tok_1140853982) {
            var Temporary3;
            var Temporary4;
        var Temporary5;

  BeforeRet: do {
    c_1140853981.bufpos = addInt(c_1140853981.bufpos, 1);
    if (((c_1140853981.buf).length <= c_1140853981.bufpos)) {
    tok_1140853982.kind = 0;
    break BeforeRet;
    }
    
    switch (c_1140853981.buf[chckIndx(c_1140853981.bufpos, 0, (c_1140853981.buf).length - 1)]) {
    case 114:
    case 82:
    case 99:
    case 67:
      addChar(tok_1140853982.literal, 13);;
      c_1140853981.bufpos = addInt(c_1140853981.bufpos, 1);
      break;
    case 108:
    case 76:
      addChar(tok_1140853982.literal, 10);;
      c_1140853981.bufpos = addInt(c_1140853981.bufpos, 1);
      break;
    case 102:
    case 70:
      addChar(tok_1140853982.literal, 12);;
      c_1140853981.bufpos = addInt(c_1140853981.bufpos, 1);
      break;
    case 101:
    case 69:
      addChar(tok_1140853982.literal, 27);;
      c_1140853981.bufpos = addInt(c_1140853981.bufpos, 1);
      break;
    case 97:
    case 65:
      addChar(tok_1140853982.literal, 7);;
      c_1140853981.bufpos = addInt(c_1140853981.bufpos, 1);
      break;
    case 98:
    case 66:
      addChar(tok_1140853982.literal, 8);;
      c_1140853981.bufpos = addInt(c_1140853981.bufpos, 1);
      break;
    case 118:
    case 86:
      addChar(tok_1140853982.literal, 11);;
      c_1140853981.bufpos = addInt(c_1140853981.bufpos, 1);
      break;
    case 116:
    case 84:
      addChar(tok_1140853982.literal, 9);;
      c_1140853981.bufpos = addInt(c_1140853981.bufpos, 1);
      break;
    case 120:
    case 88:
      c_1140853981.bufpos = addInt(c_1140853981.bufpos, 1);
      if (((c_1140853981.buf).length <= c_1140853981.bufpos)) {
      tok_1140853982.kind = 0;
      break BeforeRet;
      }
      
      var xi_1140854023 = [0];
      if (handleHexChar_1157627905(c_1140853981.buf[chckIndx(c_1140853981.bufpos, 0, (c_1140853981.buf).length - 1)], xi_1140854023, 0)) {
      c_1140853981.bufpos = addInt(c_1140853981.bufpos, 1);
      if (handleHexChar_1157627905(c_1140853981.buf[chckIndx(c_1140853981.bufpos, 0, (c_1140853981.buf).length - 1)], xi_1140854023, 0)) {
      c_1140853981.bufpos = addInt(c_1140853981.bufpos, 1);
      }
      
      }
      
      if ((xi_1140854023[0] == 0)) {
      tok_1140853982.kind = 0;
      }
      else {
      addChar(tok_1140853982.literal, chckRange(xi_1140854023[0], 0, 255));;
      }
      
      break;
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      var val_1140854038 = subInt(c_1140853981.buf[chckIndx(c_1140853981.bufpos, 0, (c_1140853981.buf).length - 1)], 48);
      c_1140853981.bufpos = addInt(c_1140853981.bufpos, 1);
      var i_1140854043 = 1;
      Label1: do {
          Label2: while (true) {
            if (!(c_1140853981.bufpos < (c_1140853981.buf).length)) Temporary4 = false; else {              Temporary4 = (i_1140854043 <= 3);            }            if (!Temporary4) Temporary3 = false; else {              Temporary3 = (ConstSet283[c_1140853981.buf[chckIndx(c_1140853981.bufpos, 0, (c_1140853981.buf).length - 1)]] != undefined);            }          if (!Temporary3) break Label2;
            val_1140854038 = subInt(addInt(mulInt(val_1140854038, 10), c_1140853981.buf[chckIndx(c_1140853981.bufpos, 0, (c_1140853981.buf).length - 1)]), 48);
            c_1140853981.bufpos = addInt(c_1140853981.bufpos, 1);
            i_1140854043 = addInt(i_1140854043, 1);
          }
      } while (false);
        if (!(0 < val_1140854038)) Temporary5 = false; else {          Temporary5 = (val_1140854038 <= 255);        }      if (Temporary5) {
      addChar(tok_1140853982.literal, chckRange(val_1140854038, 0, 255));;
      }
      else {
        tok_1140853982.kind = 0;
      }
      
      break;
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      tok_1140853982.kind = 0;
      break;
    default: 
      if ((ConstSet284[c_1140853981.buf[chckIndx(c_1140853981.bufpos, 0, (c_1140853981.buf).length - 1)]] != undefined)) {
      tok_1140853982.kind = 0;
      }
      else {
        addChar(tok_1140853982.literal, c_1140853981.buf[chckIndx(c_1140853981.bufpos, 0, (c_1140853981.buf).length - 1)]);;
        c_1140853981.bufpos = addInt(c_1140853981.bufpos, 1);
      }
      
      break;
    }
  } while (false);

  
}

function getCharSet_1140854138(c_1140854139, tok_1140854140) {
            var Temporary3;

    tok_1140854140.kind = 6;
    tok_1140854140.charset = nimCopy(tok_1140854140.charset, ConstSet282, NTI1140856075);
    var pos_1140854141 = addInt(c_1140854139.bufpos, 1);
    var caret_1140854142 = false;
    if ((pos_1140854141 < (c_1140854139.buf).length)) {
    if ((c_1140854139.buf[chckIndx(pos_1140854141, 0, (c_1140854139.buf).length - 1)] == 94)) {
    pos_1140854141 = addInt(pos_1140854141, 1);
    caret_1140854142 = true;
    }
    
    Label1: do {
        Label2: while (true) {
        if (!(pos_1140854141 < (c_1140854139.buf).length)) break Label2;
          var ch_1140854147 = 0;
          switch (c_1140854139.buf[chckIndx(pos_1140854141, 0, (c_1140854139.buf).length - 1)]) {
          case 93:
            if ((pos_1140854141 < (c_1140854139.buf).length)) {
            pos_1140854141 = addInt(pos_1140854141, 1);
            }
            
            break Label1;
            break;
          case 92:
            c_1140854139.bufpos = pos_1140854141;
            getEscapedChar_1140853980(c_1140854139, tok_1140854140);
            pos_1140854141 = c_1140854139.bufpos;
            ch_1140854147 = tok_1140854140.literal[chckIndx(subInt((tok_1140854140.literal).length, 1), 0, (tok_1140854140.literal).length - 1)];
            break;
          case 13:
          case 10:
          case 0:
            tok_1140854140.kind = 0;
            break Label1;
            break;
          default: 
            ch_1140854147 = c_1140854139.buf[chckIndx(pos_1140854141, 0, (c_1140854139.buf).length - 1)];
            pos_1140854141 = addInt(pos_1140854141, 1);
            break;
          }
          tok_1140854140.charset[ch_1140854147] = true;
          if ((c_1140854139.buf[chckIndx(pos_1140854141, 0, (c_1140854139.buf).length - 1)] == 45)) {
            if (!(addInt(pos_1140854141, 1) < (c_1140854139.buf).length)) Temporary3 = false; else {              Temporary3 = (c_1140854139.buf[chckIndx(addInt(pos_1140854141, 1), 0, (c_1140854139.buf).length - 1)] == 93);            }          if (Temporary3) {
          tok_1140854140.charset[45] = true;
          pos_1140854141 = addInt(pos_1140854141, 1);
          }
          else {
            if ((addInt(pos_1140854141, 1) < (c_1140854139.buf).length)) {
            pos_1140854141 = addInt(pos_1140854141, 1);
            }
            else {
              break Label1;
            }
            
            var ch2_1140854172 = 0;
            switch (c_1140854139.buf[chckIndx(pos_1140854141, 0, (c_1140854139.buf).length - 1)]) {
            case 92:
              c_1140854139.bufpos = pos_1140854141;
              getEscapedChar_1140853980(c_1140854139, tok_1140854140);
              pos_1140854141 = c_1140854139.bufpos;
              ch2_1140854172 = tok_1140854140.literal[chckIndx(subInt((tok_1140854140.literal).length, 1), 0, (tok_1140854140.literal).length - 1)];
              break;
            case 13:
            case 10:
            case 0:
              tok_1140854140.kind = 0;
              break Label1;
              break;
            default: 
              if ((addInt(pos_1140854141, 1) < (c_1140854139.buf).length)) {
              ch2_1140854172 = c_1140854139.buf[chckIndx(pos_1140854141, 0, (c_1140854139.buf).length - 1)];
              pos_1140854141 = addInt(pos_1140854141, 1);
              }
              else {
                break Label1;
              }
              
              break;
            }
            Label4: do {
              var i_1140854187 = 0;
              var colontmp__486540225 = 0;
              var colontmp__486540226 = 0;
              colontmp__486540225 = addInt(ch_1140854147, 1);
              colontmp__486540226 = ch2_1140854172;
              var res_486540227 = colontmp__486540225;
              Label5: do {
                  Label6: while (true) {
                  if (!(res_486540227 <= colontmp__486540226)) break Label6;
                    i_1140854187 = res_486540227;
                    tok_1140854140.charset[chckRange(i_1140854187, 0, 255)] = true;
                    res_486540227 = addInt(res_486540227, 1);
                  }
              } while (false);
            } while (false);
          }
          
          }
          
        }
    } while (false);
    }
    
    c_1140854139.bufpos = pos_1140854141;
    if (caret_1140854142) {
    tok_1140854140.charset = nimCopy(tok_1140854140.charset, SetMinus(ConstSet285, tok_1140854140.charset), NTI1140856075);
    }
    

  
}

function getSymbol_1140854196(c_1140854197, tok_1140854198) {
            var Temporary3;

    var pos_1140854199 = c_1140854197.bufpos;
    Label1: do {
        Label2: while (true) {
        if (!(pos_1140854199 < (c_1140854197.buf).length)) break Label2;
          addChar(tok_1140854198.literal, c_1140854197.buf[chckIndx(pos_1140854199, 0, (c_1140854197.buf).length - 1)]);;
          pos_1140854199 = addInt(pos_1140854199, 1);
            if (!(pos_1140854199 < (c_1140854197.buf).length)) Temporary3 = false; else {              Temporary3 = !((ConstSet287[c_1140854197.buf[chckIndx(pos_1140854199, 0, (c_1140854197.buf).length - 1)]] != undefined));            }          if (Temporary3) {
          break Label1;
          }
          
        }
    } while (false);
    c_1140854197.bufpos = pos_1140854199;
    tok_1140854198.kind = 4;

  
}

function getBuiltin_1140854208(c_1140854209, tok_1140854210) {
      var Temporary1;

      if (!(addInt(c_1140854209.bufpos, 1) < (c_1140854209.buf).length)) Temporary1 = false; else {        Temporary1 = (ConstSet286[c_1140854209.buf[chckIndx(addInt(c_1140854209.bufpos, 1), 0, (c_1140854209.buf).length - 1)]] != undefined);      }    if (Temporary1) {
    c_1140854209.bufpos = addInt(c_1140854209.bufpos, 1);
    getSymbol_1140854196(c_1140854209, tok_1140854210);
    tok_1140854210.kind = 21;
    }
    else {
      tok_1140854210.kind = 22;
      getEscapedChar_1140853980(c_1140854209, tok_1140854210);
    }
    

  
}

function getString_1140854094(c_1140854095, tok_1140854096) {
    tok_1140854096.kind = 5;
    var pos_1140854097 = addInt(c_1140854095.bufpos, 1);
    var quote_1140854098 = c_1140854095.buf[chckIndx(subInt(pos_1140854097, 1), 0, (c_1140854095.buf).length - 1)];
    Label1: do {
        Label2: while (true) {
        if (!(pos_1140854097 < (c_1140854095.buf).length)) break Label2;
          switch (c_1140854095.buf[chckIndx(pos_1140854097, 0, (c_1140854095.buf).length - 1)]) {
          case 92:
            c_1140854095.bufpos = pos_1140854097;
            getEscapedChar_1140853980(c_1140854095, tok_1140854096);
            pos_1140854097 = c_1140854095.bufpos;
            break;
          case 13:
          case 10:
          case 0:
            tok_1140854096.kind = 0;
            break Label1;
            break;
          default: 
            if ((c_1140854095.buf[chckIndx(pos_1140854097, 0, (c_1140854095.buf).length - 1)] == quote_1140854098)) {
            pos_1140854097 = addInt(pos_1140854097, 1);
            break Label1;
            }
            else {
              addChar(tok_1140854096.literal, c_1140854095.buf[chckIndx(pos_1140854097, 0, (c_1140854095.buf).length - 1)]);;
              pos_1140854097 = addInt(pos_1140854097, 1);
            }
            
            break;
          }
        }
    } while (false);
    c_1140854095.bufpos = pos_1140854097;

  
}

function getDollar_1140854107(c_1140854108, tok_1140854109) {
      var Temporary1;
      var Temporary2;
          var Temporary5;

    var pos_1140854110 = addInt(c_1140854108.bufpos, 1);
    var neg_1140854111 = false;
      if (!(pos_1140854110 < (c_1140854108.buf).length)) Temporary1 = false; else {        Temporary1 = (c_1140854108.buf[chckIndx(pos_1140854110, 0, (c_1140854108.buf).length - 1)] == 94);      }    if (Temporary1) {
    neg_1140854111 = true;
    pos_1140854110 = addInt(pos_1140854110, 1);
    }
    
      if (!(pos_1140854110 < (c_1140854108.buf).length)) Temporary2 = false; else {        Temporary2 = (ConstSet288[c_1140854108.buf[chckIndx(pos_1140854110, 0, (c_1140854108.buf).length - 1)]] != undefined);      }    if (Temporary2) {
    tok_1140854109.kind = 23;
    tok_1140854109.index = 0;
    Label3: do {
        Label4: while (true) {
          if (!(pos_1140854110 < (c_1140854108.buf).length)) Temporary5 = false; else {            Temporary5 = (ConstSet289[c_1140854108.buf[chckIndx(pos_1140854110, 0, (c_1140854108.buf).length - 1)]] != undefined);          }        if (!Temporary5) break Label4;
          tok_1140854109.index = subInt(addInt(mulInt(tok_1140854109.index, 10), c_1140854108.buf[chckIndx(pos_1140854110, 0, (c_1140854108.buf).length - 1)]), 48);
          pos_1140854110 = addInt(pos_1140854110, 1);
        }
    } while (false);
    if (neg_1140854111) {
    tok_1140854109.index = negInt(tok_1140854109.index);
    }
    
    }
    else {
      if (neg_1140854111) {
      pos_1140854110 = subInt(pos_1140854110, 1);
      }
      
      tok_1140854109.kind = 24;
    }
    
    c_1140854108.bufpos = pos_1140854110;

  
}

function getTok_1140854219(c_1140854220, tok_1140854221) {
        var Temporary1;
        var Temporary2;
        var Temporary3;
        var Temporary4;
          var Temporary5;
          var Temporary6;
        var Temporary7;

  BeforeRet: do {
    tok_1140854221.kind = 0;
    tok_1140854221.modifier = 0;
    (tok_1140854221.literal.length = 0);
    skip_1140854079(c_1140854220);
    if (((c_1140854220.buf).length <= c_1140854220.bufpos)) {
    tok_1140854221.kind = 1;
    tok_1140854221.literal = nimCopy(null, makeNimstrLit("[EOF]"), NTI33554439);
    addChar(tok_1140854221.literal, 0);;
    c_1140854220.bufpos = addInt(c_1140854220.bufpos, 1);
    break BeforeRet;
    }
    
    switch (c_1140854220.buf[chckIndx(c_1140854220.bufpos, 0, (c_1140854220.buf).length - 1)]) {
    case 123:
      c_1140854220.bufpos = addInt(c_1140854220.bufpos, 1);
        if (!(c_1140854220.buf[chckIndx(c_1140854220.bufpos, 0, (c_1140854220.buf).length - 1)] == 64)) Temporary2 = false; else {          Temporary2 = (addInt(c_1140854220.bufpos, 2) < (c_1140854220.buf).length);        }        if (!Temporary2) Temporary1 = false; else {          Temporary1 = (c_1140854220.buf[chckIndx(addInt(c_1140854220.bufpos, 1), 0, (c_1140854220.buf).length - 1)] == 125);        }      if (Temporary1) {
      tok_1140854221.kind = 11;
      c_1140854220.bufpos = addInt(c_1140854220.bufpos, 2);
      tok_1140854221.literal.push.apply(tok_1140854221.literal, makeNimstrLit("{@}"));;
      }
      else {
        if (!(c_1140854220.buf[chckIndx(c_1140854220.bufpos, 0, (c_1140854220.buf).length - 1)] == 125)) Temporary3 = false; else {          Temporary3 = (c_1140854220.bufpos < (c_1140854220.buf).length);        }      if (Temporary3) {
      tok_1140854221.kind = 12;
      c_1140854220.bufpos = addInt(c_1140854220.bufpos, 1);
      tok_1140854221.literal.push.apply(tok_1140854221.literal, makeNimstrLit("{}"));;
      }
      else {
        tok_1140854221.kind = 9;
        addChar(tok_1140854221.literal, 123);;
      }
      }
      break;
    case 125:
      tok_1140854221.kind = 10;
      c_1140854220.bufpos = addInt(c_1140854220.bufpos, 1);
      addChar(tok_1140854221.literal, 125);;
      break;
    case 91:
      getCharSet_1140854138(c_1140854220, tok_1140854221);
      break;
    case 40:
      tok_1140854221.kind = 7;
      c_1140854220.bufpos = addInt(c_1140854220.bufpos, 1);
      addChar(tok_1140854221.literal, 40);;
      break;
    case 41:
      tok_1140854221.kind = 8;
      c_1140854220.bufpos = addInt(c_1140854220.bufpos, 1);
      addChar(tok_1140854221.literal, 41);;
      break;
    case 46:
      tok_1140854221.kind = 2;
      c_1140854220.bufpos = addInt(c_1140854220.bufpos, 1);
      addChar(tok_1140854221.literal, 46);;
      break;
    case 95:
      tok_1140854221.kind = 3;
      c_1140854220.bufpos = addInt(c_1140854220.bufpos, 1);
      addChar(tok_1140854221.literal, 95);;
      break;
    case 92:
      getBuiltin_1140854208(c_1140854220, tok_1140854221);
      break;
    case 39:
    case 34:
      getString_1140854094(c_1140854220, tok_1140854221);
      break;
    case 36:
      getDollar_1140854107(c_1140854220, tok_1140854221);
      break;
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
      getSymbol_1140854196(c_1140854220, tok_1140854221);
      if (((c_1140854220.buf).length <= c_1140854220.bufpos)) {
      break BeforeRet;
      }
      
        if ((ConstSet290[c_1140854220.buf[chckIndx(c_1140854220.bufpos, 0, (c_1140854220.buf).length - 1)]] != undefined)) Temporary4 = true; else {          if (!(c_1140854220.buf[chckIndx(c_1140854220.bufpos, 0, (c_1140854220.buf).length - 1)] == 36)) Temporary6 = false; else {            Temporary6 = (addInt(c_1140854220.bufpos, 1) < (c_1140854220.buf).length);          }          if (!Temporary6) Temporary5 = false; else {            Temporary5 = (ConstSet291[c_1140854220.buf[chckIndx(addInt(c_1140854220.bufpos, 1), 0, (c_1140854220.buf).length - 1)]] != undefined);          }          Temporary4 = Temporary5;        }      if (Temporary4) {
      switch (toJSStr(tok_1140854221.literal)) {
      case "i":
        tok_1140854221.modifier = 2;
        break;
      case "y":
        tok_1140854221.modifier = 3;
        break;
      case "v":
        tok_1140854221.modifier = 1;
        break;
      default: 
        break;
      }
      (tok_1140854221.literal.length = 0);
      if ((c_1140854220.buf[chckIndx(c_1140854220.bufpos, 0, (c_1140854220.buf).length - 1)] == 36)) {
      getDollar_1140854107(c_1140854220, tok_1140854221);
      }
      else {
      getString_1140854094(c_1140854220, tok_1140854221);
      }
      
      if ((tok_1140854221.modifier == 0)) {
      tok_1140854221.kind = 0;
      }
      
      }
      
      break;
    case 43:
      tok_1140854221.kind = 16;
      c_1140854220.bufpos = addInt(c_1140854220.bufpos, 1);
      addChar(tok_1140854221.literal, 43);;
      break;
    case 42:
      tok_1140854221.kind = 15;
      c_1140854220.bufpos = addInt(c_1140854220.bufpos, 1);
      addChar(tok_1140854221.literal, 43);;
      break;
    case 60:
        if (!(addInt(c_1140854220.bufpos, 2) < (c_1140854220.buf).length)) Temporary7 = false; else {          Temporary7 = (c_1140854220.buf[chckIndx(addInt(c_1140854220.bufpos, 1), 0, (c_1140854220.buf).length - 1)] == 45);        }      if (Temporary7) {
      c_1140854220.bufpos = addInt(c_1140854220.bufpos, 2);
      tok_1140854221.kind = 13;
      tok_1140854221.literal.push.apply(tok_1140854221.literal, makeNimstrLit("<-"));;
      }
      else {
      addChar(tok_1140854221.literal, 60);;
      }
      
      break;
    case 47:
      tok_1140854221.kind = 14;
      c_1140854220.bufpos = addInt(c_1140854220.bufpos, 1);
      addChar(tok_1140854221.literal, 47);;
      break;
    case 63:
      tok_1140854221.kind = 19;
      c_1140854220.bufpos = addInt(c_1140854220.bufpos, 1);
      addChar(tok_1140854221.literal, 63);;
      break;
    case 33:
      tok_1140854221.kind = 18;
      c_1140854220.bufpos = addInt(c_1140854220.bufpos, 1);
      addChar(tok_1140854221.literal, 33);;
      break;
    case 38:
      tok_1140854221.kind = 17;
      c_1140854220.bufpos = addInt(c_1140854220.bufpos, 1);
      addChar(tok_1140854221.literal, 33);;
      break;
    case 64:
      tok_1140854221.kind = 20;
      c_1140854220.bufpos = addInt(c_1140854220.bufpos, 1);
      addChar(tok_1140854221.literal, 64);;
      if ((c_1140854220.buf[chckIndx(c_1140854220.bufpos, 0, (c_1140854220.buf).length - 1)] == 64)) {
      tok_1140854221.kind = 11;
      c_1140854220.bufpos = addInt(c_1140854220.bufpos, 1);
      addChar(tok_1140854221.literal, 64);;
      }
      
      break;
    case 94:
      tok_1140854221.kind = 25;
      c_1140854220.bufpos = addInt(c_1140854220.bufpos, 1);
      addChar(tok_1140854221.literal, 94);;
      break;
    default: 
      if (((c_1140854220.buf).length <= c_1140854220.bufpos)) {
      tok_1140854221.kind = 1;
      tok_1140854221.literal = nimCopy(null, makeNimstrLit("[EOF]"), NTI33554439);
      }
      
      addChar(tok_1140854221.literal, c_1140854220.buf[chckIndx(c_1140854220.bufpos, 0, (c_1140854220.buf).length - 1)]);;
      c_1140854220.bufpos = addInt(c_1140854220.bufpos, 1);
      break;
    }
  } while (false);

  
}

function getLine_1140853960(L_1140853961) {
  var result_1140853962 = 0;

    result_1140853962 = L_1140853961.lineNumber;

  return result_1140853962;

}

function getColumn_1140853957(L_1140853958) {
  var result_1140853959 = 0;

    result_1140853959 = addInt(absInt(subInt(L_1140853958.bufpos, L_1140853958.lineStart)), L_1140853958.colOffset);

  return result_1140853959;

}

function errorStr_1140853963(L_1140853964, msg_1140853965, line_1140853966, col_1140853967) {
    var Temporary1;
    var Temporary2;

  var result_1140853968 = [];

    if ((line_1140853966 < 0)) {
    Temporary1 = getLine_1140853960(L_1140853964);
    }
    else {
    Temporary1 = line_1140853966;
    }
    
    var line_1140853969 = Temporary1;
    if ((col_1140853967 < 0)) {
    Temporary2 = getColumn_1140853957(L_1140853964);
    }
    else {
    Temporary2 = col_1140853967;
    }
    
    var col_1140853970 = Temporary2;
    result_1140853968 = nimCopy(null, nsuFormatOpenArray(makeNimstrLit("$1($2, $3) Error: $4"), [nimCopy(null, L_1140853964.filename, NTI33554439), HEX24_335544323(line_1140853969), HEX24_335544323(col_1140853970), nimCopy(null, msg_1140853965, NTI33554439)]), NTI33554439);

  return result_1140853968;

}

function pegError_1140854344(p_1140854345, msg_1140854346, line_1140854347, col_1140854348) {
    var e_1140854349 = null;
    e_1140854349 = ({m_type: NTI1140856318, parent: null, name: null, message: [], trace: [], up: null});
    e_1140854349.message = nimCopy(null, errorStr_1140853963(p_1140854345, msg_1140854346, line_1140854347, col_1140854348), NTI33554439);
    raiseException(e_1140854349, "EInvalidPeg");

  
}

function getTok_1140854392(p_1140854393) {
    getTok_1140854219(p_1140854393, p_1140854393.tok);
    if ((p_1140854393.tok.kind == 0)) {
    pegError_1140854344(p_1140854393, (makeNimstrLit("\'") || []).concat(p_1140854393.tok.literal || [],makeNimstrLit("\' is invalid token") || []), -1, -1);
    }
    

  
}

function npegsOptional(a_1140851039) {
  var result_1140851040 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    if ((ConstSet292[a_1140851039.kind] != undefined)) {
    result_1140851040 = nimCopy(result_1140851040, a_1140851039, NTI1140850696);
    }
    else {
      result_1140851040 = nimCopy(result_1140851040, {kind: 21, sons: [nimCopy(null, a_1140851039, NTI1140850696)], term: [], ch: 0, charChoice: null, nt: null, index: 0}, NTI1140850696);
    }
    

  return result_1140851040;

}

function npegsAndPredicate(a_1140851107) {
  var result_1140851108 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    result_1140851108 = nimCopy(result_1140851108, {kind: 22, sons: [nimCopy(null, a_1140851107, NTI1140850696)], term: [], ch: 0, charChoice: null, nt: null, index: 0}, NTI1140850696);

  return result_1140851108;

}

function npegsNotPredicate(a_1140851114) {
  var result_1140851115 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    result_1140851115 = nimCopy(result_1140851115, {kind: 23, sons: [nimCopy(null, a_1140851114, NTI1140850696)], term: [], ch: 0, charChoice: null, nt: null, index: 0}, NTI1140850696);

  return result_1140851115;

}

function npegsSearch(a_1140851072) {
  var result_1140851073 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    result_1140851073 = nimCopy(result_1140851073, {kind: 28, sons: [nimCopy(null, a_1140851072, NTI1140850696)], term: [], ch: 0, charChoice: null, nt: null, index: 0}, NTI1140850696);

  return result_1140851073;

}

function npgegsCapturedSearch(a_1140851079) {
  var result_1140851080 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    result_1140851080 = nimCopy(result_1140851080, {kind: 29, sons: [nimCopy(null, a_1140851079, NTI1140850696)], term: [], ch: 0, charChoice: null, nt: null, index: 0}, NTI1140850696);

  return result_1140851080;

}

function len_1140850944(a_1140850945) {
    var Temporary1;

  var result_1140850946 = 0;

  BeforeRet: do {
    var Temporary1 = a_1140850945;
    if (ConstSet294[Temporary1.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI1140850693)); }
    result_1140850946 = (Temporary1.sons).length;
    break BeforeRet;
  } while (false);

  return result_1140850946;

}

function npegstermStr(t_1140850913) {
  var result_1140850914 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    if (!(((t_1140850913).length == 1))) {
    result_1140850914 = nimCopy(result_1140850914, {kind: 9, term: nimCopy(null, t_1140850913, NTI33554439), ch: 0, charChoice: null, nt: null, index: 0, sons: []}, NTI1140850696);
    }
    else {
      result_1140850914 = nimCopy(result_1140850914, {kind: 12, ch: t_1140850913[chckIndx(0, 0, (t_1140850913).length - 1)], term: [], charChoice: null, nt: null, index: 0, sons: []}, NTI1140850696);
    }
    

  return result_1140850914;

}

function add_1140850950(d_1140850951, s_1140850952) {
    var Temporary1;

    var Temporary1 = d_1140850951;
    if (ConstSet304[Temporary1.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI1140850693)); }
    var Temporary2 = nimCopy(null, s_1140850952, NTI1140850696);
    Temporary1.sons.push(Temporary2);;

  
}

function addSequence_1140851009(dest_1140851010, elem_1140851011) {
      var Temporary1;
        var Temporary2;
        var Temporary3;
      var Temporary4;
      var Temporary5;
      var Temporary6;
      var Temporary7;
      var Temporary8;
      var Temporary9;
      var Temporary10;
      var Temporary11;
      var Temporary12;
      var Temporary13;
      var Temporary14;
      var Temporary15;

    var L_1140851012 = subInt(len_1140850944(dest_1140851010), 1);
      if (!(0 <= L_1140851012)) Temporary1 = false; else {        var Temporary2 = dest_1140851010;
        if (ConstSet295[Temporary2.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1140850693)); }
        Temporary1 = ((Temporary3 = Temporary2.sons, Temporary3)[chckIndx(L_1140851012, 0, (Temporary3).length - 1)].kind == 9);      }    if (Temporary1) {
    switch (elem_1140851011.kind) {
    case 9:
      var Temporary4 = dest_1140851010;
      if (ConstSet296[Temporary4.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1140850693)); }
      var Temporary6 = dest_1140851010;
      if (ConstSet298[Temporary6.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI1140850693)); }
      var Temporary8 = (Temporary7 = Temporary6.sons, Temporary7)[chckIndx(L_1140851012, 0, (Temporary7).length - 1)];
      if (ConstSet297[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI1140850693)); }
      var Temporary9 = elem_1140851011;
      if (ConstSet299[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI1140850693)); }
      (Temporary5 = Temporary4.sons, Temporary5)[chckIndx(L_1140851012, 0, (Temporary5).length - 1)] = nimCopy((Temporary5 = Temporary4.sons, Temporary5)[chckIndx(L_1140851012, 0, (Temporary5).length - 1)], npegstermStr((Temporary8.term || []).concat(Temporary9.term || [])), NTI1140850696);
      break;
    case 12:
      var Temporary10 = dest_1140851010;
      if (ConstSet300[Temporary10.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary10.kind, NTI1140850693)); }
      var Temporary12 = dest_1140851010;
      if (ConstSet302[Temporary12.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary12.kind, NTI1140850693)); }
      var Temporary14 = (Temporary13 = Temporary12.sons, Temporary13)[chckIndx(L_1140851012, 0, (Temporary13).length - 1)];
      if (ConstSet301[Temporary14.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'term\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary14.kind, NTI1140850693)); }
      var Temporary15 = elem_1140851011;
      if (ConstSet303[Temporary15.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'ch\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary15.kind, NTI1140850693)); }
      (Temporary11 = Temporary10.sons, Temporary11)[chckIndx(L_1140851012, 0, (Temporary11).length - 1)] = nimCopy((Temporary11 = Temporary10.sons, Temporary11)[chckIndx(L_1140851012, 0, (Temporary11).length - 1)], npegstermStr((Temporary14.term || []).concat([Temporary15.ch])), NTI1140850696);
      break;
    default: 
      add_1140850950(dest_1140851010, elem_1140851011);
      break;
    }
    }
    else {
    add_1140850950(dest_1140851010, elem_1140851011);
    }
    

  
}

function npegssequence(a_1140851018) {
              var Temporary5;
    var Temporary8;
    var Temporary9;

  var result_1140851019 = [({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []})];

    result_1140851019[0] = nimCopy(result_1140851019[0], {kind: 15, sons: [], term: [], ch: 0, charChoice: null, nt: null, index: 0}, NTI1140850696);
    Label1: do {
      var xHEX60gensym12_1140851029 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});
      var i_486540248 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486540248 < (a_1140851018).length)) break Label3;
            xHEX60gensym12_1140851029 = a_1140851018[chckIndx(i_486540248, 0, (a_1140851018).length - 1)];
            if ((xHEX60gensym12_1140851029.kind == 15)) {
            Label4: do {
              var yHEX60gensym12_1140851037 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});
              var colontmp__486540242 = [];
              var Temporary5 = xHEX60gensym12_1140851029;
              if (ConstSet293[Temporary5.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1140850693)); }
              colontmp__486540242 = Temporary5.sons;
              var i_486540244 = 0;
              var L_486540245 = (colontmp__486540242).length;
              Label6: do {
                  Label7: while (true) {
                  if (!(i_486540244 < L_486540245)) break Label7;
                    yHEX60gensym12_1140851037 = colontmp__486540242[chckIndx(i_486540244, 0, (colontmp__486540242).length - 1)];
                    addSequence_1140851009(result_1140851019[0], yHEX60gensym12_1140851037);
                    i_486540244 = addInt(i_486540244, 1);
                    if (!(((colontmp__486540242).length == L_486540245))) {
                    failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while (false);
            } while (false);
            }
            else {
            addSequence_1140851009(result_1140851019[0], xHEX60gensym12_1140851029);
            }
            
            i_486540248 = addInt(i_486540248, 1);
          }
      } while (false);
    } while (false);
    if ((len_1140850944(result_1140851019[0]) == 1)) {
    var Temporary8 = result_1140851019[0];
    if (ConstSet305[Temporary8.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI1140850693)); }
    result_1140851019[0] = nimCopy(result_1140851019[0], (Temporary9 = Temporary8.sons, Temporary9)[chckIndx(0, 0, (Temporary9).length - 1)], NTI1140850696);
    }
    

  return result_1140851019[0];

}

function token_1140854480(terminal_1140854481, p_1140854482) {
  var result_1140854483 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    if ((p_1140854482.skip.kind == 0)) {
    result_1140854483 = nimCopy(result_1140854483, terminal_1140854481, NTI1140850696);
    }
    else {
      result_1140854483 = nimCopy(result_1140854483, npegssequence([nimCopy(null, p_1140854482.skip, NTI1140850696), nimCopy(null, terminal_1140854481, NTI1140850696)]), NTI1140850696);
    }
    

  return result_1140854483;

}

function npegstermIgnoreCase(t_1140850916) {
  var result_1140850917 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    result_1140850917 = nimCopy(result_1140850917, {kind: 10, term: nimCopy(null, t_1140850916, NTI33554439), ch: 0, charChoice: null, nt: null, index: 0, sons: []}, NTI1140850696);

  return result_1140850917;

}

function npegstermIgnoreStyle(t_1140850919) {
  var result_1140850920 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    result_1140850920 = nimCopy(result_1140850920, {kind: 11, term: nimCopy(null, t_1140850919, NTI33554439), ch: 0, charChoice: null, nt: null, index: 0, sons: []}, NTI1140850696);

  return result_1140850920;

}

function modifiedTerm_1140854451(s_1140854452, m_1140854453) {
  var result_1140854454 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    switch (m_1140854453) {
    case 0:
    case 1:
      result_1140854454 = nimCopy(result_1140854454, npegstermStr(s_1140854452), NTI1140850696);
      break;
    case 2:
      result_1140854454 = nimCopy(result_1140854454, npegstermIgnoreCase(s_1140854452), NTI1140850696);
      break;
    case 3:
      result_1140854454 = nimCopy(result_1140854454, npegstermIgnoreStyle(s_1140854452), NTI1140850696);
      break;
    }

  return result_1140854454;

}

function arrowIsNextTok_1140854324(c_1140854325) {
  var result_1140854326 = false;

  BeforeRet: do {
    var pos_1140854327 = c_1140854325.bufpos;
    Label1: do {
        Label2: while (true) {
        if (!((pos_1140854327 < (c_1140854325.buf).length) && (ConstSet306[c_1140854325.buf[chckIndx(pos_1140854327, 0, (c_1140854325.buf).length - 1)]] != undefined))) break Label2;
          pos_1140854327 = addInt(pos_1140854327, 1);
        }
    } while (false);
    if (((c_1140854325.buf).length <= addInt(pos_1140854327, 1))) {
    break BeforeRet;
    }
    
    result_1140854326 = ((c_1140854325.buf[chckIndx(pos_1140854327, 0, (c_1140854325.buf).length - 1)] == 60) && (c_1140854325.buf[chckIndx(addInt(pos_1140854327, 1), 0, (c_1140854325.buf).length - 1)] == 45));
  } while (false);

  return result_1140854326;

}

function npegsnewNonTerminal(name_1140851198, line_1140851199, column_1140851200) {
  var result_1140851201 = null;

    result_1140851201 = {name: nimCopy(null, name_1140851198, NTI33554439), line: line_1140851199, col: column_1140851200, flags: {}, rule: ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []})};

  return result_1140851201;

}

function getNonTerminal_1140854417(p_1140854418, name_1140854419) {
  var result_1140854420 = null;

  BeforeRet: do {
    Label1: do {
      var i_1140854428 = 0;
      var colontmp__486540252 = 0;
      colontmp__486540252 = (p_1140854418.nonterms).length - 1;
      var res_486540253 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_486540253 <= colontmp__486540252)) break Label3;
            i_1140854428 = res_486540253;
            result_1140854420 = p_1140854418.nonterms[chckIndx(i_1140854428, 0, (p_1140854418.nonterms).length - 1)];
            if ((nsuCmpIgnoreStyle(result_1140854420.name, name_1140854419) == 0)) {
            break BeforeRet;
            }
            
            res_486540253 = addInt(res_486540253, 1);
          }
      } while (false);
    } while (false);
    result_1140854420 = npegsnewNonTerminal(name_1140854419, getLine_1140853960(p_1140854418), getColumn_1140853957(p_1140854418));
    p_1140854418.nonterms.push(result_1140854420);;
  } while (false);

  return result_1140854420;

}

function spaceCost_1140851168(n_1140851169) {
              var Temporary4;
              var Temporary5;

  var result_1140851170 = 0;

    switch (n_1140851169.kind) {
    case 0:
      break;
    case 9:
    case 10:
    case 11:
    case 12:
    case 18:
    case 13:
    case 19:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 20:
    case 25:
    case 26:
    case 27:
      result_1140851170 = 1;
      break;
    case 14:
      result_1140851170 = 6;
      break;
    default: 
      Label1: do {
        var i_1140851175 = 0;
        var colontmp__486540256 = 0;
        colontmp__486540256 = subInt(len_1140850944(n_1140851169), 1);
        var res_486540257 = 0;
        Label2: do {
            Label3: while (true) {
            if (!(res_486540257 <= colontmp__486540256)) break Label3;
              i_1140851175 = res_486540257;
              var Temporary4 = n_1140851169;
              if (ConstSet307[Temporary4.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1140850693)); }
              result_1140851170 = addInt(result_1140851170, spaceCost_1140851168((Temporary5 = Temporary4.sons, Temporary5)[chckIndx(i_1140851175, 0, (Temporary5).length - 1)]));
              if ((5 <= result_1140851170)) {
              break Label1;
              }
              
              res_486540257 = addInt(res_486540257, 1);
            }
        } while (false);
      } while (false);
      break;
    }

  return result_1140851170;

}

function npegsnonterminal(n_1140851181) {
      var Temporary1;

  var result_1140851182 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    if (!(!((n_1140851181 == null)))) {
    failedAssertImpl_218103864(makeNimstrLit("pegs.nim(350, 10) `n != nil` "));
    }
    
      if (!(n_1140851181.flags[0] != undefined)) Temporary1 = false; else {        Temporary1 = (spaceCost_1140851168(n_1140851181.rule) < 5);      }    if (Temporary1) {
    result_1140851182 = nimCopy(result_1140851182, n_1140851181.rule, NTI1140850696);
    }
    else {
      result_1140851182 = nimCopy(result_1140851182, {kind: 14, nt: n_1140851181, term: [], ch: 0, charChoice: null, index: 0, sons: []}, NTI1140850696);
    }
    

  return result_1140851182;

}

function npegscharSet(s_1140850930) {
    var Temporary1;
    var Temporary2;

  var result_1140850931 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    if (!(!((s_1140850930[0] != undefined)))) {
    failedAssertImpl_218103864(makeNimstrLit("pegs.nim(167, 10) `\'\\x00\' notin s` "));
    }
    
    result_1140850931 = nimCopy(result_1140850931, {kind: 13, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []}, NTI1140850696);
    var Temporary1 = result_1140850931;
    if (ConstSet308[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'charChoice\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI1140850693)); }
    Temporary1.charChoice = {};
    var Temporary2 = result_1140850931;
    if (ConstSet309[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'charChoice\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1140850693)); }
    Temporary2.charChoice = nimCopy(Temporary2.charChoice, s_1140850930, NTI1140850701);

  return result_1140850931;

}

function seqExpr_1140854519(p_1140854520) {
  var result_1140854521 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    result_1140854521 = nimCopy(result_1140854521, primary_1140854488(p_1140854520), NTI1140850696);
    Label1: do {
        Label2: while (true) {
        if (!true) break Label2;
          switch (p_1140854520.tok.kind) {
          case 17:
          case 18:
          case 20:
          case 5:
          case 6:
          case 7:
          case 9:
          case 2:
          case 3:
          case 21:
          case 22:
          case 24:
          case 23:
          case 25:
          case 11:
          case 12:
            result_1140854521 = nimCopy(result_1140854521, npegssequence([nimCopy(null, result_1140854521, NTI1140850696), primary_1140854488(p_1140854520)]), NTI1140850696);
            break;
          case 4:
            if (!(arrowIsNextTok_1140854324(p_1140854520))) {
            result_1140854521 = nimCopy(result_1140854521, npegssequence([nimCopy(null, result_1140854521, NTI1140850696), primary_1140854488(p_1140854520)]), NTI1140850696);
            }
            else {
              break Label1;
            }
            
            break;
          default: 
            break Label1;
            break;
          }
        }
    } while (false);

  return result_1140854521;

}

function addChoice_1140850957(dest_1140850958, elem_1140850959) {
      var Temporary1;
        var Temporary2;
        var Temporary3;
      var Temporary4;
      var Temporary5;
      var Temporary6;
      var Temporary7;
      var Temporary8;
      var Temporary9;
      var Temporary10;
      var Temporary11;
      var Temporary12;
      var Temporary13;
      var Temporary14;
      var Temporary15;

    var L_1140850960 = subInt(len_1140850944(dest_1140850958), 1);
      if (!(0 <= L_1140850960)) Temporary1 = false; else {        var Temporary2 = dest_1140850958;
        if (ConstSet311[Temporary2.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1140850693)); }
        Temporary1 = ((Temporary3 = Temporary2.sons, Temporary3)[chckIndx(L_1140850960, 0, (Temporary3).length - 1)].kind == 13);      }    if (Temporary1) {
    switch (elem_1140850959.kind) {
    case 13:
      var Temporary4 = dest_1140850958;
      if (ConstSet312[Temporary4.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1140850693)); }
      var Temporary6 = dest_1140850958;
      if (ConstSet314[Temporary6.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI1140850693)); }
      var Temporary8 = (Temporary7 = Temporary6.sons, Temporary7)[chckIndx(L_1140850960, 0, (Temporary7).length - 1)];
      if (ConstSet313[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'charChoice\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI1140850693)); }
      var Temporary9 = elem_1140850959;
      if (ConstSet315[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'charChoice\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI1140850693)); }
      (Temporary5 = Temporary4.sons, Temporary5)[chckIndx(L_1140850960, 0, (Temporary5).length - 1)] = nimCopy((Temporary5 = Temporary4.sons, Temporary5)[chckIndx(L_1140850960, 0, (Temporary5).length - 1)], npegscharSet(SetPlus(Temporary8.charChoice, Temporary9.charChoice)), NTI1140850696);
      break;
    case 12:
      var Temporary10 = dest_1140850958;
      if (ConstSet316[Temporary10.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary10.kind, NTI1140850693)); }
      var Temporary12 = dest_1140850958;
      if (ConstSet318[Temporary12.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary12.kind, NTI1140850693)); }
      var Temporary14 = (Temporary13 = Temporary12.sons, Temporary13)[chckIndx(L_1140850960, 0, (Temporary13).length - 1)];
      if (ConstSet317[Temporary14.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'charChoice\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary14.kind, NTI1140850693)); }
      var Temporary15 = elem_1140850959;
      if (ConstSet319[Temporary15.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'ch\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary15.kind, NTI1140850693)); }
      (Temporary11 = Temporary10.sons, Temporary11)[chckIndx(L_1140850960, 0, (Temporary11).length - 1)] = nimCopy((Temporary11 = Temporary10.sons, Temporary11)[chckIndx(L_1140850960, 0, (Temporary11).length - 1)], npegscharSet(SetPlus(Temporary14.charChoice, setConstr(Temporary15.ch))), NTI1140850696);
      break;
    default: 
      add_1140850950(dest_1140850958, elem_1140850959);
      break;
    }
    }
    else {
    add_1140850950(dest_1140850958, elem_1140850959);
    }
    

  
}

function npegsOrderedChoice(a_1140850980) {
              var Temporary5;
    var Temporary8;
    var Temporary9;

  var result_1140850981 = [({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []})];

    result_1140850981[0] = nimCopy(result_1140850981[0], {kind: 16, sons: [], term: [], ch: 0, charChoice: null, nt: null, index: 0}, NTI1140850696);
    Label1: do {
      var xHEX60gensym10_1140851000 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});
      var i_486540267 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486540267 < (a_1140850980).length)) break Label3;
            xHEX60gensym10_1140851000 = a_1140850980[chckIndx(i_486540267, 0, (a_1140850980).length - 1)];
            if ((xHEX60gensym10_1140851000.kind == 16)) {
            Label4: do {
              var yHEX60gensym10_1140851008 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});
              var colontmp__486540263 = [];
              var Temporary5 = xHEX60gensym10_1140851000;
              if (ConstSet310[Temporary5.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1140850693)); }
              colontmp__486540263 = Temporary5.sons;
              var i_486540264 = 0;
              var L_486540265 = (colontmp__486540263).length;
              Label6: do {
                  Label7: while (true) {
                  if (!(i_486540264 < L_486540265)) break Label7;
                    yHEX60gensym10_1140851008 = colontmp__486540263[chckIndx(i_486540264, 0, (colontmp__486540263).length - 1)];
                    addChoice_1140850957(result_1140850981[0], yHEX60gensym10_1140851008);
                    i_486540264 = addInt(i_486540264, 1);
                    if (!(((colontmp__486540263).length == L_486540265))) {
                    failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while (false);
            } while (false);
            }
            else {
            addChoice_1140850957(result_1140850981[0], xHEX60gensym10_1140851000);
            }
            
            i_486540267 = addInt(i_486540267, 1);
          }
      } while (false);
    } while (false);
    if ((len_1140850944(result_1140850981[0]) == 1)) {
    var Temporary8 = result_1140850981[0];
    if (ConstSet320[Temporary8.kind]!==undefined) { raiseFieldError2(makeNimstrLit("field \'sons\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI1140850693)); }
    result_1140850981[0] = nimCopy(result_1140850981[0], (Temporary9 = Temporary8.sons, Temporary9)[chckIndx(0, 0, (Temporary9).length - 1)], NTI1140850696);
    }
    

  return result_1140850981[0];

}

function parseExpr_1140854415(p_1140854416) {
  var result_1140854524 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    result_1140854524 = nimCopy(result_1140854524, seqExpr_1140854519(p_1140854416), NTI1140850696);
    Label1: do {
        Label2: while (true) {
        if (!(p_1140854416.tok.kind == 14)) break Label2;
          getTok_1140854392(p_1140854416);
          result_1140854524 = nimCopy(result_1140854524, npegsOrderedChoice([nimCopy(null, result_1140854524, NTI1140850696), seqExpr_1140854519(p_1140854416)]), NTI1140850696);
        }
    } while (false);

  return result_1140854524;

}

function eat_1140854408(p_1140854409, kind_1140854410) {
    if ((p_1140854409.tok.kind == kind_1140854410)) {
    getTok_1140854392(p_1140854409);
    }
    else {
    pegError_1140854344(p_1140854409, (tokKindToStr_1140853911[chckIndx(kind_1140854410, 0, (tokKindToStr_1140853911).length - 1)] || []).concat(makeNimstrLit(" expected") || []), -1, -1);
    }
    

  
}

function npegsCapture(a_1140851141) {
  var result_1140851142 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    result_1140851142 = nimCopy(result_1140851142, {kind: 24, sons: [nimCopy(null, a_1140851141, NTI1140850696)], term: [], ch: 0, charChoice: null, nt: null, index: 0}, NTI1140850696);

  return result_1140851142;

}

function any_1140851120() {
  var result_1140851121 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    result_1140851121 = nimCopy(result_1140851121, {kind: 1, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []}, NTI1140850696);

  return result_1140851121;

}

function anyRune_1140851122() {
  var result_1140851123 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    result_1140851123 = nimCopy(result_1140851123, {kind: 2, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []}, NTI1140850696);

  return result_1140851123;

}

function newLine_1140851124() {
  var result_1140851125 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    result_1140851125 = nimCopy(result_1140851125, {kind: 3, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []}, NTI1140850696);

  return result_1140851125;

}

function npegsGreedyRep(a_1140851060) {
      var Temporary1;
      var Temporary2;

  var result_1140851061 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    switch (a_1140851060.kind) {
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      if (true) {
      failedAssertImpl_218103864(makeNimstrLit("pegs.nim(234, 12) `false` "));
      }
      
      break;
    case 12:
      var Temporary1 = a_1140851060;
      if (ConstSet330[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'ch\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI1140850693)); }
      result_1140851061 = nimCopy(result_1140851061, {kind: 18, ch: Temporary1.ch, term: [], charChoice: null, nt: null, index: 0, sons: []}, NTI1140850696);
      break;
    case 13:
      var Temporary2 = a_1140851060;
      if (ConstSet331[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'charChoice\' is not accessible for type \'Peg\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1140850693)); }
      result_1140851061 = nimCopy(result_1140851061, {kind: 19, charChoice: Temporary2.charChoice, term: [], ch: 0, nt: null, index: 0, sons: []}, NTI1140850696);
      break;
    case 1:
    case 2:
      result_1140851061 = nimCopy(result_1140851061, {kind: 20, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []}, NTI1140850696);
      break;
    default: 
      result_1140851061 = nimCopy(result_1140851061, {kind: 17, sons: [nimCopy(null, a_1140851060, NTI1140850696)], term: [], ch: 0, charChoice: null, nt: null, index: 0}, NTI1140850696);
      break;
    }

  return result_1140851061;

}

function unicodeLetter_1140851126() {
  var result_1140851127 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    result_1140851127 = nimCopy(result_1140851127, {kind: 4, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []}, NTI1140850696);

  return result_1140851127;

}

function unicodeUpper_1140851130() {
  var result_1140851131 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    result_1140851131 = nimCopy(result_1140851131, {kind: 6, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []}, NTI1140850696);

  return result_1140851131;

}

function unicodeLower_1140851128() {
  var result_1140851129 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    result_1140851129 = nimCopy(result_1140851129, {kind: 5, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []}, NTI1140850696);

  return result_1140851129;

}

function unicodeTitle_1140851132() {
  var result_1140851133 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    result_1140851133 = nimCopy(result_1140851133, {kind: 7, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []}, NTI1140850696);

  return result_1140851133;

}

function unicodeWhitespace_1140851134() {
  var result_1140851135 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    result_1140851135 = nimCopy(result_1140851135, {kind: 8, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []}, NTI1140850696);

  return result_1140851135;

}

function builtin_1140854461(p_1140854462) {
  var result_1140854463 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    switch (toJSStr(p_1140854462.tok.literal)) {
    case "n":
      result_1140854463 = nimCopy(result_1140854463, newLine_1140851124(), NTI1140850696);
      break;
    case "d":
      result_1140854463 = nimCopy(result_1140854463, npegscharSet(ConstSet321), NTI1140850696);
      break;
    case "D":
      result_1140854463 = nimCopy(result_1140854463, npegscharSet(ConstSet322), NTI1140850696);
      break;
    case "s":
      result_1140854463 = nimCopy(result_1140854463, npegscharSet(ConstSet323), NTI1140850696);
      break;
    case "S":
      result_1140854463 = nimCopy(result_1140854463, npegscharSet(ConstSet324), NTI1140850696);
      break;
    case "w":
      result_1140854463 = nimCopy(result_1140854463, npegscharSet(ConstSet325), NTI1140850696);
      break;
    case "W":
      result_1140854463 = nimCopy(result_1140854463, npegscharSet(ConstSet326), NTI1140850696);
      break;
    case "a":
      result_1140854463 = nimCopy(result_1140854463, npegscharSet(ConstSet327), NTI1140850696);
      break;
    case "A":
      result_1140854463 = nimCopy(result_1140854463, npegscharSet(ConstSet328), NTI1140850696);
      break;
    case "ident":
      result_1140854463 = nimCopy(result_1140854463, npegssequence([npegscharSet(ConstSet329), npegsGreedyRep(npegscharSet(ConstSet332))]), NTI1140850696);
      break;
    case "letter":
      result_1140854463 = nimCopy(result_1140854463, unicodeLetter_1140851126(), NTI1140850696);
      break;
    case "upper":
      result_1140854463 = nimCopy(result_1140854463, unicodeUpper_1140851130(), NTI1140850696);
      break;
    case "lower":
      result_1140854463 = nimCopy(result_1140854463, unicodeLower_1140851128(), NTI1140850696);
      break;
    case "title":
      result_1140854463 = nimCopy(result_1140854463, unicodeTitle_1140851132(), NTI1140850696);
      break;
    case "white":
      result_1140854463 = nimCopy(result_1140854463, unicodeWhitespace_1140851134(), NTI1140850696);
      break;
    default: 
      pegError_1140854344(p_1140854462, (makeNimstrLit("unknown built-in: ") || []).concat(p_1140854462.tok.literal || []), -1, -1);
      break;
    }

  return result_1140854463;

}

function npegstermChar(t_1140850922) {
  var result_1140850923 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    if (!(!((t_1140850922 == 0)))) {
    failedAssertImpl_218103864(makeNimstrLit("pegs.nim(162, 10) `t != \'\\x00\'` "));
    }
    
    result_1140850923 = nimCopy(result_1140850923, {kind: 12, ch: t_1140850922, term: [], charChoice: null, nt: null, index: 0, sons: []}, NTI1140850696);

  return result_1140850923;

}

function endAnchor_1140851138() {
  var result_1140851139 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    result_1140851139 = nimCopy(result_1140851139, npegsNotPredicate(any_1140851120()), NTI1140850696);

  return result_1140851139;

}

function startAnchor_1140851136() {
  var result_1140851137 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    result_1140851137 = nimCopy(result_1140851137, {kind: 32, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []}, NTI1140850696);

  return result_1140851137;

}

function npegsbackref(index_1140851148, reverse_1140851149) {
    var Temporary1;

  var result_1140851150 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    if (reverse_1140851149) {
    Temporary1 = negInt(index_1140851148);
    }
    else {
    Temporary1 = subInt(index_1140851148, 1);
    }
    
    result_1140851150 = nimCopy(result_1140851150, {kind: 25, index: nimCopy(null, chckRange(Temporary1, -20, 19), NTI1140850703), term: [], ch: 0, charChoice: null, nt: null, sons: []}, NTI1140850696);

  return result_1140851150;

}

function npegsbackrefIgnoreCase(index_1140851161, reverse_1140851162) {
    var Temporary1;

  var result_1140851163 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    if (reverse_1140851162) {
    Temporary1 = negInt(index_1140851161);
    }
    else {
    Temporary1 = subInt(index_1140851161, 1);
    }
    
    result_1140851163 = nimCopy(result_1140851163, {kind: 26, index: nimCopy(null, chckRange(Temporary1, -20, 19), NTI1140850703), term: [], ch: 0, charChoice: null, nt: null, sons: []}, NTI1140850696);

  return result_1140851163;

}

function npegsbackrefIgnoreStyle(index_1140851165, reverse_1140851166) {
    var Temporary1;

  var result_1140851167 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    if (reverse_1140851166) {
    Temporary1 = negInt(index_1140851165);
    }
    else {
    Temporary1 = subInt(index_1140851165, 1);
    }
    
    result_1140851167 = nimCopy(result_1140851167, {kind: 27, index: nimCopy(null, chckRange(Temporary1, -20, 19), NTI1140850703), term: [], ch: 0, charChoice: null, nt: null, sons: []}, NTI1140850696);

  return result_1140851167;

}

function modifiedBackref_1140854455(s_1140854456, m_1140854457) {
    var Temporary1;

  var result_1140854458 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    var reverse_1140854459 = (s_1140854456 < 0);
    if (reverse_1140854459) {
    Temporary1 = negInt(s_1140854456);
    }
    else {
    Temporary1 = s_1140854456;
    }
    
    var index_1140854460 = Temporary1;
    switch (m_1140854457) {
    case 0:
    case 1:
      result_1140854458 = nimCopy(result_1140854458, npegsbackref(chckRange(index_1140854460, 1, 20), reverse_1140854459), NTI1140850696);
      break;
    case 2:
      result_1140854458 = nimCopy(result_1140854458, npegsbackrefIgnoreCase(chckRange(index_1140854460, 1, 20), reverse_1140854459), NTI1140850696);
      break;
    case 3:
      result_1140854458 = nimCopy(result_1140854458, npegsbackrefIgnoreStyle(chckRange(index_1140854460, 1, 20), reverse_1140854459), NTI1140850696);
      break;
    }

  return result_1140854458;

}

function npegsGreedyPosRep(a_1140851086) {
  var result_1140851087 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

  BeforeRet: do {
    result_1140851087 = nimCopy(result_1140851087, npegssequence([nimCopy(null, a_1140851086, NTI1140850696), npegsGreedyRep(a_1140851086)]), NTI1140850696);
    break BeforeRet;
  } while (false);

  return result_1140851087;

}

function primary_1140854488(p_1140854489) {
        var Temporary1;

  var result_1140854490 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

  BeforeRet: do {
    switch (p_1140854489.tok.kind) {
    case 17:
      getTok_1140854392(p_1140854489);
      result_1140854490 = nimCopy(result_1140854490, npegsAndPredicate(primary_1140854488(p_1140854489)), NTI1140850696);
      break BeforeRet;
      break;
    case 18:
      getTok_1140854392(p_1140854489);
      result_1140854490 = nimCopy(result_1140854490, npegsNotPredicate(primary_1140854488(p_1140854489)), NTI1140850696);
      break BeforeRet;
      break;
    case 20:
      getTok_1140854392(p_1140854489);
      result_1140854490 = nimCopy(result_1140854490, npegsSearch(primary_1140854488(p_1140854489)), NTI1140850696);
      break BeforeRet;
      break;
    case 11:
      getTok_1140854392(p_1140854489);
      result_1140854490 = nimCopy(result_1140854490, npgegsCapturedSearch(token_1140854480(primary_1140854488(p_1140854489), p_1140854489)), NTI1140850696);
      break BeforeRet;
      break;
    default: 
      break;
    }
    switch (p_1140854489.tok.kind) {
    case 4:
      if (p_1140854489.identIsVerbatim) {
      var m_1140854491 = p_1140854489.tok.modifier;
      if ((m_1140854491 == 0)) {
      m_1140854491 = p_1140854489.modifier;
      }
      
      result_1140854490 = nimCopy(result_1140854490, token_1140854480(modifiedTerm_1140854451(p_1140854489.tok.literal, m_1140854491), p_1140854489), NTI1140850696);
      getTok_1140854392(p_1140854489);
      }
      else {
      if (!(arrowIsNextTok_1140854324(p_1140854489))) {
      var nt_1140854496 = getNonTerminal_1140854417(p_1140854489, p_1140854489.tok.literal);
      nt_1140854496.flags[1] = true;
      result_1140854490 = nimCopy(result_1140854490, token_1140854480(npegsnonterminal(nt_1140854496), p_1140854489), NTI1140850696);
      getTok_1140854392(p_1140854489);
      }
      else {
      pegError_1140854344(p_1140854489, (makeNimstrLit("expression expected, but found: ") || []).concat(p_1140854489.tok.literal || []), -1, -1);
      }
      }
      break;
    case 5:
      var m_1140854501 = p_1140854489.tok.modifier;
      if ((m_1140854501 == 0)) {
      m_1140854501 = p_1140854489.modifier;
      }
      
      result_1140854490 = nimCopy(result_1140854490, token_1140854480(modifiedTerm_1140854451(p_1140854489.tok.literal, m_1140854501), p_1140854489), NTI1140850696);
      getTok_1140854392(p_1140854489);
      break;
    case 6:
      if ((p_1140854489.tok.charset[0] != undefined)) {
      pegError_1140854344(p_1140854489, makeNimstrLit("binary zero (\'\\0\') not allowed in character class"), -1, -1);
      }
      
      result_1140854490 = nimCopy(result_1140854490, token_1140854480(npegscharSet(p_1140854489.tok.charset), p_1140854489), NTI1140850696);
      getTok_1140854392(p_1140854489);
      break;
    case 7:
      getTok_1140854392(p_1140854489);
      result_1140854490 = nimCopy(result_1140854490, parseExpr_1140854415(p_1140854489), NTI1140850696);
      eat_1140854408(p_1140854489, 8);
      break;
    case 9:
      getTok_1140854392(p_1140854489);
      result_1140854490 = nimCopy(result_1140854490, token_1140854480(npegsCapture(parseExpr_1140854415(p_1140854489)), p_1140854489), NTI1140850696);
      eat_1140854408(p_1140854489, 10);
      p_1140854489.captures = addInt(p_1140854489.captures, 1);
      break;
    case 12:
      result_1140854490 = nimCopy(result_1140854490, npegsCapture({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []}), NTI1140850696);
      getTok_1140854392(p_1140854489);
      break;
    case 2:
      result_1140854490 = nimCopy(result_1140854490, token_1140854480(any_1140851120(), p_1140854489), NTI1140850696);
      getTok_1140854392(p_1140854489);
      break;
    case 3:
      result_1140854490 = nimCopy(result_1140854490, token_1140854480(anyRune_1140851122(), p_1140854489), NTI1140850696);
      getTok_1140854392(p_1140854489);
      break;
    case 21:
      result_1140854490 = nimCopy(result_1140854490, token_1140854480(builtin_1140854461(p_1140854489), p_1140854489), NTI1140850696);
      getTok_1140854392(p_1140854489);
      break;
    case 22:
      result_1140854490 = nimCopy(result_1140854490, token_1140854480(npegstermChar(p_1140854489.tok.literal[chckIndx(0, 0, (p_1140854489.tok.literal).length - 1)]), p_1140854489), NTI1140850696);
      getTok_1140854392(p_1140854489);
      break;
    case 24:
      result_1140854490 = nimCopy(result_1140854490, endAnchor_1140851138(), NTI1140850696);
      getTok_1140854392(p_1140854489);
      break;
    case 25:
      result_1140854490 = nimCopy(result_1140854490, startAnchor_1140851136(), NTI1140850696);
      getTok_1140854392(p_1140854489);
      break;
    case 23:
        if ((p_1140854489.captures < absInt(p_1140854489.tok.index))) Temporary1 = true; else {          Temporary1 = (p_1140854489.tok.index == 0);        }      if (Temporary1) {
      pegError_1140854344(p_1140854489, (makeNimstrLit("invalid back reference index: ") || []).concat(HEX24_335544323(p_1140854489.tok.index) || []), -1, -1);
      }
      
      var m_1140854514 = p_1140854489.tok.modifier;
      if ((m_1140854514 == 0)) {
      m_1140854514 = p_1140854489.modifier;
      }
      
      result_1140854490 = nimCopy(result_1140854490, token_1140854480(modifiedBackref_1140854455(p_1140854489.tok.index, m_1140854514), p_1140854489), NTI1140850696);
      getTok_1140854392(p_1140854489);
      break;
    default: 
      pegError_1140854344(p_1140854489, (makeNimstrLit("expression expected, but found: ") || []).concat(p_1140854489.tok.literal || []), -1, -1);
      getTok_1140854392(p_1140854489);
      break;
    }
    Label2: do {
        Label3: while (true) {
        if (!true) break Label3;
          switch (p_1140854489.tok.kind) {
          case 19:
            result_1140854490 = nimCopy(result_1140854490, npegsOptional(result_1140854490), NTI1140850696);
            getTok_1140854392(p_1140854489);
            break;
          case 15:
            result_1140854490 = nimCopy(result_1140854490, npegsGreedyRep(result_1140854490), NTI1140850696);
            getTok_1140854392(p_1140854489);
            break;
          case 16:
            result_1140854490 = nimCopy(result_1140854490, npegsGreedyPosRep(result_1140854490), NTI1140850696);
            getTok_1140854392(p_1140854489);
            break;
          default: 
            break Label2;
            break;
          }
        }
    } while (false);
  } while (false);

  return result_1140854490;

}

function parseRule_1140854529(p_1140854530) {
      var Temporary1;

  var result_1140854531 = null;

      if (!(p_1140854530.tok.kind == 4)) Temporary1 = false; else {        Temporary1 = arrowIsNextTok_1140854324(p_1140854530);      }    if (Temporary1) {
    result_1140854531 = getNonTerminal_1140854417(p_1140854530, p_1140854530.tok.literal);
    if ((result_1140854531.flags[0] != undefined)) {
    pegError_1140854344(p_1140854530, (makeNimstrLit("attempt to redefine: ") || []).concat(result_1140854531.name || []), -1, -1);
    }
    
    result_1140854531.line = getLine_1140853960(p_1140854530);
    result_1140854531.col = getColumn_1140853957(p_1140854530);
    getTok_1140854392(p_1140854530);
    eat_1140854408(p_1140854530, 13);
    result_1140854531.rule = nimCopy(result_1140854531.rule, parseExpr_1140854415(p_1140854530), NTI1140850696);
    result_1140854531.flags[0] = true;
    }
    else {
    pegError_1140854344(p_1140854530, (makeNimstrLit("rule expected, but found: ") || []).concat(p_1140854530.tok.literal || []), -1, -1);
    }
    

  return result_1140854531;

}

function rawParse_1140854544(p_1140854545) {
      var Temporary3;
              var Temporary9;

  var result_1140854546 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    Label1: do {
        Label2: while (true) {
        if (!(p_1140854545.tok.kind == 21)) break Label2;
          switch (toJSStr(p_1140854545.tok.literal)) {
          case "i":
            p_1140854545.modifier = 2;
            getTok_1140854392(p_1140854545);
            break;
          case "y":
            p_1140854545.modifier = 3;
            getTok_1140854392(p_1140854545);
            break;
          case "skip":
            getTok_1140854392(p_1140854545);
            p_1140854545.skip = nimCopy(p_1140854545.skip, npegsOptional(primary_1140854488(p_1140854545)), NTI1140850696);
            break;
          default: 
            break Label1;
            break;
          }
        }
    } while (false);
      if (!(p_1140854545.tok.kind == 4)) Temporary3 = false; else {        Temporary3 = arrowIsNextTok_1140854324(p_1140854545);      }    if (Temporary3) {
    result_1140854546 = nimCopy(result_1140854546, parseRule_1140854529(p_1140854545).rule, NTI1140850696);
    Label4: do {
        Label5: while (true) {
        if (!!((p_1140854545.tok.kind == 1))) break Label5;
          var _ = parseRule_1140854529(p_1140854545);
        }
    } while (false);
    }
    else {
      p_1140854545.identIsVerbatim = true;
      result_1140854546 = nimCopy(result_1140854546, parseExpr_1140854415(p_1140854545), NTI1140850696);
    }
    
    if (!((p_1140854545.tok.kind == 1))) {
    pegError_1140854344(p_1140854545, (makeNimstrLit("EOF expected, but found: ") || []).concat(p_1140854545.tok.literal || []), -1, -1);
    }
    
    Label6: do {
      var i_1140854570 = 0;
      var colontmp__486540236 = 0;
      colontmp__486540236 = (p_1140854545.nonterms).length - 1;
      var res_486540237 = 0;
      Label7: do {
          Label8: while (true) {
          if (!(res_486540237 <= colontmp__486540236)) break Label8;
            i_1140854570 = res_486540237;
            var nt_1140854571 = p_1140854545.nonterms[chckIndx(i_1140854570, 0, (p_1140854545.nonterms).length - 1)];
            if (!((nt_1140854571.flags[0] != undefined))) {
            pegError_1140854344(p_1140854545, (makeNimstrLit("undeclared identifier: ") || []).concat(nt_1140854571.name || []), nt_1140854571.line, nt_1140854571.col);
            }
            else {
              if (!!((nt_1140854571.flags[1] != undefined))) Temporary9 = false; else {                Temporary9 = (0 < i_1140854570);              }            if (Temporary9) {
            pegError_1140854344(p_1140854545, (makeNimstrLit("unused rule: ") || []).concat(nt_1140854571.name || []), nt_1140854571.line, nt_1140854571.col);
            }
            }
            res_486540237 = addInt(res_486540237, 1);
          }
      } while (false);
    } while (false);

  return result_1140854546;

}

function parsePeg_1140854580(pattern_1140854581, filename_1140854582, line_1140854583, col_1140854584) {
  var result_1140854585 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    var p_1140854586 = [({m_type: NTI1140856319, tok: ({kind: 0, modifier: 0, literal: [], charset: {}, index: 0}), nonterms: [], modifier: 0, captures: 0, identIsVerbatim: false, skip: ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []}), bufpos: 0, buf: [], lineNumber: 0, lineStart: 0, colOffset: 0, filename: []})];
    init_1140853951(p_1140854586[0], pattern_1140854581, filename_1140854582, line_1140854583, col_1140854584);
    p_1140854586[0].tok.kind = 0;
    p_1140854586[0].tok.modifier = 0;
    p_1140854586[0].tok.literal = nimCopy(null, [], NTI33554439);
    p_1140854586[0].tok.charset = nimCopy(p_1140854586[0].tok.charset, ConstSet280, NTI1140856075);
    p_1140854586[0].nonterms = nimCopy(null, [], NTI1140856504);
    p_1140854586[0].identIsVerbatim = false;
    getTok_1140854392(p_1140854586[0]);
    result_1140854585 = nimCopy(result_1140854585, rawParse_1140854544(p_1140854586[0]), NTI1140850696);

  return result_1140854585;

}

function peg_1140854591(pattern_1140854592) {
  var result_1140854593 = ({kind: 0, term: [], ch: 0, charChoice: null, nt: null, index: 0, sons: []});

    result_1140854593 = nimCopy(result_1140854593, parsePeg_1140854580(pattern_1140854592, makeNimstrLit("pattern"), 1, 0), NTI1140850696);

  return result_1140854593;

}

function mathCommands_1946157069(doc_1946157070) {

function underCmd_1946157078(arg_1946157079) {
  var result_1946157080 = [];

    var fmtRes_1946157081 = [mnewString(0)];
    fmtRes_1946157081[0].push.apply(fmtRes_1946157081[0], makeNimstrLit("["));;
    formatValue_1275068578(fmtRes_1946157081, 0, arg_1946157079, []);
    fmtRes_1946157081[0].push.apply(fmtRes_1946157081[0], makeNimstrLit("]"));;
    result_1946157080 = nimCopy(null, fmtRes_1946157081[0], NTI33554439);

  return result_1946157080;

}
    
function HEX3Aanonymous_1946157087(arg_1946157088) {
      var result_1946157089 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("_")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946157077 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("_"), arg_1946157088, [HEX21_1207959672(0)]);
        result_1946157089 = nimCopy(result_1946157089, {typ: 0, str: underCmd_1946157078(to_1862271050(vals_1946157077[chckIndx(0, 0, (vals_1946157077).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946157089;

    }

function fracCmd_1946157145(a_1946157147, b_1946157148) {
    var Temporary1;

  var result_1946157149 = [];

    if (isSome_1912602931(a_1946157147)) {
    Temporary1 = nsuFormatOpenArray(makeNimstrLit("\\frac{$1}{$2}"), [nimCopy(null, get_1912602965(a_1946157147), NTI33554439), nimCopy(null, b_1946157148, NTI33554439)]);
    }
    else {
    Temporary1 = nsuFormatOpenArray(makeNimstrLit("\\frac{1}{$1}"), [nimCopy(null, b_1946157148, NTI33554439)]);
    }
    
    result_1946157149 = nimCopy(null, Temporary1, NTI33554439);

  return result_1946157149;

}
    
function HEX3Aanonymous_1946157177(arg_1946157178) {
      var result_1946157179 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("/")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946157144 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("/"), arg_1946157178, [HEX3F_1207959693(0), HEX21_1207959672(0)]);
        result_1946157179 = nimCopy(result_1946157179, {typ: 0, str: fracCmd_1946157145(to_1912603022(vals_1946157144[chckIndx(0, 0, (vals_1946157144).length - 1)]), to_1862271050(vals_1946157144[chckIndx(1, 0, (vals_1946157144).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946157179;

    }

function dotCmd_1946157245(arg_1946157246) {
  var result_1946157247 = [];

    result_1946157247 = nimCopy(null, nsuFormatSingleElem(makeNimstrLit("{\\left($1\\right)}"), arg_1946157246), NTI33554439);

  return result_1946157247;

}
    
function HEX3Aanonymous_1946157253(arg_1946157254) {
      var result_1946157255 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit(".")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946157244 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("."), arg_1946157254, [HEX21_1207959672(0)]);
        result_1946157255 = nimCopy(result_1946157255, {typ: 0, str: dotCmd_1946157245(to_1862271050(vals_1946157244[chckIndx(0, 0, (vals_1946157244).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946157255;

    }

function bracketsCmd_1946157311(arg_1946157312) {
  var result_1946157313 = [];

    result_1946157313 = nimCopy(null, nsuFormatSingleElem(makeNimstrLit("{\\left[$1\\right]}"), arg_1946157312), NTI33554439);

  return result_1946157313;

}
    
function HEX3Aanonymous_1946157319(arg_1946157320) {
      var result_1946157321 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("()")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946157310 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("()"), arg_1946157320, [HEX21_1207959672(0)]);
        result_1946157321 = nimCopy(result_1946157321, {typ: 0, str: bracketsCmd_1946157311(to_1862271050(vals_1946157310[chckIndx(0, 0, (vals_1946157310).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946157321;

    }

function bracesCmd_1946157377(arg_1946157378) {
  var result_1946157379 = [];

    result_1946157379 = nimCopy(null, nsuFormatSingleElem(makeNimstrLit("{\\left\\{$1\\right\\}}"), arg_1946157378), NTI33554439);

  return result_1946157379;

}
    
function HEX3Aanonymous_1946157385(arg_1946157386) {
      var result_1946157387 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("{}")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946157376 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("{}"), arg_1946157386, [HEX21_1207959672(0)]);
        result_1946157387 = nimCopy(result_1946157387, {typ: 0, str: bracesCmd_1946157377(to_1862271050(vals_1946157376[chckIndx(0, 0, (vals_1946157376).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946157387;

    }

function anglesCmd_1946157443(arg_1946157444) {
  var result_1946157445 = [];

    result_1946157445 = nimCopy(null, nsuFormatSingleElem(makeNimstrLit("{\\left\\langle $1\\right\\rangle}"), arg_1946157444), NTI33554439);

  return result_1946157445;

}
    
function HEX3Aanonymous_1946157451(arg_1946157452) {
      var result_1946157453 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("<>")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946157442 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("<>"), arg_1946157452, [HEX21_1207959672(0)]);
        result_1946157453 = nimCopy(result_1946157453, {typ: 0, str: anglesCmd_1946157443(to_1862271050(vals_1946157442[chckIndx(0, 0, (vals_1946157442).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946157453;

    }

function pipeCmd_1946157509(arg_1946157510) {
  var result_1946157511 = [];

    result_1946157511 = nimCopy(null, nsuFormatSingleElem(makeNimstrLit("{\\left\\lvert $1\\right\\rvert}"), arg_1946157510), NTI33554439);

  return result_1946157511;

}
    
function HEX3Aanonymous_1946157517(arg_1946157518) {
      var result_1946157519 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("|")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946157508 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("|"), arg_1946157518, [HEX21_1207959672(0)]);
        result_1946157519 = nimCopy(result_1946157519, {typ: 0, str: pipeCmd_1946157509(to_1862271050(vals_1946157508[chckIndx(0, 0, (vals_1946157508).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946157519;

    }

function pipePipeCmd_1946157575(arg_1946157576) {
  var result_1946157577 = [];

    result_1946157577 = nimCopy(null, nsuFormatSingleElem(makeNimstrLit("{\\left\\lVert $1\\right\\rVert}"), arg_1946157576), NTI33554439);

  return result_1946157577;

}
    
function HEX3Aanonymous_1946157583(arg_1946157584) {
      var result_1946157585 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("||")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946157574 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("||"), arg_1946157584, [HEX21_1207959672(0)]);
        result_1946157585 = nimCopy(result_1946157585, {typ: 0, str: pipePipeCmd_1946157575(to_1862271050(vals_1946157574[chckIndx(0, 0, (vals_1946157574).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946157585;

    }

function vDotCmd_1946157641(arg_1946157642) {
  var result_1946157643 = [];

    result_1946157643 = nimCopy(null, nsuFormatSingleElem(makeNimstrLit("{\\overgroup{\\undergroup{$1}}}"), arg_1946157642), NTI33554439);

  return result_1946157643;

}
    
function HEX3Aanonymous_1946157649(arg_1946157650) {
      var result_1946157651 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("v.")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946157640 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("v."), arg_1946157650, [HEX21_1207959672(0)]);
        result_1946157651 = nimCopy(result_1946157651, {typ: 0, str: vDotCmd_1946157641(to_1862271050(vals_1946157640[chckIndx(0, 0, (vals_1946157640).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946157651;

    }

function floorCmd_1946157707(arg_1946157708) {
  var result_1946157709 = [];

    result_1946157709 = nimCopy(null, nsuFormatSingleElem(makeNimstrLit("{\\left\\lfloor $1\\right\\rfloor}"), arg_1946157708), NTI33554439);

  return result_1946157709;

}
    
function HEX3Aanonymous_1946157715(arg_1946157716) {
      var result_1946157717 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("floor")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946157706 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("floor"), arg_1946157716, [HEX21_1207959672(0)]);
        result_1946157717 = nimCopy(result_1946157717, {typ: 0, str: floorCmd_1946157707(to_1862271050(vals_1946157706[chckIndx(0, 0, (vals_1946157706).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946157717;

    }

function ceilCmd_1946157773(arg_1946157774) {
  var result_1946157775 = [];

    result_1946157775 = nimCopy(null, nsuFormatSingleElem(makeNimstrLit("{\\left\\lceil $1\\right\\rceil}"), arg_1946157774), NTI33554439);

  return result_1946157775;

}
    
function HEX3Aanonymous_1946157781(arg_1946157782) {
      var result_1946157783 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("ceil")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946157772 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("ceil"), arg_1946157782, [HEX21_1207959672(0)]);
        result_1946157783 = nimCopy(result_1946157783, {typ: 0, str: ceilCmd_1946157773(to_1862271050(vals_1946157772[chckIndx(0, 0, (vals_1946157772).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946157783;

    }

function intCmd_1946157839(lb_1946157841, ub_1946157843, expr_1946157844, varname_1946157845) {
    var Temporary1;
    var Temporary2;

  var result_1946157846 = [];

    if (isSome_1912602931(lb_1946157841)) {
    if (isSome_1912602931(ub_1946157843)) {
    Temporary2 = nsuFormatOpenArray(makeNimstrLit("\\int_{$1}^{$2}$3\\,\\mathrm d$4"), [nimCopy(null, get_1912602965(lb_1946157841), NTI33554439), nimCopy(null, get_1912602965(ub_1946157843), NTI33554439), nimCopy(null, expr_1946157844, NTI33554439), nimCopy(null, varname_1946157845, NTI33554439)]);
    }
    else {
    Temporary2 = nsuFormatOpenArray(makeNimstrLit("\\int_{$1}$2\\,\\mathrm d$3"), [nimCopy(null, get_1912602965(lb_1946157841), NTI33554439), nimCopy(null, expr_1946157844, NTI33554439), nimCopy(null, varname_1946157845, NTI33554439)]);
    }
    
    Temporary1 = Temporary2;
    }
    else {
    Temporary1 = nsuFormatOpenArray(makeNimstrLit("\\int $1\\,\\mathrm d$2"), [nimCopy(null, expr_1946157844, NTI33554439), nimCopy(null, varname_1946157845, NTI33554439)]);
    }
    
    result_1946157846 = nimCopy(null, Temporary1, NTI33554439);

  return result_1946157846;

}
    
function HEX3Aanonymous_1946157911(arg_1946157912) {
      var result_1946157913 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("int")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946157838 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("int"), arg_1946157912, [HEX3F_1207959693(0), HEX3F_1207959693(0), HEX21_1207959672(0), HEX21_1207959672(0)]);
        result_1946157913 = nimCopy(result_1946157913, {typ: 0, str: intCmd_1946157839(to_1912603022(vals_1946157838[chckIndx(0, 0, (vals_1946157838).length - 1)]), to_1912603022(vals_1946157838[chckIndx(1, 0, (vals_1946157838).length - 1)]), to_1862271050(vals_1946157838[chckIndx(2, 0, (vals_1946157838).length - 1)]), to_1862271050(vals_1946157838[chckIndx(3, 0, (vals_1946157838).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946157913;

    }

function limCmd_1946157993(varname_1946157995, point_1946157997) {
  var result_1946157998 = [];

    result_1946157998 = nimCopy(null, nsuFormatOpenArray(makeNimstrLit("\\lim_{$1\\to $2}"), [get_1929380058(varname_1946157995, makeNimstrLit("n")), get_1929380058(point_1946157997, makeNimstrLit("\\infty"))]), NTI33554439);

  return result_1946157998;

}
    
function HEX3Aanonymous_1946158036(arg_1946158037) {
      var result_1946158038 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("lim")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946157992 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("lim"), arg_1946158037, [HEX3F_1207959693(0), HEX3F_1207959693(0)]);
        result_1946158038 = nimCopy(result_1946158038, {typ: 0, str: limCmd_1946157993(to_1912603022(vals_1946157992[chckIndx(0, 0, (vals_1946157992).length - 1)]), to_1912603022(vals_1946157992[chckIndx(1, 0, (vals_1946157992).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946158038;

    }

function liminfCmd_1946158110(varname_1946158112, point_1946158114) {
  var result_1946158115 = [];

    result_1946158115 = nimCopy(null, nsuFormatOpenArray(makeNimstrLit("\\liminf_{$1\\to $2}"), [get_1929380058(varname_1946158112, makeNimstrLit("n")), get_1929380058(point_1946158114, makeNimstrLit("\\infty"))]), NTI33554439);

  return result_1946158115;

}
    
function HEX3Aanonymous_1946158153(arg_1946158154) {
      var result_1946158155 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("liminf")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946158109 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("liminf"), arg_1946158154, [HEX3F_1207959693(0), HEX3F_1207959693(0)]);
        result_1946158155 = nimCopy(result_1946158155, {typ: 0, str: liminfCmd_1946158110(to_1912603022(vals_1946158109[chckIndx(0, 0, (vals_1946158109).length - 1)]), to_1912603022(vals_1946158109[chckIndx(1, 0, (vals_1946158109).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946158155;

    }

function limsupCmd_1946158227(varname_1946158229, point_1946158231) {
  var result_1946158232 = [];

    result_1946158232 = nimCopy(null, nsuFormatOpenArray(makeNimstrLit("\\limsup_{$1\\to $2}"), [get_1929380058(varname_1946158229, makeNimstrLit("n")), get_1929380058(point_1946158231, makeNimstrLit("\\infty"))]), NTI33554439);

  return result_1946158232;

}
    
function HEX3Aanonymous_1946158270(arg_1946158271) {
      var result_1946158272 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("limsup")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946158226 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("limsup"), arg_1946158271, [HEX3F_1207959693(0), HEX3F_1207959693(0)]);
        result_1946158272 = nimCopy(result_1946158272, {typ: 0, str: limsupCmd_1946158227(to_1912603022(vals_1946158226[chckIndx(0, 0, (vals_1946158226).length - 1)]), to_1912603022(vals_1946158226[chckIndx(1, 0, (vals_1946158226).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946158272;

    }

function ddCmd_1946158344(x_1946158345) {
  var result_1946158346 = [];

    result_1946158346 = nimCopy(null, nsuFormatOpenArray(makeNimstrLit("{\\mathrm d$1}"), [nimCopy(null, x_1946158345, NTI33554439)]), NTI33554439);

  return result_1946158346;

}
    
function HEX3Aanonymous_1946158352(arg_1946158353) {
      var result_1946158354 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("dd")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946158343 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("dd"), arg_1946158353, [HEX21_1207959672(0)]);
        result_1946158354 = nimCopy(result_1946158354, {typ: 0, str: ddCmd_1946158344(to_1862271050(vals_1946158343[chckIndx(0, 0, (vals_1946158343).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946158354;

    }

function ddExpCmd_1946158410(n_1946158411, x_1946158412) {
  var result_1946158413 = [];

    result_1946158413 = nimCopy(null, nsuFormatOpenArray(makeNimstrLit("{\\mathrm d^{$1}$2}"), [nimCopy(null, n_1946158411, NTI33554439), nimCopy(null, x_1946158412, NTI33554439)]), NTI33554439);

  return result_1946158413;

}
    
function HEX3Aanonymous_1946158419(arg_1946158420) {
      var result_1946158421 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("dd^")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946158409 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("dd^"), arg_1946158420, [HEX21_1207959672(0), HEX21_1207959672(0)]);
        result_1946158421 = nimCopy(result_1946158421, {typ: 0, str: ddExpCmd_1946158410(to_1862271050(vals_1946158409[chckIndx(0, 0, (vals_1946158409).length - 1)]), to_1862271050(vals_1946158409[chckIndx(1, 0, (vals_1946158409).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946158421;

    }

function dvCmd_1946158481(f_1946158483, x_1946158484) {
    var Temporary1;

  var result_1946158485 = [];

    if (isSome_1912602931(f_1946158483)) {
    Temporary1 = nsuFormatOpenArray(makeNimstrLit("\\frac{\\mathrm d$1}{\\mathrm d$2}"), [nimCopy(null, get_1912602965(f_1946158483), NTI33554439), nimCopy(null, x_1946158484, NTI33554439)]);
    }
    else {
    Temporary1 = nsuFormatOpenArray(makeNimstrLit("\\frac{\\mathrm d}{\\mathrm d$1}"), [nimCopy(null, x_1946158484, NTI33554439)]);
    }
    
    result_1946158485 = nimCopy(null, Temporary1, NTI33554439);

  return result_1946158485;

}
    
function HEX3Aanonymous_1946158513(arg_1946158514) {
      var result_1946158515 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("dv")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946158480 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("dv"), arg_1946158514, [HEX3F_1207959693(0), HEX21_1207959672(0)]);
        result_1946158515 = nimCopy(result_1946158515, {typ: 0, str: dvCmd_1946158481(to_1912603022(vals_1946158480[chckIndx(0, 0, (vals_1946158480).length - 1)]), to_1862271050(vals_1946158480[chckIndx(1, 0, (vals_1946158480).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946158515;

    }

function dvExpCmd_1946158581(n_1946158582, f_1946158584, x_1946158585) {
    var Temporary1;

  var result_1946158586 = [];

    if (isSome_1912602931(f_1946158584)) {
    Temporary1 = nsuFormatOpenArray(makeNimstrLit("\\frac{\\mathrm d^{$1}$2}{\\mathrm d$3^{$1}}"), [nimCopy(null, n_1946158582, NTI33554439), nimCopy(null, get_1912602965(f_1946158584), NTI33554439), nimCopy(null, x_1946158585, NTI33554439)]);
    }
    else {
    Temporary1 = nsuFormatOpenArray(makeNimstrLit("\\frac{\\mathrm d^{$1}}{\\mathrm d$2^{$1}}"), [nimCopy(null, n_1946158582, NTI33554439), nimCopy(null, x_1946158585, NTI33554439)]);
    }
    
    result_1946158586 = nimCopy(null, Temporary1, NTI33554439);

  return result_1946158586;

}
    
function HEX3Aanonymous_1946158614(arg_1946158615) {
      var result_1946158616 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("dv^")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946158580 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("dv^"), arg_1946158615, [HEX21_1207959672(0), HEX3F_1207959693(0), HEX21_1207959672(0)]);
        result_1946158616 = nimCopy(result_1946158616, {typ: 0, str: dvExpCmd_1946158581(to_1862271050(vals_1946158580[chckIndx(0, 0, (vals_1946158580).length - 1)]), to_1912603022(vals_1946158580[chckIndx(1, 0, (vals_1946158580).length - 1)]), to_1862271050(vals_1946158580[chckIndx(2, 0, (vals_1946158580).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946158616;

    }

function pdvCmd_1946158695(f_1946158697, x_1946158698) {
    var Temporary1;

  var result_1946158699 = [];

    if (isSome_1912602931(f_1946158697)) {
    Temporary1 = nsuFormatOpenArray(makeNimstrLit("\\frac{\\partial $1}{\\partial $2}"), [nimCopy(null, get_1912602965(f_1946158697), NTI33554439), nimCopy(null, x_1946158698, NTI33554439)]);
    }
    else {
    Temporary1 = nsuFormatOpenArray(makeNimstrLit("\\frac{\\partial}{\\partial $1}"), [nimCopy(null, x_1946158698, NTI33554439)]);
    }
    
    result_1946158699 = nimCopy(null, Temporary1, NTI33554439);

  return result_1946158699;

}
    
function HEX3Aanonymous_1946158727(arg_1946158728) {
      var result_1946158729 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("pdv")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946158694 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("pdv"), arg_1946158728, [HEX3F_1207959693(0), HEX21_1207959672(0)]);
        result_1946158729 = nimCopy(result_1946158729, {typ: 0, str: pdvCmd_1946158695(to_1912603022(vals_1946158694[chckIndx(0, 0, (vals_1946158694).length - 1)]), to_1862271050(vals_1946158694[chckIndx(1, 0, (vals_1946158694).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946158729;

    }

function pdvExpCmd_1946158795(n_1946158796, f_1946158798, x_1946158799) {
    var Temporary1;

  var result_1946158800 = [];

    if (isSome_1912602931(f_1946158798)) {
    Temporary1 = nsuFormatOpenArray(makeNimstrLit("\\frac{\\partial^{$1}$2}{\\partial $3^{$1}}"), [nimCopy(null, n_1946158796, NTI33554439), nimCopy(null, get_1912602965(f_1946158798), NTI33554439), nimCopy(null, x_1946158799, NTI33554439)]);
    }
    else {
    Temporary1 = nsuFormatOpenArray(makeNimstrLit("\\frac{\\partial^{$1}}{\\partial $2^{$1}}"), [nimCopy(null, n_1946158796, NTI33554439), nimCopy(null, x_1946158799, NTI33554439)]);
    }
    
    result_1946158800 = nimCopy(null, Temporary1, NTI33554439);

  return result_1946158800;

}
    
function HEX3Aanonymous_1946158828(arg_1946158829) {
      var result_1946158830 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("pdv^")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946158794 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("pdv^"), arg_1946158829, [HEX21_1207959672(0), HEX3F_1207959693(0), HEX21_1207959672(0)]);
        result_1946158830 = nimCopy(result_1946158830, {typ: 0, str: pdvExpCmd_1946158795(to_1862271050(vals_1946158794[chckIndx(0, 0, (vals_1946158794).length - 1)]), to_1912603022(vals_1946158794[chckIndx(1, 0, (vals_1946158794).length - 1)]), to_1862271050(vals_1946158794[chckIndx(2, 0, (vals_1946158794).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946158830;

    }

function matCmd_1946158900(arg_1946158901) {
  var result_1946158902 = [];

    result_1946158902 = nimCopy(null, nsuFormatOpenArray(makeNimstrLit("\\begin{matrix}$1\\end{matrix}"), [nimCopy(null, arg_1946158901, NTI33554439)]), NTI33554439);

  return result_1946158902;

}
    
function HEX3Aanonymous_1946158908(arg_1946158909) {
      var result_1946158910 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("mat")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946158899 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("mat"), arg_1946158909, [HEX21_1207959672(0)]);
        result_1946158910 = nimCopy(result_1946158910, {typ: 0, str: matCmd_1946158900(to_1862271050(vals_1946158899[chckIndx(0, 0, (vals_1946158899).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946158910;

    }

function dotMatCmd_1946158966(arg_1946158967) {
  var result_1946158968 = [];

    result_1946158968 = nimCopy(null, nsuFormatOpenArray(makeNimstrLit("\\begin{pmatrix}$1\\end{pmatrix}"), [nimCopy(null, arg_1946158967, NTI33554439)]), NTI33554439);

  return result_1946158968;

}
    
function HEX3Aanonymous_1946158974(arg_1946158975) {
      var result_1946158976 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit(".mat")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946158965 = expandArguments_1879048205(doc_1946157070, makeNimstrLit(".mat"), arg_1946158975, [HEX21_1207959672(0)]);
        result_1946158976 = nimCopy(result_1946158976, {typ: 0, str: dotMatCmd_1946158966(to_1862271050(vals_1946158965[chckIndx(0, 0, (vals_1946158965).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946158976;

    }

function bracketsMatCmd_1946159032(arg_1946159033) {
  var result_1946159034 = [];

    result_1946159034 = nimCopy(null, nsuFormatOpenArray(makeNimstrLit("\\begin{bmatrix}$1\\end{bmatrix}"), [nimCopy(null, arg_1946159033, NTI33554439)]), NTI33554439);

  return result_1946159034;

}
    
function HEX3Aanonymous_1946159040(arg_1946159041) {
      var result_1946159042 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("(mat)")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946159031 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("(mat)"), arg_1946159041, [HEX21_1207959672(0)]);
        result_1946159042 = nimCopy(result_1946159042, {typ: 0, str: bracketsMatCmd_1946159032(to_1862271050(vals_1946159031[chckIndx(0, 0, (vals_1946159031).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946159042;

    }

function pipesMatCmd_1946159098(arg_1946159099) {
  var result_1946159100 = [];

    result_1946159100 = nimCopy(null, nsuFormatOpenArray(makeNimstrLit("\\begin{vmatrix}$1\\end{vmatrix}"), [nimCopy(null, arg_1946159099, NTI33554439)]), NTI33554439);

  return result_1946159100;

}
    
function HEX3Aanonymous_1946159106(arg_1946159107) {
      var result_1946159108 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("|mat|")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946159097 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("|mat|"), arg_1946159107, [HEX21_1207959672(0)]);
        result_1946159108 = nimCopy(result_1946159108, {typ: 0, str: pipesMatCmd_1946159098(to_1862271050(vals_1946159097[chckIndx(0, 0, (vals_1946159097).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946159108;

    }

function pipePipesMatCmd_1946159164(arg_1946159165) {
  var result_1946159166 = [];

    result_1946159166 = nimCopy(null, nsuFormatOpenArray(makeNimstrLit("\\begin{Vmatrix}$1\\end{Vmatrix}"), [nimCopy(null, arg_1946159165, NTI33554439)]), NTI33554439);

  return result_1946159166;

}
    
function HEX3Aanonymous_1946159172(arg_1946159173) {
      var result_1946159174 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("||mat||")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946159163 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("||mat||"), arg_1946159173, [HEX21_1207959672(0)]);
        result_1946159174 = nimCopy(result_1946159174, {typ: 0, str: pipePipesMatCmd_1946159164(to_1862271050(vals_1946159163[chckIndx(0, 0, (vals_1946159163).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946159174;

    }

function unitCmd_1946159230(number_1946159232, unit_1946159233) {
    var Temporary1;

  var result_1946159234 = [];

    var unitRendered_1946159235 = npegsreplacef(npegsreplacef(unit_1946159233, peg_1140854591(makeNimstrLit("^{\\letter+}")), makeNimstrLit("\\mathrm{$1}")), peg_1140854591(makeNimstrLit("{!\\letter[^\\\\]}{\\letter+}")), makeNimstrLit("$1\\mathrm{$2}"));
    if (isSome_1912602931(number_1946159232)) {
    Temporary1 = (get_1912602965(number_1946159232) || []).concat(makeNimstrLit("\\,") || [],unitRendered_1946159235 || []);
    }
    else {
    Temporary1 = unitRendered_1946159235;
    }
    
    result_1946159234 = nimCopy(null, Temporary1, NTI33554439);

  return result_1946159234;

}
    
function HEX3Aanonymous_1946159263(arg_1946159264) {
      var result_1946159265 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("unit")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946159229 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("unit"), arg_1946159264, [HEX3F_1207959693(0), HEX21_1207959672(1)]);
        result_1946159265 = nimCopy(result_1946159265, {typ: 0, str: unitCmd_1946159230(to_1912603022(vals_1946159229[chckIndx(0, 0, (vals_1946159229).length - 1)]), to_1862271050(vals_1946159229[chckIndx(1, 0, (vals_1946159229).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946159265;

    }

function inlineMathCmd_1946159331(arg_1946159332) {
  var result_1946159333 = [];

    raiseException({message: makeNimstrLit("Math can\'t be nested inside math"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    result_1946159333 = nimCopy(null, [], NTI33554439);

  return result_1946159333;

}
    
function HEX3Aanonymous_1946159339(arg_1946159340) {
      var result_1946159341 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("$")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946159330 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("$"), arg_1946159340, [{kind: 4, base: 0}]);
        result_1946159341 = nimCopy(result_1946159341, {typ: 1, str: inlineMathCmd_1946159331(to_1862271050(vals_1946159330[chckIndx(0, 0, (vals_1946159330).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946159341;

    }

function blockMathCmd_1946159397(arg_1946159398) {
  var result_1946159399 = [];

    raiseException({message: makeNimstrLit("Math can\'t be nested inside math"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    result_1946159399 = nimCopy(null, [], NTI33554439);

  return result_1946159399;

}
    
function HEX3Aanonymous_1946159405(arg_1946159406) {
      var result_1946159407 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("$$")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946159396 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("$$"), arg_1946159406, [{kind: 4, base: 0}]);
        result_1946159407 = nimCopy(result_1946159407, {typ: 1, str: blockMathCmd_1946159397(to_1862271050(vals_1946159396[chckIndx(0, 0, (vals_1946159396).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946159407;

    }

function alignedMathCmd_1946159463(arg_1946159464) {
  var result_1946159465 = [];

    raiseException({message: makeNimstrLit("Math can\'t be nested inside math"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    result_1946159465 = nimCopy(null, [], NTI33554439);

  return result_1946159465;

}
    
function HEX3Aanonymous_1946159471(arg_1946159472) {
      var result_1946159473 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946157070.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("$$&")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946159462 = expandArguments_1879048205(doc_1946157070, makeNimstrLit("$$&"), arg_1946159472, [{kind: 4, base: 0}]);
        result_1946159473 = nimCopy(result_1946159473, {typ: 1, str: alignedMathCmd_1946159463(to_1862271050(vals_1946159462[chckIndx(0, 0, (vals_1946159462).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946159473;

    }

  var result_1946157073 = ({data: [], counter: 0});

    var commands_1946157076 = [({data: [], counter: 0})];
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("_"), HEX3Aanonymous_1946157087);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("/"), HEX3Aanonymous_1946157177);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("."), HEX3Aanonymous_1946157253);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("()"), HEX3Aanonymous_1946157319);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("{}"), HEX3Aanonymous_1946157385);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("<>"), HEX3Aanonymous_1946157451);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("|"), HEX3Aanonymous_1946157517);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("||"), HEX3Aanonymous_1946157583);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("v."), HEX3Aanonymous_1946157649);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("floor"), HEX3Aanonymous_1946157715);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("ceil"), HEX3Aanonymous_1946157781);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("int"), HEX3Aanonymous_1946157911);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("lim"), HEX3Aanonymous_1946158036);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("liminf"), HEX3Aanonymous_1946158153);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("limsup"), HEX3Aanonymous_1946158270);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("dd"), HEX3Aanonymous_1946158352);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("dd^"), HEX3Aanonymous_1946158419);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("dv"), HEX3Aanonymous_1946158513);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("dv^"), HEX3Aanonymous_1946158614);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("pdv"), HEX3Aanonymous_1946158727);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("pdv^"), HEX3Aanonymous_1946158828);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("mat"), HEX3Aanonymous_1946158908);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit(".mat"), HEX3Aanonymous_1946158974);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("(mat)"), HEX3Aanonymous_1946159040);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("|mat|"), HEX3Aanonymous_1946159106);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("||mat||"), HEX3Aanonymous_1946159172);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("unit"), HEX3Aanonymous_1946159263);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("$"), HEX3Aanonymous_1946159339);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("$$"), HEX3Aanonymous_1946159405);
    HEX5BHEX5DHEX3D_1862271113(commands_1946157076[0], makeNimstrLit("$$&"), HEX3Aanonymous_1946159471);
    result_1946157073 = nimCopy(result_1946157073, commands_1946157076[0], NTI1207959603);

  return result_1946157073;

}

function rawGet_1493172373(t_1493172376, key_1493172377, hc_1493172378, hc_1493172378_Idx) {
            var Temporary3;

  var result_1493172379 = 0;

  BeforeRet: do {
    hc_1493172378[hc_1493172378_Idx] = hash_1056965030(key_1493172377);
    if ((hc_1493172378[hc_1493172378_Idx] == 0)) {
    hc_1493172378[hc_1493172378_Idx] = 314159265;
    }
    
    if (((t_1493172376.data).length == 0)) {
    result_1493172379 = -1;
    break BeforeRet;
    }
    
    var h_1493172430 = (hc_1493172378[hc_1493172378_Idx] & (t_1493172376.data).length - 1);
    Label1: do {
        Label2: while (true) {
        if (!isFilled_1241514015(t_1493172376.data[chckIndx(h_1493172430, 0, (t_1493172376.data).length - 1)].Field0)) break Label2;
            if (!(t_1493172376.data[chckIndx(h_1493172430, 0, (t_1493172376.data).length - 1)].Field0 == hc_1493172378[hc_1493172378_Idx])) Temporary3 = false; else {              Temporary3 = eqStrings(t_1493172376.data[chckIndx(h_1493172430, 0, (t_1493172376.data).length - 1)].Field1, key_1493172377);            }          if (Temporary3) {
          result_1493172379 = h_1493172430;
          break BeforeRet;
          }
          
          h_1493172430 = nextTry_1241514018(h_1493172430, (t_1493172376.data).length - 1);
        }
    } while (false);
    result_1493172379 = subInt(-1, h_1493172430);
  } while (false);

  return result_1493172379;

}

function getOrDefault_1946159645(t_1946159648, key_1946159649, default_1946159650) {
    var Temporary1;

  var result_1946159651 = [];

    var hcHEX60gensym153_1946159654 = [0];
    var indexHEX60gensym153_1946159661 = rawGet_1493172373(t_1946159648, key_1946159649, hcHEX60gensym153_1946159654, 0);
    if ((0 <= indexHEX60gensym153_1946159661)) {
    Temporary1 = t_1946159648.data[chckIndx(indexHEX60gensym153_1946159661, 0, (t_1946159648.data).length - 1)].Field2;
    }
    else {
    Temporary1 = default_1946159650;
    }
    
    result_1946159651 = nimCopy(null, Temporary1, NTI33554439);

  return result_1946159651;

}

function renderMathKatex_1761609590(math_1761609591, displayMode_1761609592, trust_1761609593) {
  var result_1761609594 = [];

    var opts_1761609595 = {};
    opts_1761609595["throwOnError"] = false;
    opts_1761609595["displayMode"] = displayMode_1761609592;
    opts_1761609595["trust"] = trust_1761609593;
    result_1761609594 = nimCopy(null, cstrToNimstr(katex.renderToString(toJSStr(math_1761609591), opts_1761609595)), NTI33554439);

  return result_1761609594;

}

function matext_1962934274(latex_1962934275, oneLine_1962934276) {
  var result_1962934277 = [];

    result_1962934277 = nimCopy(null, render_1979711499(latex_1962934275, oneLine_1962934276), NTI33554439);

  return result_1962934277;

}

function renderMath_1946159558(doc_1946159559, latex_1946159560, displayMode_1946159561, addDelimiters_1946159562) {
    var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;
      var Temporary5;
      var Temporary6;
      var Temporary8;

  var result_1946159563 = [];

    switch (doc_1946159559.target) {
    case 0:
      incl_1946159723(doc_1946159559.addToHead, nsuFormatSingleElem(makeNimstrLit("<link rel=\"stylesheet\" href=\"$1\" integrity=\"sha384-zTROYFVGOfTw7JV7KUu8udsvW2fx4lWOsCEDqhBreBwlHI4ioVRtmIvEThzJHGET\" crossorigin=\"anonymous\">"), getOrDefault_1946159645(doc_1946159559.settings, makeNimstrLit("katex-stylesheet-path"), makeNimstrLit("https://cdn.jsdelivr.net/npm/katex@0.13.18/dist/katex.min.css"))));
      if (displayMode_1946159561) {
      var Temporary2 = doc_1946159559;
      if (ConstSet333[Temporary2.target]===undefined) { raiseFieldError2(makeNimstrLit("field \'addToStyle\' is not accessible for type \'Document\' using \'target = "), reprDiscriminant(Temporary2.target, NTI1207959555)); }
      incl_1946159723(Temporary2.addToStyle, makeNimstrLit("xd-block-math{display:block}"));
      }
      
      if (displayMode_1946159561) {
      Temporary3 = makeNimstrLit("<xd-block-math>$1</xd-block-math>");
      }
      else {
      Temporary3 = makeNimstrLit("<xd-inline-math>$1</xd-inline-math>");
      }
      
      var format_1946161277 = nimCopy(null, Temporary3, NTI33554439);
      Temporary1 = nsuFormatSingleElem(format_1946161277, renderMathKatex_1761609590(latex_1946159560, displayMode_1946159561, !(doc_1946159559.safeMode)));
      break;
    case 1:
      incl_1946159723(doc_1946159559.addToHead, makeNimstrLit("\\usepackage{amsmath}"));
      incl_1946159723(doc_1946159559.addToHead, makeNimstrLit("\\usepackage{amssymb}"));
      if (displayMode_1946159561) {
      Temporary4 = makeNimstrLit("\\[$1\\]");
      }
      else {
      Temporary4 = makeNimstrLit("\\($1\\)");
      }
      
      var format_1946161324 = nimCopy(null, Temporary4, NTI33554439);
      if (addDelimiters_1946159562) {
      Temporary5 = nsuFormatSingleElem(format_1946161324, latex_1946159560);
      }
      else {
      Temporary5 = latex_1946159560;
      }
      
      Temporary1 = Temporary5;
      break;
    case 2:
++excHandler;
      Temporary8 = framePtr;
      try {
      Temporary6 = matext_1962934274(latex_1946159560, false);
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
      framePtr = Temporary8;
      if (lastJSError && (isObj(lastJSError.m_type, NTI33555125))) {
      raiseException({message: nsuFormatSingleElem(makeNimstrLit("Error when parsing math: $1"), latex_1946159560), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      }
      else {
      	reraiseException();
      }
      lastJSError = prevJSError;
      } finally {
      framePtr = Temporary8;
      }
      var math_1946161325 = nimCopy(null, Temporary6, NTI33554439);
      var fmtRes_1946161326 = [mnewString(0)];
      fmtRes_1946161326[0].push.apply(fmtRes_1946161326[0], makeNimstrLit("\x0A```\x0A"));;
      formatValue_1275068578(fmtRes_1946161326, 0, math_1946161325, []);
      fmtRes_1946161326[0].push.apply(fmtRes_1946161326[0], makeNimstrLit("\x0A```\x0A"));;
      Temporary1 = fmtRes_1946161326[0];
      break;
    }
    result_1946159563 = nimCopy(null, Temporary1, NTI33554439);

  return result_1946159563;

}

function expandStr_1308623250(doc_1308623251, str_1308623252) {
    var Temporary1;

  var result_1308623253 = [];

    var Temporary1 = expand_1308622933(doc_1308623251, str_1308623252, 0);
    if (ConstSet334[Temporary1.typ]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'XidocValue\' using \'typ = "), reprDiscriminant(Temporary1.typ, NTI1207959556)); }
    result_1308623253 = nimCopy(null, Temporary1.str, NTI33554439);

  return result_1308623253;

}

function env_1879049235(name_1879049236, content_1879049237) {
  var result_1879049238 = [];

    result_1879049238 = nimCopy(null, (makeNimstrLit("\\begin{") || []).concat(name_1879049236 || [],makeNimstrLit("}") || [],content_1879049237 || [],makeNimstrLit("\\end{") || [],name_1879049236 || [],makeNimstrLit("}") || []), NTI33554439);

  return result_1879049238;

}

function renderStr_1308623254(doc_1308623255, str_1308623256) {
    var Temporary1;

  var result_1308623257 = [];

    var Temporary1 = expand_1308622933(doc_1308623255, str_1308623256, 1);
    if (ConstSet336[Temporary1.typ]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'XidocValue\' using \'typ = "), reprDiscriminant(Temporary1.typ, NTI1207959556)); }
    result_1308623257 = nimCopy(null, Temporary1.str, NTI33554439);

  return result_1308623257;

}

function hasKey_1845494068(t_1845494071, key_1845494072) {
  var result_1845494073 = false;

    var hc_1845494074 = [0];
    result_1845494073 = (0 <= rawGet_1493172373(t_1845494071, key_1845494072, hc_1845494074, 0));

  return result_1845494073;

}

function HEX5BHEX5D_1493173665(t_1493173668, key_1493173669) {
  var result_1493173670 = [];

    var hcHEX60gensym20_1493173671 = [0];
    var indexHEX60gensym20_1493173678 = rawGet_1493172373(t_1493173668, key_1493173669, hcHEX60gensym20_1493173671, 0);
    if ((0 <= indexHEX60gensym20_1493173678)) {
    result_1493173670 = nimCopy(null, t_1493173668.data[chckIndx(indexHEX60gensym20_1493173678, 0, (t_1493173668.data).length - 1)].Field2, NTI33554439);
    }
    else {
    raiseKeyError_1493173732(key_1493173669);
    }
    

  return result_1493173670;

}

function checkboxCommands_1862270982(doc_1862270983) {

function dashCmd_1862270997(arg_1862270998) {
    var Temporary1;

  var result_1862270999 = [];

    switch (doc_1862270983.target) {
    case 0:
      Temporary1 = (makeNimstrLit("<li class=\"xd-checkbox-unchecked\">") || []).concat(arg_1862270998 || [],makeNimstrLit("</li>") || []);
      break;
    case 1:
      raiseException({message: makeNimstrLit("Checkboxes are currently not supported for the LaTeX target"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    case 2:
      raiseException({message: makeNimstrLit("Checkboxes are currently not supported for the Gemtext target"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    }
    result_1862270999 = nimCopy(null, Temporary1, NTI33554439);

  return result_1862270999;

}
    
function HEX3Aanonymous_1862271043(arg_1862271044) {
      var result_1862271045 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1862270983.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("-")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1862270996 = expandArguments_1879048205(doc_1862270983, makeNimstrLit("-"), arg_1862271044, [HEX21_1207959672(1)]);
        result_1862271045 = nimCopy(result_1862271045, {typ: 1, str: dashCmd_1862270997(to_1862271050(vals_1862270996[chckIndx(0, 0, (vals_1862270996).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1862271045;

    }

function vCmd_1862272143(arg_1862272144) {
    var Temporary1;

  var result_1862272145 = [];

    switch (doc_1862270983.target) {
    case 0:
      Temporary1 = (makeNimstrLit("<li class=\"xd-checkbox-checked\">") || []).concat(arg_1862272144 || [],makeNimstrLit("</li>") || []);
      break;
    case 1:
      raiseException({message: makeNimstrLit("Checkboxes are currently not supported for the LaTeX target"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    case 2:
      raiseException({message: makeNimstrLit("Checkboxes are currently not supported for the Gemtext target"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    }
    result_1862272145 = nimCopy(null, Temporary1, NTI33554439);

  return result_1862272145;

}
    
function HEX3Aanonymous_1862272151(arg_1862272152) {
      var result_1862272153 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1862270983.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("v")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1862272142 = expandArguments_1879048205(doc_1862270983, makeNimstrLit("v"), arg_1862272152, [HEX21_1207959672(1)]);
        result_1862272153 = nimCopy(result_1862272153, {typ: 1, str: vCmd_1862272143(to_1862271050(vals_1862272142[chckIndx(0, 0, (vals_1862272142).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1862272153;

    }

function xCmd_1862272209(arg_1862272210) {
    var Temporary1;

  var result_1862272211 = [];

    switch (doc_1862270983.target) {
    case 0:
      Temporary1 = (makeNimstrLit("<li class=\"xd-checkbox-crossed\">") || []).concat(arg_1862272210 || [],makeNimstrLit("</li>") || []);
      break;
    case 1:
      raiseException({message: makeNimstrLit("Checkboxes are currently not supported for the LaTeX target"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    case 2:
      raiseException({message: makeNimstrLit("Checkboxes are currently not supported for the Gemtext target"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    }
    result_1862272211 = nimCopy(null, Temporary1, NTI33554439);

  return result_1862272211;

}
    
function HEX3Aanonymous_1862272217(arg_1862272218) {
      var result_1862272219 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1862270983.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("x")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1862272208 = expandArguments_1879048205(doc_1862270983, makeNimstrLit("x"), arg_1862272218, [HEX21_1207959672(1)]);
        result_1862272219 = nimCopy(result_1862272219, {typ: 1, str: xCmd_1862272209(to_1862271050(vals_1862272208[chckIndx(0, 0, (vals_1862272208).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1862272219;

    }

  var result_1862270986 = ({data: [], counter: 0});

    var commands_1862270989 = [({data: [], counter: 0})];
    HEX5BHEX5DHEX3D_1862271113(commands_1862270989[0], makeNimstrLit("-"), HEX3Aanonymous_1862271043);
    HEX5BHEX5DHEX3D_1862271113(commands_1862270989[0], makeNimstrLit("v"), HEX3Aanonymous_1862272151);
    HEX5BHEX5DHEX3D_1862271113(commands_1862270989[0], makeNimstrLit("x"), HEX3Aanonymous_1862272217);
    result_1862270986 = nimCopy(result_1862270986, commands_1862270989[0], NTI1207959603);

  return result_1862270986;

}

function contains_1124075688(t_1124075691, key_1124075692) {
  var result_1124075693 = false;

  BeforeRet: do {
    result_1124075693 = hasKey_1845494068(t_1124075691, key_1124075692);
    break BeforeRet;
  } while (false);

  return result_1124075693;

}

function highlightCode_1761609611(code_1761609612, lang_1761609613) {
  var result_1761609614 = [];

    result_1761609614 = nimCopy(null, code_1761609612, NTI33554439);

  return result_1761609614;

}

function map_1124076007(self_1124076010, callback_1124076012) {
    var Temporary1;

  var result_1124076013 = ({val: [], has: false});

    if (isSome_1912602931(self_1124076010)) {
    Temporary1 = some_1912603075(callback_1124076012(self_1124076010.val));
    }
    else {
    Temporary1 = none_1912603080();
    }
    
    result_1124076013 = nimCopy(result_1124076013, Temporary1, NTI1207959629);

  return result_1124076013;

}

function HEX5BHEX5D_1879049231(cmd_1879049232, arg_1879049233) {
    var Temporary1;

  var result_1879049234 = [];

    if (nsuStartsWith(cmd_1879049232, makeNimstrLit("\\"))) {
    Temporary1 = [];
    }
    else {
    Temporary1 = makeNimstrLit("\\");
    }
    
    result_1879049234 = nimCopy(null, (Temporary1 || []).concat(cmd_1879049232 || [],makeNimstrLit("[") || [],arg_1879049233 || [],makeNimstrLit("]") || []), NTI33554439);

  return result_1879049234;

}

function isSome_1124076314(self_1124076316) {
  var result_1124076317 = false;

    result_1124076317 = self_1124076316.has;

  return result_1124076317;

}

function get_1124076305(self_1124076307, otherwise_1124076308) {
    var Temporary1;

  var result_1124076309 = [];

    if (isSome_1124076314(self_1124076307)) {
    Temporary1 = self_1124076307.val;
    }
    else {
    Temporary1 = otherwise_1124076308;
    }
    
    result_1124076309 = nimCopy(null, Temporary1, NTI654311910);

  return result_1124076309;

}

function some_1124076267(val_1124076269) {
  var result_1124076270 = ({val: [], has: false});

    result_1124076270.has = true;
    result_1124076270.val = nimCopy(null, val_1124076269, NTI654311910);

  return result_1124076270;

}

function none_1124076272() {
  var result_1124076279 = ({val: [], has: false});

  return result_1124076279;

}

function map_1124076249(self_1124076252, callback_1124076254) {
    var Temporary1;

  var result_1124076259 = ({val: [], has: false});

    if (isSome_1912602931(self_1124076252)) {
    Temporary1 = some_1124076267(callback_1124076254(self_1124076252.val));
    }
    else {
    Temporary1 = none_1124076272();
    }
    
    result_1124076259 = nimCopy(result_1124076259, Temporary1, NTI1124075351);

  return result_1124076259;

}

function nsuSplitWhitespace(s_654312064, maxsplit_654312065) {
  var result_654312066 = [];

    result_654312066 = nimCopy(null, [], NTI654311921);
    Label1: do {
      var xHEX60gensym77_654312072 = [];
      var lastHEX60gensym59_1862271016 = 0;
      var splitsHEX60gensym59_1862271017 = maxsplit_654312065;
      if (false) {
      failedAssertImpl_218103864(makeNimstrLit("strutils.nim(381, 9) `not (\'\\x00\' in Whitespace)` "));
      }
      
      Label2: do {
          Label3: while (true) {
          if (!(lastHEX60gensym59_1862271016 < (s_654312064).length)) break Label3;
            Label4: do {
                Label5: while (true) {
                if (!((lastHEX60gensym59_1862271016 < (s_654312064).length) && (ConstSet339[s_654312064[chckIndx(lastHEX60gensym59_1862271016, 0, (s_654312064).length - 1)]] != undefined))) break Label5;
                  lastHEX60gensym59_1862271016 = addInt(lastHEX60gensym59_1862271016, 1);
                }
            } while (false);
            var firstHEX60gensym59_1862271020 = lastHEX60gensym59_1862271016;
            Label6: do {
                Label7: while (true) {
                if (!((lastHEX60gensym59_1862271016 < (s_654312064).length) && !((ConstSet340[s_654312064[chckIndx(lastHEX60gensym59_1862271016, 0, (s_654312064).length - 1)]] != undefined)))) break Label7;
                  lastHEX60gensym59_1862271016 = addInt(lastHEX60gensym59_1862271016, 1);
                }
            } while (false);
            if ((firstHEX60gensym59_1862271020 <= subInt(lastHEX60gensym59_1862271016, 1))) {
            if ((splitsHEX60gensym59_1862271017 == 0)) {
            lastHEX60gensym59_1862271016 = (s_654312064).length;
            }
            
            xHEX60gensym77_654312072 = substr_33557906(s_654312064, firstHEX60gensym59_1862271020, subInt(lastHEX60gensym59_1862271016, 1));
            var Temporary8 = nimCopy(null, xHEX60gensym77_654312072, NTI33554439);
            result_654312066.push(Temporary8);;
            if ((splitsHEX60gensym59_1862271017 == 0)) {
            break Label2;
            }
            
            splitsHEX60gensym59_1862271017 = subInt(splitsHEX60gensym59_1862271017, 1);
            }
            
          }
      } while (false);
    } while (false);

  return result_654312066;

}

function initTable_1493172244(initialSize_1493172247) {
  var result_1493172248 = ({data: [], counter: 0});

    var correctSizeHEX60gensym0_1493172250 = slotsNeeded_1241514026(chckRange(initialSize_1493172247, 0, 2147483647));
    result_1493172248.counter = 0;
    result_1493172248.data = new Array(chckRange(correctSizeHEX60gensym0_1493172250, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym0_1493172250, 0, 2147483647) ; ++i) { result_1493172248.data[i] = {Field0: 0, Field1: [], Field2: []}; }
  return result_1493172248;

}

function mustRehash_1493172709(t_1493172711) {
  var result_1493172712 = false;

    if (!((t_1493172711.counter < (t_1493172711.data).length))) {
    failedAssertImpl_218103864(makeNimstrLit("hashcommon.nim(29, 9) `\x0At.counter < t.dataLen` "));
    }
    
    result_1493172712 = ((mulInt((t_1493172711.data).length, 2) < mulInt(t_1493172711.counter, 3)) || (subInt((t_1493172711.data).length, t_1493172711.counter) < 4));

  return result_1493172712;

}

function rawInsert_1493173158(t_1493173162, data_1493173163, data_1493173163_Idx, key_1493173164, val_1493173165, hc_1493173166, h_1493173167) {
    data_1493173163[data_1493173163_Idx][chckIndx(h_1493173167, 0, (data_1493173163[data_1493173163_Idx]).length - 1)].Field1 = nimCopy(null, key_1493173164, NTI33554439);
    data_1493173163[data_1493173163_Idx][chckIndx(h_1493173167, 0, (data_1493173163[data_1493173163_Idx]).length - 1)].Field2 = nimCopy(null, val_1493173165, NTI33554439);
    data_1493173163[data_1493173163_Idx][chckIndx(h_1493173167, 0, (data_1493173163[data_1493173163_Idx]).length - 1)].Field0 = hc_1493173166;

  
}

function enlarge_1493172864(t_1493172867) {
    var n_1493172870 = [];
    n_1493172870 = new Array(chckRange(mulInt((t_1493172867.data).length, 2), 0, 2147483647)); for (var i = 0 ; i < chckRange(mulInt((t_1493172867.data).length, 2), 0, 2147483647) ; ++i) { n_1493172870[i] = {Field0: 0, Field1: [], Field2: []}; }    var Temporary1 = t_1493172867.data; t_1493172867.data = n_1493172870; n_1493172870 = Temporary1;    Label2: do {
      var i_1493172934 = 0;
      var colontmp__1761607799 = 0;
      colontmp__1761607799 = (n_1493172870).length - 1;
      var res_1761607800 = 0;
      Label3: do {
          Label4: while (true) {
          if (!(res_1761607800 <= colontmp__1761607799)) break Label4;
            i_1493172934 = res_1761607800;
            var eh_1493172988 = n_1493172870[chckIndx(i_1493172934, 0, (n_1493172870).length - 1)].Field0;
            if (isFilled_1241514015(eh_1493172988)) {
            var j_1493172992 = (eh_1493172988 & (t_1493172867.data).length - 1);
            Label5: do {
                Label6: while (true) {
                if (!isFilled_1241514015(t_1493172867.data[chckIndx(j_1493172992, 0, (t_1493172867.data).length - 1)].Field0)) break Label6;
                  j_1493172992 = nextTry_1241514018(j_1493172992, (t_1493172867.data).length - 1);
                }
            } while (false);
            rawInsert_1493173158(t_1493172867, t_1493172867, "data", n_1493172870[chckIndx(i_1493172934, 0, (n_1493172870).length - 1)].Field1, n_1493172870[chckIndx(i_1493172934, 0, (n_1493172870).length - 1)].Field2, eh_1493172988, j_1493172992);
            }
            
            res_1761607800 = addInt(res_1761607800, 1);
          }
      } while (false);
    } while (false);

  
}

function rawGetKnownHC_1493173327(t_1493173330, key_1493173331, hc_1493173332) {
  var result_1493173333 = 0;

  BeforeRet: do {
    if (((t_1493173330.data).length == 0)) {
    result_1493173333 = -1;
    break BeforeRet;
    }
    
    var h_1493173384 = (hc_1493173332 & (t_1493173330.data).length - 1);
    Label1: do {
        Label2: while (true) {
        if (!isFilled_1241514015(t_1493173330.data[chckIndx(h_1493173384, 0, (t_1493173330.data).length - 1)].Field0)) break Label2;
          if (((t_1493173330.data[chckIndx(h_1493173384, 0, (t_1493173330.data).length - 1)].Field0 == hc_1493173332) && eqStrings(t_1493173330.data[chckIndx(h_1493173384, 0, (t_1493173330.data).length - 1)].Field1, key_1493173331))) {
          result_1493173333 = h_1493173384;
          break BeforeRet;
          }
          
          h_1493173384 = nextTry_1241514018(h_1493173384, (t_1493173330.data).length - 1);
        }
    } while (false);
    result_1493173333 = subInt(-1, h_1493173384);
  } while (false);

  return result_1493173333;

}

function HEX5BHEX5DHEX3D_1493172312(t_1493172315, key_1493172316, val_1493172317) {
    if (((t_1493172315.data).length == 0)) {
    var correctSizeHEX60gensym3_1493172367 = slotsNeeded_1241514026(32);
    t_1493172315.counter = 0;
    t_1493172315.data = new Array(chckRange(correctSizeHEX60gensym3_1493172367, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym3_1493172367, 0, 2147483647) ; ++i) { t_1493172315.data[i] = {Field0: 0, Field1: [], Field2: []}; }    }
    
    var hc_1493172372 = [0];
    var index_1493172602 = rawGet_1493172373(t_1493172315, key_1493172316, hc_1493172372, 0);
    if ((0 <= index_1493172602)) {
    t_1493172315.data[chckIndx(index_1493172602, 0, (t_1493172315.data).length - 1)].Field2 = nimCopy(null, val_1493172317, NTI33554439);
    }
    else {
      if (((t_1493172315.data).length == 0)) {
      var correctSizeHEX60gensym8_1493172704 = slotsNeeded_1241514026(32);
      t_1493172315.counter = 0;
      t_1493172315.data = new Array(chckRange(correctSizeHEX60gensym8_1493172704, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym8_1493172704, 0, 2147483647) ; ++i) { t_1493172315.data[i] = {Field0: 0, Field1: [], Field2: []}; }      }
      
      if (mustRehash_1493172709(t_1493172315)) {
      enlarge_1493172864(t_1493172315);
      index_1493172602 = rawGetKnownHC_1493173327(t_1493172315, key_1493172316, hc_1493172372[0]);
      }
      
      index_1493172602 = subInt(-1, index_1493172602);
      rawInsert_1493173158(t_1493172315, t_1493172315, "data", key_1493172316, val_1493172317, hc_1493172372[0], index_1493172602);
      t_1493172315.counter = addInt(t_1493172315.counter, 1);
    }
    

  
}

function toTable_1493172239(pairs_1493172242) {
  var result_1493172243 = [({data: [], counter: 0})];

    result_1493172243[0] = nimCopy(result_1493172243[0], initTable_1493172244((pairs_1493172242).length), NTI1207959588);
    Label1: do {
      var key_1493172270 = [];
      var val_1493172271 = [];
      var i_1493173575 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1493173575 < (pairs_1493172242).length)) break Label3;
            key_1493172270 = pairs_1493172242[chckIndx(i_1493173575, 0, (pairs_1493172242).length - 1)]["Field0"];
            val_1493172271 = pairs_1493172242[chckIndx(i_1493173575, 0, (pairs_1493172242).length - 1)]["Field1"];
            HEX5BHEX5DHEX3D_1493172312(result_1493172243[0], key_1493172270, val_1493172271);
            i_1493173575 = addInt(i_1493173575, 1);
          }
      } while (false);
    } while (false);

  return result_1493172243[0];

}

function zip_1124076349(s1_1124076352, s2_1124076353) {
  var result_1124076354 = [];

    var mHEX60gensym8_1124076361 = nimMin((s1_1124076352).length, (s2_1124076353).length);
    result_1124076354 = new Array(chckRange(mHEX60gensym8_1124076361, 0, 2147483647)); for (var i = 0 ; i < chckRange(mHEX60gensym8_1124076361, 0, 2147483647) ; ++i) { result_1124076354[i] = {Field0: [], Field1: []}; }    Label1: do {
      var iHEX60gensym8_1124076370 = 0;
      var i_486540288 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486540288 < mHEX60gensym8_1124076361)) break Label3;
            iHEX60gensym8_1124076370 = i_486540288;
            var colontmp__486540286 = nimCopy(null, s1_1124076352[chckIndx(iHEX60gensym8_1124076370, 0, (s1_1124076352).length - 1)], NTI33554439);
            var colontmp__486540287 = nimCopy(null, s2_1124076353[chckIndx(iHEX60gensym8_1124076370, 0, (s2_1124076353).length - 1)], NTI33554439);
            result_1124076354[chckIndx(iHEX60gensym8_1124076370, 0, (result_1124076354).length - 1)] = nimCopy(result_1124076354[chckIndx(iHEX60gensym8_1124076370, 0, (result_1124076354).length - 1)], {Field0: nimCopy(null, colontmp__486540286, NTI33554439), Field1: nimCopy(null, colontmp__486540287, NTI33554439)}, NTI1124075463);
            i_486540288 = addInt(i_486540288, 1);
          }
      } while (false);
    } while (false);

  return result_1124076354;

}

function nsuSplitChar(s_654311915, sep_654311916, maxsplit_654311917) {
  var result_654311918 = [];

    result_654311918 = nimCopy(null, [], NTI654311762);
    Label1: do {
      var xHEX60gensym67_654311924 = [];
      var lastHEX60gensym34_486540297 = 0;
      var splitsHEX60gensym34_486540298 = maxsplit_654311917;
      Label2: do {
          Label3: while (true) {
          if (!(lastHEX60gensym34_486540297 <= (s_654311915).length)) break Label3;
            var firstHEX60gensym34_486540300 = lastHEX60gensym34_486540297;
            Label4: do {
                Label5: while (true) {
                if (!((lastHEX60gensym34_486540297 < (s_654311915).length) && !((s_654311915[chckIndx(lastHEX60gensym34_486540297, 0, (s_654311915).length - 1)] == sep_654311916)))) break Label5;
                  lastHEX60gensym34_486540297 = addInt(lastHEX60gensym34_486540297, 1);
                }
            } while (false);
            if ((splitsHEX60gensym34_486540298 == 0)) {
            lastHEX60gensym34_486540297 = (s_654311915).length;
            }
            
            xHEX60gensym67_654311924 = substr_33557906(s_654311915, firstHEX60gensym34_486540300, subInt(lastHEX60gensym34_486540297, 1));
            var Temporary6 = nimCopy(null, xHEX60gensym67_654311924, NTI33554439);
            result_654311918.push(Temporary6);;
            if ((splitsHEX60gensym34_486540298 == 0)) {
            break Label2;
            }
            
            splitsHEX60gensym34_486540298 = subInt(splitsHEX60gensym34_486540298, 1);
            lastHEX60gensym34_486540297 = addInt(lastHEX60gensym34_486540297, 1);
          }
      } while (false);
    } while (false);

  return result_654311918;

}

function parseFloatNative_33557268(a_33557269) {
  var result_33557270 = 0.0;

    var a2_33557271 = toJSStr(a_33557269);
      result_33557270 = Number(a2_33557271);
  

  return result_33557270;

}

function npuParseFloat(s_687866268, number_687866269, number_687866269_Idx, start_687866270) {
  var result_687866271 = 0;

    var bf_687866272 = [0.0];
    result_687866271 = nimParseBiggestFloat(s_687866268, bf_687866272, 0, start_687866270);
    if (!((result_687866271 == 0))) {
    number_687866269[number_687866269_Idx] = bf_687866272[0];
    }
    

  return result_687866271;

}

function nsuParseFloat(s_654312242) {
      var Temporary1;

  var result_654312243 = [0.0];

    result_654312243[0] = 0.0;
    var L_654312244 = npuParseFloat(s_654312242, result_654312243, 0, 0);
      if (!((L_654312244 == (s_654312242).length))) Temporary1 = true; else {        Temporary1 = (L_654312244 == 0);      }    if (Temporary1) {
    raiseException({message: (makeNimstrLit("invalid float: ") || []).concat(s_654312242 || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    

  return result_654312243[0];

}

function filter_1929379892(self_1929379894, callback_1929379896) {
    var Temporary1;

  var result_1929379897 = ({val: [], has: false});

    if ((isSome_1912602931(self_1929379894) && !(callback_1929379896(self_1929379894.val)))) {
    Temporary1 = none_1912603080();
    }
    else {
    Temporary1 = self_1929379894;
    }
    
    result_1929379897 = nimCopy(result_1929379897, Temporary1, NTI1207959629);

  return result_1929379897;

}

function isSome_1929380026(self_1929380028) {
  var result_1929380029 = false;

    result_1929380029 = self_1929380028.has;

  return result_1929380029;

}

function isNone_1929380042(self_1929380044) {
  var result_1929380045 = false;

    result_1929380045 = !(self_1929380044.has);

  return result_1929380045;

}

function HEX3DHEX3D_1929380016(a_1929380018, b_1929380019) {
  var result_1929380020 = false;

    result_1929380020 = (((isSome_1929380026(a_1929380018) && isSome_1929380026(b_1929380019)) && (a_1929380018.val == b_1929380019.val)) || (isNone_1929380042(a_1929380018) && isNone_1929380042(b_1929380019)));

  return result_1929380020;

}

function some_1929379947(val_1929379949) {
  var result_1929379950 = ({val: false, has: false});

    result_1929379950.has = true;
    result_1929379950.val = val_1929379949;

  return result_1929379950;

}

function none_1929379952() {
  var result_1929379959 = ({val: false, has: false});

  return result_1929379959;

}

function map_1929379929(self_1929379932, callback_1929379934) {
    var Temporary1;

  var result_1929379939 = ({val: false, has: false});

    if (isSome_1912602931(self_1929379932)) {
    Temporary1 = some_1929379947(callback_1929379934(self_1929379932.val));
    }
    else {
    Temporary1 = none_1929379952();
    }
    
    result_1929379939 = nimCopy(result_1929379939, Temporary1, NTI1929379923);

  return result_1929379939;

}

function nimFloatToString_352321654(a_352321655) {
  var result_352321656 = null;

        function nimOnlyDigitsOrMinus(n) {
      return n.toString().match(/^-?\d+$/);
    }
    if (Number.isSafeInteger(a_352321655))
      result_352321656 = a_352321655 === 0 && 1 / a_352321655 < 0 ? "-0.0" : a_352321655+".0"
    else {
      result_352321656 = a_352321655+""
      if(nimOnlyDigitsOrMinus(result_352321656)){
        result_352321656 = a_352321655+".0"
      }
    }
  

  return result_352321656;

}

function addFloat_33557372(result_33557374, result_33557374_Idx, x_33557375) {
    add_33556419(result_33557374, result_33557374_Idx, nimFloatToString_352321654(x_33557375));

  
}

function HEX24_33557368(x_33557370) {
  var result_33557371 = [[]];

    addFloat_33557372(result_33557371, 0, x_33557370);

  return result_33557371[0];

}

function nsuformatBiggestFloat(f_654313336, format_654313337, precision_654313338, decimalSep_654313339) {
  var result_654313340 = [];

    var precision_654313341 = precision_654313338;
    if ((precision_654313341 == -1)) {
    precision_654313341 = 6;
    }
    
    var res_654313342 = null;
    switch (format_654313337) {
    case 0:
      res_654313342 = f_654313336.toString();
      break;
    case 1:
      res_654313342 = f_654313336.toFixed(precision_654313341);
      break;
    case 2:
      res_654313342 = f_654313336.toExponential(precision_654313341);
      break;
    }
    result_654313340 = nimCopy(null, cstrToNimstr(res_654313342), NTI33554439);
    if (((1.0 / f_654313336) == -Infinity)) {
    result_654313340 = nimCopy(null, (makeNimstrLit("-") || []).concat(cstrToNimstr(res_654313342) || []), NTI33554439);
    }
    
    Label1: do {
      var i_654313347 = 0;
      var colontmp__486540309 = 0;
      colontmp__486540309 = (result_654313340).length;
      var i_486540310 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486540310 < colontmp__486540309)) break Label3;
            i_654313347 = i_486540310;
            if ((ConstSet349[result_654313340[chckIndx(i_654313347, 0, (result_654313340).length - 1)]] != undefined)) {
            result_654313340[chckIndx(i_654313347, 0, (result_654313340).length - 1)] = decimalSep_654313339;
            }
            
            i_486540310 = addInt(i_486540310, 1);
          }
      } while (false);
    } while (false);

  return result_654313340;

}

function insert_33557846(x_33557847, x_33557847_Idx, item_33557848, i_33557849) {
    var xl_33557850 = (x_33557847[x_33557847_Idx]).length;
    (x_33557847[x_33557847_Idx].length = chckRange(addInt(xl_33557850, (item_33557848).length), 0, 2147483647));
    var j_33557851 = subInt(xl_33557850, 1);
    Label1: do {
        Label2: while (true) {
        if (!(i_33557849 <= j_33557851)) break Label2;
          x_33557847[x_33557847_Idx][chckIndx(addInt(j_33557851, (item_33557848).length), 0, (x_33557847[x_33557847_Idx]).length - 1)] = x_33557847[x_33557847_Idx][chckIndx(j_33557851, 0, (x_33557847[x_33557847_Idx]).length - 1)];
          j_33557851 = subInt(j_33557851, 1);
        }
    } while (false);
    j_33557851 = 0;
    Label3: do {
        Label4: while (true) {
        if (!(j_33557851 < (item_33557848).length)) break Label4;
          x_33557847[x_33557847_Idx][chckIndx(addInt(j_33557851, i_33557849), 0, (x_33557847[x_33557847_Idx]).length - 1)] = item_33557848[chckIndx(j_33557851, 0, (item_33557848).length - 1)];
          j_33557851 = addInt(j_33557851, 1);
        }
    } while (false);

  
}

function nsuToUpperAsciiChar(c_654311511) {
  var result_654311512 = 0;

    if ((ConstSet351[c_654311511] != undefined)) {
    result_654311512 = (c_654311511 ^ 32);
    }
    else {
      result_654311512 = c_654311511;
    }
    

  return result_654311512;

}

function nsuToUpperAsciiStr(s_654311518) {
  var result_654311519 = [];

    result_654311519 = nimCopy(null, mnewString(chckRange((s_654311518).length, 0, 2147483647)), NTI33554439);
    Label1: do {
      var iHEX60gensym11_654311525 = 0;
      var colontmp__486540315 = 0;
      colontmp__486540315 = subInt((s_654311518).length, 1);
      var res_486540316 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_486540316 <= colontmp__486540315)) break Label3;
            iHEX60gensym11_654311525 = res_486540316;
            result_654311519[chckIndx(iHEX60gensym11_654311525, 0, (result_654311519).length - 1)] = nsuToUpperAsciiChar(s_654311518[chckIndx(iHEX60gensym11_654311525, 0, (s_654311518).length - 1)]);
            res_486540316 = addInt(res_486540316, 1);
          }
      } while (false);
    } while (false);

  return result_654311519;

}

function formatValue_1929380126(result_1929380128, result_1929380128_Idx, value_1929380129, specifier_1929380130) {
    var Temporary1;

  BeforeRet: do {
    if (((specifier_1929380130).length == 0)) {
    result_1929380128[result_1929380128_Idx].push.apply(result_1929380128[result_1929380128_Idx], HEX24_33557368(value_1929380129));;
    break BeforeRet;
    }
    
    var spec_1929380134 = parseStandardFormatSpecifier_1275068474(specifier_1929380130, 0, false);
    var fmode_1929380135 = 0;
    switch (spec_1929380134.typ) {
    case 101:
    case 69:
      fmode_1929380135 = 2;
      break;
    case 102:
    case 70:
      fmode_1929380135 = 1;
      break;
    case 103:
    case 71:
      fmode_1929380135 = 0;
      break;
    case 0:
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for number, expected one  of \'e\', \'E\', \'f\', \'F\', \'g\', \'G\' but got: ") || []).concat([spec_1929380134.typ]), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    var f_1929380137 = [nsuformatBiggestFloat(value_1929380129, fmode_1929380135, chckRange(spec_1929380134.precision, -1, 32), 46)];
    var sign_1929380138 = false;
    if ((0.0 <= value_1929380129)) {
    if (!((spec_1929380134.sign == 45))) {
    sign_1929380138 = true;
    if ((value_1929380129 == 0.0)) {
    if (((1.0 / value_1929380129) == Infinity)) {
    insert_33557846(f_1929380137, 0, nimCharToStr(spec_1929380134.sign), 0);
    }
    
    }
    else {
    insert_33557846(f_1929380137, 0, nimCharToStr(spec_1929380134.sign), 0);
    }
    
    }
    
    }
    else {
      sign_1929380138 = true;
    }
    
    if (spec_1929380134.padWithZero) {
    var signStr_1929380139 = [];
    if (sign_1929380138) {
    signStr_1929380139 = nimCopy(null, nimCharToStr(f_1929380137[0][chckIndx(0, 0, (f_1929380137[0]).length - 1)]), NTI33554439);
    f_1929380137[0] = nimCopy(null, HEX5BHEX5D_939527322(f_1929380137[0], HEX2EHEX2E_872415312(1, 1)), NTI33554439);
    }
    
    var toFill_1929380161 = subInt(subInt(spec_1929380134.minimumWidth, (f_1929380137[0]).length), (sign_1929380138 ? 1 : 0));
    if ((0 < toFill_1929380161)) {
    f_1929380137[0] = nimCopy(null, (nsuRepeatChar(48, chckRange(toFill_1929380161, 0, 2147483647)) || []).concat(f_1929380137[0] || []), NTI33554439);
    }
    
    if (sign_1929380138) {
    f_1929380137[0] = nimCopy(null, (signStr_1929380139 || []).concat(f_1929380137[0] || []), NTI33554439);
    }
    
    }
    
    if ((spec_1929380134.align == 0)) {
    Temporary1 = 62;
    }
    else {
    Temporary1 = spec_1929380134.align;
    }
    
    var align_1929380162 = Temporary1;
    var res_1929380163 = alignString_1275068436(f_1929380137[0], spec_1929380134.minimumWidth, align_1929380162, spec_1929380134.fill);
    if ((ConstSet350[spec_1929380134.typ] != undefined)) {
    result_1929380128[result_1929380128_Idx].push.apply(result_1929380128[result_1929380128_Idx], nsuToUpperAsciiStr(res_1929380163));;
    }
    else {
    result_1929380128[result_1929380128_Idx].push.apply(result_1929380128[result_1929380128_Idx], res_1929380163);;
    }
    
  } while (false);

  
}

function drawCommands_1929379848(doc_1929379849) {

function parseFloat_1929379861(x_1929379862) {
    var Temporary1;
    var Temporary3;

  var result_1929379863 = 0.0;

++excHandler;
    Temporary3 = framePtr;
    try {
    Temporary1 = nsuParseFloat(x_1929379862);
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
    framePtr = Temporary3;
    if (lastJSError && (isObj(lastJSError.m_type, NTI33555125))) {
    var fmtRes_1929379864 = [mnewString(0)];
    fmtRes_1929379864[0].push.apply(fmtRes_1929379864[0], makeNimstrLit("Invalid number: "));;
    formatValue_1275068578(fmtRes_1929379864, 0, x_1929379862, []);
    raiseException({message: nimCopy(null, fmtRes_1929379864[0], NTI33554439), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    }
    else {
    	reraiseException();
    }
    lastJSError = prevJSError;
    } finally {
    framePtr = Temporary3;
    }
    result_1929379863 = Temporary1;

  return result_1929379863;

}

function parseXY_1929379865(xy_1929379866) {
    var Temporary2;

  var result_1929379867 = {Field0: 0.0, Field1: 0.0};

++excHandler;
    Temporary2 = framePtr;
    try {
    var xy_1929379868 = nsuSplitChar(xy_1929379866, 44, -1);
    result_1929379867.Field0 = parseFloat_1929379861(xy_1929379868[chckIndx(0, 0, (xy_1929379868).length - 1)]);
    result_1929379867.Field1 = parseFloat_1929379861(xy_1929379868[chckIndx(1, 0, (xy_1929379868).length - 1)]);
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
    framePtr = Temporary2;
    if (lastJSError && (isObj(lastJSError.m_type, NTI33555125)||isObj(lastJSError.m_type, NTI33555128))) {
    var fmtRes_1929379869 = [mnewString(0)];
    fmtRes_1929379869[0].push.apply(fmtRes_1929379869[0], makeNimstrLit("Invalid coordinates: "));;
    formatValue_1275068578(fmtRes_1929379869, 0, xy_1929379866, []);
    raiseException({message: nimCopy(null, fmtRes_1929379869[0], NTI33554439), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    }
    else {
    	reraiseException();
    }
    lastJSError = prevJSError;
    } finally {
    framePtr = Temporary2;
    }

  return result_1929379867;

}

function CarCmd_1929379872(a_1929379873, r_1929379874, width_1929379876, color_1929379878, fill_1929379880) {
    
function nonEmpty_1929379884(s_1929379885) {
      var result_1929379886 = false;

        result_1929379886 = !(eqStrings(s_1929379885, []));

      return result_1929379886;

    }
    var Temporary1;
    var Temporary2;

  var result_1929379881 = [];

    var a_1929379882 = parseXY_1929379865(a_1929379873);
    var r_1929379883 = parseFloat_1929379861(r_1929379874);
    if (HEX3DHEX3D_1929380016(map_1929379929(fill_1929379880, nonEmpty_1929379884), some_1929379947(true))) {
    Temporary1 = makeNimstrLit("0");
    }
    else {
    Temporary1 = makeNimstrLit("3");
    }
    
    var width_1929380070 = get_1929380058(filter_1929379892(width_1929379876, nonEmpty_1929379884), Temporary1);
    var color_1929380097 = get_1929380058(filter_1929379892(color_1929379878, nonEmpty_1929379884), makeNimstrLit("currentColor"));
    var fill_1929380124 = get_1929380058(filter_1929379892(fill_1929379880, nonEmpty_1929379884), makeNimstrLit("transparent"));
    switch (doc_1929379849.target) {
    case 0:
      var fmtRes_1929380125 = [mnewString(0)];
      fmtRes_1929380125[0].push.apply(fmtRes_1929380125[0], makeNimstrLit("<circle cx="));;
      formatValue_1929380126(fmtRes_1929380125, 0, (a_1929379882.Field0 + r_1929379883), []);
      fmtRes_1929380125[0].push.apply(fmtRes_1929380125[0], makeNimstrLit(" cy="));;
      formatValue_1929380126(fmtRes_1929380125, 0, (a_1929379882.Field1 + r_1929379883), []);
      fmtRes_1929380125[0].push.apply(fmtRes_1929380125[0], makeNimstrLit(" r="));;
      formatValue_1929380126(fmtRes_1929380125, 0, r_1929379883, []);
      fmtRes_1929380125[0].push.apply(fmtRes_1929380125[0], makeNimstrLit(" stroke-width=\""));;
      formatValue_1275068578(fmtRes_1929380125, 0, width_1929380070, []);
      fmtRes_1929380125[0].push.apply(fmtRes_1929380125[0], makeNimstrLit("\" stroke=\""));;
      formatValue_1275068578(fmtRes_1929380125, 0, color_1929380097, []);
      fmtRes_1929380125[0].push.apply(fmtRes_1929380125[0], makeNimstrLit("\" fill=\""));;
      formatValue_1275068578(fmtRes_1929380125, 0, fill_1929380124, []);
      fmtRes_1929380125[0].push.apply(fmtRes_1929380125[0], makeNimstrLit("\" />"));;
      Temporary2 = fmtRes_1929380125[0];
      break;
    case 1:
      raiseException({message: makeNimstrLit("Drawing is currently not implemented in the LaTeX backend"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    case 2:
      raiseException({message: makeNimstrLit("Drawing is currently not implemented in the Gemtext backend"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    }
    result_1929379881 = nimCopy(null, Temporary2, NTI33554439);

  return result_1929379881;

}
    
function HEX3Aanonymous_1929380219(arg_1929380220) {
      var result_1929380221 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1929379849.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("Car")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1929379871 = expandArguments_1879048205(doc_1929379849, makeNimstrLit("Car"), arg_1929380220, [HEX21_1207959672(0), HEX21_1207959672(0), HEX3F_1207959693(0), HEX3F_1207959693(0), HEX3F_1207959693(0)]);
        result_1929380221 = nimCopy(result_1929380221, {typ: 1, str: CarCmd_1929379872(to_1862271050(vals_1929379871[chckIndx(0, 0, (vals_1929379871).length - 1)]), to_1862271050(vals_1929379871[chckIndx(1, 0, (vals_1929379871).length - 1)]), to_1912603022(vals_1929379871[chckIndx(2, 0, (vals_1929379871).length - 1)]), to_1912603022(vals_1929379871[chckIndx(3, 0, (vals_1929379871).length - 1)]), to_1912603022(vals_1929379871[chckIndx(4, 0, (vals_1929379871).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1929380221;

    }

function CcrCmd_1929380320(c_1929380321, r_1929380322, width_1929380324, color_1929380326, fill_1929380328) {
    
function nonEmpty_1929380332(s_1929380333) {
      var result_1929380334 = false;

        result_1929380334 = !(eqStrings(s_1929380333, []));

      return result_1929380334;

    }
    var Temporary1;
    var Temporary2;

  var result_1929380329 = [];

    var c_1929380330 = parseXY_1929379865(c_1929380321);
    var r_1929380331 = parseFloat_1929379861(r_1929380322);
    if (HEX3DHEX3D_1929380016(map_1929379929(fill_1929380328, nonEmpty_1929380332), some_1929379947(true))) {
    Temporary1 = makeNimstrLit("0");
    }
    else {
    Temporary1 = makeNimstrLit("3");
    }
    
    var width_1929380427 = get_1929380058(filter_1929379892(width_1929380324, nonEmpty_1929380332), Temporary1);
    var color_1929380454 = get_1929380058(filter_1929379892(color_1929380326, nonEmpty_1929380332), makeNimstrLit("currentColor"));
    var fill_1929380481 = get_1929380058(filter_1929379892(fill_1929380328, nonEmpty_1929380332), makeNimstrLit("transparent"));
    switch (doc_1929379849.target) {
    case 0:
      var fmtRes_1929380482 = [mnewString(0)];
      fmtRes_1929380482[0].push.apply(fmtRes_1929380482[0], makeNimstrLit("<circle cx="));;
      formatValue_1929380126(fmtRes_1929380482, 0, c_1929380330.Field0, []);
      fmtRes_1929380482[0].push.apply(fmtRes_1929380482[0], makeNimstrLit(" cy="));;
      formatValue_1929380126(fmtRes_1929380482, 0, c_1929380330.Field1, []);
      fmtRes_1929380482[0].push.apply(fmtRes_1929380482[0], makeNimstrLit(" r="));;
      formatValue_1929380126(fmtRes_1929380482, 0, r_1929380331, []);
      fmtRes_1929380482[0].push.apply(fmtRes_1929380482[0], makeNimstrLit(" stroke-width=\""));;
      formatValue_1275068578(fmtRes_1929380482, 0, width_1929380427, []);
      fmtRes_1929380482[0].push.apply(fmtRes_1929380482[0], makeNimstrLit("\" stroke=\""));;
      formatValue_1275068578(fmtRes_1929380482, 0, color_1929380454, []);
      fmtRes_1929380482[0].push.apply(fmtRes_1929380482[0], makeNimstrLit("\" fill=\""));;
      formatValue_1275068578(fmtRes_1929380482, 0, fill_1929380481, []);
      fmtRes_1929380482[0].push.apply(fmtRes_1929380482[0], makeNimstrLit("\" />"));;
      Temporary2 = fmtRes_1929380482[0];
      break;
    case 1:
      raiseException({message: makeNimstrLit("Drawing is currently not implemented in the LaTeX backend"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    case 2:
      raiseException({message: makeNimstrLit("Drawing is currently not implemented in the Gemtext backend"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    }
    result_1929380329 = nimCopy(null, Temporary2, NTI33554439);

  return result_1929380329;

}
    
function HEX3Aanonymous_1929380503(arg_1929380504) {
      var result_1929380505 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1929379849.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("Ccr")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1929380319 = expandArguments_1879048205(doc_1929379849, makeNimstrLit("Ccr"), arg_1929380504, [HEX21_1207959672(0), HEX21_1207959672(0), HEX3F_1207959693(0), HEX3F_1207959693(0), HEX3F_1207959693(0)]);
        result_1929380505 = nimCopy(result_1929380505, {typ: 1, str: CcrCmd_1929380320(to_1862271050(vals_1929380319[chckIndx(0, 0, (vals_1929380319).length - 1)]), to_1862271050(vals_1929380319[chckIndx(1, 0, (vals_1929380319).length - 1)]), to_1912603022(vals_1929380319[chckIndx(2, 0, (vals_1929380319).length - 1)]), to_1912603022(vals_1929380319[chckIndx(3, 0, (vals_1929380319).length - 1)]), to_1912603022(vals_1929380319[chckIndx(4, 0, (vals_1929380319).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1929380505;

    }

function LabCmd_1929380595(a_1929380596, b_1929380597, width_1929380599, color_1929380601) {
    
function nonEmpty_1929380605(s_1929380606) {
      var result_1929380607 = false;

        result_1929380607 = !(eqStrings(s_1929380606, []));

      return result_1929380607;

    }
    var Temporary1;

  var result_1929380602 = [];

    var a_1929380603 = parseXY_1929379865(a_1929380596);
    var b_1929380604 = parseXY_1929379865(b_1929380597);
    var width_1929380634 = get_1929380058(filter_1929379892(width_1929380599, nonEmpty_1929380605), makeNimstrLit("3"));
    var color_1929380661 = get_1929380058(filter_1929379892(color_1929380601, nonEmpty_1929380605), makeNimstrLit("currentColor"));
    switch (doc_1929379849.target) {
    case 0:
      var fmtRes_1929380662 = [mnewString(0)];
      fmtRes_1929380662[0].push.apply(fmtRes_1929380662[0], makeNimstrLit("<line x1="));;
      formatValue_1929380126(fmtRes_1929380662, 0, a_1929380603.Field0, []);
      fmtRes_1929380662[0].push.apply(fmtRes_1929380662[0], makeNimstrLit(" y1="));;
      formatValue_1929380126(fmtRes_1929380662, 0, a_1929380603.Field1, []);
      fmtRes_1929380662[0].push.apply(fmtRes_1929380662[0], makeNimstrLit(" x2="));;
      formatValue_1929380126(fmtRes_1929380662, 0, b_1929380604.Field0, []);
      fmtRes_1929380662[0].push.apply(fmtRes_1929380662[0], makeNimstrLit(" y2="));;
      formatValue_1929380126(fmtRes_1929380662, 0, b_1929380604.Field1, []);
      fmtRes_1929380662[0].push.apply(fmtRes_1929380662[0], makeNimstrLit(" stroke-width=\""));;
      formatValue_1275068578(fmtRes_1929380662, 0, width_1929380634, []);
      fmtRes_1929380662[0].push.apply(fmtRes_1929380662[0], makeNimstrLit("\" stroke=\""));;
      formatValue_1275068578(fmtRes_1929380662, 0, color_1929380661, []);
      fmtRes_1929380662[0].push.apply(fmtRes_1929380662[0], makeNimstrLit("\" />"));;
      Temporary1 = fmtRes_1929380662[0];
      break;
    case 1:
      raiseException({message: makeNimstrLit("Drawing is currently not implemented in the LaTeX backend"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    case 2:
      raiseException({message: makeNimstrLit("Drawing is currently not implemented in the Gemtext backend"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    }
    result_1929380602 = nimCopy(null, Temporary1, NTI33554439);

  return result_1929380602;

}
    
function HEX3Aanonymous_1929380688(arg_1929380689) {
      var result_1929380690 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1929379849.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("Lab")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1929380594 = expandArguments_1879048205(doc_1929379849, makeNimstrLit("Lab"), arg_1929380689, [HEX21_1207959672(0), HEX21_1207959672(0), HEX3F_1207959693(0), HEX3F_1207959693(0)]);
        result_1929380690 = nimCopy(result_1929380690, {typ: 1, str: LabCmd_1929380595(to_1862271050(vals_1929380594[chckIndx(0, 0, (vals_1929380594).length - 1)]), to_1862271050(vals_1929380594[chckIndx(1, 0, (vals_1929380594).length - 1)]), to_1912603022(vals_1929380594[chckIndx(2, 0, (vals_1929380594).length - 1)]), to_1912603022(vals_1929380594[chckIndx(3, 0, (vals_1929380594).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1929380690;

    }

function LauCmd_1929380779(a_1929380780, u_1929380781, width_1929380783, color_1929380785) {
    
function nonEmpty_1929380789(s_1929380790) {
      var result_1929380791 = false;

        result_1929380791 = !(eqStrings(s_1929380790, []));

      return result_1929380791;

    }
    var Temporary1;

  var result_1929380786 = [];

    var a_1929380787 = parseXY_1929379865(a_1929380780);
    var u_1929380788 = parseXY_1929379865(u_1929380781);
    var width_1929380818 = get_1929380058(filter_1929379892(width_1929380783, nonEmpty_1929380789), makeNimstrLit("3"));
    var color_1929380845 = get_1929380058(filter_1929379892(color_1929380785, nonEmpty_1929380789), makeNimstrLit("currentColor"));
    switch (doc_1929379849.target) {
    case 0:
      var fmtRes_1929380846 = [mnewString(0)];
      fmtRes_1929380846[0].push.apply(fmtRes_1929380846[0], makeNimstrLit("<line x1="));;
      formatValue_1929380126(fmtRes_1929380846, 0, a_1929380787.Field0, []);
      fmtRes_1929380846[0].push.apply(fmtRes_1929380846[0], makeNimstrLit(" y1="));;
      formatValue_1929380126(fmtRes_1929380846, 0, a_1929380787.Field1, []);
      fmtRes_1929380846[0].push.apply(fmtRes_1929380846[0], makeNimstrLit(" x2="));;
      formatValue_1929380126(fmtRes_1929380846, 0, (a_1929380787.Field0 + u_1929380788.Field0), []);
      fmtRes_1929380846[0].push.apply(fmtRes_1929380846[0], makeNimstrLit(" y2="));;
      formatValue_1929380126(fmtRes_1929380846, 0, (a_1929380787.Field1 + u_1929380788.Field1), []);
      fmtRes_1929380846[0].push.apply(fmtRes_1929380846[0], makeNimstrLit(" stroke-width=\""));;
      formatValue_1275068578(fmtRes_1929380846, 0, width_1929380818, []);
      fmtRes_1929380846[0].push.apply(fmtRes_1929380846[0], makeNimstrLit("\" stroke=\""));;
      formatValue_1275068578(fmtRes_1929380846, 0, color_1929380845, []);
      fmtRes_1929380846[0].push.apply(fmtRes_1929380846[0], makeNimstrLit("\" />"));;
      Temporary1 = fmtRes_1929380846[0];
      break;
    case 1:
      raiseException({message: makeNimstrLit("Drawing is currently not implemented in the LaTeX backend"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    case 2:
      raiseException({message: makeNimstrLit("Drawing is currently not implemented in the Gemtext backend"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    }
    result_1929380786 = nimCopy(null, Temporary1, NTI33554439);

  return result_1929380786;

}
    
function HEX3Aanonymous_1929380872(arg_1929380873) {
      var result_1929380874 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1929379849.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("Lau")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1929380778 = expandArguments_1879048205(doc_1929379849, makeNimstrLit("Lau"), arg_1929380873, [HEX21_1207959672(0), HEX21_1207959672(0), HEX3F_1207959693(0), HEX3F_1207959693(0)]);
        result_1929380874 = nimCopy(result_1929380874, {typ: 1, str: LauCmd_1929380779(to_1862271050(vals_1929380778[chckIndx(0, 0, (vals_1929380778).length - 1)]), to_1862271050(vals_1929380778[chckIndx(1, 0, (vals_1929380778).length - 1)]), to_1912603022(vals_1929380778[chckIndx(2, 0, (vals_1929380778).length - 1)]), to_1912603022(vals_1929380778[chckIndx(3, 0, (vals_1929380778).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1929380874;

    }

function LcuCmd_1929380954(c_1929380955, u_1929380956, width_1929380958, color_1929380960) {
    
function nonEmpty_1929380964(s_1929380965) {
      var result_1929380966 = false;

        result_1929380966 = !(eqStrings(s_1929380965, []));

      return result_1929380966;

    }
    var Temporary1;

  var result_1929380961 = [];

    var c_1929380962 = parseXY_1929379865(c_1929380955);
    var u_1929380963 = parseXY_1929379865(u_1929380956);
    var width_1929380993 = get_1929380058(filter_1929379892(width_1929380958, nonEmpty_1929380964), makeNimstrLit("3"));
    var color_1929381020 = get_1929380058(filter_1929379892(color_1929380960, nonEmpty_1929380964), makeNimstrLit("currentColor"));
    switch (doc_1929379849.target) {
    case 0:
      var fmtRes_1929381021 = [mnewString(0)];
      fmtRes_1929381021[0].push.apply(fmtRes_1929381021[0], makeNimstrLit("<line x1="));;
      formatValue_1929380126(fmtRes_1929381021, 0, (c_1929380962.Field0 - u_1929380963.Field0), []);
      fmtRes_1929381021[0].push.apply(fmtRes_1929381021[0], makeNimstrLit(" y1="));;
      formatValue_1929380126(fmtRes_1929381021, 0, (c_1929380962.Field1 - u_1929380963.Field1), []);
      fmtRes_1929381021[0].push.apply(fmtRes_1929381021[0], makeNimstrLit(" x2="));;
      formatValue_1929380126(fmtRes_1929381021, 0, (c_1929380962.Field0 + u_1929380963.Field0), []);
      fmtRes_1929381021[0].push.apply(fmtRes_1929381021[0], makeNimstrLit(" y2="));;
      formatValue_1929380126(fmtRes_1929381021, 0, (c_1929380962.Field1 + u_1929380963.Field1), []);
      fmtRes_1929381021[0].push.apply(fmtRes_1929381021[0], makeNimstrLit(" stroke-width=\""));;
      formatValue_1275068578(fmtRes_1929381021, 0, width_1929380993, []);
      fmtRes_1929381021[0].push.apply(fmtRes_1929381021[0], makeNimstrLit("\" stroke=\""));;
      formatValue_1275068578(fmtRes_1929381021, 0, color_1929381020, []);
      fmtRes_1929381021[0].push.apply(fmtRes_1929381021[0], makeNimstrLit("\" />"));;
      Temporary1 = fmtRes_1929381021[0];
      break;
    case 1:
      raiseException({message: makeNimstrLit("Drawing is currently not implemented in the LaTeX backend"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    case 2:
      raiseException({message: makeNimstrLit("Drawing is currently not implemented in the Gemtext backend"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    }
    result_1929380961 = nimCopy(null, Temporary1, NTI33554439);

  return result_1929380961;

}
    
function HEX3Aanonymous_1929381047(arg_1929381048) {
      var result_1929381049 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1929379849.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("Lcu")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1929380953 = expandArguments_1879048205(doc_1929379849, makeNimstrLit("Lcu"), arg_1929381048, [HEX21_1207959672(0), HEX21_1207959672(0), HEX3F_1207959693(0), HEX3F_1207959693(0)]);
        result_1929381049 = nimCopy(result_1929381049, {typ: 1, str: LcuCmd_1929380954(to_1862271050(vals_1929380953[chckIndx(0, 0, (vals_1929380953).length - 1)]), to_1862271050(vals_1929380953[chckIndx(1, 0, (vals_1929380953).length - 1)]), to_1912603022(vals_1929380953[chckIndx(2, 0, (vals_1929380953).length - 1)]), to_1912603022(vals_1929380953[chckIndx(3, 0, (vals_1929380953).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1929381049;

    }

function RabCmd_1929381129(a_1929381130, b_1929381131, width_1929381133, color_1929381135, fill_1929381137) {
    
function nonEmpty_1929381141(s_1929381142) {
      var result_1929381143 = false;

        result_1929381143 = !(eqStrings(s_1929381142, []));

      return result_1929381143;

    }
    var Temporary1;
    var Temporary2;

  var result_1929381138 = [];

    var a_1929381139 = parseXY_1929379865(a_1929381130);
    var b_1929381140 = parseXY_1929379865(b_1929381131);
    if (HEX3DHEX3D_1929380016(map_1929379929(fill_1929381137, nonEmpty_1929381141), some_1929379947(true))) {
    Temporary1 = makeNimstrLit("0");
    }
    else {
    Temporary1 = makeNimstrLit("3");
    }
    
    var width_1929381236 = get_1929380058(filter_1929379892(width_1929381133, nonEmpty_1929381141), Temporary1);
    var color_1929381263 = get_1929380058(filter_1929379892(color_1929381135, nonEmpty_1929381141), makeNimstrLit("currentColor"));
    var fill_1929381290 = get_1929380058(filter_1929379892(fill_1929381137, nonEmpty_1929381141), makeNimstrLit("transparent"));
    switch (doc_1929379849.target) {
    case 0:
      var fmtRes_1929381291 = [mnewString(0)];
      fmtRes_1929381291[0].push.apply(fmtRes_1929381291[0], makeNimstrLit("<rect x="));;
      formatValue_1929380126(fmtRes_1929381291, 0, a_1929381139.Field0, []);
      fmtRes_1929381291[0].push.apply(fmtRes_1929381291[0], makeNimstrLit(" y="));;
      formatValue_1929380126(fmtRes_1929381291, 0, a_1929381139.Field1, []);
      fmtRes_1929381291[0].push.apply(fmtRes_1929381291[0], makeNimstrLit(" width="));;
      formatValue_1929380126(fmtRes_1929381291, 0, (b_1929381140.Field0 - a_1929381139.Field0), []);
      fmtRes_1929381291[0].push.apply(fmtRes_1929381291[0], makeNimstrLit(" height="));;
      formatValue_1929380126(fmtRes_1929381291, 0, (b_1929381140.Field1 - a_1929381139.Field1), []);
      fmtRes_1929381291[0].push.apply(fmtRes_1929381291[0], makeNimstrLit(" stroke-width=\""));;
      formatValue_1275068578(fmtRes_1929381291, 0, width_1929381236, []);
      fmtRes_1929381291[0].push.apply(fmtRes_1929381291[0], makeNimstrLit("\" stroke=\""));;
      formatValue_1275068578(fmtRes_1929381291, 0, color_1929381263, []);
      fmtRes_1929381291[0].push.apply(fmtRes_1929381291[0], makeNimstrLit("\" fill=\""));;
      formatValue_1275068578(fmtRes_1929381291, 0, fill_1929381290, []);
      fmtRes_1929381291[0].push.apply(fmtRes_1929381291[0], makeNimstrLit("\" />"));;
      Temporary2 = fmtRes_1929381291[0];
      break;
    case 1:
      raiseException({message: makeNimstrLit("Drawing is currently not implemented in the LaTeX backend"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    case 2:
      raiseException({message: makeNimstrLit("Drawing is currently not implemented in the Gemtext backend"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    }
    result_1929381138 = nimCopy(null, Temporary2, NTI33554439);

  return result_1929381138;

}
    
function HEX3Aanonymous_1929381317(arg_1929381318) {
      var result_1929381319 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1929379849.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("Rab")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1929381128 = expandArguments_1879048205(doc_1929379849, makeNimstrLit("Rab"), arg_1929381318, [HEX21_1207959672(0), HEX21_1207959672(0), HEX3F_1207959693(0), HEX3F_1207959693(0), HEX3F_1207959693(0)]);
        result_1929381319 = nimCopy(result_1929381319, {typ: 1, str: RabCmd_1929381129(to_1862271050(vals_1929381128[chckIndx(0, 0, (vals_1929381128).length - 1)]), to_1862271050(vals_1929381128[chckIndx(1, 0, (vals_1929381128).length - 1)]), to_1912603022(vals_1929381128[chckIndx(2, 0, (vals_1929381128).length - 1)]), to_1912603022(vals_1929381128[chckIndx(3, 0, (vals_1929381128).length - 1)]), to_1912603022(vals_1929381128[chckIndx(4, 0, (vals_1929381128).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1929381319;

    }

function RauCmd_1929381409(a_1929381410, u_1929381411, width_1929381413, color_1929381415, fill_1929381417) {
    
function nonEmpty_1929381421(s_1929381422) {
      var result_1929381423 = false;

        result_1929381423 = !(eqStrings(s_1929381422, []));

      return result_1929381423;

    }
    var Temporary1;
    var Temporary2;

  var result_1929381418 = [];

    var a_1929381419 = parseXY_1929379865(a_1929381410);
    var u_1929381420 = parseXY_1929379865(u_1929381411);
    if (HEX3DHEX3D_1929380016(map_1929379929(fill_1929381417, nonEmpty_1929381421), some_1929379947(true))) {
    Temporary1 = makeNimstrLit("0");
    }
    else {
    Temporary1 = makeNimstrLit("3");
    }
    
    var width_1929381516 = get_1929380058(filter_1929379892(width_1929381413, nonEmpty_1929381421), Temporary1);
    var color_1929381543 = get_1929380058(filter_1929379892(color_1929381415, nonEmpty_1929381421), makeNimstrLit("currentColor"));
    var fill_1929381570 = get_1929380058(filter_1929379892(fill_1929381417, nonEmpty_1929381421), makeNimstrLit("transparent"));
    switch (doc_1929379849.target) {
    case 0:
      var fmtRes_1929381571 = [mnewString(0)];
      fmtRes_1929381571[0].push.apply(fmtRes_1929381571[0], makeNimstrLit("<rect x="));;
      formatValue_1929380126(fmtRes_1929381571, 0, a_1929381419.Field0, []);
      fmtRes_1929381571[0].push.apply(fmtRes_1929381571[0], makeNimstrLit(" y="));;
      formatValue_1929380126(fmtRes_1929381571, 0, a_1929381419.Field1, []);
      fmtRes_1929381571[0].push.apply(fmtRes_1929381571[0], makeNimstrLit(" width="));;
      formatValue_1929380126(fmtRes_1929381571, 0, u_1929381420.Field0, []);
      fmtRes_1929381571[0].push.apply(fmtRes_1929381571[0], makeNimstrLit(" height="));;
      formatValue_1929380126(fmtRes_1929381571, 0, u_1929381420.Field1, []);
      fmtRes_1929381571[0].push.apply(fmtRes_1929381571[0], makeNimstrLit(" stroke-width=\""));;
      formatValue_1275068578(fmtRes_1929381571, 0, width_1929381516, []);
      fmtRes_1929381571[0].push.apply(fmtRes_1929381571[0], makeNimstrLit("\" stroke=\""));;
      formatValue_1275068578(fmtRes_1929381571, 0, color_1929381543, []);
      fmtRes_1929381571[0].push.apply(fmtRes_1929381571[0], makeNimstrLit("\" fill=\""));;
      formatValue_1275068578(fmtRes_1929381571, 0, fill_1929381570, []);
      fmtRes_1929381571[0].push.apply(fmtRes_1929381571[0], makeNimstrLit("\" />"));;
      Temporary2 = fmtRes_1929381571[0];
      break;
    case 1:
      raiseException({message: makeNimstrLit("Drawing is currently not implemented in the LaTeX backend"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    case 2:
      raiseException({message: makeNimstrLit("Drawing is currently not implemented in the Gemtext backend"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    }
    result_1929381418 = nimCopy(null, Temporary2, NTI33554439);

  return result_1929381418;

}
    
function HEX3Aanonymous_1929381597(arg_1929381598) {
      var result_1929381599 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1929379849.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("Rau")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1929381408 = expandArguments_1879048205(doc_1929379849, makeNimstrLit("Rau"), arg_1929381598, [HEX21_1207959672(0), HEX21_1207959672(0), HEX3F_1207959693(0), HEX3F_1207959693(0), HEX3F_1207959693(0)]);
        result_1929381599 = nimCopy(result_1929381599, {typ: 1, str: RauCmd_1929381409(to_1862271050(vals_1929381408[chckIndx(0, 0, (vals_1929381408).length - 1)]), to_1862271050(vals_1929381408[chckIndx(1, 0, (vals_1929381408).length - 1)]), to_1912603022(vals_1929381408[chckIndx(2, 0, (vals_1929381408).length - 1)]), to_1912603022(vals_1929381408[chckIndx(3, 0, (vals_1929381408).length - 1)]), to_1912603022(vals_1929381408[chckIndx(4, 0, (vals_1929381408).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1929381599;

    }

function RcuCmd_1929381689(c_1929381690, u_1929381691, width_1929381693, color_1929381695, fill_1929381697) {
    
function nonEmpty_1929381701(s_1929381702) {
      var result_1929381703 = false;

        result_1929381703 = !(eqStrings(s_1929381702, []));

      return result_1929381703;

    }
    var Temporary1;
    var Temporary2;

  var result_1929381698 = [];

    var c_1929381699 = parseXY_1929379865(c_1929381690);
    var u_1929381700 = parseXY_1929379865(u_1929381691);
    if (HEX3DHEX3D_1929380016(map_1929379929(fill_1929381697, nonEmpty_1929381701), some_1929379947(true))) {
    Temporary1 = makeNimstrLit("0");
    }
    else {
    Temporary1 = makeNimstrLit("3");
    }
    
    var width_1929381796 = get_1929380058(filter_1929379892(width_1929381693, nonEmpty_1929381701), Temporary1);
    var color_1929381823 = get_1929380058(filter_1929379892(color_1929381695, nonEmpty_1929381701), makeNimstrLit("currentColor"));
    var fill_1929381850 = get_1929380058(filter_1929379892(fill_1929381697, nonEmpty_1929381701), makeNimstrLit("transparent"));
    switch (doc_1929379849.target) {
    case 0:
      var fmtRes_1929381851 = [mnewString(0)];
      fmtRes_1929381851[0].push.apply(fmtRes_1929381851[0], makeNimstrLit("<rect x="));;
      formatValue_1929380126(fmtRes_1929381851, 0, (c_1929381699.Field0 - u_1929381700.Field0), []);
      fmtRes_1929381851[0].push.apply(fmtRes_1929381851[0], makeNimstrLit(" y="));;
      formatValue_1929380126(fmtRes_1929381851, 0, (c_1929381699.Field1 - u_1929381700.Field1), []);
      fmtRes_1929381851[0].push.apply(fmtRes_1929381851[0], makeNimstrLit(" width="));;
      formatValue_1929380126(fmtRes_1929381851, 0, (2.0 * u_1929381700.Field0), []);
      fmtRes_1929381851[0].push.apply(fmtRes_1929381851[0], makeNimstrLit(" height="));;
      formatValue_1929380126(fmtRes_1929381851, 0, (2.0 * u_1929381700.Field1), []);
      fmtRes_1929381851[0].push.apply(fmtRes_1929381851[0], makeNimstrLit(" stroke-width=\""));;
      formatValue_1275068578(fmtRes_1929381851, 0, width_1929381796, []);
      fmtRes_1929381851[0].push.apply(fmtRes_1929381851[0], makeNimstrLit("\" stroke=\""));;
      formatValue_1275068578(fmtRes_1929381851, 0, color_1929381823, []);
      fmtRes_1929381851[0].push.apply(fmtRes_1929381851[0], makeNimstrLit("\" fill=\""));;
      formatValue_1275068578(fmtRes_1929381851, 0, fill_1929381850, []);
      fmtRes_1929381851[0].push.apply(fmtRes_1929381851[0], makeNimstrLit("\" />"));;
      Temporary2 = fmtRes_1929381851[0];
      break;
    case 1:
      raiseException({message: makeNimstrLit("Drawing is currently not implemented in the LaTeX backend"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    case 2:
      raiseException({message: makeNimstrLit("Drawing is currently not implemented in the Gemtext backend"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    }
    result_1929381698 = nimCopy(null, Temporary2, NTI33554439);

  return result_1929381698;

}
    
function HEX3Aanonymous_1929381877(arg_1929381878) {
      var result_1929381879 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1929379849.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("Rcu")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1929381688 = expandArguments_1879048205(doc_1929379849, makeNimstrLit("Rcu"), arg_1929381878, [HEX21_1207959672(0), HEX21_1207959672(0), HEX3F_1207959693(0), HEX3F_1207959693(0), HEX3F_1207959693(0)]);
        result_1929381879 = nimCopy(result_1929381879, {typ: 1, str: RcuCmd_1929381689(to_1862271050(vals_1929381688[chckIndx(0, 0, (vals_1929381688).length - 1)]), to_1862271050(vals_1929381688[chckIndx(1, 0, (vals_1929381688).length - 1)]), to_1912603022(vals_1929381688[chckIndx(2, 0, (vals_1929381688).length - 1)]), to_1912603022(vals_1929381688[chckIndx(3, 0, (vals_1929381688).length - 1)]), to_1912603022(vals_1929381688[chckIndx(4, 0, (vals_1929381688).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1929381879;

    }

  var result_1929379852 = ({data: [], counter: 0});

    var commands_1929379855 = [({data: [], counter: 0})];
    HEX5BHEX5DHEX3D_1862271113(commands_1929379855[0], makeNimstrLit("Car"), HEX3Aanonymous_1929380219);
    HEX5BHEX5DHEX3D_1862271113(commands_1929379855[0], makeNimstrLit("Ccr"), HEX3Aanonymous_1929380503);
    HEX5BHEX5DHEX3D_1862271113(commands_1929379855[0], makeNimstrLit("Lab"), HEX3Aanonymous_1929380688);
    HEX5BHEX5DHEX3D_1862271113(commands_1929379855[0], makeNimstrLit("Lau"), HEX3Aanonymous_1929380872);
    HEX5BHEX5DHEX3D_1862271113(commands_1929379855[0], makeNimstrLit("Lcu"), HEX3Aanonymous_1929381047);
    HEX5BHEX5DHEX3D_1862271113(commands_1929379855[0], makeNimstrLit("Rab"), HEX3Aanonymous_1929381317);
    HEX5BHEX5DHEX3D_1862271113(commands_1929379855[0], makeNimstrLit("Rau"), HEX3Aanonymous_1929381597);
    HEX5BHEX5DHEX3D_1862271113(commands_1929379855[0], makeNimstrLit("Rcu"), HEX3Aanonymous_1929381877);
    result_1929379852 = nimCopy(result_1929379852, commands_1929379855[0], NTI1207959603);

  return result_1929379852;

}

function map_1124077975(s_1124077978, op_1124077980) {
  var result_1124077981 = [];

    result_1124077981 = new Array(chckRange((s_1124077978).length, 0, 2147483647)); for (var i = 0 ; i < chckRange((s_1124077978).length, 0, 2147483647) ; ++i) { result_1124077981[i] = ({typ: 0, str: [], list: [], opt: ({val: null})}); }    Label1: do {
      var i_1124077996 = 0;
      var colontmp__486540327 = 0;
      colontmp__486540327 = (s_1124077978).length;
      var i_486540328 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486540328 < colontmp__486540327)) break Label3;
            i_1124077996 = i_486540328;
            result_1124077981[chckIndx(i_1124077996, 0, (result_1124077981).length - 1)] = nimCopy(result_1124077981[chckIndx(i_1124077996, 0, (result_1124077981).length - 1)], op_1124077980(s_1124077978[chckIndx(i_1124077996, 0, (s_1124077978).length - 1)]), NTI1207959557);
            i_486540328 = addInt(i_486540328, 1);
          }
      } while (false);
    } while (false);

  return result_1124077981;

}

function to_1124077960(val_1124077962) {
  var result_1124077964 = ({typ: 0, str: [], list: [], opt: ({val: null})});

    result_1124077964 = nimCopy(result_1124077964, val_1124077962, NTI1207959557);

  return result_1124077964;

}

function to_1124077947(val_1124077950) {
    var Temporary1;
    
function HEX3Aanonymous_1124077953(x_1124077966) {
      var result_1124077969 = ({typ: 0, str: [], list: [], opt: ({val: null})});

        result_1124077969 = nimCopy(result_1124077969, to_1124077960(x_1124077966), NTI1207959557);

      return result_1124077969;

    }

  var result_1124077952 = [];

    var Temporary1 = val_1124077950;
    if (ConstSet354[Temporary1.typ]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'XidocValue\' using \'typ = "), reprDiscriminant(Temporary1.typ, NTI1207959556)); }
    result_1124077952 = nimCopy(null, map_1124077975(Temporary1.list, HEX3Aanonymous_1124077953), NTI1124076840);

  return result_1124077952;

}

function nosisAbsolute(path_1660944525) {
  var result_1660944526 = false;

  BeforeRet: do {
    if (((path_1660944525).length == 0)) {
    result_1660944526 = false;
    break BeforeRet;
    }
    
    result_1660944526 = (path_1660944525[chckIndx(0, 0, (path_1660944525).length - 1)] == 47);
  } while (false);

  return result_1660944526;

}

function HEX5BHEX5D_33557709(s_33557710, i_33557711) {
  var result_33557712 = 0;

    result_33557712 = s_33557710[chckIndx(subInt((s_33557710).length, i_33557711), 0, (s_33557710).length - 1)];

  return result_33557712;

}

function normalizePathEnd_1660944430(path_1660944431, path_1660944431_Idx, trailingSep_1660944432) {
            var Temporary3;
            var Temporary4;

  BeforeRet: do {
    if (((path_1660944431[path_1660944431_Idx]).length == 0)) {
    break BeforeRet;
    }
    
    var i_1660944433 = (path_1660944431[path_1660944431_Idx]).length;
    Label1: do {
        Label2: while (true) {
        if (!(1 <= i_1660944433)) break Label2;
          if ((ConstSet357[path_1660944431[path_1660944431_Idx][chckIndx(subInt(i_1660944433, 1), 0, (path_1660944431[path_1660944431_Idx]).length - 1)]] != undefined)) {
          i_1660944433 = subInt(i_1660944433, 1);
          }
          else {
            if (!(path_1660944431[path_1660944431_Idx][chckIndx(subInt(i_1660944433, 1), 0, (path_1660944431[path_1660944431_Idx]).length - 1)] == 46)) Temporary4 = false; else {              Temporary4 = (2 <= i_1660944433);            }            if (!Temporary4) Temporary3 = false; else {              Temporary3 = (ConstSet358[path_1660944431[path_1660944431_Idx][chckIndx(subInt(i_1660944433, 2), 0, (path_1660944431[path_1660944431_Idx]).length - 1)]] != undefined);            }          if (Temporary3) {
          i_1660944433 = subInt(i_1660944433, 1);
          }
          else {
            break Label1;
          }
          }
        }
    } while (false);
    if (trailingSep_1660944432) {
    (path_1660944431[path_1660944431_Idx].length = chckRange(i_1660944433, 0, 2147483647));
    addChar(path_1660944431[path_1660944431_Idx], 47);;
    }
    else {
    if ((0 < i_1660944433)) {
    (path_1660944431[path_1660944431_Idx].length = chckRange(i_1660944433, 0, 2147483647));
    }
    else {
      path_1660944431[path_1660944431_Idx] = nimCopy(null, makeNimstrLit("/"), NTI33554439);
    }
    }
  } while (false);

  
}

function hasNext_1677721606(it_1677721607, x_1677721608) {
  var result_1677721609 = false;

    result_1677721609 = (it_1677721607.i < (x_1677721608).length);

  return result_1677721609;

}

function next_1677721610(it_1677721611, x_1677721612) {
      var Temporary1;
            var Temporary4;
          var Temporary7;

  var result_1677721613 = {Field0: 0, Field1: 0};

    it_1677721611.prev = it_1677721611.i;
      if (!!(it_1677721611.notFirst)) Temporary1 = false; else {        Temporary1 = (ConstSet360[x_1677721612[chckIndx(it_1677721611.i, 0, (x_1677721612).length - 1)]] != undefined);      }    if (Temporary1) {
    it_1677721611.i = addInt(it_1677721611.i, 1);
    }
    else {
      Label2: do {
          Label3: while (true) {
            if (!(it_1677721611.i < (x_1677721612).length)) Temporary4 = false; else {              Temporary4 = !((ConstSet361[x_1677721612[chckIndx(it_1677721611.i, 0, (x_1677721612).length - 1)]] != undefined));            }          if (!Temporary4) break Label3;
            it_1677721611.i = addInt(it_1677721611.i, 1);
          }
      } while (false);
    }
    
    if ((it_1677721611.prev < it_1677721611.i)) {
    var colontmp__1577058314 = it_1677721611.prev;
    var colontmp__1577058315 = subInt(it_1677721611.i, 1);
    result_1677721613 = nimCopy(result_1677721613, {Field0: colontmp__1577058314, Field1: colontmp__1577058315}, NTI1677721607);
    }
    else {
    if (hasNext_1677721606(it_1677721611, x_1677721612)) {
    result_1677721613 = nimCopy(result_1677721613, next_1677721610(it_1677721611, x_1677721612), NTI1677721607);
    }
    }
    Label5: do {
        Label6: while (true) {
          if (!(it_1677721611.i < (x_1677721612).length)) Temporary7 = false; else {            Temporary7 = (ConstSet362[x_1677721612[chckIndx(it_1677721611.i, 0, (x_1677721612).length - 1)]] != undefined);          }        if (!Temporary7) break Label6;
          it_1677721611.i = addInt(it_1677721611.i, 1);
        }
    } while (false);
    it_1677721611.notFirst = true;

  return result_1677721613;

}

function isSlash_1677721663(x_1677721664, bounds_1677721665) {
  var result_1677721666 = false;

    result_1677721666 = ((bounds_1677721665["Field1"] == bounds_1677721665["Field0"]) && (ConstSet363[x_1677721664[chckIndx(bounds_1677721665["Field0"], 0, (x_1677721664).length - 1)]] != undefined));

  return result_1677721666;

}

function isDotDot_1677721659(x_1677721660, bounds_1677721661) {
  var result_1677721662 = false;

    result_1677721662 = (((bounds_1677721661["Field1"] == addInt(bounds_1677721661["Field0"], 1)) && (x_1677721660[chckIndx(bounds_1677721661["Field0"], 0, (x_1677721660).length - 1)] == 46)) && (x_1677721660[chckIndx(addInt(bounds_1677721661["Field0"], 1), 0, (x_1677721660).length - 1)] == 46));

  return result_1677721662;

}

function isDot_1677721655(x_1677721656, bounds_1677721657) {
  var result_1677721658 = false;

    result_1677721658 = ((bounds_1677721657["Field1"] == bounds_1677721657["Field0"]) && (x_1677721656[chckIndx(bounds_1677721657["Field0"], 0, (x_1677721656).length - 1)] == 46));

  return result_1677721658;

}

function addNormalizePath_1677721671(x_1677721672, result_1677721673, result_1677721673_Idx, state_1677721674, state_1677721674_Idx, dirSep_1677721675) {
            var Temporary5;
            var Temporary6;
                var Temporary9;
              var Temporary10;
            var Temporary11;
      var Temporary12;

    var it_1677721676 = [({i: 0, prev: 0, notFirst: false})];
    it_1677721676[0].notFirst = (0 < (state_1677721674[state_1677721674_Idx] >> 1));
    if (it_1677721676[0].notFirst) {
    Label1: do {
        Label2: while (true) {
        if (!((it_1677721676[0].i < (x_1677721672).length) && (ConstSet359[x_1677721672[chckIndx(it_1677721676[0].i, 0, (x_1677721672).length - 1)]] != undefined))) break Label2;
          it_1677721676[0].i = addInt(it_1677721676[0].i, 1);
        }
    } while (false);
    }
    
    Label3: do {
        Label4: while (true) {
        if (!hasNext_1677721606(it_1677721676[0], x_1677721672)) break Label4;
          var b_1677721689 = next_1677721610(it_1677721676[0], x_1677721672);
            if (!((state_1677721674[state_1677721674_Idx] >> 1) == 0)) Temporary5 = false; else {              Temporary5 = isSlash_1677721663(x_1677721672, b_1677721689);            }          if (Temporary5) {
            if (((result_1677721673[result_1677721673_Idx]).length == 0)) Temporary6 = true; else {              Temporary6 = !((ConstSet364[result_1677721673[result_1677721673_Idx][chckIndx(subInt((result_1677721673[result_1677721673_Idx]).length, 1), 0, (result_1677721673[result_1677721673_Idx]).length - 1)]] != undefined));            }          if (Temporary6) {
          addChar(result_1677721673[result_1677721673_Idx], dirSep_1677721675);;
          }
          
          state_1677721674[state_1677721674_Idx] = (state_1677721674[state_1677721674_Idx] | 1);
          }
          else {
          if (isDotDot_1677721659(x_1677721672, b_1677721689)) {
          if ((1 <= (state_1677721674[state_1677721674_Idx] >> 1))) {
          var d_1677721702 = (result_1677721673[result_1677721673_Idx]).length;
          Label7: do {
              Label8: while (true) {
                if (!((state_1677721674[state_1677721674_Idx] & 1) < subInt(d_1677721702, 1))) Temporary9 = false; else {                  Temporary9 = !((ConstSet365[result_1677721673[result_1677721673_Idx][chckIndx(subInt(d_1677721702, 1), 0, (result_1677721673[result_1677721673_Idx]).length - 1)]] != undefined));                }              if (!Temporary9) break Label8;
                d_1677721702 = subInt(d_1677721702, 1);
              }
          } while (false);
          if ((0 < d_1677721702)) {
          (result_1677721673[result_1677721673_Idx].length = chckRange(subInt(d_1677721702, 1), 0, 2147483647));
          state_1677721674[state_1677721674_Idx] = subInt(state_1677721674[state_1677721674_Idx], 2);
          }
          
          }
          else {
              if (!(0 < (result_1677721673[result_1677721673_Idx]).length)) Temporary10 = false; else {                Temporary10 = !((ConstSet366[result_1677721673[result_1677721673_Idx][chckIndx(subInt((result_1677721673[result_1677721673_Idx]).length, 1), 0, (result_1677721673[result_1677721673_Idx]).length - 1)]] != undefined));              }            if (Temporary10) {
            addChar(result_1677721673[result_1677721673_Idx], dirSep_1677721675);;
            }
            
            result_1677721673[result_1677721673_Idx].push.apply(result_1677721673[result_1677721673_Idx], substr_33557906(x_1677721672, b_1677721689["Field0"], b_1677721689["Field1"]));;
          }
          
          }
          else {
          if (isDot_1677721655(x_1677721672, b_1677721689)) {
          }
          else {
          if ((b_1677721689["Field0"] <= b_1677721689["Field1"])) {
            if (!(0 < (result_1677721673[result_1677721673_Idx]).length)) Temporary11 = false; else {              Temporary11 = !((ConstSet367[result_1677721673[result_1677721673_Idx][chckIndx(subInt((result_1677721673[result_1677721673_Idx]).length, 1), 0, (result_1677721673[result_1677721673_Idx]).length - 1)]] != undefined));            }          if (Temporary11) {
          addChar(result_1677721673[result_1677721673_Idx], dirSep_1677721675);;
          }
          
          result_1677721673[result_1677721673_Idx].push.apply(result_1677721673[result_1677721673_Idx], substr_33557906(x_1677721672, b_1677721689["Field0"], b_1677721689["Field1"]));;
          state_1677721674[state_1677721674_Idx] = addInt(state_1677721674[state_1677721674_Idx], 2);
          }
          }}}
        }
    } while (false);
      if (!eqStrings(result_1677721673[result_1677721673_Idx], [])) Temporary12 = false; else {        Temporary12 = !(eqStrings(x_1677721672, []));      }    if (Temporary12) {
    result_1677721673[result_1677721673_Idx] = nimCopy(null, makeNimstrLit("."), NTI33554439);
    }
    

  
}

function joinPathImpl_1660944461(result_1660944462, result_1660944462_Idx, state_1660944463, state_1660944463_Idx, tail_1660944464) {
    var Temporary1;
    var Temporary2;
      var Temporary3;
        var Temporary4;
          var Temporary5;

    if (!(0 < (tail_1660944464).length)) Temporary2 = false; else {      Temporary2 = (ConstSet355[HEX5BHEX5D_33557709(tail_1660944464, 1)] != undefined);    }    if (Temporary2) Temporary1 = true; else {      if (!((tail_1660944464).length == 0)) Temporary3 = false; else {        if (!(0 < (result_1660944462[result_1660944462_Idx]).length)) Temporary4 = false; else {          Temporary4 = (ConstSet356[(Temporary5 = HEX5BHEX5D_33557742(result_1660944462, result_1660944462_Idx, 1), Temporary5)[0][Temporary5[1]]] != undefined);        }        Temporary3 = Temporary4;      }      Temporary1 = Temporary3;    }    var trailingSep_1660944473 = Temporary1;
    normalizePathEnd_1660944430(result_1660944462, result_1660944462_Idx, false);
    addNormalizePath_1677721671(tail_1660944464, result_1660944462, result_1660944462_Idx, state_1660944463, state_1660944463_Idx, 47);
    normalizePathEnd_1660944430(result_1660944462, result_1660944462_Idx, trailingSep_1660944473);

  
}

function nosjoinPath(head_1660944475, tail_1660944476) {
  var result_1660944477 = [[]];

    result_1660944477[0] = nimCopy(null, mnewString(0), NTI33554439);
    var state_1660944478 = [0];
    joinPathImpl_1660944461(result_1660944477, 0, state_1660944478, 0, head_1660944475);
    joinPathImpl_1660944461(result_1660944477, 0, state_1660944478, 0, tail_1660944476);

  return result_1660944477[0];

}

function absolutePath_1660945026(path_1660945027, root_1660945028) {
    var Temporary1;

  var result_1660945029 = [];

    if (nosisAbsolute(path_1660945027)) {
    Temporary1 = path_1660945027;
    }
    else {
      if (!(nosisAbsolute(root_1660945028))) {
      raiseException({message: (makeNimstrLit("The specified root is not absolute: ") || []).concat(root_1660945028 || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
      }
      
    Temporary1 = nosjoinPath(root_1660945028, path_1660945027);
    }
    
    result_1660945029 = nimCopy(null, Temporary1, NTI33554439);

  return result_1660945029;

}

function nosgetCurrentDir() {
  var result_1660945018 = [];

    if (true) {
    failedAssertImpl_218103864(makeNimstrLit("os.nim(1379, 16) `false` use -d:nodejs to have `getCurrentDir` defined"));
    }
    

  return result_1660945018;

}

function HEX2A_1207959696(typ_1207959697) {
  var result_1207959698 = ({kind: 0, base: 0});

    result_1207959698.kind = 2;
    result_1207959698.base = typ_1207959697;

  return result_1207959698;

}

function map_1124078381(s_1124078384, op_1124078386) {
  var result_1124078387 = [];

    result_1124078387 = new Array(chckRange((s_1124078384).length, 0, 2147483647)); for (var i = 0 ; i < chckRange((s_1124078384).length, 0, 2147483647) ; ++i) { result_1124078387[i] = []; }    Label1: do {
      var i_1124078402 = 0;
      var colontmp__486540331 = 0;
      colontmp__486540331 = (s_1124078384).length;
      var i_486540332 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486540332 < colontmp__486540331)) break Label3;
            i_1124078402 = i_486540332;
            result_1124078387[chckIndx(i_1124078402, 0, (result_1124078387).length - 1)] = nimCopy(null, op_1124078386(s_1124078384[chckIndx(i_1124078402, 0, (s_1124078384).length - 1)]), NTI33554439);
            i_486540332 = addInt(i_486540332, 1);
          }
      } while (false);
    } while (false);

  return result_1124078387;

}

function to_1124078354(val_1124078357) {
    var Temporary1;
    
function HEX3Aanonymous_1124078360(x_1124078372) {
      var result_1124078375 = [];

        result_1124078375 = nimCopy(null, to_1862271050(x_1124078372), NTI33554439);

      return result_1124078375;

    }

  var result_1124078359 = [];

    var Temporary1 = val_1124078357;
    if (ConstSet368[Temporary1.typ]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'XidocValue\' using \'typ = "), reprDiscriminant(Temporary1.typ, NTI1207959556)); }
    result_1124078359 = nimCopy(null, map_1124078381(Temporary1.list, HEX3Aanonymous_1124078360), NTI1124077139);

  return result_1124078359;

}

function npegsmatchLenCapture(s_1140853539, pattern_1140853540, matches_1140853541, start_1140853542) {
  var result_1140853543 = 0;

    var c_1140853544 = [({matches: [{Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}], ml: 0, origStart: 0})];
    c_1140853544[0].origStart = start_1140853542;
    result_1140853543 = npegsrawMatch(s_1140853539, pattern_1140853540, start_1140853542, c_1140853544[0]);
    if ((0 <= result_1140853543)) {
    Label1: do {
      var kHEX60gensym565_1140853552 = 0;
      var colontmp__486540335 = 0;
      colontmp__486540335 = subInt(c_1140853544[0].ml, 1);
      var res_486540336 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_486540336 <= colontmp__486540335)) break Label3;
            kHEX60gensym565_1140853552 = res_486540336;
            var startIdxHEX60gensym565_1140853553 = c_1140853544[0].matches[chckIndx(kHEX60gensym565_1140853552, 0, (c_1140853544[0].matches).length - 1)]["Field0"];
            var endIdxHEX60gensym565_1140853554 = c_1140853544[0].matches[chckIndx(kHEX60gensym565_1140853552, 0, (c_1140853544[0].matches).length - 1)]["Field1"];
            if (!((startIdxHEX60gensym565_1140853553 == -1))) {
            matches_1140853541[chckIndx(kHEX60gensym565_1140853552, 0, (matches_1140853541).length - 1)] = nimCopy(null, substr_33557906(s_1140853539, startIdxHEX60gensym565_1140853553, endIdxHEX60gensym565_1140853554), NTI33554439);
            }
            else {
              matches_1140853541[chckIndx(kHEX60gensym565_1140853552, 0, (matches_1140853541).length - 1)] = nimCopy(null, [], NTI33554439);
            }
            
            res_486540336 = addInt(res_486540336, 1);
          }
      } while (false);
    } while (false);
    }
    

  return result_1140853543;

}

function npegsmatchCapture(s_1140853571, pattern_1140853572, matches_1140853573, start_1140853574) {
  var result_1140853575 = false;

    result_1140853575 = !((npegsmatchLenCapture(s_1140853571, pattern_1140853572, matches_1140853573, start_1140853574) == -1));

  return result_1140853575;

}

function HEX2F_1660944500(head_1660944501, tail_1660944502) {
  var result_1660944503 = [];

    result_1660944503 = nimCopy(null, nosjoinPath(head_1660944501, tail_1660944502), NTI33554439);

  return result_1660944503;

}

function nossplitPath(path_1660944505) {
    var Temporary4;

  var result_1660944508 = {Field0: [], Field1: []};

    var sepPos_1660944509 = -1;
    Label1: do {
      var i_1660944515 = 0;
      var colontmp__486540339 = 0;
      colontmp__486540339 = subInt((path_1660944505).length, 1);
      var res_486540340 = colontmp__486540339;
      Label2: do {
          Label3: while (true) {
          if (!(0 <= res_486540340)) break Label3;
            i_1660944515 = res_486540340;
            if ((ConstSet371[path_1660944505[chckIndx(i_1660944515, 0, (path_1660944505).length - 1)]] != undefined)) {
            sepPos_1660944509 = i_1660944515;
            break Label1;
            }
            
            res_486540340 = subInt(res_486540340, 1);
          }
      } while (false);
    } while (false);
    if ((0 <= sepPos_1660944509)) {
    if ((1 <= sepPos_1660944509)) {
    Temporary4 = subInt(sepPos_1660944509, 1);
    }
    else {
    Temporary4 = 0;
    }
    
    result_1660944508.Field0 = nimCopy(null, substr_33557906(path_1660944505, 0, Temporary4), NTI33554439);
    result_1660944508.Field1 = nimCopy(null, substr_33557918(path_1660944505, addInt(sepPos_1660944509, 1)), NTI33554439);
    }
    else {
      result_1660944508.Field0 = nimCopy(null, [], NTI33554439);
      result_1660944508.Field1 = nimCopy(null, path_1660944505, NTI33554439);
    }
    

  return result_1660944508;

}

function open_452985194(f_452985195, f_452985195_Idx, filename_452985196, mode_452985197, bufSize_452985198) {
    var Temporary1;
      var Temporary2;

  var result_452985199 = false;

    var p_452985200 = (Temporary1 = fopen(toJSStr(filename_452985196), FormatOpen_452985184[chckIndx(mode_452985197, 0, (FormatOpen_452985184).length - 1)]), Temporary1)[0], p_452985200_Idx = Temporary1[1];
    if (!((p_452985200 == null && p_452985200_Idx == 0))) {
    var f2_452985201 = p_452985200;
    result_452985199 = true;
    f_452985195[f_452985195_Idx] = p_452985200;
      if (!(0 < bufSize_452985198)) Temporary2 = false; else {        Temporary2 = (bufSize_452985198 <= 2147483647);      }    if (Temporary2) {
    var _ = setvbuf(f_452985195[f_452985195_Idx], null, 0, _IOFBF, (bufSize_452985198 >>> 0));
    }
    else {
    if ((bufSize_452985198 == 0)) {
    var _ = setvbuf(f_452985195[f_452985195_Idx], null, 0, _IONBF, 0);
    }
    }
    }
    

  return result_452985199;

}

function rawFileSize_452985150(file_452985151) {
  var result_452985152 = 0;

    var oldPos_452985153 = ftello(file_452985151);
    var _ = fseeko(file_452985151, 0, 2);
    result_452985152 = ftello(file_452985151);
    var _ = fseeko(file_452985151, oldPos_452985153, 0);

  return result_452985152;

}

function raiseEIO_452984912(msg_452984913) {
    raiseException({message: nimCopy(null, msg_452984913, NTI33554439), parent: null, m_type: NTI33555115, name: null, trace: [], up: null}, "IOError");

  
}

function checkErr_452984957(f_452984958) {
    if (!((ferror(f_452984958) == 0))) {
    var msg_452984959 = (makeNimstrLit("errno: ") || []).concat(HEX24_335544323(((errno) | 0)) || [],makeNimstrLit(" `") || [],cstrToNimstr(strerror(errno)) || [],makeNimstrLit("`") || []);
    clearerr(f_452984958);
    raiseEIO_452984912(msg_452984959);
    }
    

  
}

function readBuffer_452984960(f_452984961, buffer_452984962, buffer_452984962_Idx, len_452984963) {
  var result_452984964 = 0;

    result_452984964 = (fread(buffer_452984962, buffer_452984962_Idx, 1, (len_452984963 >>> 0), f_452984961) | 0);
    if (!((result_452984964 == len_452984963))) {
    checkErr_452984957(f_452984961);
    }
    

  return result_452984964;

}

function endOfFile_452985154(f_452985155) {
  var result_452985156 = false;

  BeforeRet: do {
    var c_452985157 = fgetc(f_452985155);
    var _ = ungetc(c_452985157, f_452985155);
    result_452985156 = (c_452985157 < 0);
    break BeforeRet;
  } while (false);

  return result_452985156;

}

function readAllBuffer_452985145(file_452985146) {
  var result_452985147 = [];

    result_452985147 = nimCopy(null, [], NTI33554439);
    var buffer_452985148 = mnewString(4000);
    Label1: do {
        Label2: while (true) {
        if (!true) break Label2;
          var bytesRead_452985149 = readBuffer_452984960(file_452985146, buffer_452985148, chckIndx(0, 0, (buffer_452985148).length - 1), 4000);
          if ((bytesRead_452985149 == 4000)) {
          result_452985147.push.apply(result_452985147, buffer_452985148);;
          }
          else {
            (buffer_452985148.length = chckRange(bytesRead_452985149, 0, 2147483647));
            result_452985147.push.apply(result_452985147, buffer_452985148);;
            break Label1;
          }
          
        }
    } while (false);

  return result_452985147;

}

function readAllFile_452985158(file_452985159, len_452985160) {
  var result_452985161 = [];

    result_452985161 = nimCopy(null, mnewString(chckRange(len_452985160, 0, 2147483647)), NTI33554439);
    var bytes_452985162 = readBuffer_452984960(file_452985159, result_452985161, chckIndx(0, 0, (result_452985161).length - 1), chckRange(len_452985160, 0, 2147483647));
    if (endOfFile_452985154(file_452985159)) {
    if ((bytes_452985162 < len_452985160)) {
    (result_452985161.length = chckRange(bytes_452985162, 0, 2147483647));
    }
    
    }
    else {
    result_452985161.push.apply(result_452985161, readAllBuffer_452985145(file_452985159));;
    }
    

  return result_452985161;

}

function readAll_452985167(file_452985168) {
  var result_452985169 = [];

    var len_452985170 = rawFileSize_452985150(file_452985168);
    if ((0 < len_452985170)) {
    result_452985169 = nimCopy(null, readAllFile_452985158(file_452985168, len_452985170), NTI33554439);
    }
    else {
      result_452985169 = nimCopy(null, readAllBuffer_452985145(file_452985168), NTI33554439);
    }
    

  return result_452985169;

}

function close_452985037(f_452985038) {
    if (!((f_452985038 == null))) {
    var _ = fclose(f_452985038);
    }
    

  
}

function readFile_452985260(filename_452985261) {
    var Temporary2;

  var result_452985262 = [];

    var f_452985263 = [null];
    if (open_452985194(f_452985263, 0, filename_452985261, 0, -1)) {
    Temporary2 = framePtr;
    try {
    result_452985262 = nimCopy(null, readAll_452985167(f_452985263[0]), NTI33554439);
    } finally {
    framePtr = Temporary2;
    close_452985037(f_452985263[0]);
    }
    }
    else {
      raiseException({message: (makeNimstrLit("cannot open: ") || []).concat(filename_452985261 || []), parent: null, m_type: NTI33555115, name: null, trace: [], up: null}, "IOError");
    }
    

  return result_452985262;

}

function some_1124078893(val_1124078895) {
  var result_1124078896 = ({val: 0, has: false});

    result_1124078896.has = true;
    result_1124078896.val = val_1124078895;

  return result_1124078896;

}

function acquire_1610612803(lock_1610612804) {
  
}

function addAtExit_1593835536(quitProc_1593835538) {
            window.onbeforeunload = quitProc_1593835538;
      

  
}

function release_1610612805(lock_1610612806) {
  
}

function callClosures_1593835557() {
    var Temporary2;
              var Temporary6;
              var Temporary7;

    acquire_1610612803(gFunsLock_1593835534[0]);
    Temporary2 = framePtr;
    try {
    Label3: do {
      var i_1593835567 = 0;
      var colontmp__486540360 = 0;
      colontmp__486540360 = subInt((gFuns_1593835535[0]).length, 1);
      var res_486540361 = colontmp__486540360;
      Label4: do {
          Label5: while (true) {
          if (!(0 <= res_486540361)) break Label5;
            i_1593835567 = res_486540361;
            var fun_1593835568 = nimCopy(null, gFuns_1593835535[0][chckIndx(i_1593835567, 0, (gFuns_1593835535[0]).length - 1)], NTI1593835524);
            switch (fun_1593835568.kind) {
            case 0:
              var Temporary6 = fun_1593835568;
              if (ConstSet372[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'fun1\' is not accessible for type \'Fun\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI1593835523)); }
              Temporary6.fun1();
              break;
            case 1:
              var Temporary7 = fun_1593835568;
              if (ConstSet373[Temporary7.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'fun2\' is not accessible for type \'Fun\' using \'kind = "), reprDiscriminant(Temporary7.kind, NTI1593835523)); }
              Temporary7.fun2();
              break;
            }
            res_486540361 = subInt(res_486540361, 1);
          }
      } while (false);
    } while (false);
    } finally {
    framePtr = Temporary2;
    release_1610612805(gFunsLock_1593835534[0]);
    }

  
}

function addExitProc_1593835586(cl_1593835588) {
    var Temporary2;

    acquire_1610612803(gFunsLock_1593835534[0]);
    Temporary2 = framePtr;
    try {
    if (((gFuns_1593835535[0]).length == 0)) {
    addAtExit_1593835536(callClosures_1593835557);
    }
    
    gFuns_1593835535[0].push({kind: 0, fun1: cl_1593835588, fun2: null});;
    } finally {
    framePtr = Temporary2;
    release_1610612805(gFunsLock_1593835534[0]);
    }

  
}

function initEnv_1577058365() {
    if (globalThis.alreadyExecutedHEX60gensym1_1577058367 === undefined) {
      globalThis.alreadyExecutedHEX60gensym1_1577058367 = [false];
    }
    if (!(alreadyExecutedHEX60gensym1_1577058367[0])) {
    alreadyExecutedHEX60gensym1_1577058367[0] = true;
    var _ = janet_init();
    addExitProc_1593835586(janet_deinit);
    }
    

  
}

function newSeq_1577058410(len_1577058412) {
  var result_1577058413 = [];

    result_1577058413 = new Array(len_1577058412); for (var i = 0 ; i < len_1577058412 ; ++i) { result_1577058413[i] = ({}); }
  return result_1577058413;

}

function janetCall_1577058377(function_1577058378, args_1577058379, path_1577058380) {
  var result_1577058381 = [];

    initEnv_1577058365();
    var env_1577058382 = janet_core_env(null);
    var functionValue_1577058383 = [({})];
    if (!((janet_dobytes(env_1577058382, toJSStr(function_1577058378), (((function_1577058378).length) | 0), toJSStr(path_1577058380), functionValue_1577058383[0]) == 0))) {
    raiseException({message: nsuFormatOpenArray(makeNimstrLit("Error while evaluating Janet function (see above): $1"), [nimCopy(null, function_1577058378, NTI33554439)]), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    }
    
    if (!(janet_checktype(functionValue_1577058383[0], JANET_FUNCTION))) {
    raiseException({message: nsuFormatOpenArray(makeNimstrLit("Invalid Janet function: $1"), [nimCopy(null, function_1577058378, NTI33554439)]), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    }
    
    var f_1577058384 = janet_unwrap_function(functionValue_1577058383[0]);
    Label1: do {
      var iHEX60gensym5_1577058406 = 0;
      var resultHEX60gensym5_1577058436 = newSeq_1577058410(chckRange((args_1577058379).length, 0, 2147483647));
      Label2: do {
        var it_1577058440 = [];
        var i_486540357 = 0;
        Label3: do {
            Label4: while (true) {
            if (!(i_486540357 < (args_1577058379).length)) break Label4;
              it_1577058440 = args_1577058379[chckIndx(i_486540357, 0, (args_1577058379).length - 1)];
              resultHEX60gensym5_1577058436[chckIndx(iHEX60gensym5_1577058406, 0, (resultHEX60gensym5_1577058436).length - 1)] = nimCopy(resultHEX60gensym5_1577058436[chckIndx(iHEX60gensym5_1577058406, 0, (resultHEX60gensym5_1577058436).length - 1)], janet_cstringv(toJSStr(it_1577058440)), NTI1577058314);
              iHEX60gensym5_1577058406 = addInt(iHEX60gensym5_1577058406, 1);
              i_486540357 = addInt(i_486540357, 1);
            }
        } while (false);
      } while (false);
    } while (false);
    var wrappedArgs_1577058445 = nimCopy(null, resultHEX60gensym5_1577058436, NTI1577058382);
    var value_1577058446 = [({})];
    if ((janet_pcall(f_1577058384, (((args_1577058379).length) | 0), wrappedArgs_1577058445[chckIndx(0, 0, (wrappedArgs_1577058445).length - 1)], value_1577058446[0], null, 0) == JANET_SIGNAL_ERROR)) {
    raiseException({message: nsuFormatOpenArray(makeNimstrLit("Error while calling Janet function: $1\x0A$2"), [nimCopy(null, function_1577058378, NTI33554439), cstrToNimstr(janet_unwrap_string(value_1577058446[0]))]), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    }
    
    if (!(janet_checktype(value_1577058446[0], JANET_STRING))) {
    raiseException({message: nsuFormatOpenArray(makeNimstrLit("Returned value from Janet function is not a string: $1"), [nimCopy(null, function_1577058378, NTI33554439)]), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    }
    
    result_1577058381 = nimCopy(null, cstrToNimstr(janet_unwrap_string(value_1577058446[0])), NTI33554439);

  return result_1577058381;

}

function janetEval_1577058477(code_1577058478, values_1577058479, path_1577058480) {
    var Temporary4;

  var result_1577058481 = [];

    initEnv_1577058365();
    var env_1577058482 = janet_core_env(null);
    Label1: do {
      var name_1577058486 = [];
      var val_1577058487 = [];
      var i_486540368 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486540368 < (values_1577058479).length)) break Label3;
            name_1577058486 = values_1577058479[chckIndx(i_486540368, 0, (values_1577058479).length - 1)]["Field0"];
            val_1577058487 = values_1577058479[chckIndx(i_486540368, 0, (values_1577058479).length - 1)]["Field1"];
            janet_def_sm(env_1577058482, toJSStr(name_1577058486), janet_cstringv(toJSStr(val_1577058487)), "", toJSStr(path_1577058480), 0);
            i_486540368 = addInt(i_486540368, 1);
          }
      } while (false);
    } while (false);
    var value_1577058488 = [({})];
    if (!((janet_dobytes(env_1577058482, toJSStr(code_1577058478), (((code_1577058478).length) | 0), toJSStr(path_1577058480), value_1577058488[0]) == 0))) {
    raiseException({message: makeNimstrLit("Error while evaluating Janet code (see above)"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    }
    
    if (janet_checktype(value_1577058488[0], JANET_STRING)) {
    Temporary4 = cstrToNimstr(janet_unwrap_string(value_1577058488[0]));
    }
    else {
    if (janet_checktype(value_1577058488[0], JANET_NIL)) {
    Temporary4 = [];
    }
    else {
      raiseException({message: makeNimstrLit("Returned value from Janet code is not a string or nil"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    }
    }
    result_1577058481 = nimCopy(null, Temporary4, NTI33554439);

  return result_1577058481;

}

function jsCall_1761609615(code_1761609616, args_1761609617) {
  var result_1761609618 = [];

    raiseException({message: makeNimstrLit("JavaScript evaluation is currently not available when using JavaScript (how ironic)"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");

  return result_1761609618;

}

function jsEval_1761609619(code_1761609620, values_1761609621) {
  var result_1761609622 = [];

    raiseException({message: makeNimstrLit("JavaScript evaluation is currently not available when using JavaScript (how ironic)"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");

  return result_1761609622;

}

function nsuToLowerAsciiChar(c_654311492) {
  var result_654311493 = 0;

    if ((ConstSet375[c_654311492] != undefined)) {
    result_654311493 = (c_654311492 ^ 32);
    }
    else {
      result_654311493 = c_654311492;
    }
    

  return result_654311493;

}

function nsuToLowerAsciiStr(s_654311502) {
  var result_654311503 = [];

    result_654311503 = nimCopy(null, mnewString(chckRange((s_654311502).length, 0, 2147483647)), NTI33554439);
    Label1: do {
      var iHEX60gensym7_654311509 = 0;
      var colontmp__1325400241 = 0;
      colontmp__1325400241 = subInt((s_654311502).length, 1);
      var res_1325400242 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_1325400242 <= colontmp__1325400241)) break Label3;
            iHEX60gensym7_654311509 = res_1325400242;
            result_654311503[chckIndx(iHEX60gensym7_654311509, 0, (result_654311503).length - 1)] = nsuToLowerAsciiChar(s_654311502[chckIndx(iHEX60gensym7_654311509, 0, (s_654311502).length - 1)]);
            res_1325400242 = addInt(res_1325400242, 1);
          }
      } while (false);
    } while (false);

  return result_654311503;

}

function proofCommands_1946161327(doc_1946161328) {

function dotLeftCmd_1946161336(arg_1946161337) {
  var result_1946161338 = [];

    result_1946161338 = nimCopy(null, (makeNimstrLit("<div class=\"xd-subproof\">") || []).concat(renderMath_1946159558(doc_1946161328, makeNimstrLit("(\\Leftarrow)"), false, true) || [],makeNimstrLit(" ") || [],arg_1946161337 || [],makeNimstrLit("</div>") || []), NTI33554439);

  return result_1946161338;

}
    
function HEX3Aanonymous_1946161344(arg_1946161345) {
      var result_1946161346 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946161328.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit(".<")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946161335 = expandArguments_1879048205(doc_1946161328, makeNimstrLit(".<"), arg_1946161345, [HEX21_1207959672(1)]);
        result_1946161346 = nimCopy(result_1946161346, {typ: 1, str: dotLeftCmd_1946161336(to_1862271050(vals_1946161335[chckIndx(0, 0, (vals_1946161335).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946161346;

    }

function dotRightCmd_1946161402(arg_1946161403) {
  var result_1946161404 = [];

    result_1946161404 = nimCopy(null, (makeNimstrLit("<div class=\"xd-subproof\">") || []).concat(renderMath_1946159558(doc_1946161328, makeNimstrLit("(\\Rightarrow)"), false, true) || [],makeNimstrLit(" ") || [],arg_1946161403 || [],makeNimstrLit("</div>") || []), NTI33554439);

  return result_1946161404;

}
    
function HEX3Aanonymous_1946161410(arg_1946161411) {
      var result_1946161412 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1946161328.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit(".>")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1946161401 = expandArguments_1879048205(doc_1946161328, makeNimstrLit(".>"), arg_1946161411, [HEX21_1207959672(1)]);
        result_1946161412 = nimCopy(result_1946161412, {typ: 1, str: dotRightCmd_1946161402(to_1862271050(vals_1946161401[chckIndx(0, 0, (vals_1946161401).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1946161412;

    }

  var result_1946161331 = ({data: [], counter: 0});

    var commands_1946161334 = [({data: [], counter: 0})];
    HEX5BHEX5DHEX3D_1862271113(commands_1946161334[0], makeNimstrLit(".<"), HEX3Aanonymous_1946161344);
    HEX5BHEX5DHEX3D_1862271113(commands_1946161334[0], makeNimstrLit(".>"), HEX3Aanonymous_1946161410);
    result_1946161331 = nimCopy(result_1946161331, commands_1946161334[0], NTI1207959603);

  return result_1946161331;

}

function nsuUnindent(s_654312561, count_654312566, padding_654312567) {
            var Temporary6;
                      var Temporary10;

  var result_654312568 = [];

    result_654312568 = nimCopy(null, [], NTI33554439);
    var i_654312569 = 0;
    Label1: do {
      var line_654312570 = [];
      var first_486540396 = 0;
      var last_486540397 = 0;
      var eolpos_486540398 = 0;
      Label2: do {
          Label3: while (true) {
          if (!true) break Label3;
            Label4: do {
                Label5: while (true) {
                if (!((last_486540397 < (s_654312561).length) && !((ConstSet379[s_654312561[chckIndx(last_486540397, 0, (s_654312561).length - 1)]] != undefined)))) break Label5;
                  last_486540397 = addInt(last_486540397, 1);
                }
            } while (false);
            eolpos_486540398 = last_486540397;
            if ((last_486540397 < (s_654312561).length)) {
            if ((s_654312561[chckIndx(last_486540397, 0, (s_654312561).length - 1)] == 10)) {
            last_486540397 = addInt(last_486540397, 1);
            }
            else {
            if ((s_654312561[chckIndx(last_486540397, 0, (s_654312561).length - 1)] == 13)) {
            last_486540397 = addInt(last_486540397, 1);
            if (((last_486540397 < (s_654312561).length) && (s_654312561[chckIndx(last_486540397, 0, (s_654312561).length - 1)] == 10))) {
            last_486540397 = addInt(last_486540397, 1);
            }
            
            }
            }
            }
            
            if (false) {
            Temporary6 = subInt(last_486540397, 1);
            }
            else {
            Temporary6 = subInt(eolpos_486540398, 1);
            }
            
            line_654312570 = substr_33557906(s_654312561, first_486540396, Temporary6);
            if (!((i_654312569 == 0))) {
            result_654312568.push.apply(result_654312568, makeNimstrLit("\x0A"));;
            }
            
            var indentCount_654312571 = 0;
            Label7: do {
              var j_654312576 = 0;
              var colontmp__486540393 = 0;
              colontmp__486540393 = count_654312566;
              var i_486540394 = 0;
              Label8: do {
                  Label9: while (true) {
                  if (!(i_486540394 < colontmp__486540393)) break Label9;
                    j_654312576 = i_486540394;
                    indentCount_654312571 = addInt(indentCount_654312571, 1);
                      if (((line_654312570).length <= subInt(addInt(j_654312576, (padding_654312567).length), 1))) Temporary10 = true; else {                        Temporary10 = !(eqStrings(HEX5BHEX5D_939524972(line_654312570, HEX2EHEX2E_939524947(j_654312576, subInt(addInt(j_654312576, (padding_654312567).length), 1))), padding_654312567));                      }                    if (Temporary10) {
                    indentCount_654312571 = j_654312576;
                    break Label7;
                    }
                    
                    i_486540394 = addInt(i_486540394, 1);
                  }
              } while (false);
            } while (false);
            result_654312568.push.apply(result_654312568, HEX5BHEX5D_939527322(line_654312570, HEX2EHEX2E_872415312(mulInt(indentCount_654312571, (padding_654312567).length), 1)));;
            i_654312569 = addInt(i_654312569, 1);
            if ((eolpos_486540398 == last_486540397)) {
            break Label2;
            }
            
            first_486540396 = last_486540397;
          }
      } while (false);
    } while (false);

  return result_654312568;

}

function nsuDedent(s_654312644, count_654312645) {
  var result_654312646 = [];

    result_654312646 = nimCopy(null, nsuUnindent(s_654312644, count_654312645, makeNimstrLit(" ")), NTI33554439);

  return result_654312646;

}

function indentation_654312625(s_654312626) {
            var Temporary6;

  var result_654312627 = 0;

    result_654312627 = 2147483647;
    Label1: do {
      var line_654312632 = [];
      var first_486540407 = 0;
      var last_486540408 = 0;
      var eolpos_486540409 = 0;
      Label2: do {
          Label3: while (true) {
          if (!true) break Label3;
            Label4: do {
                Label5: while (true) {
                if (!((last_486540408 < (s_654312626).length) && !((ConstSet380[s_654312626[chckIndx(last_486540408, 0, (s_654312626).length - 1)]] != undefined)))) break Label5;
                  last_486540408 = addInt(last_486540408, 1);
                }
            } while (false);
            eolpos_486540409 = last_486540408;
            if ((last_486540408 < (s_654312626).length)) {
            if ((s_654312626[chckIndx(last_486540408, 0, (s_654312626).length - 1)] == 10)) {
            last_486540408 = addInt(last_486540408, 1);
            }
            else {
            if ((s_654312626[chckIndx(last_486540408, 0, (s_654312626).length - 1)] == 13)) {
            last_486540408 = addInt(last_486540408, 1);
            if (((last_486540408 < (s_654312626).length) && (s_654312626[chckIndx(last_486540408, 0, (s_654312626).length - 1)] == 10))) {
            last_486540408 = addInt(last_486540408, 1);
            }
            
            }
            }
            }
            
            if (false) {
            Temporary6 = subInt(last_486540408, 1);
            }
            else {
            Temporary6 = subInt(eolpos_486540409, 1);
            }
            
            line_654312632 = substr_33557906(s_654312626, first_486540407, Temporary6);
            Label7: do {
              var i_654312633 = 0;
              var c_654312634 = 0;
              var i_486540404 = 0;
              var L_486540405 = (line_654312632).length;
              Label8: do {
                  Label9: while (true) {
                  if (!(i_486540404 < L_486540405)) break Label9;
                    i_654312633 = i_486540404;
                    c_654312634 = line_654312632[chckIndx(i_486540404, 0, (line_654312632).length - 1)];
                    if ((result_654312627 <= i_654312633)) {
                    break Label7;
                    }
                    else {
                    if (!((c_654312634 == 32))) {
                    result_654312627 = chckRange(i_654312633, 0, 2147483647);
                    break Label7;
                    }
                    }
                    i_486540404 = addInt(i_486540404, 1);
                    if (!(((line_654312632).length == L_486540405))) {
                    failedAssertImpl_218103864(makeNimstrLit("iterators.nim(192, 11) `len(a) == L` the length of the string changed while iterating over it"));
                    }
                    
                  }
              } while (false);
            } while (false);
            if ((eolpos_486540409 == last_486540408)) {
            break Label2;
            }
            
            first_486540407 = last_486540408;
          }
      } while (false);
    } while (false);
    if ((result_654312627 == 2147483647)) {
    result_654312627 = 0;
    }
    

  return result_654312627;

}

function nsuEndsWith(s_654312756, suffix_654312757) {
          var Temporary3;

  var result_654312758 = false;

  BeforeRet: do {
    var suffixLenHEX60gensym148_654312764 = (suffix_654312757).length;
    var sLenHEX60gensym148_654312765 = (s_654312756).length;
    var iHEX60gensym148_654312766 = 0;
    var jHEX60gensym148_654312767 = subInt(sLenHEX60gensym148_654312765, suffixLenHEX60gensym148_654312764);
    Label1: do {
        Label2: while (true) {
          if (!(0 <= addInt(iHEX60gensym148_654312766, jHEX60gensym148_654312767))) Temporary3 = false; else {            Temporary3 = (addInt(iHEX60gensym148_654312766, jHEX60gensym148_654312767) < sLenHEX60gensym148_654312765);          }        if (!Temporary3) break Label2;
          if (!((s_654312756[chckIndx(addInt(iHEX60gensym148_654312766, jHEX60gensym148_654312767), 0, (s_654312756).length - 1)] == suffix_654312757[chckIndx(iHEX60gensym148_654312766, 0, (suffix_654312757).length - 1)]))) {
          result_654312758 = false;
          break BeforeRet;
          }
          
          iHEX60gensym148_654312766 = addInt(iHEX60gensym148_654312766, 1);
        }
    } while (false);
    if ((suffixLenHEX60gensym148_654312764 <= iHEX60gensym148_654312766)) {
    result_654312758 = true;
    break BeforeRet;
    }
    
  } while (false);

  return result_654312758;

}

function nsuRemoveSuffixString(s_654312816, s_654312816_Idx, suffix_654312817) {
    var newLen_654312818 = (s_654312816[s_654312816_Idx]).length;
    if (nsuEndsWith(s_654312816[s_654312816_Idx], suffix_654312817)) {
    newLen_654312818 = subInt(newLen_654312818, (suffix_654312817).length);
    (s_654312816[s_654312816_Idx].length = chckRange(newLen_654312818, 0, 2147483647));
    }
    

  
}

function isEmpty_1241514012(hcode_1241514013) {
  var result_1241514014 = false;

    result_1241514014 = (hcode_1241514013 == 0);

  return result_1241514014;

}

function del_1124082178(t_1124082181, key_1124082182) {
                    var Temporary6;
                    var Temporary7;
                    var Temporary8;
                      var Temporary9;
                      var Temporary10;

    var hc_1124082183 = [0];
    var i_1124082190 = rawGet_1493172373(t_1124082181, key_1124082182, hc_1124082183, 0);
    var mskHEX60gensym36_1124082194 = (t_1124082181.data).length - 1;
    if ((0 <= i_1124082190)) {
    t_1124082181.counter = subInt(t_1124082181.counter, 1);
    Label1: do {
      Label2: do {
          Label3: while (true) {
          if (!true) break Label3;
            var jHEX60gensym36_1124082200 = i_1124082190;
            var rHEX60gensym36_1124082201 = jHEX60gensym36_1124082200;
            t_1124082181.data[chckIndx(i_1124082190, 0, (t_1124082181.data).length - 1)].Field0 = 0;
            t_1124082181.data[chckIndx(i_1124082190, 0, (t_1124082181.data).length - 1)].Field1 = nimCopy(null, [], NTI33554439);
            t_1124082181.data[chckIndx(i_1124082190, 0, (t_1124082181.data).length - 1)].Field2 = nimCopy(null, [], NTI33554439);
            Label4: do {
                Label5: while (true) {
                if (!true) break Label5;
                  i_1124082190 = (addInt(i_1124082190, 1) & mskHEX60gensym36_1124082194);
                  if (isEmpty_1241514012(t_1124082181.data[chckIndx(i_1124082190, 0, (t_1124082181.data).length - 1)].Field0)) {
                  break Label1;
                  }
                  
                  rHEX60gensym36_1124082201 = (t_1124082181.data[chckIndx(i_1124082190, 0, (t_1124082181.data).length - 1)].Field0 & mskHEX60gensym36_1124082194);
                    if (!(rHEX60gensym36_1124082201 <= i_1124082190)) Temporary8 = false; else {                      Temporary8 = (jHEX60gensym36_1124082200 < rHEX60gensym36_1124082201);                    }                    if (Temporary8) Temporary7 = true; else {                      if (!(jHEX60gensym36_1124082200 < rHEX60gensym36_1124082201)) Temporary9 = false; else {                        Temporary9 = (i_1124082190 < jHEX60gensym36_1124082200);                      }                      Temporary7 = Temporary9;                    }                    if (Temporary7) Temporary6 = true; else {                      if (!(i_1124082190 < jHEX60gensym36_1124082200)) Temporary10 = false; else {                        Temporary10 = (rHEX60gensym36_1124082201 <= i_1124082190);                      }                      Temporary6 = Temporary10;                    }                  if (!(Temporary6)) {
                  break Label4;
                  }
                  
                }
            } while (false);
            t_1124082181.data[chckIndx(jHEX60gensym36_1124082200, 0, (t_1124082181.data).length - 1)] = nimCopy(t_1124082181.data[chckIndx(jHEX60gensym36_1124082200, 0, (t_1124082181.data).length - 1)], t_1124082181.data[chckIndx(i_1124082190, 0, (t_1124082181.data).length - 1)], NTI1207959594);
          }
      } while (false);
    } while (false);
    }
    

  
}

function xidocWarning_1191182346(msge_1191182347) {
  
}

function cssCommands_1912602630(doc_1912602631) {

function declCmd_1912602639(prop_1912602640, val_1912602641) {
  var result_1912602642 = [];

    result_1912602642 = nimCopy(null, nsuFormatOpenArray(makeNimstrLit("$1:$2;"), [nimCopy(null, prop_1912602640, NTI33554439), nimCopy(null, val_1912602641, NTI33554439)]), NTI33554439);

  return result_1912602642;

}
    
function HEX3Aanonymous_1912602648(arg_1912602649) {
      var result_1912602650 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1912602631.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit(":")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1912602638 = expandArguments_1879048205(doc_1912602631, makeNimstrLit(":"), arg_1912602649, [HEX21_1207959672(0), HEX21_1207959672(0)]);
        result_1912602650 = nimCopy(result_1912602650, {typ: 0, str: declCmd_1912602639(to_1862271050(vals_1912602638[chckIndx(0, 0, (vals_1912602638).length - 1)]), to_1862271050(vals_1912602638[chckIndx(1, 0, (vals_1912602638).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1912602650;

    }

function declImportantCmd_1912602719(prop_1912602720, val_1912602721) {
  var result_1912602722 = [];

    result_1912602722 = nimCopy(null, nsuFormatOpenArray(makeNimstrLit("$1:$2 !important;"), [nimCopy(null, prop_1912602720, NTI33554439), nimCopy(null, val_1912602721, NTI33554439)]), NTI33554439);

  return result_1912602722;

}
    
function HEX3Aanonymous_1912602728(arg_1912602729) {
      var result_1912602730 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1912602631.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit(":!")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1912602718 = expandArguments_1879048205(doc_1912602631, makeNimstrLit(":!"), arg_1912602729, [HEX21_1207959672(0), HEX21_1207959672(0)]);
        result_1912602730 = nimCopy(result_1912602730, {typ: 0, str: declImportantCmd_1912602719(to_1862271050(vals_1912602718[chckIndx(0, 0, (vals_1912602718).length - 1)]), to_1862271050(vals_1912602718[chckIndx(1, 0, (vals_1912602718).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1912602730;

    }

function hStarCmd_1912602790() {
  var result_1912602791 = [];

    result_1912602791 = nimCopy(null, makeNimstrLit("h1,h2,h3,h4,h5,h6"), NTI33554439);

  return result_1912602791;

}
    
function HEX3Aanonymous_1912602797(arg_1912602798) {
      var result_1912602799 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1912602631.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("h*")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1912602789 = expandArguments_1879048205(doc_1912602631, makeNimstrLit("h*"), arg_1912602798, []);
        result_1912602799 = nimCopy(result_1912602799, {typ: 0, str: hStarCmd_1912602790(), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1912602799;

    }

function ruleCmd_1912602851(selector_1912602852, decls_1912602853) {
  var result_1912602854 = [];

    result_1912602854 = nimCopy(null, nsuFormatOpenArray(makeNimstrLit("$1{$2}"), [nimCopy(null, selector_1912602852, NTI33554439), nimCopy(null, decls_1912602853, NTI33554439)]), NTI33554439);

  return result_1912602854;

}
    
function HEX3Aanonymous_1912602860(arg_1912602861) {
      var result_1912602862 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1912602631.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("rule")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1912602850 = expandArguments_1879048205(doc_1912602631, makeNimstrLit("rule"), arg_1912602861, [HEX21_1207959672(0), HEX21_1207959672(0)]);
        result_1912602862 = nimCopy(result_1912602862, {typ: 0, str: ruleCmd_1912602851(to_1862271050(vals_1912602850[chckIndx(0, 0, (vals_1912602850).length - 1)]), to_1862271050(vals_1912602850[chckIndx(1, 0, (vals_1912602850).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1912602862;

    }

function varCmd_1912602922(name_1912602923, val_1912602925) {
    var Temporary1;
    var Temporary2;

  var result_1912602926 = [];

    if (isSome_1912602931(val_1912602925)) {
    if (eqStrings(HEX5BHEX5D_1912602936(doc_1912602631.stack, 2).cmdName, makeNimstrLit("style"))) {
    Temporary2 = nsuFormatOpenArray(makeNimstrLit(":root{--$1:$2}"), [nimCopy(null, name_1912602923, NTI33554439), nimCopy(null, get_1912602965(val_1912602925), NTI33554439)]);
    }
    else {
    Temporary2 = nsuFormatOpenArray(makeNimstrLit("--$1:$2;"), [nimCopy(null, name_1912602923, NTI33554439), nimCopy(null, get_1912602965(val_1912602925), NTI33554439)]);
    }
    
    Temporary1 = Temporary2;
    }
    else {
    Temporary1 = nsuFormatSingleElem(makeNimstrLit("var(--$1)"), name_1912602923);
    }
    
    result_1912602926 = nimCopy(null, Temporary1, NTI33554439);

  return result_1912602926;

}
    
function HEX3Aanonymous_1912603006(arg_1912603007) {
      var result_1912603008 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1912602631.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("var")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1912602921 = expandArguments_1879048205(doc_1912602631, makeNimstrLit("var"), arg_1912603007, [HEX21_1207959672(0), HEX3F_1207959693(0)]);
        result_1912603008 = nimCopy(result_1912603008, {typ: 0, str: varCmd_1912602922(to_1862271050(vals_1912602921[chckIndx(0, 0, (vals_1912602921).length - 1)]), to_1912603022(vals_1912602921[chckIndx(1, 0, (vals_1912602921).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1912603008;

    }

  var result_1912602634 = ({data: [], counter: 0});

    var commands_1912602637 = [({data: [], counter: 0})];
    HEX5BHEX5DHEX3D_1862271113(commands_1912602637[0], makeNimstrLit(":"), HEX3Aanonymous_1912602648);
    HEX5BHEX5DHEX3D_1862271113(commands_1912602637[0], makeNimstrLit(":!"), HEX3Aanonymous_1912602728);
    HEX5BHEX5DHEX3D_1862271113(commands_1912602637[0], makeNimstrLit("h*"), HEX3Aanonymous_1912602797);
    HEX5BHEX5DHEX3D_1862271113(commands_1912602637[0], makeNimstrLit("rule"), HEX3Aanonymous_1912602860);
    HEX5BHEX5DHEX3D_1862271113(commands_1912602637[0], makeNimstrLit("var"), HEX3Aanonymous_1912603006);
    result_1912602634 = nimCopy(result_1912602634, commands_1912602637[0], NTI1207959603);

  return result_1912602634;

}

function HEX5BHEX5D_1845494184(t_1845494187, key_1845494188) {
  var result_1845494189 = null;
  var result_1845494189_Idx = 0;

    var hcHEX60gensym22_1845494190 = [0];
    var indexHEX60gensym22_1845494197 = rawGet_1493172373(t_1845494187, key_1845494188, hcHEX60gensym22_1845494190, 0);
    if ((0 <= indexHEX60gensym22_1845494197)) {
    result_1845494189 = t_1845494187.data[chckIndx(indexHEX60gensym22_1845494197, 0, (t_1845494187.data).length - 1)]; result_1845494189_Idx = "Field2";
    }
    else {
    raiseKeyError_1493173732(key_1845494188);
    }
    

  return [result_1845494189, result_1845494189_Idx];

}

function defaultCommands_1124073503(doc_1124073504) {

function commentCmd_1124073527(arg_1124073528) {
  var result_1124073529 = [];

    result_1124073529 = nimCopy(null, [], NTI33554439);

  return result_1124073529;

}
    
function HEX3Aanonymous_1124073535(arg_1124073536) {
      var result_1124073537 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124073526 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("#"), arg_1124073536, [{kind: 4, base: 0}]);
        result_1124073537 = nimCopy(result_1124073537, {typ: 0, str: commentCmd_1124073527(to_1862271050(vals_1124073526[chckIndx(0, 0, (vals_1124073526).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124073537;

    }

function semiCmd_1124073593() {
  var result_1124073594 = [];

    result_1124073594 = nimCopy(null, makeNimstrLit(";"), NTI33554439);

  return result_1124073594;

}
    
function HEX3Aanonymous_1124073600(arg_1124073601) {
      var result_1124073602 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124073592 = expandArguments_1879048205(doc_1124073504, makeNimstrLit(";"), arg_1124073601, []);
        result_1124073602 = nimCopy(result_1124073602, {typ: 0, str: semiCmd_1124073593(), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124073602;

    }

function bracketsCmd_1124073654(arg_1124073655) {
  var result_1124073656 = [];

    result_1124073656 = nimCopy(null, (makeNimstrLit("[") || []).concat(arg_1124073655 || [],makeNimstrLit("]") || []), NTI33554439);

  return result_1124073656;

}
    
function HEX3Aanonymous_1124073662(arg_1124073663) {
      var result_1124073664 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124073653 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("()"), arg_1124073663, [HEX21_1207959672(1)]);
        result_1124073664 = nimCopy(result_1124073664, {typ: 1, str: bracketsCmd_1124073654(to_1862271050(vals_1124073653[chckIndx(0, 0, (vals_1124073653).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124073664;

    }

function leftBracketCmd_1124073720() {
  var result_1124073721 = [];

    result_1124073721 = nimCopy(null, makeNimstrLit("["), NTI33554439);

  return result_1124073721;

}
    
function HEX3Aanonymous_1124073727(arg_1124073728) {
      var result_1124073729 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124073719 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("("), arg_1124073728, []);
        result_1124073729 = nimCopy(result_1124073729, {typ: 0, str: leftBracketCmd_1124073720(), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124073729;

    }

function rightBracketCmd_1124073781() {
  var result_1124073782 = [];

    result_1124073782 = nimCopy(null, makeNimstrLit("]"), NTI33554439);

  return result_1124073782;

}
    
function HEX3Aanonymous_1124073788(arg_1124073789) {
      var result_1124073790 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124073780 = expandArguments_1879048205(doc_1124073504, makeNimstrLit(")"), arg_1124073789, []);
        result_1124073790 = nimCopy(result_1124073790, {typ: 0, str: rightBracketCmd_1124073781(), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124073790;

    }

function enDashCmd_1124073842() {
  var result_1124073843 = [];

    result_1124073843 = nimCopy(null, makeNimstrLit("\xE2\x80\x93"), NTI33554439);

  return result_1124073843;

}
    
function HEX3Aanonymous_1124073849(arg_1124073850) {
      var result_1124073851 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124073841 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("--"), arg_1124073850, []);
        result_1124073851 = nimCopy(result_1124073851, {typ: 0, str: enDashCmd_1124073842(), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124073851;

    }

function emDashCmd_1124073903() {
  var result_1124073904 = [];

    result_1124073904 = nimCopy(null, makeNimstrLit("\xE2\x80\x94"), NTI33554439);

  return result_1124073904;

}
    
function HEX3Aanonymous_1124073910(arg_1124073911) {
      var result_1124073912 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124073902 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("---"), arg_1124073911, []);
        result_1124073912 = nimCopy(result_1124073912, {typ: 0, str: emDashCmd_1124073903(), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124073912;

    }

function ellipsisCmd_1124073964() {
  var result_1124073965 = [];

    result_1124073965 = nimCopy(null, makeNimstrLit("\xE2\x80\xA6"), NTI33554439);

  return result_1124073965;

}
    
function HEX3Aanonymous_1124073971(arg_1124073972) {
      var result_1124073973 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124073963 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("..."), arg_1124073972, []);
        result_1124073973 = nimCopy(result_1124073973, {typ: 0, str: ellipsisCmd_1124073964(), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124073973;

    }

function quoteCmd_1124074025(arg_1124074026) {
    var Temporary1;
      
function HEX3Aanonymous_1124074053() {
        var result_1124074054 = 0;

        BeforeRet: do {
          Label1: do {
            var iHEX60gensym13_1124074063 = 0;
            var colontmp__486540184 = 0;
            colontmp__486540184 = subInt((doc_1124073504.stack).length, 1);
            var res_486540185 = colontmp__486540184;
            Label2: do {
                Label3: while (true) {
                if (!(0 <= res_486540185)) break Label3;
                  iHEX60gensym13_1124074063 = res_486540185;
                  var frameHEX60gensym13_1124074064 = nimCopy(null, doc_1124073504.stack[chckIndx(iHEX60gensym13_1124074063, 0, (doc_1124073504.stack).length - 1)], NTI1207959561);
                  if (isSome_1124074069(frameHEX60gensym13_1124074064.lang)) {
                  result_1124074054 = get_1124074086(frameHEX60gensym13_1124074064.lang);
                  break BeforeRet;
                  }
                  
                  res_486540185 = subInt(res_486540185, 1);
                }
            } while (false);
          } while (false);
        } while (false);

        return result_1124074054;

      }

  var result_1124074027 = [];

    switch (doc_1124073504.target) {
    case 1:
      incl_1946159723(doc_1124073504.addToHead, HEX7BHEX7D_1879049227(makeNimstrLit("usepackage"), makeNimstrLit("csquotes")));
      Temporary1 = HEX7BHEX7D_1879049227(makeNimstrLit("enquote"), arg_1124074026);
      break;
    default: 
      Temporary1 = nsuFormatSingleElem(translate_1224736808(7, HEX3Aanonymous_1124074053()), arg_1124074026);
      break;
    }
    result_1124074027 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124074027;

}
    
function HEX3Aanonymous_1124074114(arg_1124074115) {
      var result_1124074116 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124074024 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("\""), arg_1124074115, [HEX21_1207959672(1)]);
        result_1124074116 = nimCopy(result_1124074116, {typ: 1, str: quoteCmd_1124074025(to_1862271050(vals_1124074024[chckIndx(0, 0, (vals_1124074024).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124074116;

    }

function inlineMathCmd_1124074172(arg_1124074173) {
  var result_1124074174 = [];

    HEX5BHEX5D_1912602936(doc_1124073504.stack, 1).commands = nimCopy(HEX5BHEX5D_1912602936(doc_1124073504.stack, 1).commands, mathCommands_1946157069(doc_1124073504), NTI1207959603);
    result_1124074174 = nimCopy(null, renderMath_1946159558(doc_1124073504, expandStr_1308623250(doc_1124073504, arg_1124074173), false, true), NTI33554439);

  return result_1124074174;

}
    
function HEX3Aanonymous_1124074184(arg_1124074185) {
      var result_1124074186 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124074171 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("$"), arg_1124074185, [{kind: 3, base: 0}]);
        result_1124074186 = nimCopy(result_1124074186, {typ: 1, str: inlineMathCmd_1124074172(to_1862271050(vals_1124074171[chckIndx(0, 0, (vals_1124074171).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124074186;

    }

function blockMathCmd_1124074242(arg_1124074243) {
  var result_1124074244 = [];

    HEX5BHEX5D_1912602936(doc_1124073504.stack, 1).commands = nimCopy(HEX5BHEX5D_1912602936(doc_1124073504.stack, 1).commands, mathCommands_1946157069(doc_1124073504), NTI1207959603);
    result_1124074244 = nimCopy(null, renderMath_1946159558(doc_1124073504, expandStr_1308623250(doc_1124073504, arg_1124074243), true, true), NTI33554439);

  return result_1124074244;

}
    
function HEX3Aanonymous_1124074254(arg_1124074255) {
      var result_1124074256 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124074241 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("$$"), arg_1124074255, [{kind: 3, base: 0}]);
        result_1124074256 = nimCopy(result_1124074256, {typ: 1, str: blockMathCmd_1124074242(to_1862271050(vals_1124074241[chckIndx(0, 0, (vals_1124074241).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124074256;

    }

function alignedMathCmd_1124074312(arg_1124074313) {
  var result_1124074314 = [];

    HEX5BHEX5D_1912602936(doc_1124073504.stack, 1).commands = nimCopy(HEX5BHEX5D_1912602936(doc_1124073504.stack, 1).commands, mathCommands_1946157069(doc_1124073504), NTI1207959603);
    result_1124074314 = nimCopy(null, renderMath_1946159558(doc_1124073504, env_1879049235(makeNimstrLit("align*"), expandStr_1308623250(doc_1124073504, arg_1124074313)), true, false), NTI33554439);

  return result_1124074314;

}
    
function HEX3Aanonymous_1124074324(arg_1124074325) {
      var result_1124074326 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124074311 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("$$&"), arg_1124074325, [{kind: 3, base: 0}]);
        result_1124074326 = nimCopy(result_1124074326, {typ: 1, str: alignedMathCmd_1124074312(to_1862271050(vals_1124074311[chckIndx(0, 0, (vals_1124074311).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124074326;

    }

function LaTeXCmd_1124074382() {
    var Temporary1;
      var Temporary2;

  var result_1124074383 = [];

    switch (doc_1124073504.target) {
    case 0:
      var Temporary2 = doc_1124073504;
      if (ConstSet335[Temporary2.target]===undefined) { raiseFieldError2(makeNimstrLit("field \'addToStyle\' is not accessible for type \'Document\' using \'target = "), reprDiscriminant(Temporary2.target, NTI1207959555)); }
      incl_1946159723(Temporary2.addToStyle, makeNimstrLit(".xd-latex{text-transform:uppercase;font-size:1em;}.xd-latex>sub{vertical-align:-0.5ex;margin-left:-0.1667em;margin-right:-0.125em;}.xd-latex>sup{font-size:0.85em;vertical-align:0.15em;margin-left:-0.36em;margin-right:-0.15em;}"));
      Temporary1 = makeNimstrLit("<span class=\"xd-latex\">L<sup>a</sup>T<sub>e</sub>X</span>");
      break;
    case 1:
      Temporary1 = HEX7BHEX7D_1879049227(makeNimstrLit("LaTeX"), []);
      break;
    case 2:
      Temporary1 = makeNimstrLit("LaTeX");
      break;
    }
    result_1124074383 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124074383;

}
    
function HEX3Aanonymous_1124074412(arg_1124074413) {
      var result_1124074414 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124074381 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("LaTeX"), arg_1124074413, []);
        result_1124074414 = nimCopy(result_1124074414, {typ: 1, str: LaTeXCmd_1124074382(), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124074414;

    }

function addToHeadCmd_1124074466(arg_1124074467) {
  var result_1124074468 = [];

    incl_1946159723(doc_1124073504.addToHead, arg_1124074467);
    result_1124074468 = nimCopy(null, [], NTI33554439);

  return result_1124074468;

}
    
function HEX3Aanonymous_1124074497(arg_1124074498) {
      var result_1124074499 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("add-to-head")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124074465 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("add-to-head"), arg_1124074498, [HEX21_1207959672(1)]);
        result_1124074499 = nimCopy(result_1124074499, {typ: 1, str: addToHeadCmd_1124074466(to_1862271050(vals_1124074465[chckIndx(0, 0, (vals_1124074465).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124074499;

    }

function argCmd_1124074555(arg_1124074556) {
    arg_1124074556 = nimCopy(null, arg_1124074556, NTI33554439);
    
function HEX3Aanonymous_1124074560() {
      var result_1124074561 = [];

      BeforeRet: do {
        Label1: do {
          var iHEX60gensym31_1124074570 = 0;
          var colontmp__486540270 = 0;
          colontmp__486540270 = subInt((doc_1124073504.stack).length, 1);
          var res_486540271 = colontmp__486540270;
          Label2: do {
              Label3: while (true) {
              if (!(0 <= res_486540271)) break Label3;
                iHEX60gensym31_1124074570 = res_486540271;
                var frameHEX60gensym31_1124074571 = nimCopy(null, doc_1124073504.stack[chckIndx(iHEX60gensym31_1124074570, 0, (doc_1124073504.stack).length - 1)], NTI1207959561);
                if (hasKey_1845494068(frameHEX60gensym31_1124074571.args, arg_1124074556)) {
                result_1124074561 = nimCopy(null, HEX5BHEX5D_1493173665(frameHEX60gensym31_1124074571.args, arg_1124074556), NTI33554439);
                break BeforeRet;
                }
                
                res_486540271 = subInt(res_486540271, 1);
              }
          } while (false);
        } while (false);
      } while (false);

      return result_1124074561;

    }

  var result_1124074557 = [];

    result_1124074557 = nimCopy(null, renderStr_1308623254(doc_1124073504, HEX3Aanonymous_1124074560()), NTI33554439);

  return result_1124074557;

}
    
function HEX3Aanonymous_1124074684(arg_1124074685) {
      var result_1124074686 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124074554 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("arg"), arg_1124074685, [HEX21_1207959672(0)]);
        result_1124074686 = nimCopy(result_1124074686, {typ: 1, str: argCmd_1124074555(to_1862271050(vals_1124074554[chckIndx(0, 0, (vals_1124074554).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124074686;

    }

function argExpandCmd_1124074742(arg_1124074743) {
    arg_1124074743 = nimCopy(null, arg_1124074743, NTI33554439);
    
function HEX3Aanonymous_1124074747() {
      var result_1124074748 = [];

      BeforeRet: do {
        Label1: do {
          var iHEX60gensym35_1124074757 = 0;
          var colontmp__486540274 = 0;
          colontmp__486540274 = subInt((doc_1124073504.stack).length, 1);
          var res_486540275 = colontmp__486540274;
          Label2: do {
              Label3: while (true) {
              if (!(0 <= res_486540275)) break Label3;
                iHEX60gensym35_1124074757 = res_486540275;
                var frameHEX60gensym35_1124074758 = nimCopy(null, doc_1124073504.stack[chckIndx(iHEX60gensym35_1124074757, 0, (doc_1124073504.stack).length - 1)], NTI1207959561);
                if (hasKey_1845494068(frameHEX60gensym35_1124074758.args, arg_1124074743)) {
                result_1124074748 = nimCopy(null, HEX5BHEX5D_1493173665(frameHEX60gensym35_1124074758.args, arg_1124074743), NTI33554439);
                break BeforeRet;
                }
                
                res_486540275 = subInt(res_486540275, 1);
              }
          } while (false);
        } while (false);
      } while (false);

      return result_1124074748;

    }

  var result_1124074744 = [];

    result_1124074744 = nimCopy(null, expandStr_1308623250(doc_1124073504, HEX3Aanonymous_1124074747()), NTI33554439);

  return result_1124074744;

}
    
function HEX3Aanonymous_1124074871(arg_1124074872) {
      var result_1124074873 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("arg-expand")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124074741 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("arg-expand"), arg_1124074872, [HEX21_1207959672(0)]);
        result_1124074873 = nimCopy(result_1124074873, {typ: 0, str: argExpandCmd_1124074742(to_1862271050(vals_1124074741[chckIndx(0, 0, (vals_1124074741).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124074873;

    }

function argRawCmd_1124074929(arg_1124074930) {
    arg_1124074930 = nimCopy(null, arg_1124074930, NTI33554439);
    
function HEX3Aanonymous_1124074934() {
      var result_1124074935 = [];

      BeforeRet: do {
        Label1: do {
          var iHEX60gensym40_1124074944 = 0;
          var colontmp__486540278 = 0;
          colontmp__486540278 = subInt((doc_1124073504.stack).length, 1);
          var res_486540279 = colontmp__486540278;
          Label2: do {
              Label3: while (true) {
              if (!(0 <= res_486540279)) break Label3;
                iHEX60gensym40_1124074944 = res_486540279;
                var frameHEX60gensym40_1124074945 = nimCopy(null, doc_1124073504.stack[chckIndx(iHEX60gensym40_1124074944, 0, (doc_1124073504.stack).length - 1)], NTI1207959561);
                if (hasKey_1845494068(frameHEX60gensym40_1124074945.args, arg_1124074930)) {
                result_1124074935 = nimCopy(null, HEX5BHEX5D_1493173665(frameHEX60gensym40_1124074945.args, arg_1124074930), NTI33554439);
                break BeforeRet;
                }
                
                res_486540279 = subInt(res_486540279, 1);
              }
          } while (false);
        } while (false);
      } while (false);

      return result_1124074935;

    }

  var result_1124074931 = [];

    result_1124074931 = nimCopy(null, HEX3Aanonymous_1124074934(), NTI33554439);

  return result_1124074931;

}
    
function HEX3Aanonymous_1124075058(arg_1124075059) {
      var result_1124075060 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("arg-raw")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124074928 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("arg-raw"), arg_1124075059, [HEX21_1207959672(0)]);
        result_1124075060 = nimCopy(result_1124075060, {typ: 0, str: argRawCmd_1124074929(to_1862271050(vals_1124074928[chckIndx(0, 0, (vals_1124074928).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124075060;

    }

function argRawEscapeCmd_1124075116(arg_1124075117) {
    arg_1124075117 = nimCopy(null, arg_1124075117, NTI33554439);
    
function HEX3Aanonymous_1124075121() {
      var result_1124075122 = [];

      BeforeRet: do {
        Label1: do {
          var iHEX60gensym45_1124075131 = 0;
          var colontmp__486540282 = 0;
          colontmp__486540282 = subInt((doc_1124073504.stack).length, 1);
          var res_486540283 = colontmp__486540282;
          Label2: do {
              Label3: while (true) {
              if (!(0 <= res_486540283)) break Label3;
                iHEX60gensym45_1124075131 = res_486540283;
                var frameHEX60gensym45_1124075132 = nimCopy(null, doc_1124073504.stack[chckIndx(iHEX60gensym45_1124075131, 0, (doc_1124073504.stack).length - 1)], NTI1207959561);
                if (hasKey_1845494068(frameHEX60gensym45_1124075132.args, arg_1124075117)) {
                result_1124075122 = nimCopy(null, HEX5BHEX5D_1493173665(frameHEX60gensym45_1124075132.args, arg_1124075117), NTI33554439);
                break BeforeRet;
                }
                
                res_486540283 = subInt(res_486540283, 1);
              }
          } while (false);
        } while (false);
      } while (false);

      return result_1124075122;

    }

  var result_1124075118 = [];

    result_1124075118 = nimCopy(null, escapeText_1308622854(HEX3Aanonymous_1124075121(), doc_1124073504.target), NTI33554439);

  return result_1124075118;

}
    
function HEX3Aanonymous_1124075245(arg_1124075246) {
      var result_1124075247 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("arg-raw-escape")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124075115 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("arg-raw-escape"), arg_1124075246, [HEX21_1207959672(0)]);
        result_1124075247 = nimCopy(result_1124075247, {typ: 1, str: argRawEscapeCmd_1124075116(to_1862271050(vals_1124075115[chckIndx(0, 0, (vals_1124075115).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124075247;

    }

function bfCmd_1124075303(arg_1124075304) {
    var Temporary1;

  var result_1124075305 = [];

    switch (doc_1124073504.target) {
    case 0:
      Temporary1 = (makeNimstrLit("<b>") || []).concat(arg_1124075304 || [],makeNimstrLit("</b>") || []);
      break;
    case 1:
      Temporary1 = HEX7BHEX7D_1879049227(makeNimstrLit("textbf"), arg_1124075304);
      break;
    case 2:
      Temporary1 = arg_1124075304;
      break;
    }
    result_1124075305 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124075305;

}
    
function HEX3Aanonymous_1124075311(arg_1124075312) {
      var result_1124075313 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124075302 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("bf"), arg_1124075312, [HEX21_1207959672(1)]);
        result_1124075313 = nimCopy(result_1124075313, {typ: 1, str: bfCmd_1124075303(to_1862271050(vals_1124075302[chckIndx(0, 0, (vals_1124075302).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124075313;

    }

function blockQuoteCmd_1124075369(quote_1124075370, author_1124075372) {
    var Temporary1;
      var Temporary2;

  var result_1124075373 = [];

    switch (doc_1124073504.target) {
    case 0:
      if (isSome_1912602931(author_1124075372)) {
      Temporary2 = (makeNimstrLit("<p>") || []).concat(quote_1124075370 || [],makeNimstrLit("</p><p><cite>") || [],get_1912602965(author_1124075372) || [],makeNimstrLit("</cite></p>") || []);
      }
      else {
      Temporary2 = quote_1124075370;
      }
      
      Temporary1 = (makeNimstrLit("<blockquote>") || []).concat(Temporary2 || [],makeNimstrLit("</blockquote>") || []);
      break;
    case 1:
      Temporary1 = env_1879049235(makeNimstrLit("quote"), quote_1124075370);
      break;
    case 2:
      Temporary1 = nsuFormatSingleElem(makeNimstrLit("\x0A> $1\x0A"), quote_1124075370);
      break;
    }
    result_1124075373 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124075373;

}
    
function HEX3Aanonymous_1124075401(arg_1124075402) {
      var result_1124075403 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124075368 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("block-quote"), arg_1124075402, [HEX21_1207959672(1), HEX3F_1207959693(1)]);
        result_1124075403 = nimCopy(result_1124075403, {typ: 1, str: blockQuoteCmd_1124075369(to_1862271050(vals_1124075368[chckIndx(0, 0, (vals_1124075368).length - 1)]), to_1912603022(vals_1124075368[chckIndx(1, 0, (vals_1124075368).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124075403;

    }

function checkboxesCmd_1124075469(arg_1124075470) {
    var Temporary1;
      var Temporary2;

  var result_1124075471 = [];

    switch (doc_1124073504.target) {
    case 0:
      HEX5BHEX5D_1912602936(doc_1124073504.stack, 1).commands = nimCopy(HEX5BHEX5D_1912602936(doc_1124073504.stack, 1).commands, checkboxCommands_1862270982(doc_1124073504), NTI1207959603);
      var Temporary2 = doc_1124073504;
      if (ConstSet337[Temporary2.target]===undefined) { raiseFieldError2(makeNimstrLit("field \'addToStyle\' is not accessible for type \'Document\' using \'target = "), reprDiscriminant(Temporary2.target, NTI1207959555)); }
      incl_1946159723(Temporary2.addToStyle, makeNimstrLit(".xd-checkbox-unchecked{list-style-type:\"\xE2\x98\x90 \"}.xd-checkbox-checked{list-style-type:\"\xE2\x98\x91 \"}.xd-checkbox-crossed{list-style-type:\"\xE2\x98\x92 \"}"));
      Temporary1 = (makeNimstrLit("<ul class=\"xd-checkboxes\">") || []).concat(expandStr_1308623250(doc_1124073504, arg_1124075470) || [],makeNimstrLit("</ul>") || []);
      break;
    default: 
      raiseException({message: makeNimstrLit("Checkboxes are currently not supported for the LaTeX target"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    }
    result_1124075471 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124075471;

}
    
function HEX3Aanonymous_1124075504(arg_1124075505) {
      var result_1124075506 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124075468 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("checkboxes"), arg_1124075505, [{kind: 3, base: 0}]);
        result_1124075506 = nimCopy(result_1124075506, {typ: 1, str: checkboxesCmd_1124075469(to_1862271050(vals_1124075468[chckIndx(0, 0, (vals_1124075468).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124075506;

    }

function applySyntaxHighlightingTheme_1124075561() {
    var Temporary1;

    var theme_1124075634 = getOrDefault_1946159645(doc_1124073504.settings, makeNimstrLit("syntax-highlighting-theme"), makeNimstrLit("default"));
    if (!(contains_1124075688(prismCss_1124073502, theme_1124075634))) {
    raiseException({message: (makeNimstrLit("Invalid syntax highlighting theme: ") || []).concat(theme_1124075634 || []), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    }
    
    var Temporary1 = doc_1124073504;
    if (ConstSet338[Temporary1.target]===undefined) { raiseFieldError2(makeNimstrLit("field \'addToStyle\' is not accessible for type \'Document\' using \'target = "), reprDiscriminant(Temporary1.target, NTI1207959555)); }
    incl_1946159723(Temporary1.addToStyle, HEX5BHEX5D_1493173665(prismCss_1124073502, theme_1124075634));

  
}

function codeCmd_1124075785(lang_1124075787, code_1124075788) {
    var Temporary1;
      var Temporary2;

  var result_1124075789 = [];

    switch (doc_1124073504.target) {
    case 0:
      applySyntaxHighlightingTheme_1124075561();
      if (isSome_1912602931(lang_1124075787)) {
      var fmtRes_1124075797 = [mnewString(0)];
      fmtRes_1124075797[0].push.apply(fmtRes_1124075797[0], makeNimstrLit("language-"));;
      formatValue_1275068578(fmtRes_1124075797, 0, get_1912602965(lang_1124075787), []);
      Temporary2 = (makeNimstrLit("<code class=\"") || []).concat(fmtRes_1124075797[0] || [],makeNimstrLit("\">") || [],highlightCode_1761609611(code_1124075788, get_1912602965(lang_1124075787)) || [],makeNimstrLit("</code>") || []);
      }
      else {
      Temporary2 = (makeNimstrLit("<code>") || []).concat(escapeText_1308622854(code_1124075788, doc_1124073504.target) || [],makeNimstrLit("</code>") || []);
      }
      
      Temporary1 = Temporary2;
      break;
    case 1:
      Temporary1 = HEX7BHEX7D_1879049227(makeNimstrLit("texttt"), code_1124075788);
      break;
    case 2:
      Temporary1 = nsuFormatSingleElem(makeNimstrLit("\x0A```\x0A{$1}\x0A```\x0A"), code_1124075788);
      break;
    }
    result_1124075789 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124075789;

}
    
function HEX3Aanonymous_1124075833(arg_1124075834) {
      var result_1124075835 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124075784 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("code"), arg_1124075834, [HEX3F_1207959693(0), HEX21_1207959672(0)]);
        result_1124075835 = nimCopy(result_1124075835, {typ: 1, str: codeCmd_1124075785(to_1912603022(vals_1124075784[chckIndx(0, 0, (vals_1124075784).length - 1)]), to_1862271050(vals_1124075784[chckIndx(1, 0, (vals_1124075784).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124075835;

    }

function codeBlockCmd_1124075901(lang_1124075903, code_1124075904) {
    var Temporary1;
      var Temporary2;
      
function HEX3Aanonymous_1124075987(lang_1124075998) {
        var result_1124076001 = [];

          result_1124076001 = nimCopy(null, nsuFormatSingleElem(makeNimstrLit("{$1}"), lang_1124075998), NTI33554439);

        return result_1124076001;

      }

  var result_1124075905 = [];

    switch (doc_1124073504.target) {
    case 0:
      applySyntaxHighlightingTheme_1124075561();
      if (isSome_1912602931(lang_1124075903)) {
      var fmtRes_1124075913 = [mnewString(0)];
      fmtRes_1124075913[0].push.apply(fmtRes_1124075913[0], makeNimstrLit("language-"));;
      formatValue_1275068578(fmtRes_1124075913, 0, get_1912602965(lang_1124075903), []);
      var fmtRes_1124075929 = [mnewString(0)];
      fmtRes_1124075929[0].push.apply(fmtRes_1124075929[0], makeNimstrLit("language-"));;
      formatValue_1275068578(fmtRes_1124075929, 0, get_1912602965(lang_1124075903), []);
      Temporary2 = (makeNimstrLit("<pre class=\"") || []).concat(fmtRes_1124075913[0] || [],makeNimstrLit("\"><code class=\"") || [],fmtRes_1124075929[0] || [],makeNimstrLit("\">") || [],highlightCode_1761609611(code_1124075904, get_1912602965(lang_1124075903)) || [],makeNimstrLit("</code></pre>") || []);
      }
      else {
      Temporary2 = (makeNimstrLit("<pre><code>") || []).concat(escapeText_1308622854(code_1124075904, doc_1124073504.target) || [],makeNimstrLit("</code></pre>") || []);
      }
      
      Temporary1 = Temporary2;
      break;
    case 1:
      incl_1946159723(doc_1124073504.addToHead, makeNimstrLit("\\usepackage{minted}"));
      Temporary1 = (env_1879049235(makeNimstrLit("minted"), (get_1929380058(map_1124076007(lang_1124075903, HEX3Aanonymous_1124075987), []) || []).concat(makeNimstrLit("\x0A") || [],code_1124075904 || [])) || []).concat(makeNimstrLit("\x0A") || []);
      break;
    case 2:
      Temporary1 = nsuFormatSingleElem(makeNimstrLit("\x0A```\x0A{$1}\x0A```\x0A"), code_1124075904);
      break;
    }
    result_1124075905 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124075905;

}
    
function HEX3Aanonymous_1124076052(arg_1124076053) {
      var result_1124076054 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124075900 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("code-block"), arg_1124076053, [HEX3F_1207959693(0), HEX21_1207959672(0)]);
        result_1124076054 = nimCopy(result_1124076054, {typ: 1, str: codeBlockCmd_1124075901(to_1912603022(vals_1124075900[chckIndx(0, 0, (vals_1124075900).length - 1)]), to_1862271050(vals_1124075900[chckIndx(1, 0, (vals_1124075900).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124076054;

    }

function colorCmd_1124076120(color_1124076121, text_1124076122) {
    var Temporary1;

  var result_1124076123 = [];

    switch (doc_1124073504.target) {
    case 0:
      var fmtRes_1124076124 = [mnewString(0)];
      fmtRes_1124076124[0].push.apply(fmtRes_1124076124[0], makeNimstrLit("color:"));;
      formatValue_1275068578(fmtRes_1124076124, 0, color_1124076121, []);
      Temporary1 = (makeNimstrLit("<span style=\"") || []).concat(fmtRes_1124076124[0] || [],makeNimstrLit("\">") || [],text_1124076122 || [],makeNimstrLit("</span>") || []);
      break;
    case 1:
      incl_1946159723(doc_1124073504.addToHead, HEX7BHEX7D_1879049227(HEX5BHEX5D_1879049231(makeNimstrLit("usepackage"), makeNimstrLit("svgnames")), makeNimstrLit("xcolor")));
      Temporary1 = HEX7BHEX7D_1879049227(HEX7BHEX7D_1879049227(makeNimstrLit("textcolor"), color_1124076121), text_1124076122);
      break;
    case 2:
      Temporary1 = text_1124076122;
      break;
    }
    result_1124076123 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124076123;

}
    
function HEX3Aanonymous_1124076153(arg_1124076154) {
      var result_1124076155 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("color")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124076119 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("color"), arg_1124076154, [HEX21_1207959672(0), HEX21_1207959672(1)]);
        result_1124076155 = nimCopy(result_1124076155, {typ: 1, str: colorCmd_1124076120(to_1862271050(vals_1124076119[chckIndx(0, 0, (vals_1124076119).length - 1)]), to_1862271050(vals_1124076119[chckIndx(1, 0, (vals_1124076119).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124076155;

    }

function defCmd_1124076218(name_1124076219, paramList_1124076221, body_1124076222) {
    
function HEX3Aanonymous_1124076229(it_1124076240) {
      var result_1124076243 = [];

        result_1124076243 = nimCopy(null, nsuSplitWhitespace(it_1124076240, -1), NTI654311910);

      return result_1124076243;

    }
    name_1124076219 = nimCopy(null, name_1124076219, NTI33554439);
    body_1124076222 = nimCopy(null, body_1124076222, NTI33554439);
    
function HEX3Aanonymous_1124076329(arg_1124076330) {
        var Temporary1;

      var result_1124076331 = ({typ: 0, str: [], list: [], opt: ({val: null})});

        if (eqStrings(arg_1124076330, [])) {
        Temporary1 = [];
        }
        else {
        Temporary1 = parseXidocArguments_1325404796(arg_1124076330);
        }
        
        var argsList_1124076336 = nimCopy(null, Temporary1, NTI1325403138);
        if (!(((argsList_1124076336).length == (params_1124076319).length))) {
        raiseException({message: nsuFormatOpenArray(makeNimstrLit("Command $1 needs exactly $2 arguments, $3 given"), [nimCopy(null, name_1124076219, NTI33554439), HEX24_335544323((params_1124076319).length), HEX24_335544323((argsList_1124076336).length)]), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var argsTable_1124076375 = toTable_1493172239(zip_1124076349(params_1124076319, argsList_1124076336));
        HEX5BHEX5D_1912602936(doc_1124073504.stack, 1).args = nimCopy(HEX5BHEX5D_1912602936(doc_1124073504.stack, 1).args, argsTable_1124076375, NTI1207959588);
        result_1124076331 = nimCopy(result_1124076331, {typ: 1, str: renderStr_1308623254(doc_1124073504, body_1124076222), list: [], opt: ({val: null})}, NTI1207959557);

      return result_1124076331;

    }

  var result_1124076223 = [];

    var params_1124076319 = get_1124076305(map_1124076249(paramList_1124076221, HEX3Aanonymous_1124076229), []);
    HEX5BHEX5DHEX3D_1862271113(HEX5BHEX5D_1912602936(doc_1124073504.stack, 2).commands, name_1124076219, HEX3Aanonymous_1124076329);
    result_1124076223 = nimCopy(null, [], NTI33554439);

  return result_1124076223;

}
    
function HEX3Aanonymous_1124076432(arg_1124076433) {
      var result_1124076434 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124076217 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("def"), arg_1124076433, [HEX21_1207959672(0), HEX3F_1207959693(0), nimCopy(null, Raw_1207959699, NTI1207959559)]);
        result_1124076434 = nimCopy(result_1124076434, {typ: 1, str: defCmd_1124076218(to_1862271050(vals_1124076217[chckIndx(0, 0, (vals_1124076217).length - 1)]), to_1912603022(vals_1124076217[chckIndx(1, 0, (vals_1124076217).length - 1)]), to_1862271050(vals_1124076217[chckIndx(2, 0, (vals_1124076217).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124076434;

    }

function defGlobalCmd_1124076504(name_1124076505, paramList_1124076507, body_1124076508) {
    
function HEX3Aanonymous_1124076515(it_1124076526) {
      var result_1124076529 = [];

        result_1124076529 = nimCopy(null, nsuSplitWhitespace(it_1124076526, -1), NTI654311910);

      return result_1124076529;

    }
    name_1124076505 = nimCopy(null, name_1124076505, NTI33554439);
    body_1124076508 = nimCopy(null, body_1124076508, NTI33554439);
    
function HEX3Aanonymous_1124076567(arg_1124076568) {
        var Temporary1;

      var result_1124076569 = ({typ: 0, str: [], list: [], opt: ({val: null})});

        if (eqStrings(arg_1124076568, [])) {
        Temporary1 = [];
        }
        else {
        Temporary1 = parseXidocArguments_1325404796(arg_1124076568);
        }
        
        var argsList_1124076574 = nimCopy(null, Temporary1, NTI1325403138);
        if (!(((argsList_1124076574).length == (params_1124076561).length))) {
        raiseException({message: nsuFormatOpenArray(makeNimstrLit("Command $1 needs exactly $2 arguments, $3 given"), [nimCopy(null, name_1124076505, NTI33554439), HEX24_335544323((params_1124076561).length), HEX24_335544323((argsList_1124076574).length)]), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var argsTable_1124076596 = toTable_1493172239(zip_1124076349(params_1124076561, argsList_1124076574));
        HEX5BHEX5D_1912602936(doc_1124073504.stack, 1).args = nimCopy(HEX5BHEX5D_1912602936(doc_1124073504.stack, 1).args, argsTable_1124076596, NTI1207959588);
        result_1124076569 = nimCopy(result_1124076569, {typ: 1, str: renderStr_1308623254(doc_1124073504, body_1124076508), list: [], opt: ({val: null})}, NTI1207959557);

      return result_1124076569;

    }

  var result_1124076509 = [];

    var params_1124076561 = get_1124076305(map_1124076249(paramList_1124076507, HEX3Aanonymous_1124076515), []);
    HEX5BHEX5DHEX3D_1862271113(doc_1124073504.stack[chckIndx(0, 0, (doc_1124073504.stack).length - 1)].commands, name_1124076505, HEX3Aanonymous_1124076567);
    result_1124076509 = nimCopy(null, [], NTI33554439);

  return result_1124076509;

}
    
function HEX3Aanonymous_1124076653(arg_1124076654) {
      var result_1124076655 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("def-global")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124076503 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("def-global"), arg_1124076654, [HEX21_1207959672(0), HEX3F_1207959693(0), nimCopy(null, Raw_1207959699, NTI1207959559)]);
        result_1124076655 = nimCopy(result_1124076655, {typ: 1, str: defGlobalCmd_1124076504(to_1862271050(vals_1124076503[chckIndx(0, 0, (vals_1124076503).length - 1)]), to_1912603022(vals_1124076503[chckIndx(1, 0, (vals_1124076503).length - 1)]), to_1862271050(vals_1124076503[chckIndx(2, 0, (vals_1124076503).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124076655;

    }

function dfnCmd_1124076733(thNameHEX60gensym93_1124076735, contentHEX60gensym93_1124076736) {
    
function HEX3Aanonymous_1124076741() {
      var result_1124076742 = 0;

      BeforeRet: do {
        Label1: do {
          var iHEX60gensym98_1124076751 = 0;
          var colontmp__486540291 = 0;
          colontmp__486540291 = subInt((doc_1124073504.stack).length, 1);
          var res_486540292 = colontmp__486540291;
          Label2: do {
              Label3: while (true) {
              if (!(0 <= res_486540292)) break Label3;
                iHEX60gensym98_1124076751 = res_486540292;
                var frameHEX60gensym98_1124076752 = nimCopy(null, doc_1124073504.stack[chckIndx(iHEX60gensym98_1124076751, 0, (doc_1124073504.stack).length - 1)], NTI1207959561);
                if (isSome_1124074069(frameHEX60gensym98_1124076752.lang)) {
                result_1124076742 = get_1124074086(frameHEX60gensym98_1124076752.lang);
                break BeforeRet;
                }
                
                res_486540292 = subInt(res_486540292, 1);
              }
          } while (false);
        } while (false);
      } while (false);

      return result_1124076742;

    }
    var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;

  var result_1124076737 = [];

    var contentHEX60gensym93_1124076738 = renderStr_1308623254(doc_1124073504, contentHEX60gensym93_1124076736);
    var wordHEX60gensym93_1124076775 = translate_1224736808(0, HEX3Aanonymous_1124076741());
    switch (doc_1124073504.target) {
    case 0:
      var Temporary2 = doc_1124073504;
      if (ConstSet341[Temporary2.target]===undefined) { raiseFieldError2(makeNimstrLit("field \'addToStyle\' is not accessible for type \'Document\' using \'target = "), reprDiscriminant(Temporary2.target, NTI1207959555)); }
      incl_1946159723(Temporary2.addToStyle, makeNimstrLit(".xd-theorem-like{margin:1rem 0}.xd-theorem-like>p{margin:0.5rem 0}"));
      var fmtRes_1124076799 = mnewString(0);
      fmtRes_1124076799.push.apply(fmtRes_1124076799, makeNimstrLit("xd-theorem-like xd-$1"));;
      if (isSome_1912602931(thNameHEX60gensym93_1124076735)) {
      Temporary3 = nsuFormatOpenArray(makeNimstrLit("$1 ($2)."), [nimCopy(null, wordHEX60gensym93_1124076775, NTI33554439), nimCopy(null, get_1912602965(thNameHEX60gensym93_1124076735), NTI33554439)]);
      }
      else {
      Temporary3 = nsuFormatOpenArray(makeNimstrLit("$1."), [nimCopy(null, wordHEX60gensym93_1124076775, NTI33554439)]);
      }
      
      Temporary1 = (makeNimstrLit("<div class=\"") || []).concat(nsuFormatSingleElem(fmtRes_1124076799, makeNimstrLit("dfn")) || [],makeNimstrLit("\"><strong>") || [],Temporary3 || [],makeNimstrLit("</strong> ") || [],nsuFormatSingleElem(makeNimstrLit("$1"), contentHEX60gensym93_1124076738) || [],makeNimstrLit("</div>") || []);
      break;
    case 1:
      incl_1946159723(doc_1124073504.addToHead, HEX7BHEX7D_1879049227(makeNimstrLit("usepackage"), makeNimstrLit("amsthm")));
      incl_1946159723(doc_1124073504.addToHead, (HEX7BHEX7D_1879049227(makeNimstrLit("theoremstyle"), makeNimstrLit("definition")) || []).concat(HEX7BHEX7D_1879049227(HEX7BHEX7D_1879049227(makeNimstrLit("newtheorem*"), makeNimstrLit("XDdfn")), wordHEX60gensym93_1124076775) || []));
      Temporary1 = env_1879049235(makeNimstrLit("XDdfn"), nsuFormatSingleElem(makeNimstrLit("$1"), contentHEX60gensym93_1124076738));
      break;
    case 2:
      if (isSome_1912602931(thNameHEX60gensym93_1124076735)) {
      Temporary4 = nsuFormatOpenArray(makeNimstrLit("$1 ($2)"), [nimCopy(null, wordHEX60gensym93_1124076775, NTI33554439), nimCopy(null, get_1912602965(thNameHEX60gensym93_1124076735), NTI33554439)]);
      }
      else {
      Temporary4 = nsuFormatOpenArray(makeNimstrLit("$1"), [nimCopy(null, wordHEX60gensym93_1124076775, NTI33554439)]);
      }
      
      Temporary1 = nsuFormatOpenArray(makeNimstrLit("\x0A\x0A$1. $2"), [nimCopy(null, Temporary4, NTI33554439), nimCopy(null, contentHEX60gensym93_1124076738, NTI33554439)]);
      break;
    }
    result_1124076737 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124076737;

}
    
function HEX3Aanonymous_1124076895(arg_1124076896) {
      var result_1124076897 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124076732 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("dfn"), arg_1124076896, [HEX3F_1207959693(1), nimCopy(null, Raw_1207959699, NTI1207959559)]);
        result_1124076897 = nimCopy(result_1124076897, {typ: 1, str: dfnCmd_1124076733(to_1912603022(vals_1124076732[chckIndx(0, 0, (vals_1124076732).length - 1)]), to_1862271050(vals_1124076732[chckIndx(1, 0, (vals_1124076732).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124076897;

    }

function drawCmd_1124076963(width_1124076965, height_1124076967, desc_1124076968) {
    var Temporary1;

  var result_1124076969 = [];

    HEX5BHEX5D_1912602936(doc_1124073504.stack, 1).commands = nimCopy(HEX5BHEX5D_1912602936(doc_1124073504.stack, 1).commands, drawCommands_1929379848(doc_1124073504), NTI1207959603);
    switch (doc_1124073504.target) {
    case 0:
      var fmtRes_1124076974 = [mnewString(0)];
      fmtRes_1124076974[0].push.apply(fmtRes_1124076974[0], makeNimstrLit("<svg width=\""));;
      formatValue_1275068578(fmtRes_1124076974, 0, get_1929380058(width_1124076965, makeNimstrLit("360")), []);
      fmtRes_1124076974[0].push.apply(fmtRes_1124076974[0], makeNimstrLit("\" height=\""));;
      formatValue_1275068578(fmtRes_1124076974, 0, get_1929380058(height_1124076967, makeNimstrLit("360")), []);
      fmtRes_1124076974[0].push.apply(fmtRes_1124076974[0], makeNimstrLit("\" viewBox=\"0 0 360 360\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">"));;
      formatValue_1275068578(fmtRes_1124076974, 0, expandStr_1308623250(doc_1124073504, desc_1124076968), []);
      fmtRes_1124076974[0].push.apply(fmtRes_1124076974[0], makeNimstrLit("</svg>"));;
      Temporary1 = fmtRes_1124076974[0];
      break;
    case 1:
      raiseException({message: makeNimstrLit("Drawing is currently not implemented in the LaTeX backend"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    case 2:
      raiseException({message: makeNimstrLit("Drawing is currently not implemented in the Gemtext backend"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    }
    result_1124076969 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124076969;

}
    
function HEX3Aanonymous_1124077012(arg_1124077013) {
      var result_1124077014 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("draw")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124076962 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("draw"), arg_1124077013, [HEX3F_1207959693(0), HEX3F_1207959693(0), nimCopy(null, Raw_1207959699, NTI1207959559)]);
        result_1124077014 = nimCopy(result_1124077014, {typ: 1, str: drawCmd_1124076963(to_1912603022(vals_1124076962[chckIndx(0, 0, (vals_1124076962).length - 1)]), to_1912603022(vals_1124076962[chckIndx(1, 0, (vals_1124076962).length - 1)]), to_1862271050(vals_1124076962[chckIndx(2, 0, (vals_1124076962).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124077014;

    }

function exampleCmd_1124077098(thNameHEX60gensym110_1124077100, contentHEX60gensym110_1124077101) {
    
function HEX3Aanonymous_1124077106() {
      var result_1124077107 = 0;

      BeforeRet: do {
        Label1: do {
          var iHEX60gensym115_1124077116 = 0;
          var colontmp__486540319 = 0;
          colontmp__486540319 = subInt((doc_1124073504.stack).length, 1);
          var res_486540320 = colontmp__486540319;
          Label2: do {
              Label3: while (true) {
              if (!(0 <= res_486540320)) break Label3;
                iHEX60gensym115_1124077116 = res_486540320;
                var frameHEX60gensym115_1124077117 = nimCopy(null, doc_1124073504.stack[chckIndx(iHEX60gensym115_1124077116, 0, (doc_1124073504.stack).length - 1)], NTI1207959561);
                if (isSome_1124074069(frameHEX60gensym115_1124077117.lang)) {
                result_1124077107 = get_1124074086(frameHEX60gensym115_1124077117.lang);
                break BeforeRet;
                }
                
                res_486540320 = subInt(res_486540320, 1);
              }
          } while (false);
        } while (false);
      } while (false);

      return result_1124077107;

    }
    var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;

  var result_1124077102 = [];

    var contentHEX60gensym110_1124077103 = renderStr_1308623254(doc_1124073504, contentHEX60gensym110_1124077101);
    var wordHEX60gensym110_1124077140 = translate_1224736808(1, HEX3Aanonymous_1124077106());
    switch (doc_1124073504.target) {
    case 0:
      var Temporary2 = doc_1124073504;
      if (ConstSet352[Temporary2.target]===undefined) { raiseFieldError2(makeNimstrLit("field \'addToStyle\' is not accessible for type \'Document\' using \'target = "), reprDiscriminant(Temporary2.target, NTI1207959555)); }
      incl_1946159723(Temporary2.addToStyle, makeNimstrLit(".xd-theorem-like{margin:1rem 0}.xd-theorem-like>p{margin:0.5rem 0}"));
      var fmtRes_1124077164 = mnewString(0);
      fmtRes_1124077164.push.apply(fmtRes_1124077164, makeNimstrLit("xd-theorem-like xd-$1"));;
      if (isSome_1912602931(thNameHEX60gensym110_1124077100)) {
      Temporary3 = nsuFormatOpenArray(makeNimstrLit("$1 ($2)."), [nimCopy(null, wordHEX60gensym110_1124077140, NTI33554439), nimCopy(null, get_1912602965(thNameHEX60gensym110_1124077100), NTI33554439)]);
      }
      else {
      Temporary3 = nsuFormatOpenArray(makeNimstrLit("$1."), [nimCopy(null, wordHEX60gensym110_1124077140, NTI33554439)]);
      }
      
      Temporary1 = (makeNimstrLit("<div class=\"") || []).concat(nsuFormatSingleElem(fmtRes_1124077164, makeNimstrLit("example")) || [],makeNimstrLit("\"><strong>") || [],Temporary3 || [],makeNimstrLit("</strong> ") || [],nsuFormatSingleElem(makeNimstrLit("$1"), contentHEX60gensym110_1124077103) || [],makeNimstrLit("</div>") || []);
      break;
    case 1:
      incl_1946159723(doc_1124073504.addToHead, HEX7BHEX7D_1879049227(makeNimstrLit("usepackage"), makeNimstrLit("amsthm")));
      incl_1946159723(doc_1124073504.addToHead, (HEX7BHEX7D_1879049227(makeNimstrLit("theoremstyle"), makeNimstrLit("definition")) || []).concat(HEX7BHEX7D_1879049227(HEX7BHEX7D_1879049227(makeNimstrLit("newtheorem*"), makeNimstrLit("XDexample")), wordHEX60gensym110_1124077140) || []));
      Temporary1 = env_1879049235(makeNimstrLit("XDexample"), nsuFormatSingleElem(makeNimstrLit("$1"), contentHEX60gensym110_1124077103));
      break;
    case 2:
      if (isSome_1912602931(thNameHEX60gensym110_1124077100)) {
      Temporary4 = nsuFormatOpenArray(makeNimstrLit("$1 ($2)"), [nimCopy(null, wordHEX60gensym110_1124077140, NTI33554439), nimCopy(null, get_1912602965(thNameHEX60gensym110_1124077100), NTI33554439)]);
      }
      else {
      Temporary4 = nsuFormatOpenArray(makeNimstrLit("$1"), [nimCopy(null, wordHEX60gensym110_1124077140, NTI33554439)]);
      }
      
      Temporary1 = nsuFormatOpenArray(makeNimstrLit("\x0A\x0A$1. $2"), [nimCopy(null, Temporary4, NTI33554439), nimCopy(null, contentHEX60gensym110_1124077103, NTI33554439)]);
      break;
    }
    result_1124077102 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124077102;

}
    
function HEX3Aanonymous_1124077260(arg_1124077261) {
      var result_1124077262 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124077097 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("example"), arg_1124077261, [HEX3F_1207959693(1), nimCopy(null, Raw_1207959699, NTI1207959559)]);
        result_1124077262 = nimCopy(result_1124077262, {typ: 1, str: exampleCmd_1124077098(to_1912603022(vals_1124077097[chckIndx(0, 0, (vals_1124077097).length - 1)]), to_1862271050(vals_1124077097[chckIndx(1, 0, (vals_1124077097).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124077262;

    }

function exerciseCmd_1124077336(thNameHEX60gensym116_1124077338, contentHEX60gensym116_1124077339) {
    
function HEX3Aanonymous_1124077344() {
      var result_1124077345 = 0;

      BeforeRet: do {
        Label1: do {
          var iHEX60gensym121_1124077354 = 0;
          var colontmp__486540323 = 0;
          colontmp__486540323 = subInt((doc_1124073504.stack).length, 1);
          var res_486540324 = colontmp__486540323;
          Label2: do {
              Label3: while (true) {
              if (!(0 <= res_486540324)) break Label3;
                iHEX60gensym121_1124077354 = res_486540324;
                var frameHEX60gensym121_1124077355 = nimCopy(null, doc_1124073504.stack[chckIndx(iHEX60gensym121_1124077354, 0, (doc_1124073504.stack).length - 1)], NTI1207959561);
                if (isSome_1124074069(frameHEX60gensym121_1124077355.lang)) {
                result_1124077345 = get_1124074086(frameHEX60gensym121_1124077355.lang);
                break BeforeRet;
                }
                
                res_486540324 = subInt(res_486540324, 1);
              }
          } while (false);
        } while (false);
      } while (false);

      return result_1124077345;

    }
    var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;

  var result_1124077340 = [];

    var contentHEX60gensym116_1124077341 = renderStr_1308623254(doc_1124073504, contentHEX60gensym116_1124077339);
    var wordHEX60gensym116_1124077378 = translate_1224736808(2, HEX3Aanonymous_1124077344());
    switch (doc_1124073504.target) {
    case 0:
      var Temporary2 = doc_1124073504;
      if (ConstSet353[Temporary2.target]===undefined) { raiseFieldError2(makeNimstrLit("field \'addToStyle\' is not accessible for type \'Document\' using \'target = "), reprDiscriminant(Temporary2.target, NTI1207959555)); }
      incl_1946159723(Temporary2.addToStyle, makeNimstrLit(".xd-theorem-like{margin:1rem 0}.xd-theorem-like>p{margin:0.5rem 0}"));
      var fmtRes_1124077402 = mnewString(0);
      fmtRes_1124077402.push.apply(fmtRes_1124077402, makeNimstrLit("xd-theorem-like xd-$1"));;
      if (isSome_1912602931(thNameHEX60gensym116_1124077338)) {
      Temporary3 = nsuFormatOpenArray(makeNimstrLit("$1 ($2)."), [nimCopy(null, wordHEX60gensym116_1124077378, NTI33554439), nimCopy(null, get_1912602965(thNameHEX60gensym116_1124077338), NTI33554439)]);
      }
      else {
      Temporary3 = nsuFormatOpenArray(makeNimstrLit("$1."), [nimCopy(null, wordHEX60gensym116_1124077378, NTI33554439)]);
      }
      
      Temporary1 = (makeNimstrLit("<div class=\"") || []).concat(nsuFormatSingleElem(fmtRes_1124077402, makeNimstrLit("exercise")) || [],makeNimstrLit("\"><strong>") || [],Temporary3 || [],makeNimstrLit("</strong> ") || [],nsuFormatSingleElem(makeNimstrLit("$1"), contentHEX60gensym116_1124077341) || [],makeNimstrLit("</div>") || []);
      break;
    case 1:
      incl_1946159723(doc_1124073504.addToHead, HEX7BHEX7D_1879049227(makeNimstrLit("usepackage"), makeNimstrLit("amsthm")));
      incl_1946159723(doc_1124073504.addToHead, (HEX7BHEX7D_1879049227(makeNimstrLit("theoremstyle"), makeNimstrLit("definition")) || []).concat(HEX7BHEX7D_1879049227(HEX7BHEX7D_1879049227(makeNimstrLit("newtheorem*"), makeNimstrLit("XDexercise")), wordHEX60gensym116_1124077378) || []));
      Temporary1 = env_1879049235(makeNimstrLit("XDexercise"), nsuFormatSingleElem(makeNimstrLit("$1"), contentHEX60gensym116_1124077341));
      break;
    case 2:
      if (isSome_1912602931(thNameHEX60gensym116_1124077338)) {
      Temporary4 = nsuFormatOpenArray(makeNimstrLit("$1 ($2)"), [nimCopy(null, wordHEX60gensym116_1124077378, NTI33554439), nimCopy(null, get_1912602965(thNameHEX60gensym116_1124077338), NTI33554439)]);
      }
      else {
      Temporary4 = nsuFormatOpenArray(makeNimstrLit("$1"), [nimCopy(null, wordHEX60gensym116_1124077378, NTI33554439)]);
      }
      
      Temporary1 = nsuFormatOpenArray(makeNimstrLit("\x0A\x0A$1. $2"), [nimCopy(null, Temporary4, NTI33554439), nimCopy(null, contentHEX60gensym116_1124077341, NTI33554439)]);
      break;
    }
    result_1124077340 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124077340;

}
    
function HEX3Aanonymous_1124077498(arg_1124077499) {
      var result_1124077500 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124077335 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("exercise"), arg_1124077499, [HEX3F_1207959693(1), nimCopy(null, Raw_1207959699, NTI1207959559)]);
        result_1124077500 = nimCopy(result_1124077500, {typ: 1, str: exerciseCmd_1124077336(to_1912603022(vals_1124077335[chckIndx(0, 0, (vals_1124077335).length - 1)]), to_1862271050(vals_1124077335[chckIndx(1, 0, (vals_1124077335).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124077500;

    }

function expandCmd_1124077566(arg_1124077567) {
  var result_1124077568 = [];

    result_1124077568 = nimCopy(null, expandStr_1308623250(doc_1124073504, arg_1124077567), NTI33554439);

  return result_1124077568;

}
    
function HEX3Aanonymous_1124077574(arg_1124077575) {
      var result_1124077576 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("expand")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124077565 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("expand"), arg_1124077575, [HEX21_1207959672(0)]);
        result_1124077576 = nimCopy(result_1124077576, {typ: 0, str: expandCmd_1124077566(to_1862271050(vals_1124077565[chckIndx(0, 0, (vals_1124077565).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124077576;

    }

function figureCmd_1124077632(content_1124077633, caption_1124077635) {
    var Temporary1;
      var Temporary2;
      
function HEX3Aanonymous_1124077663(c_1124077674) {
        var result_1124077677 = [];

          result_1124077677 = nimCopy(null, HEX7BHEX7D_1879049227(makeNimstrLit("caption"), c_1124077674), NTI33554439);

        return result_1124077677;

      }
      
function HEX3Aanonymous_1124077709(c_1124077720) {
        var result_1124077723 = [];

          result_1124077723 = nimCopy(null, (makeNimstrLit("\x0A") || []).concat(c_1124077720 || []), NTI33554439);

        return result_1124077723;

      }

  var result_1124077636 = [];

    switch (doc_1124073504.target) {
    case 0:
      if (isSome_1912602931(caption_1124077635)) {
      Temporary2 = (makeNimstrLit("<figure>") || []).concat(content_1124077633 || [],makeNimstrLit("<figcaption>") || [],get_1912602965(caption_1124077635) || [],makeNimstrLit("</figcaption></figure>") || []);
      }
      else {
      Temporary2 = (makeNimstrLit("<figure>") || []).concat(content_1124077633 || [],makeNimstrLit("</figure>") || []);
      }
      
      Temporary1 = Temporary2;
      break;
    case 1:
      Temporary1 = env_1879049235(makeNimstrLit("figure"), (makeNimstrLit("[h]\\centering") || []).concat(content_1124077633 || [],get_1929380058(map_1124076007(caption_1124077635, HEX3Aanonymous_1124077663), []) || []));
      break;
    case 2:
      Temporary1 = (makeNimstrLit("\x0A") || []).concat(content_1124077633 || [],get_1929380058(map_1124076007(caption_1124077635, HEX3Aanonymous_1124077709), []) || []);
      break;
    }
    result_1124077636 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124077636;

}
    
function HEX3Aanonymous_1124077756(arg_1124077757) {
      var result_1124077758 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124077631 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("figure"), arg_1124077757, [HEX21_1207959672(1), HEX3F_1207959693(1)]);
        result_1124077758 = nimCopy(result_1124077758, {typ: 1, str: figureCmd_1124077632(to_1862271050(vals_1124077631[chckIndx(0, 0, (vals_1124077631).length - 1)]), to_1912603022(vals_1124077631[chckIndx(1, 0, (vals_1124077631).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124077758;

    }

function forEachCmd_1124077824(name_1124077825, list_1124077826, tmpl_1124077827) {
            
function HEX3Aanonymous_1124077861(__1124077873) {
              var result_1124077876 = ({typ: 0, str: [], list: [], opt: ({val: null})});

                result_1124077876 = nimCopy(result_1124077876, itemCopy_1124077851, NTI1207959557);

              return result_1124077876;

            }

  var result_1124077828 = [];

    var results_1124077829 = [];
    Label1: do {
      var item_1124077850 = ({typ: 0, str: [], list: [], opt: ({val: null})});
      var i_486539963 = 0;
      var L_486539964 = (list_1124077826).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_486539963 < L_486539964)) break Label3;
            item_1124077850 = list_1124077826[chckIndx(i_486539963, 0, (list_1124077826).length - 1)];
            var itemCopy_1124077851 = nimCopy(null, item_1124077850, NTI1207959557);
            HEX5BHEX5DHEX3D_1862271113(HEX5BHEX5D_1912602936(doc_1124073504.stack, 1).commands, name_1124077825, HEX3Aanonymous_1124077861);
            results_1124077829.push(expand_1308622933(doc_1124073504, tmpl_1124077827, item_1124077850.typ));;
            i_486539963 = addInt(i_486539963, 1);
            if (!(((list_1124077826).length == L_486539964))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_1124077828 = nimCopy(null, results_1124077829, NTI1124076718);

  return result_1124077828;

}
    
function HEX3Aanonymous_1124077936(arg_1124077937) {
      var result_1124077938 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124077823 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("for-each"), arg_1124077937, [HEX21_1207959672(0), HEX21_1207959672(2), nimCopy(null, Raw_1207959699, NTI1207959559)]);
        result_1124077938 = nimCopy(result_1124077938, {typ: 2, list: forEachCmd_1124077824(to_1862271050(vals_1124077823[chckIndx(0, 0, (vals_1124077823).length - 1)]), to_1124077947(vals_1124077823[chckIndx(1, 0, (vals_1124077823).length - 1)]), to_1862271050(vals_1124077823[chckIndx(2, 0, (vals_1124077823).length - 1)])), str: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124077938;

    }

function getDocPathAbsoluteCmd_1124078057() {
    
function HEX3Aanonymous_1124078063(path_1124078074) {
      var result_1124078077 = [];

        result_1124078077 = nimCopy(null, absolutePath_1660945026(path_1124078074, nosgetCurrentDir()), NTI33554439);

      return result_1124078077;

    }

  var result_1124078058 = [];

    result_1124078058 = nimCopy(null, get_1929380058(map_1124076007(doc_1124073504.stack[chckIndx(0, 0, (doc_1124073504.stack).length - 1)].path, HEX3Aanonymous_1124078063), []), NTI33554439);

  return result_1124078058;

}
    
function HEX3Aanonymous_1124078110(arg_1124078111) {
      var result_1124078112 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("get-doc-path-absolute")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124078056 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("get-doc-path-absolute"), arg_1124078111, []);
        result_1124078112 = nimCopy(result_1124078112, {typ: 0, str: getDocPathAbsoluteCmd_1124078057(), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124078112;

    }

function getDocPathRelativeToContainingCmd_1124078164(arg_1124078165) {
  var result_1124078166 = [];

    result_1124078166 = nimCopy(null, [], NTI33554439);

  return result_1124078166;

}
    
function HEX3Aanonymous_1124078172(arg_1124078173) {
      var result_1124078174 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("get-doc-path-relative-to-containing")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124078163 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("get-doc-path-relative-to-containing"), arg_1124078173, [HEX21_1207959672(0)]);
        result_1124078174 = nimCopy(result_1124078174, {typ: 0, str: getDocPathRelativeToContainingCmd_1124078164(to_1862271050(vals_1124078163[chckIndx(0, 0, (vals_1124078163).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124078174;

    }

function hideCmd_1124078230(arg_1124078231) {
  var result_1124078232 = [];

    result_1124078232 = nimCopy(null, [], NTI33554439);

  return result_1124078232;

}
    
function HEX3Aanonymous_1124078238(arg_1124078239) {
      var result_1124078240 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124078229 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("hide"), arg_1124078239, [HEX21_1207959672(0)]);
        result_1124078240 = nimCopy(result_1124078240, {typ: 1, str: hideCmd_1124078230(to_1862271050(vals_1124078229[chckIndx(0, 0, (vals_1124078229).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124078240;

    }

function headerRowCmd_1124078296(entries_1124078297) {
    var Temporary4;

  var result_1124078298 = [];

      var resultHEX60gensym151_1124078300 = false;
      Label1: do {
        var it_1124078304 = ({args: ({data: [], counter: 0}), cmdArg: [], cmdName: [], commands: ({data: [], counter: 0}), lang: ({val: 0, has: false}), path: ({val: [], has: false})});
        var i_486539968 = 0;
        var L_486539969 = (doc_1124073504.stack).length;
        Label2: do {
            Label3: while (true) {
            if (!(i_486539968 < L_486539969)) break Label3;
              it_1124078304 = doc_1124073504.stack[chckIndx(i_486539968, 0, (doc_1124073504.stack).length - 1)];
              if (eqStrings(it_1124078304.cmdName, makeNimstrLit("table"))) {
              resultHEX60gensym151_1124078300 = true;
              break Label1;
              }
              
              i_486539968 = addInt(i_486539968, 1);
              if (!(((doc_1124073504.stack).length == L_486539969))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    if (!(resultHEX60gensym151_1124078300)) {
    raiseException({message: makeNimstrLit("The header-row command has to be inside a table command"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    }
    
    switch (doc_1124073504.target) {
    case 0:
      Label5: do {
        var iHEX60gensym153_1124078326 = 0;
        var resultHEX60gensym153_1124078333 = newSeq_452985301(chckRange((entries_1124078297).length, 0, 2147483647));
        Label6: do {
          var it_1124078337 = [];
          var i_486539978 = 0;
          var L_486539979 = (entries_1124078297).length;
          Label7: do {
              Label8: while (true) {
              if (!(i_486539978 < L_486539979)) break Label8;
                it_1124078337 = entries_1124078297[chckIndx(i_486539978, 0, (entries_1124078297).length - 1)];
                resultHEX60gensym153_1124078333[chckIndx(iHEX60gensym153_1124078326, 0, (resultHEX60gensym153_1124078333).length - 1)] = nimCopy(null, (makeNimstrLit("<th>") || []).concat(it_1124078337 || [],makeNimstrLit("</th>") || []), NTI33554439);
                iHEX60gensym153_1124078326 = addInt(iHEX60gensym153_1124078326, 1);
                i_486539978 = addInt(i_486539978, 1);
                if (!(((entries_1124078297).length == L_486539979))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
      } while (false);
      Temporary4 = (makeNimstrLit("<tr>") || []).concat(nsuJoinSep(resultHEX60gensym153_1124078333, []) || [],makeNimstrLit("</tr>") || []);
      break;
    case 1:
      Temporary4 = nsuFormatSingleElem(makeNimstrLit("$1\\\\\\midrule "), nsuJoinSep(entries_1124078297, makeNimstrLit("&")));
      break;
    case 2:
      raiseException({message: makeNimstrLit("Tables are currently not supported in the Gemtext backend"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    }
    result_1124078298 = nimCopy(null, Temporary4, NTI33554439);

  return result_1124078298;

}
    
function HEX3Aanonymous_1124078347(arg_1124078348) {
      var result_1124078349 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124078295 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("header-row"), arg_1124078348, [HEX2A_1207959696(1)]);
        result_1124078349 = nimCopy(result_1124078349, {typ: 1, str: headerRowCmd_1124078296(to_1124078354(vals_1124078295[chckIndx(0, 0, (vals_1124078295).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124078349;

    }

function htmlAddAttrsCmd_1124078459(args_1124078460, tag_1124078461) {
    var Temporary1;

  var result_1124078462 = [];

    switch (doc_1124073504.target) {
    case 0:
      var matches_1124078463 = [[], []];
      if (!(npegsmatchCapture(tag_1124078461, peg_1140854591(makeNimstrLit("{\'<\' [a-zA-Z-]+} {.*}")), matches_1124078463, 0))) {
      raiseException({message: makeNimstrLit("Can\'t add HTML attribute to something that isn\'t an HTML tag"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      }
      
      var attrs_1124078471 = newSeq_452985301(0);
      var classes_1124078479 = newSeq_452985301(0);
      Label2: do {
        var arg_1124078480 = [];
        var lastHEX60gensym59_486539982 = 0;
        var splitsHEX60gensym59_486539983 = -1;
        if (false) {
        failedAssertImpl_218103864(makeNimstrLit("strutils.nim(381, 9) `not (\'\\x00\' in Whitespace)` "));
        }
        
        Label3: do {
            Label4: while (true) {
            if (!(lastHEX60gensym59_486539982 < (args_1124078460).length)) break Label4;
              Label5: do {
                  Label6: while (true) {
                  if (!((lastHEX60gensym59_486539982 < (args_1124078460).length) && (ConstSet369[args_1124078460[chckIndx(lastHEX60gensym59_486539982, 0, (args_1124078460).length - 1)]] != undefined))) break Label6;
                    lastHEX60gensym59_486539982 = addInt(lastHEX60gensym59_486539982, 1);
                  }
              } while (false);
              var firstHEX60gensym59_486539986 = lastHEX60gensym59_486539982;
              Label7: do {
                  Label8: while (true) {
                  if (!((lastHEX60gensym59_486539982 < (args_1124078460).length) && !((ConstSet370[args_1124078460[chckIndx(lastHEX60gensym59_486539982, 0, (args_1124078460).length - 1)]] != undefined)))) break Label8;
                    lastHEX60gensym59_486539982 = addInt(lastHEX60gensym59_486539982, 1);
                  }
              } while (false);
              if ((firstHEX60gensym59_486539986 <= subInt(lastHEX60gensym59_486539982, 1))) {
              if ((splitsHEX60gensym59_486539983 == 0)) {
              lastHEX60gensym59_486539982 = (args_1124078460).length;
              }
              
              arg_1124078480 = substr_33557906(args_1124078460, firstHEX60gensym59_486539986, subInt(lastHEX60gensym59_486539982, 1));
              if (nsuStartsWith(arg_1124078480, makeNimstrLit("#"))) {
              attrs_1124078471.push(nsuFormatSingleElem(makeNimstrLit("id=\"$1\""), HEX5BHEX5D_939527322(arg_1124078480, HEX2EHEX2E_872415312(1, 1))));;
              }
              else {
              if (nsuStartsWith(arg_1124078480, makeNimstrLit("."))) {
              classes_1124078479.push(HEX5BHEX5D_939527322(arg_1124078480, HEX2EHEX2E_872415312(1, 1)));;
              }
              else {
                var Temporary9 = nimCopy(null, arg_1124078480, NTI33554439);
              attrs_1124078471.push(Temporary9);;
              }
              }
              if ((splitsHEX60gensym59_486539983 == 0)) {
              break Label3;
              }
              
              splitsHEX60gensym59_486539983 = subInt(splitsHEX60gensym59_486539983, 1);
              }
              
            }
        } while (false);
      } while (false);
      if (!(((classes_1124078479).length == 0))) {
      attrs_1124078471.push(nsuFormatSingleElem(makeNimstrLit("class=\"$1\""), nsuJoinSep(classes_1124078479, makeNimstrLit(" "))));;
      }
      
      Temporary1 = nsuJoinSep(matches_1124078463, (makeNimstrLit(" ") || []).concat(nsuJoinSep(attrs_1124078471, makeNimstrLit(" ")) || []));
      break;
    default: 
      Temporary1 = tag_1124078461;
      break;
    }
    result_1124078462 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124078462;

}
    
function HEX3Aanonymous_1124078541(arg_1124078542) {
      var result_1124078543 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("html-add-attrs")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124078458 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("html-add-attrs"), arg_1124078542, [HEX21_1207959672(0), HEX21_1207959672(1)]);
        result_1124078543 = nimCopy(result_1124078543, {typ: 1, str: htmlAddAttrsCmd_1124078459(to_1862271050(vals_1124078458[chckIndx(0, 0, (vals_1124078458).length - 1)]), to_1862271050(vals_1124078458[chckIndx(1, 0, (vals_1124078458).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124078543;

    }

function ifHtmlCmd_1124078603(arg_1124078604) {
    var Temporary1;

  var result_1124078605 = [];

    if ((doc_1124073504.target == 0)) {
    Temporary1 = renderStr_1308623254(doc_1124073504, arg_1124078604);
    }
    else {
    Temporary1 = [];
    }
    
    result_1124078605 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124078605;

}
    
function HEX3Aanonymous_1124078615(arg_1124078616) {
      var result_1124078617 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124078602 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("if-html"), arg_1124078616, [{kind: 3, base: 0}]);
        result_1124078617 = nimCopy(result_1124078617, {typ: 1, str: ifHtmlCmd_1124078603(to_1862271050(vals_1124078602[chckIndx(0, 0, (vals_1124078602).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124078617;

    }

function ifLatexCmd_1124078673(arg_1124078674) {
    var Temporary1;

  var result_1124078675 = [];

    if ((doc_1124073504.target == 1)) {
    Temporary1 = renderStr_1308623254(doc_1124073504, arg_1124078674);
    }
    else {
    Temporary1 = [];
    }
    
    result_1124078675 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124078675;

}
    
function HEX3Aanonymous_1124078685(arg_1124078686) {
      var result_1124078687 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124078672 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("if-latex"), arg_1124078686, [{kind: 3, base: 0}]);
        result_1124078687 = nimCopy(result_1124078687, {typ: 1, str: ifLatexCmd_1124078673(to_1862271050(vals_1124078672[chckIndx(0, 0, (vals_1124078672).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124078687;

    }

function ifGemtextCmd_1124078743(arg_1124078744) {
    var Temporary1;

  var result_1124078745 = [];

    if ((doc_1124073504.target == 2)) {
    Temporary1 = renderStr_1308623254(doc_1124073504, arg_1124078744);
    }
    else {
    Temporary1 = [];
    }
    
    result_1124078745 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124078745;

}
    
function HEX3Aanonymous_1124078755(arg_1124078756) {
      var result_1124078757 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124078742 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("if-gemtext"), arg_1124078756, [{kind: 3, base: 0}]);
        result_1124078757 = nimCopy(result_1124078757, {typ: 1, str: ifGemtextCmd_1124078743(to_1862271050(vals_1124078742[chckIndx(0, 0, (vals_1124078742).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124078757;

    }

function includeCmd_1124078813(filename_1124078814, args_1124078815) {
    
function HEX3Aanonymous_1124078822() {
      var result_1124078823 = [];

      BeforeRet: do {
        Label1: do {
          var iHEX60gensym181_1124078832 = 0;
          var colontmp__486540343 = 0;
          colontmp__486540343 = subInt((doc_1124073504.stack).length, 1);
          var res_486540344 = colontmp__486540343;
          Label2: do {
              Label3: while (true) {
              if (!(0 <= res_486540344)) break Label3;
                iHEX60gensym181_1124078832 = res_486540344;
                var frameHEX60gensym181_1124078833 = nimCopy(null, doc_1124073504.stack[chckIndx(iHEX60gensym181_1124078832, 0, (doc_1124073504.stack).length - 1)], NTI1207959561);
                if (isSome_1912602931(frameHEX60gensym181_1124078833.path)) {
                result_1124078823 = nimCopy(null, get_1912602965(frameHEX60gensym181_1124078833.path), NTI33554439);
                break BeforeRet;
                }
                
                res_486540344 = subInt(res_486540344, 1);
              }
          } while (false);
        } while (false);
      } while (false);

      return result_1124078823;

    }
    var Temporary1;
    var Temporary3;
    
function HEX3Aanonymous_1124078859() {
      var result_1124078860 = 0;

      BeforeRet: do {
        Label1: do {
          var iHEX60gensym182_1124078869 = 0;
          var colontmp__486540348 = 0;
          colontmp__486540348 = subInt((doc_1124073504.stack).length, 1);
          var res_486540349 = colontmp__486540348;
          Label2: do {
              Label3: while (true) {
              if (!(0 <= res_486540349)) break Label3;
                iHEX60gensym182_1124078869 = res_486540349;
                var frameHEX60gensym182_1124078870 = nimCopy(null, doc_1124073504.stack[chckIndx(iHEX60gensym182_1124078869, 0, (doc_1124073504.stack).length - 1)], NTI1207959561);
                if (isSome_1124074069(frameHEX60gensym182_1124078870.lang)) {
                result_1124078860 = get_1124074086(frameHEX60gensym182_1124078870.lang);
                break BeforeRet;
                }
                
                res_486540349 = subInt(res_486540349, 1);
              }
          } while (false);
        } while (false);
      } while (false);

      return result_1124078860;

    }

  var result_1124078816 = [];

    if (!((modInt((args_1124078815).length, 2) == 0))) {
    raiseException({message: makeNimstrLit("Additional arguments to include must come in pairs"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    }
    
    var path_1124078856 = HEX2F_1660944500(nossplitPath(HEX3Aanonymous_1124078822()).Field0, filename_1124078814);
++excHandler;
    Temporary3 = framePtr;
    try {
    var subdoc_1124078905 = {body: readFile_452985260(path_1124078856), target: doc_1124073504.target, snippet: true, stack: [{cmdName: makeNimstrLit("[top]"), lang: some_1124078893(HEX3Aanonymous_1124078859()), path: some_1912603075(path_1124078856), args: ({data: [], counter: 0}), cmdArg: [], commands: ({data: [], counter: 0})}], addToHead: ({data: [], counter: 0, first: 0, last: 0}), safeMode: false, settings: ({data: [], counter: 0}), templateArgs: ({data: [], counter: 0}), verbose: false, addToStyle: ({data: [], counter: 0, first: 0, last: 0})};
    subdoc_1124078905.stack[chckIndx(0, 0, (subdoc_1124078905.stack).length - 1)].commands = nimCopy(subdoc_1124078905.stack[chckIndx(0, 0, (subdoc_1124078905.stack).length - 1)].commands, defaultCommands_1124073503(subdoc_1124078905), NTI1207959603);
    Label4: do {
      var i_1124078913 = 0;
      var colontmp__486539989 = 0;
      colontmp__486539989 = divInt((args_1124078815).length, 2);
      var i_486539990 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(i_486539990 < colontmp__486539989)) break Label6;
            i_1124078913 = i_486539990;
            HEX5BHEX5DHEX3D_1493172312(subdoc_1124078905.templateArgs, args_1124078815[chckIndx(mulInt(2, i_1124078913), 0, (args_1124078815).length - 1)], args_1124078815[chckIndx(addInt(mulInt(2, i_1124078913), 1), 0, (args_1124078815).length - 1)]);
            i_486539990 = addInt(i_486539990, 1);
          }
      } while (false);
    } while (false);
    Temporary1 = renderStr_1308623254(subdoc_1124078905, subdoc_1124078905.body);
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
    framePtr = Temporary3;
    if (lastJSError && (isObj(lastJSError.m_type, NTI33555115))) {
    var fmtRes_1124078960 = [mnewString(0)];
    fmtRes_1124078960[0].push.apply(fmtRes_1124078960[0], makeNimstrLit("Cannot open file "));;
    formatValue_1275068578(fmtRes_1124078960, 0, filename_1124078814, []);
    fmtRes_1124078960[0].push.apply(fmtRes_1124078960[0], makeNimstrLit("\x0A(resolved as "));;
    formatValue_1275068578(fmtRes_1124078960, 0, path_1124078856, []);
    fmtRes_1124078960[0].push.apply(fmtRes_1124078960[0], makeNimstrLit(")"));;
    raiseException({message: nimCopy(null, fmtRes_1124078960[0], NTI33554439), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    }
    else {
    	reraiseException();
    }
    lastJSError = prevJSError;
    } finally {
    framePtr = Temporary3;
    }
    result_1124078816 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124078816;

}
    
function HEX3Aanonymous_1124079014(arg_1124079015) {
      var result_1124079016 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("include")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124078812 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("include"), arg_1124079015, [HEX21_1207959672(0), HEX2A_1207959696(1)]);
        result_1124079016 = nimCopy(result_1124079016, {typ: 1, str: includeCmd_1124078813(to_1862271050(vals_1124078812[chckIndx(0, 0, (vals_1124078812).length - 1)]), to_1124078354(vals_1124078812[chckIndx(1, 0, (vals_1124078812).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124079016;

    }

function injectCmd_1124079077(filename_1124079078) {
    
function HEX3Aanonymous_1124079082() {
      var result_1124079083 = [];

      BeforeRet: do {
        Label1: do {
          var iHEX60gensym188_1124079092 = 0;
          var colontmp__486540352 = 0;
          colontmp__486540352 = subInt((doc_1124073504.stack).length, 1);
          var res_486540353 = colontmp__486540352;
          Label2: do {
              Label3: while (true) {
              if (!(0 <= res_486540353)) break Label3;
                iHEX60gensym188_1124079092 = res_486540353;
                var frameHEX60gensym188_1124079093 = nimCopy(null, doc_1124073504.stack[chckIndx(iHEX60gensym188_1124079092, 0, (doc_1124073504.stack).length - 1)], NTI1207959561);
                if (isSome_1912602931(frameHEX60gensym188_1124079093.path)) {
                result_1124079083 = nimCopy(null, get_1912602965(frameHEX60gensym188_1124079093.path), NTI33554439);
                break BeforeRet;
                }
                
                res_486540353 = subInt(res_486540353, 1);
              }
          } while (false);
        } while (false);
      } while (false);

      return result_1124079083;

    }
    var Temporary1;
    var Temporary3;

  var result_1124079079 = [];

    var path_1124079116 = HEX2F_1660944500(nossplitPath(HEX3Aanonymous_1124079082()).Field0, filename_1124079078);
    HEX5BHEX5D_1912602936(doc_1124073504.stack, 1).path = nimCopy(HEX5BHEX5D_1912602936(doc_1124073504.stack, 1).path, some_1912603075(path_1124079116), NTI1207959629);
++excHandler;
    Temporary3 = framePtr;
    try {
    Temporary1 = renderStr_1308623254(doc_1124073504, readFile_452985260(path_1124079116));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
    framePtr = Temporary3;
    if (lastJSError && (isObj(lastJSError.m_type, NTI33555115))) {
    var fmtRes_1124079124 = [mnewString(0)];
    fmtRes_1124079124[0].push.apply(fmtRes_1124079124[0], makeNimstrLit("Cannot open file "));;
    formatValue_1275068578(fmtRes_1124079124, 0, filename_1124079078, []);
    fmtRes_1124079124[0].push.apply(fmtRes_1124079124[0], makeNimstrLit("\x0A(resolved as "));;
    formatValue_1275068578(fmtRes_1124079124, 0, path_1124079116, []);
    fmtRes_1124079124[0].push.apply(fmtRes_1124079124[0], makeNimstrLit(")"));;
    raiseException({message: nimCopy(null, fmtRes_1124079124[0], NTI33554439), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    }
    else {
    	reraiseException();
    }
    lastJSError = prevJSError;
    } finally {
    framePtr = Temporary3;
    }
    result_1124079079 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124079079;

}
    
function HEX3Aanonymous_1124079130(arg_1124079131) {
      var result_1124079132 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("inject")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124079076 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("inject"), arg_1124079131, [HEX21_1207959672(0)]);
        result_1124079132 = nimCopy(result_1124079132, {typ: 1, str: injectCmd_1124079077(to_1862271050(vals_1124079076[chckIndx(0, 0, (vals_1124079076).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124079132;

    }

function itCmd_1124079188(arg_1124079189) {
    var Temporary1;

  var result_1124079190 = [];

    switch (doc_1124073504.target) {
    case 0:
      Temporary1 = (makeNimstrLit("<i>") || []).concat(arg_1124079189 || [],makeNimstrLit("</i>") || []);
      break;
    case 1:
      Temporary1 = HEX7BHEX7D_1879049227(makeNimstrLit("textit"), arg_1124079189);
      break;
    case 2:
      Temporary1 = arg_1124079189;
      break;
    }
    result_1124079190 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124079190;

}
    
function HEX3Aanonymous_1124079196(arg_1124079197) {
      var result_1124079198 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124079187 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("it"), arg_1124079197, [HEX21_1207959672(1)]);
        result_1124079198 = nimCopy(result_1124079198, {typ: 1, str: itCmd_1124079188(to_1862271050(vals_1124079187[chckIndx(0, 0, (vals_1124079187).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124079198;

    }

function janetCallCmd_1124079254(function_1124079255, args_1124079256) {
    
function HEX3Aanonymous_1124079260() {
      var result_1124079261 = [];

      BeforeRet: do {
        Label1: do {
          var iHEX60gensym199_1124079270 = 0;
          var colontmp__486540364 = 0;
          colontmp__486540364 = subInt((doc_1124073504.stack).length, 1);
          var res_486540365 = colontmp__486540364;
          Label2: do {
              Label3: while (true) {
              if (!(0 <= res_486540365)) break Label3;
                iHEX60gensym199_1124079270 = res_486540365;
                var frameHEX60gensym199_1124079271 = nimCopy(null, doc_1124073504.stack[chckIndx(iHEX60gensym199_1124079270, 0, (doc_1124073504.stack).length - 1)], NTI1207959561);
                if (isSome_1912602931(frameHEX60gensym199_1124079271.path)) {
                result_1124079261 = nimCopy(null, get_1912602965(frameHEX60gensym199_1124079271.path), NTI33554439);
                break BeforeRet;
                }
                
                res_486540365 = subInt(res_486540365, 1);
              }
          } while (false);
        } while (false);
      } while (false);

      return result_1124079261;

    }

  var result_1124079257 = [];

    result_1124079257 = nimCopy(null, janetCall_1577058377(function_1124079255, args_1124079256, HEX3Aanonymous_1124079260()), NTI33554439);

  return result_1124079257;

}
    
function HEX3Aanonymous_1124079299(arg_1124079300) {
      var result_1124079301 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("janet-call")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124079253 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("janet-call"), arg_1124079300, [HEX21_1207959672(0), HEX2A_1207959696(0)]);
        result_1124079301 = nimCopy(result_1124079301, {typ: 0, str: janetCallCmd_1124079254(to_1862271050(vals_1124079253[chckIndx(0, 0, (vals_1124079253).length - 1)]), to_1124078354(vals_1124079253[chckIndx(1, 0, (vals_1124079253).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124079301;

    }

function janetEvalCmd_1124079362(code_1124079363, args_1124079364) {
    
function HEX3Aanonymous_1124079391() {
      var result_1124079392 = [];

      BeforeRet: do {
        Label1: do {
          var iHEX60gensym208_1124079401 = 0;
          var colontmp__486540371 = 0;
          colontmp__486540371 = subInt((doc_1124073504.stack).length, 1);
          var res_486540372 = colontmp__486540371;
          Label2: do {
              Label3: while (true) {
              if (!(0 <= res_486540372)) break Label3;
                iHEX60gensym208_1124079401 = res_486540372;
                var frameHEX60gensym208_1124079402 = nimCopy(null, doc_1124073504.stack[chckIndx(iHEX60gensym208_1124079401, 0, (doc_1124073504.stack).length - 1)], NTI1207959561);
                if (isSome_1912602931(frameHEX60gensym208_1124079402.path)) {
                result_1124079392 = nimCopy(null, get_1912602965(frameHEX60gensym208_1124079402.path), NTI33554439);
                break BeforeRet;
                }
                
                res_486540372 = subInt(res_486540372, 1);
              }
          } while (false);
        } while (false);
      } while (false);

      return result_1124079392;

    }

  var result_1124079365 = [];

    if (!((modInt((args_1124079364).length, 2) == 0))) {
    raiseException({message: makeNimstrLit("Arguments to janet-eval must come in pairs of name; value"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    }
    
    var values_1124079376 = [];
    Label1: do {
      var i_1124079384 = 0;
      var colontmp__486539993 = 0;
      colontmp__486539993 = divInt((args_1124079364).length, 2);
      var i_486539994 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486539994 < colontmp__486539993)) break Label3;
            i_1124079384 = i_486539994;
            values_1124079376.push({Field0: nimCopy(null, args_1124079364[chckIndx(mulInt(2, i_1124079384), 0, (args_1124079364).length - 1)], NTI33554439), Field1: nimCopy(null, args_1124079364[chckIndx(addInt(mulInt(2, i_1124079384), 1), 0, (args_1124079364).length - 1)], NTI33554439)});;
            i_486539994 = addInt(i_486539994, 1);
          }
      } while (false);
    } while (false);
    result_1124079365 = nimCopy(null, janetEval_1577058477(code_1124079363, values_1124079376, HEX3Aanonymous_1124079391()), NTI33554439);

  return result_1124079365;

}
    
function HEX3Aanonymous_1124079430(arg_1124079431) {
      var result_1124079432 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("janet-eval")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124079361 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("janet-eval"), arg_1124079431, [HEX21_1207959672(0), HEX2A_1207959696(0)]);
        result_1124079432 = nimCopy(result_1124079432, {typ: 0, str: janetEvalCmd_1124079362(to_1862271050(vals_1124079361[chckIndx(0, 0, (vals_1124079361).length - 1)]), to_1124078354(vals_1124079361[chckIndx(1, 0, (vals_1124079361).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124079432;

    }

function joinCmd_1124079493(sep_1124079494, list_1124079495) {
              var Temporary5;

  var result_1124079496 = [];

    Label1: do {
      var iHEX60gensym214_1124079518 = 0;
      var resultHEX60gensym214_1124079525 = newSeq_452985301(chckRange((list_1124079495).length, 0, 2147483647));
      Label2: do {
        var it_1124079529 = ({typ: 0, str: [], list: [], opt: ({val: null})});
        var i_486540376 = 0;
        var L_486540377 = (list_1124079495).length;
        Label3: do {
            Label4: while (true) {
            if (!(i_486540376 < L_486540377)) break Label4;
              it_1124079529 = list_1124079495[chckIndx(i_486540376, 0, (list_1124079495).length - 1)];
              var Temporary5 = it_1124079529;
              if (ConstSet374[Temporary5.typ]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'XidocValue\' using \'typ = "), reprDiscriminant(Temporary5.typ, NTI1207959556)); }
              resultHEX60gensym214_1124079525[chckIndx(iHEX60gensym214_1124079518, 0, (resultHEX60gensym214_1124079525).length - 1)] = nimCopy(null, Temporary5.str, NTI33554439);
              iHEX60gensym214_1124079518 = addInt(iHEX60gensym214_1124079518, 1);
              i_486540376 = addInt(i_486540376, 1);
              if (!(((list_1124079495).length == L_486540377))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    } while (false);
    result_1124079496 = nimCopy(null, nsuJoinSep(resultHEX60gensym214_1124079525, sep_1124079494), NTI33554439);

  return result_1124079496;

}
    
function HEX3Aanonymous_1124079539(arg_1124079540) {
      var result_1124079541 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124079492 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("join"), arg_1124079540, [HEX21_1207959672(1), HEX21_1207959672(2)]);
        result_1124079541 = nimCopy(result_1124079541, {typ: 1, str: joinCmd_1124079493(to_1862271050(vals_1124079492[chckIndx(0, 0, (vals_1124079492).length - 1)]), to_1124077947(vals_1124079492[chckIndx(1, 0, (vals_1124079492).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124079541;

    }

function jsCallCmd_1124079602(function_1124079603, args_1124079604) {
  var result_1124079605 = [];

    result_1124079605 = nimCopy(null, jsCall_1761609615(function_1124079603, args_1124079604), NTI33554439);

  return result_1124079605;

}
    
function HEX3Aanonymous_1124079611(arg_1124079612) {
      var result_1124079613 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("js-call")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124079601 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("js-call"), arg_1124079612, [HEX21_1207959672(0), HEX2A_1207959696(0)]);
        result_1124079613 = nimCopy(result_1124079613, {typ: 0, str: jsCallCmd_1124079602(to_1862271050(vals_1124079601[chckIndx(0, 0, (vals_1124079601).length - 1)]), to_1124078354(vals_1124079601[chckIndx(1, 0, (vals_1124079601).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124079613;

    }

function jsEvalCmd_1124079674(code_1124079675, args_1124079676) {
  var result_1124079677 = [];

    if (!((modInt((args_1124079676).length, 2) == 0))) {
    raiseException({message: makeNimstrLit("Arguments to js-eval must come in pairs of name; value"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    }
    
    var values_1124079687 = [];
    Label1: do {
      var i_1124079695 = 0;
      var colontmp__486540380 = 0;
      colontmp__486540380 = divInt((args_1124079676).length, 2);
      var i_486540381 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486540381 < colontmp__486540380)) break Label3;
            i_1124079695 = i_486540381;
            values_1124079687.push({Field0: nimCopy(null, args_1124079676[chckIndx(mulInt(2, i_1124079695), 0, (args_1124079676).length - 1)], NTI33554439), Field1: nimCopy(null, args_1124079676[chckIndx(addInt(mulInt(2, i_1124079695), 1), 0, (args_1124079676).length - 1)], NTI33554439)});;
            i_486540381 = addInt(i_486540381, 1);
          }
      } while (false);
    } while (false);
    result_1124079677 = nimCopy(null, jsEval_1761609619(code_1124079675, values_1124079687), NTI33554439);

  return result_1124079677;

}
    
function HEX3Aanonymous_1124079705(arg_1124079706) {
      var result_1124079707 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("js-eval")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124079673 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("js-eval"), arg_1124079706, [HEX21_1207959672(0), HEX2A_1207959696(0)]);
        result_1124079707 = nimCopy(result_1124079707, {typ: 0, str: jsEvalCmd_1124079674(to_1862271050(vals_1124079673[chckIndx(0, 0, (vals_1124079673).length - 1)]), to_1124078354(vals_1124079673[chckIndx(1, 0, (vals_1124079673).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124079707;

    }

function jsModuleCmd_1124079768(arg_1124079769) {
  var result_1124079770 = [];

    if ((doc_1124073504.target == 0)) {
    incl_1946159723(doc_1124073504.addToHead, (makeNimstrLit("<script type=\"module\">") || []).concat(arg_1124079769 || [],makeNimstrLit("</script>") || []));
    }
    
    result_1124079770 = nimCopy(null, [], NTI33554439);

  return result_1124079770;

}
    
function HEX3Aanonymous_1124079803(arg_1124079804) {
      var result_1124079805 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("js-module")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124079767 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("js-module"), arg_1124079804, [HEX21_1207959672(0)]);
        result_1124079805 = nimCopy(result_1124079805, {typ: 1, str: jsModuleCmd_1124079768(to_1862271050(vals_1124079767[chckIndx(0, 0, (vals_1124079767).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124079805;

    }

function jsModuleRawCmd_1124079861(arg_1124079862) {
  var result_1124079863 = [];

    if ((doc_1124073504.target == 0)) {
    incl_1946159723(doc_1124073504.addToHead, (makeNimstrLit("<script type=\"module\">") || []).concat(arg_1124079862 || [],makeNimstrLit("</script>") || []));
    }
    
    result_1124079863 = nimCopy(null, [], NTI33554439);

  return result_1124079863;

}
    
function HEX3Aanonymous_1124079896(arg_1124079897) {
      var result_1124079898 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("js-module-raw")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124079860 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("js-module-raw"), arg_1124079897, [{kind: 3, base: 0}]);
        result_1124079898 = nimCopy(result_1124079898, {typ: 1, str: jsModuleRawCmd_1124079861(to_1862271050(vals_1124079860[chckIndx(0, 0, (vals_1124079860).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124079898;

    }

function langCmd_1124079954(langStr_1124079955, body_1124079956) {
    var Temporary1;

  var result_1124079957 = [];

    switch (toJSStr(nsuToLowerAsciiStr(langStr_1124079955))) {
    case "en":
    case "english":
      Temporary1 = 0;
      break;
    case "cs":
    case "cz":
    case "czech":
      Temporary1 = 1;
      break;
    default: 
      raiseException({message: nsuFormatSingleElem(makeNimstrLit("Unknown language: $1"), langStr_1124079955), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    }
    var lang_1124079958 = Temporary1;
    HEX5BHEX5D_1912602936(doc_1124073504.stack, 1).lang = nimCopy(HEX5BHEX5D_1912602936(doc_1124073504.stack, 1).lang, some_1124078893(lang_1124079958), NTI1207959616);
    result_1124079957 = nimCopy(null, renderStr_1308623254(doc_1124073504, body_1124079956), NTI33554439);

  return result_1124079957;

}
    
function HEX3Aanonymous_1124079971(arg_1124079972) {
      var result_1124079973 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124079953 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("lang"), arg_1124079972, [HEX21_1207959672(0), nimCopy(null, Raw_1207959699, NTI1207959559)]);
        result_1124079973 = nimCopy(result_1124079973, {typ: 1, str: langCmd_1124079954(to_1862271050(vals_1124079953[chckIndx(0, 0, (vals_1124079953).length - 1)]), to_1862271050(vals_1124079953[chckIndx(1, 0, (vals_1124079953).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124079973;

    }

function lemmaCmd_1124080041(thNameHEX60gensym244_1124080043, contentHEX60gensym244_1124080044) {
    
function HEX3Aanonymous_1124080049() {
      var result_1124080050 = 0;

      BeforeRet: do {
        Label1: do {
          var iHEX60gensym249_1124080059 = 0;
          var colontmp__486540384 = 0;
          colontmp__486540384 = subInt((doc_1124073504.stack).length, 1);
          var res_486540385 = colontmp__486540384;
          Label2: do {
              Label3: while (true) {
              if (!(0 <= res_486540385)) break Label3;
                iHEX60gensym249_1124080059 = res_486540385;
                var frameHEX60gensym249_1124080060 = nimCopy(null, doc_1124073504.stack[chckIndx(iHEX60gensym249_1124080059, 0, (doc_1124073504.stack).length - 1)], NTI1207959561);
                if (isSome_1124074069(frameHEX60gensym249_1124080060.lang)) {
                result_1124080050 = get_1124074086(frameHEX60gensym249_1124080060.lang);
                break BeforeRet;
                }
                
                res_486540385 = subInt(res_486540385, 1);
              }
          } while (false);
        } while (false);
      } while (false);

      return result_1124080050;

    }
    var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;

  var result_1124080045 = [];

    var contentHEX60gensym244_1124080046 = renderStr_1308623254(doc_1124073504, contentHEX60gensym244_1124080044);
    var wordHEX60gensym244_1124080083 = translate_1224736808(5, HEX3Aanonymous_1124080049());
    switch (doc_1124073504.target) {
    case 0:
      var Temporary2 = doc_1124073504;
      if (ConstSet376[Temporary2.target]===undefined) { raiseFieldError2(makeNimstrLit("field \'addToStyle\' is not accessible for type \'Document\' using \'target = "), reprDiscriminant(Temporary2.target, NTI1207959555)); }
      incl_1946159723(Temporary2.addToStyle, makeNimstrLit(".xd-theorem-like{margin:1rem 0}.xd-theorem-like>p{margin:0.5rem 0}"));
      var fmtRes_1124080107 = mnewString(0);
      fmtRes_1124080107.push.apply(fmtRes_1124080107, makeNimstrLit("xd-theorem-like xd-$1"));;
      if (isSome_1912602931(thNameHEX60gensym244_1124080043)) {
      Temporary3 = nsuFormatOpenArray(makeNimstrLit("$1 ($2)."), [nimCopy(null, wordHEX60gensym244_1124080083, NTI33554439), nimCopy(null, get_1912602965(thNameHEX60gensym244_1124080043), NTI33554439)]);
      }
      else {
      Temporary3 = nsuFormatOpenArray(makeNimstrLit("$1."), [nimCopy(null, wordHEX60gensym244_1124080083, NTI33554439)]);
      }
      
      Temporary1 = (makeNimstrLit("<div class=\"") || []).concat(nsuFormatSingleElem(fmtRes_1124080107, makeNimstrLit("lemma")) || [],makeNimstrLit("\"><strong>") || [],Temporary3 || [],makeNimstrLit("</strong> ") || [],nsuFormatSingleElem(makeNimstrLit("$1"), contentHEX60gensym244_1124080046) || [],makeNimstrLit("</div>") || []);
      break;
    case 1:
      incl_1946159723(doc_1124073504.addToHead, HEX7BHEX7D_1879049227(makeNimstrLit("usepackage"), makeNimstrLit("amsthm")));
      incl_1946159723(doc_1124073504.addToHead, (HEX7BHEX7D_1879049227(makeNimstrLit("theoremstyle"), makeNimstrLit("definition")) || []).concat(HEX7BHEX7D_1879049227(HEX7BHEX7D_1879049227(makeNimstrLit("newtheorem*"), makeNimstrLit("XDlemma")), wordHEX60gensym244_1124080083) || []));
      Temporary1 = env_1879049235(makeNimstrLit("XDlemma"), nsuFormatSingleElem(makeNimstrLit("$1"), contentHEX60gensym244_1124080046));
      break;
    case 2:
      if (isSome_1912602931(thNameHEX60gensym244_1124080043)) {
      Temporary4 = nsuFormatOpenArray(makeNimstrLit("$1 ($2)"), [nimCopy(null, wordHEX60gensym244_1124080083, NTI33554439), nimCopy(null, get_1912602965(thNameHEX60gensym244_1124080043), NTI33554439)]);
      }
      else {
      Temporary4 = nsuFormatOpenArray(makeNimstrLit("$1"), [nimCopy(null, wordHEX60gensym244_1124080083, NTI33554439)]);
      }
      
      Temporary1 = nsuFormatOpenArray(makeNimstrLit("\x0A\x0A$1. $2"), [nimCopy(null, Temporary4, NTI33554439), nimCopy(null, contentHEX60gensym244_1124080046, NTI33554439)]);
      break;
    }
    result_1124080045 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124080045;

}
    
function HEX3Aanonymous_1124080203(arg_1124080204) {
      var result_1124080205 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124080040 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("lemma"), arg_1124080204, [HEX3F_1207959693(1), nimCopy(null, Raw_1207959699, NTI1207959559)]);
        result_1124080205 = nimCopy(result_1124080205, {typ: 1, str: lemmaCmd_1124080041(to_1912603022(vals_1124080040[chckIndx(0, 0, (vals_1124080040).length - 1)]), to_1862271050(vals_1124080040[chckIndx(1, 0, (vals_1124080040).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124080205;

    }

function linkCmd_1124080271(name_1124080273, url_1124080274) {
    var Temporary1;
      var Temporary2;

  var result_1124080275 = [];

    switch (doc_1124073504.target) {
    case 0:
      Temporary1 = (makeNimstrLit("<a href=\"") || []).concat(url_1124080274 || [],makeNimstrLit("\">") || [],get_1929380058(name_1124080273, url_1124080274) || [],makeNimstrLit("</a>") || []);
      break;
    case 1:
      Temporary1 = get_1929380058(name_1124080273, []);
      break;
    case 2:
      if (isSome_1912602931(name_1124080273)) {
      Temporary2 = nsuFormatOpenArray(makeNimstrLit("\x0A=> $1 $2"), [nimCopy(null, url_1124080274, NTI33554439), nimCopy(null, get_1912602965(name_1124080273), NTI33554439)]);
      }
      else {
      Temporary2 = nsuFormatOpenArray(makeNimstrLit("\x0A=> $1"), [nimCopy(null, url_1124080274, NTI33554439)]);
      }
      
      Temporary1 = Temporary2;
      break;
    }
    result_1124080275 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124080275;

}
    
function HEX3Aanonymous_1124080335(arg_1124080336) {
      var result_1124080337 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124080270 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("link"), arg_1124080336, [HEX3F_1207959693(1), HEX21_1207959672(0)]);
        result_1124080337 = nimCopy(result_1124080337, {typ: 1, str: linkCmd_1124080271(to_1912603022(vals_1124080270[chckIndx(0, 0, (vals_1124080270).length - 1)]), to_1862271050(vals_1124080270[chckIndx(1, 0, (vals_1124080270).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124080337;

    }

function linkImageCmd_1124080403(alt_1124080404, url_1124080405, link_1124080407) {
    var Temporary1;
      var Temporary2;

  var result_1124080408 = [];

    switch (doc_1124073504.target) {
    case 0:
      if (isSome_1912602931(link_1124080407)) {
      Temporary2 = (makeNimstrLit("<a href=\"") || []).concat(get_1912602965(link_1124080407) || [],makeNimstrLit("\"><img src=\"") || [],url_1124080405 || [],makeNimstrLit("\" alt=\"") || [],alt_1124080404 || [],makeNimstrLit("\" /></a>") || []);
      }
      else {
      Temporary2 = (makeNimstrLit("<img src=\"") || []).concat(url_1124080405 || [],makeNimstrLit("\" alt=\"") || [],alt_1124080404 || [],makeNimstrLit("\" />") || []);
      }
      
      Temporary1 = Temporary2;
      break;
    case 1:
      raiseException({message: makeNimstrLit("Linking images is not supported in the LaTeX backend"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    case 2:
      if (isSome_1912602931(link_1124080407)) {
      raiseException({message: makeNimstrLit("Linking images with an additional link is not supported in the Gemtext backend"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      }
      
      Temporary1 = nsuFormatOpenArray(makeNimstrLit("\x0A=> $1 \xF0\x9E\x96\xBC $2"), [nimCopy(null, url_1124080405, NTI33554439), nimCopy(null, alt_1124080404, NTI33554439)]);
      break;
    }
    result_1124080408 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124080408;

}
    
function HEX3Aanonymous_1124080443(arg_1124080444) {
      var result_1124080445 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("link-image")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124080402 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("link-image"), arg_1124080444, [HEX21_1207959672(0), HEX21_1207959672(0), HEX3F_1207959693(0)]);
        result_1124080445 = nimCopy(result_1124080445, {typ: 1, str: linkImageCmd_1124080403(to_1862271050(vals_1124080402[chckIndx(0, 0, (vals_1124080402).length - 1)]), to_1862271050(vals_1124080402[chckIndx(1, 0, (vals_1124080402).length - 1)]), to_1912603022(vals_1124080402[chckIndx(2, 0, (vals_1124080402).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124080445;

    }

function linkStylesheetCmd_1124080515(url_1124080516) {
  var result_1124080517 = [];

    if ((doc_1124073504.target == 0)) {
    incl_1946159723(doc_1124073504.addToHead, (makeNimstrLit("<link rel=\"stylesheet\" href=\"") || []).concat(url_1124080516 || [],makeNimstrLit("\" />") || []));
    }
    
    result_1124080517 = nimCopy(null, [], NTI33554439);

  return result_1124080517;

}
    
function HEX3Aanonymous_1124080550(arg_1124080551) {
      var result_1124080552 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("link-stylesheet")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124080514 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("link-stylesheet"), arg_1124080551, [HEX21_1207959672(0)]);
        result_1124080552 = nimCopy(result_1124080552, {typ: 1, str: linkStylesheetCmd_1124080515(to_1862271050(vals_1124080514[chckIndx(0, 0, (vals_1124080514).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124080552;

    }

function listCmd_1124080608(items_1124080609) {
    var Temporary1;

  var result_1124080610 = [];

    switch (doc_1124073504.target) {
    case 0:
      Label2: do {
        var iHEX60gensym270_1124080632 = 0;
        var resultHEX60gensym270_1124080639 = newSeq_452985301(chckRange((items_1124080609).length, 0, 2147483647));
        Label3: do {
          var it_1124080643 = [];
          var i_486540003 = 0;
          var L_486540004 = (items_1124080609).length;
          Label4: do {
              Label5: while (true) {
              if (!(i_486540003 < L_486540004)) break Label5;
                it_1124080643 = items_1124080609[chckIndx(i_486540003, 0, (items_1124080609).length - 1)];
                resultHEX60gensym270_1124080639[chckIndx(iHEX60gensym270_1124080632, 0, (resultHEX60gensym270_1124080639).length - 1)] = nimCopy(null, (makeNimstrLit("<li>") || []).concat(it_1124080643 || [],makeNimstrLit("</li>") || []), NTI33554439);
                iHEX60gensym270_1124080632 = addInt(iHEX60gensym270_1124080632, 1);
                i_486540003 = addInt(i_486540003, 1);
                if (!(((items_1124080609).length == L_486540004))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
      } while (false);
      Temporary1 = (makeNimstrLit("<ul>") || []).concat(nsuJoinSep(resultHEX60gensym270_1124080639, []) || [],makeNimstrLit("</ul>") || []);
      break;
    case 1:
      Label6: do {
        var iHEX60gensym273_1124080669 = 0;
        var resultHEX60gensym273_1124080676 = newSeq_452985301(chckRange((items_1124080609).length, 0, 2147483647));
        Label7: do {
          var it_1124080680 = [];
          var i_486540008 = 0;
          var L_486540009 = (items_1124080609).length;
          Label8: do {
              Label9: while (true) {
              if (!(i_486540008 < L_486540009)) break Label9;
                it_1124080680 = items_1124080609[chckIndx(i_486540008, 0, (items_1124080609).length - 1)];
                resultHEX60gensym273_1124080676[chckIndx(iHEX60gensym273_1124080669, 0, (resultHEX60gensym273_1124080676).length - 1)] = nimCopy(null, nsuFormatSingleElem(makeNimstrLit("\\item $1"), it_1124080680), NTI33554439);
                iHEX60gensym273_1124080669 = addInt(iHEX60gensym273_1124080669, 1);
                i_486540008 = addInt(i_486540008, 1);
                if (!(((items_1124080609).length == L_486540009))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
      } while (false);
      Temporary1 = env_1879049235(makeNimstrLit("itemize"), nsuJoinSep(resultHEX60gensym273_1124080676, []));
      break;
    case 2:
      Label10: do {
        var iHEX60gensym276_1124080706 = 0;
        var resultHEX60gensym276_1124080713 = newSeq_452985301(chckRange((items_1124080609).length, 0, 2147483647));
        Label11: do {
          var it_1124080717 = [];
          var i_486540013 = 0;
          var L_486540014 = (items_1124080609).length;
          Label12: do {
              Label13: while (true) {
              if (!(i_486540013 < L_486540014)) break Label13;
                it_1124080717 = items_1124080609[chckIndx(i_486540013, 0, (items_1124080609).length - 1)];
                resultHEX60gensym276_1124080713[chckIndx(iHEX60gensym276_1124080706, 0, (resultHEX60gensym276_1124080713).length - 1)] = nimCopy(null, nsuFormatSingleElem(makeNimstrLit("* $1"), it_1124080717), NTI33554439);
                iHEX60gensym276_1124080706 = addInt(iHEX60gensym276_1124080706, 1);
                i_486540013 = addInt(i_486540013, 1);
                if (!(((items_1124080609).length == L_486540014))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
      } while (false);
      Temporary1 = nsuFormatSingleElem(makeNimstrLit("\x0A$1\x0A"), nsuJoinSep(resultHEX60gensym276_1124080713, makeNimstrLit("\x0A")));
      break;
    }
    result_1124080610 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124080610;

}
    
function HEX3Aanonymous_1124080727(arg_1124080728) {
      var result_1124080729 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124080607 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("list"), arg_1124080728, [HEX2A_1207959696(1)]);
        result_1124080729 = nimCopy(result_1124080729, {typ: 1, str: listCmd_1124080608(to_1124078354(vals_1124080607[chckIndx(0, 0, (vals_1124080607).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124080729;

    }

function listDirsCmd_1124080786(arg_1124080787) {
  var result_1124080788 = [];

    raiseException({message: makeNimstrLit("The list-dirs command is not available when using JavaScript"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    result_1124080788 = nimCopy(null, [], NTI1124078973);

  return result_1124080788;

}
    
function HEX3Aanonymous_1124080798(arg_1124080799) {
      var result_1124080800 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("list-dirs")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124080785 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("list-dirs"), arg_1124080799, [HEX21_1207959672(0)]);
        result_1124080800 = nimCopy(result_1124080800, {typ: 2, list: listDirsCmd_1124080786(to_1862271050(vals_1124080785[chckIndx(0, 0, (vals_1124080785).length - 1)])), str: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124080800;

    }

function listFilesCmd_1124080856(arg_1124080857) {
  var result_1124080858 = [];

    raiseException({message: makeNimstrLit("The list-files command is not available when using JavaScript"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    result_1124080858 = nimCopy(null, [], NTI1124079026);

  return result_1124080858;

}
    
function HEX3Aanonymous_1124080868(arg_1124080869) {
      var result_1124080870 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("list-files")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124080855 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("list-files"), arg_1124080869, [HEX21_1207959672(0)]);
        result_1124080870 = nimCopy(result_1124080870, {typ: 2, list: listFilesCmd_1124080856(to_1862271050(vals_1124080855[chckIndx(0, 0, (vals_1124080855).length - 1)])), str: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124080870;

    }

function matextCmd_1124080926(arg_1124080927) {
    var Temporary1;
    var Temporary3;
    var Temporary4;

  var result_1124080928 = [];

++excHandler;
    Temporary3 = framePtr;
    try {
    Temporary1 = matext_1962934274(arg_1124080927, false);
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
    framePtr = Temporary3;
    if (lastJSError && (isObj(lastJSError.m_type, NTI33555125))) {
    raiseException({message: nsuFormatSingleElem(makeNimstrLit("Error when parsing math: $1"), arg_1124080927), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    }
    else {
    	reraiseException();
    }
    lastJSError = prevJSError;
    } finally {
    framePtr = Temporary3;
    }
    var math_1124080929 = nimCopy(null, Temporary1, NTI33554439);
    switch (doc_1124073504.target) {
    case 0:
      Temporary4 = (makeNimstrLit("<pre class=\"xd-matext\">") || []).concat(math_1124080929 || [],makeNimstrLit("</pre>") || []);
      break;
    case 1:
      Temporary4 = (env_1879049235(makeNimstrLit("verbatim"), math_1124080929) || []).concat(makeNimstrLit("\x0A") || []);
      break;
    case 2:
      Temporary4 = nsuFormatSingleElem(makeNimstrLit("\x0A```\x0A{$1}\x0A```\x0A"), math_1124080929);
      break;
    }
    result_1124080928 = nimCopy(null, Temporary4, NTI33554439);

  return result_1124080928;

}
    
function HEX3Aanonymous_1124080935(arg_1124080936) {
      var result_1124080937 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("matext")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124080925 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("matext"), arg_1124080936, [HEX21_1207959672(0)]);
        result_1124080937 = nimCopy(result_1124080937, {typ: 1, str: matextCmd_1124080926(to_1862271050(vals_1124080925[chckIndx(0, 0, (vals_1124080925).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124080937;

    }

function msCmd_1124080993(arg_1124080994) {
    var Temporary1;

  var result_1124080995 = [];

    switch (doc_1124073504.target) {
    case 0:
      Temporary1 = (makeNimstrLit("<code>") || []).concat(arg_1124080994 || [],makeNimstrLit("</code>") || []);
      break;
    case 1:
      Temporary1 = HEX7BHEX7D_1879049227(makeNimstrLit("texttt"), arg_1124080994);
      break;
    case 2:
      Temporary1 = nsuFormatSingleElem(makeNimstrLit("\x0A```\x0A{$1}\x0A```\x0A"), arg_1124080994);
      break;
    }
    result_1124080995 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124080995;

}
    
function HEX3Aanonymous_1124081001(arg_1124081002) {
      var result_1124081003 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124080992 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("ms"), arg_1124081002, [HEX21_1207959672(1)]);
        result_1124081003 = nimCopy(result_1124081003, {typ: 1, str: msCmd_1124080993(to_1862271050(vals_1124080992[chckIndx(0, 0, (vals_1124080992).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124081003;

    }

function orderedListCmd_1124081059(items_1124081060) {
    var Temporary1;

  var result_1124081061 = [];

    switch (doc_1124073504.target) {
    case 0:
      Label2: do {
        var iHEX60gensym301_1124081083 = 0;
        var resultHEX60gensym301_1124081090 = newSeq_452985301(chckRange((items_1124081060).length, 0, 2147483647));
        Label3: do {
          var it_1124081094 = [];
          var i_486540023 = 0;
          var L_486540024 = (items_1124081060).length;
          Label4: do {
              Label5: while (true) {
              if (!(i_486540023 < L_486540024)) break Label5;
                it_1124081094 = items_1124081060[chckIndx(i_486540023, 0, (items_1124081060).length - 1)];
                resultHEX60gensym301_1124081090[chckIndx(iHEX60gensym301_1124081083, 0, (resultHEX60gensym301_1124081090).length - 1)] = nimCopy(null, (makeNimstrLit("<li>") || []).concat(it_1124081094 || [],makeNimstrLit("</li>") || []), NTI33554439);
                iHEX60gensym301_1124081083 = addInt(iHEX60gensym301_1124081083, 1);
                i_486540023 = addInt(i_486540023, 1);
                if (!(((items_1124081060).length == L_486540024))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
      } while (false);
      Temporary1 = (makeNimstrLit("<ol>") || []).concat(nsuJoinSep(resultHEX60gensym301_1124081090, []) || [],makeNimstrLit("</ol>") || []);
      break;
    case 1:
      Label6: do {
        var iHEX60gensym304_1124081120 = 0;
        var resultHEX60gensym304_1124081127 = newSeq_452985301(chckRange((items_1124081060).length, 0, 2147483647));
        Label7: do {
          var it_1124081131 = [];
          var i_486540028 = 0;
          var L_486540029 = (items_1124081060).length;
          Label8: do {
              Label9: while (true) {
              if (!(i_486540028 < L_486540029)) break Label9;
                it_1124081131 = items_1124081060[chckIndx(i_486540028, 0, (items_1124081060).length - 1)];
                resultHEX60gensym304_1124081127[chckIndx(iHEX60gensym304_1124081120, 0, (resultHEX60gensym304_1124081127).length - 1)] = nimCopy(null, nsuFormatSingleElem(makeNimstrLit("\\item $1"), it_1124081131), NTI33554439);
                iHEX60gensym304_1124081120 = addInt(iHEX60gensym304_1124081120, 1);
                i_486540028 = addInt(i_486540028, 1);
                if (!(((items_1124081060).length == L_486540029))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
      } while (false);
      Temporary1 = env_1879049235(makeNimstrLit("enumerate"), nsuJoinSep(resultHEX60gensym304_1124081127, []));
      break;
    case 2:
      Label10: do {
        var iHEX60gensym307_1124081157 = 0;
        var resultHEX60gensym307_1124081164 = newSeq_452985301(chckRange((items_1124081060).length, 0, 2147483647));
        Label11: do {
          var it_1124081168 = [];
          var i_486540033 = 0;
          var L_486540034 = (items_1124081060).length;
          Label12: do {
              Label13: while (true) {
              if (!(i_486540033 < L_486540034)) break Label13;
                it_1124081168 = items_1124081060[chckIndx(i_486540033, 0, (items_1124081060).length - 1)];
                resultHEX60gensym307_1124081164[chckIndx(iHEX60gensym307_1124081157, 0, (resultHEX60gensym307_1124081164).length - 1)] = nimCopy(null, nsuFormatSingleElem(makeNimstrLit("* $1"), it_1124081168), NTI33554439);
                iHEX60gensym307_1124081157 = addInt(iHEX60gensym307_1124081157, 1);
                i_486540033 = addInt(i_486540033, 1);
                if (!(((items_1124081060).length == L_486540034))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
      } while (false);
      Temporary1 = nsuFormatSingleElem(makeNimstrLit("\x0A$1\x0A"), nsuJoinSep(resultHEX60gensym307_1124081164, makeNimstrLit("\x0A")));
      break;
    }
    result_1124081061 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124081061;

}
    
function HEX3Aanonymous_1124081178(arg_1124081179) {
      var result_1124081180 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124081058 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("ordered-list"), arg_1124081179, [HEX2A_1207959696(1)]);
        result_1124081180 = nimCopy(result_1124081180, {typ: 1, str: orderedListCmd_1124081059(to_1124078354(vals_1124081058[chckIndx(0, 0, (vals_1124081058).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124081180;

    }

function pCmd_1124081237(arg_1124081238) {
    var Temporary1;

  var result_1124081239 = [];

    switch (doc_1124073504.target) {
    case 0:
      Temporary1 = (makeNimstrLit("<p>") || []).concat(arg_1124081238 || [],makeNimstrLit("</p>") || []);
      break;
    case 1:
      Temporary1 = (makeNimstrLit("\\par ") || []).concat(arg_1124081238 || []);
      break;
    case 2:
      Temporary1 = nsuFormatSingleElem(makeNimstrLit("\x0A\x0A$1"), arg_1124081238);
      break;
    }
    result_1124081239 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124081239;

}
    
function HEX3Aanonymous_1124081245(arg_1124081246) {
      var result_1124081247 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124081236 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("p"), arg_1124081246, [HEX21_1207959672(1)]);
        result_1124081247 = nimCopy(result_1124081247, {typ: 1, str: pCmd_1124081237(to_1862271050(vals_1124081236[chckIndx(0, 0, (vals_1124081236).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124081247;

    }

function passCmd_1124081303(arg_1124081304) {
  var result_1124081305 = [];

    result_1124081305 = nimCopy(null, arg_1124081304, NTI33554439);

  return result_1124081305;

}
    
function HEX3Aanonymous_1124081311(arg_1124081312) {
      var result_1124081313 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("pass")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124081302 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("pass"), arg_1124081312, [HEX21_1207959672(0)]);
        result_1124081313 = nimCopy(result_1124081313, {typ: 1, str: passCmd_1124081303(to_1862271050(vals_1124081302[chckIndx(0, 0, (vals_1124081302).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124081313;

    }

function passRawCmd_1124081369(arg_1124081370) {
  var result_1124081371 = [];

    result_1124081371 = nimCopy(null, arg_1124081370, NTI33554439);

  return result_1124081371;

}
    
function HEX3Aanonymous_1124081377(arg_1124081378) {
      var result_1124081379 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("pass-raw")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124081368 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("pass-raw"), arg_1124081378, [{kind: 3, base: 0}]);
        result_1124081379 = nimCopy(result_1124081379, {typ: 1, str: passRawCmd_1124081369(to_1862271050(vals_1124081368[chckIndx(0, 0, (vals_1124081368).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124081379;

    }

function proofCmd_1124081443(thNameHEX60gensym320_1124081445, contentHEX60gensym320_1124081446) {
    
function HEX3Aanonymous_1124081459() {
      var result_1124081460 = 0;

      BeforeRet: do {
        Label1: do {
          var iHEX60gensym327_1124081469 = 0;
          var colontmp__486540388 = 0;
          colontmp__486540388 = subInt((doc_1124073504.stack).length, 1);
          var res_486540389 = colontmp__486540388;
          Label2: do {
              Label3: while (true) {
              if (!(0 <= res_486540389)) break Label3;
                iHEX60gensym327_1124081469 = res_486540389;
                var frameHEX60gensym327_1124081470 = nimCopy(null, doc_1124073504.stack[chckIndx(iHEX60gensym327_1124081469, 0, (doc_1124073504.stack).length - 1)], NTI1207959561);
                if (isSome_1124074069(frameHEX60gensym327_1124081470.lang)) {
                result_1124081460 = get_1124074086(frameHEX60gensym327_1124081470.lang);
                break BeforeRet;
                }
                
                res_486540389 = subInt(res_486540389, 1);
              }
          } while (false);
        } while (false);
      } while (false);

      return result_1124081460;

    }
    var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;

  var result_1124081447 = [];

    HEX5BHEX5D_1912602936(doc_1124073504.stack, 1).commands = nimCopy(HEX5BHEX5D_1912602936(doc_1124073504.stack, 1).commands, proofCommands_1946161327(doc_1124073504), NTI1207959603);
    var contentHEX60gensym320_1124081456 = renderStr_1308623254(doc_1124073504, contentHEX60gensym320_1124081446);
    var wordHEX60gensym320_1124081493 = translate_1224736808(6, HEX3Aanonymous_1124081459());
    switch (doc_1124073504.target) {
    case 0:
      var Temporary2 = doc_1124073504;
      if (ConstSet377[Temporary2.target]===undefined) { raiseFieldError2(makeNimstrLit("field \'addToStyle\' is not accessible for type \'Document\' using \'target = "), reprDiscriminant(Temporary2.target, NTI1207959555)); }
      incl_1946159723(Temporary2.addToStyle, makeNimstrLit(".xd-theorem-like{margin:1rem 0}.xd-theorem-like>p{margin:0.5rem 0}"));
      var fmtRes_1124081517 = mnewString(0);
      fmtRes_1124081517.push.apply(fmtRes_1124081517, makeNimstrLit("xd-theorem-like xd-$1"));;
      if (isSome_1912602931(thNameHEX60gensym320_1124081445)) {
      Temporary3 = nsuFormatOpenArray(makeNimstrLit("$1 ($2)."), [nimCopy(null, wordHEX60gensym320_1124081493, NTI33554439), nimCopy(null, get_1912602965(thNameHEX60gensym320_1124081445), NTI33554439)]);
      }
      else {
      Temporary3 = nsuFormatOpenArray(makeNimstrLit("$1."), [nimCopy(null, wordHEX60gensym320_1124081493, NTI33554439)]);
      }
      
      Temporary1 = (makeNimstrLit("<div class=\"") || []).concat(nsuFormatSingleElem(fmtRes_1124081517, makeNimstrLit("proof")) || [],makeNimstrLit("\"><strong>") || [],Temporary3 || [],makeNimstrLit("</strong> ") || [],nsuFormatSingleElem(makeNimstrLit("$1"), contentHEX60gensym320_1124081456) || [],makeNimstrLit("</div>") || []);
      break;
    case 1:
      incl_1946159723(doc_1124073504.addToHead, HEX7BHEX7D_1879049227(makeNimstrLit("usepackage"), makeNimstrLit("amsthm")));
      incl_1946159723(doc_1124073504.addToHead, (HEX7BHEX7D_1879049227(makeNimstrLit("theoremstyle"), makeNimstrLit("definition")) || []).concat(HEX7BHEX7D_1879049227(HEX7BHEX7D_1879049227(makeNimstrLit("newtheorem*"), makeNimstrLit("XDproof")), wordHEX60gensym320_1124081493) || []));
      Temporary1 = env_1879049235(makeNimstrLit("XDproof"), nsuFormatSingleElem(makeNimstrLit("$1"), contentHEX60gensym320_1124081456));
      break;
    case 2:
      if (isSome_1912602931(thNameHEX60gensym320_1124081445)) {
      Temporary4 = nsuFormatOpenArray(makeNimstrLit("$1 ($2)"), [nimCopy(null, wordHEX60gensym320_1124081493, NTI33554439), nimCopy(null, get_1912602965(thNameHEX60gensym320_1124081445), NTI33554439)]);
      }
      else {
      Temporary4 = nsuFormatOpenArray(makeNimstrLit("$1"), [nimCopy(null, wordHEX60gensym320_1124081493, NTI33554439)]);
      }
      
      Temporary1 = nsuFormatOpenArray(makeNimstrLit("\x0A\x0A$1. $2"), [nimCopy(null, Temporary4, NTI33554439), nimCopy(null, contentHEX60gensym320_1124081456, NTI33554439)]);
      break;
    }
    result_1124081447 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124081447;

}
    
function HEX3Aanonymous_1124081613(arg_1124081614) {
      var result_1124081615 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124081442 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("proof"), arg_1124081614, [HEX3F_1207959693(1), nimCopy(null, Raw_1207959699, NTI1207959559)]);
        result_1124081615 = nimCopy(result_1124081615, {typ: 1, str: proofCmd_1124081443(to_1912603022(vals_1124081442[chckIndx(0, 0, (vals_1124081442).length - 1)]), to_1862271050(vals_1124081442[chckIndx(1, 0, (vals_1124081442).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124081615;

    }

function propsCmd_1124081681(items_1124081682) {
    var Temporary1;

  var result_1124081683 = [];

    switch (doc_1124073504.target) {
    case 0:
      Label2: do {
        var iHEX60gensym331_1124081705 = 0;
        var resultHEX60gensym331_1124081712 = newSeq_452985301(chckRange((items_1124081682).length, 0, 2147483647));
        Label3: do {
          var it_1124081716 = [];
          var i_486540043 = 0;
          var L_486540044 = (items_1124081682).length;
          Label4: do {
              Label5: while (true) {
              if (!(i_486540043 < L_486540044)) break Label5;
                it_1124081716 = items_1124081682[chckIndx(i_486540043, 0, (items_1124081682).length - 1)];
                resultHEX60gensym331_1124081712[chckIndx(iHEX60gensym331_1124081705, 0, (resultHEX60gensym331_1124081712).length - 1)] = nimCopy(null, (makeNimstrLit("<li>") || []).concat(it_1124081716 || [],makeNimstrLit("</li>") || []), NTI33554439);
                iHEX60gensym331_1124081705 = addInt(iHEX60gensym331_1124081705, 1);
                i_486540043 = addInt(i_486540043, 1);
                if (!(((items_1124081682).length == L_486540044))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
      } while (false);
      Temporary1 = (makeNimstrLit("<ul>") || []).concat(nsuJoinSep(resultHEX60gensym331_1124081712, []) || [],makeNimstrLit("</ul>") || []);
      break;
    case 1:
      Label6: do {
        var iHEX60gensym334_1124081742 = 0;
        var resultHEX60gensym334_1124081749 = newSeq_452985301(chckRange((items_1124081682).length, 0, 2147483647));
        Label7: do {
          var it_1124081753 = [];
          var i_486540048 = 0;
          var L_486540049 = (items_1124081682).length;
          Label8: do {
              Label9: while (true) {
              if (!(i_486540048 < L_486540049)) break Label9;
                it_1124081753 = items_1124081682[chckIndx(i_486540048, 0, (items_1124081682).length - 1)];
                resultHEX60gensym334_1124081749[chckIndx(iHEX60gensym334_1124081742, 0, (resultHEX60gensym334_1124081749).length - 1)] = nimCopy(null, nsuFormatSingleElem(makeNimstrLit("\\item $1"), it_1124081753), NTI33554439);
                iHEX60gensym334_1124081742 = addInt(iHEX60gensym334_1124081742, 1);
                i_486540048 = addInt(i_486540048, 1);
                if (!(((items_1124081682).length == L_486540049))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
      } while (false);
      Temporary1 = env_1879049235(makeNimstrLit("itemize"), nsuJoinSep(resultHEX60gensym334_1124081749, []));
      break;
    case 2:
      Label10: do {
        var iHEX60gensym337_1124081779 = 0;
        var resultHEX60gensym337_1124081786 = newSeq_452985301(chckRange((items_1124081682).length, 0, 2147483647));
        Label11: do {
          var it_1124081790 = [];
          var i_486540053 = 0;
          var L_486540054 = (items_1124081682).length;
          Label12: do {
              Label13: while (true) {
              if (!(i_486540053 < L_486540054)) break Label13;
                it_1124081790 = items_1124081682[chckIndx(i_486540053, 0, (items_1124081682).length - 1)];
                resultHEX60gensym337_1124081786[chckIndx(iHEX60gensym337_1124081779, 0, (resultHEX60gensym337_1124081786).length - 1)] = nimCopy(null, nsuFormatSingleElem(makeNimstrLit("* $1"), it_1124081790), NTI33554439);
                iHEX60gensym337_1124081779 = addInt(iHEX60gensym337_1124081779, 1);
                i_486540053 = addInt(i_486540053, 1);
                if (!(((items_1124081682).length == L_486540054))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
      } while (false);
      Temporary1 = nsuFormatSingleElem(makeNimstrLit("\x0A$1\x0A"), nsuJoinSep(resultHEX60gensym337_1124081786, makeNimstrLit("\x0A")));
      break;
    }
    result_1124081683 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124081683;

}
    
function HEX3Aanonymous_1124081800(arg_1124081801) {
      var result_1124081802 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124081680 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("props"), arg_1124081801, [HEX2A_1207959696(1)]);
        result_1124081802 = nimCopy(result_1124081802, {typ: 1, str: propsCmd_1124081681(to_1124078354(vals_1124081680[chckIndx(0, 0, (vals_1124081680).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124081802;

    }

function rawCmd_1124081859(arg_1124081860) {
  var result_1124081861 = [];

    result_1124081861 = nimCopy(null, arg_1124081860, NTI33554439);

  return result_1124081861;

}
    
function HEX3Aanonymous_1124081867(arg_1124081868) {
      var result_1124081869 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124081858 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("raw"), arg_1124081868, [{kind: 3, base: 0}]);
        result_1124081869 = nimCopy(result_1124081869, {typ: 0, str: rawCmd_1124081859(to_1862271050(vals_1124081858[chckIndx(0, 0, (vals_1124081858).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124081869;

    }

function rawDedentCmd_1124081925(arg_1124081926) {
  var result_1124081927 = [];

    var HEX3Atmp_1124081928 = nsuStrip(arg_1124081926, true, true, ConstSet378);
    result_1124081927 = nimCopy(null, nsuDedent(HEX3Atmp_1124081928, indentation_654312625(HEX3Atmp_1124081928)), NTI33554439);

  return result_1124081927;

}
    
function HEX3Aanonymous_1124081934(arg_1124081935) {
      var result_1124081936 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124081924 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("raw<"), arg_1124081935, [{kind: 4, base: 0}]);
        result_1124081936 = nimCopy(result_1124081936, {typ: 0, str: rawDedentCmd_1124081925(to_1862271050(vals_1124081924[chckIndx(0, 0, (vals_1124081924).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124081936;

    }

function renderCmd_1124081992(arg_1124081993) {
  var result_1124081994 = [];

    result_1124081994 = nimCopy(null, renderStr_1308623254(doc_1124073504, arg_1124081993), NTI33554439);

  return result_1124081994;

}
    
function HEX3Aanonymous_1124082000(arg_1124082001) {
      var result_1124082002 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124081991 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("render"), arg_1124082001, [HEX21_1207959672(0)]);
        result_1124082002 = nimCopy(result_1124082002, {typ: 1, str: renderCmd_1124081992(to_1862271050(vals_1124081991[chckIndx(0, 0, (vals_1124081991).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124082002;

    }

function replaceSuffixCmd_1124082058(sub_1124082059, by_1124082060, str_1124082061) {
  var result_1124082062 = [];

    var str_1124082063 = [nimCopy(null, str_1124082061, NTI33554439)];
    if (nsuEndsWith(str_1124082063[0], sub_1124082059)) {
    nsuRemoveSuffixString(str_1124082063, 0, sub_1124082059);
    str_1124082063[0].push.apply(str_1124082063[0], by_1124082060);;
    }
    
    result_1124082062 = nimCopy(null, str_1124082063[0], NTI33554439);

  return result_1124082062;

}
    
function HEX3Aanonymous_1124082069(arg_1124082070) {
      var result_1124082071 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124082057 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("replace-suffix"), arg_1124082070, [HEX21_1207959672(0), HEX21_1207959672(0), HEX21_1207959672(0)]);
        result_1124082071 = nimCopy(result_1124082071, {typ: 0, str: replaceSuffixCmd_1124082058(to_1862271050(vals_1124082057[chckIndx(0, 0, (vals_1124082057).length - 1)]), to_1862271050(vals_1124082057[chckIndx(1, 0, (vals_1124082057).length - 1)]), to_1862271050(vals_1124082057[chckIndx(2, 0, (vals_1124082057).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124082071;

    }

function resetCmd_1124082135(key_1124082136) {
  var result_1124082137 = [];

    del_1124082178(doc_1124073504.settings, key_1124082136);
    result_1124082137 = nimCopy(null, [], NTI33554439);

  return result_1124082137;

}
    
function HEX3Aanonymous_1124082720(arg_1124082721) {
      var result_1124082722 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("reset")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124082134 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("reset"), arg_1124082721, [HEX21_1207959672(0)]);
        result_1124082722 = nimCopy(result_1124082722, {typ: 1, str: resetCmd_1124082135(to_1862271050(vals_1124082134[chckIndx(0, 0, (vals_1124082134).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124082722;

    }

function rowCmd_1124082778(entries_1124082779) {
    var Temporary4;

  var result_1124082780 = [];

      var resultHEX60gensym357_1124082782 = false;
      Label1: do {
        var it_1124082786 = ({args: ({data: [], counter: 0}), cmdArg: [], cmdName: [], commands: ({data: [], counter: 0}), lang: ({val: 0, has: false}), path: ({val: [], has: false})});
        var i_486540057 = 0;
        var L_486540058 = (doc_1124073504.stack).length;
        Label2: do {
            Label3: while (true) {
            if (!(i_486540057 < L_486540058)) break Label3;
              it_1124082786 = doc_1124073504.stack[chckIndx(i_486540057, 0, (doc_1124073504.stack).length - 1)];
              if (eqStrings(it_1124082786.cmdName, makeNimstrLit("table"))) {
              resultHEX60gensym357_1124082782 = true;
              break Label1;
              }
              
              i_486540057 = addInt(i_486540057, 1);
              if (!(((doc_1124073504.stack).length == L_486540058))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    if (!(resultHEX60gensym357_1124082782)) {
    raiseException({message: makeNimstrLit("The row command has to be inside a table command"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    }
    
    switch (doc_1124073504.target) {
    case 0:
      Label5: do {
        var iHEX60gensym359_1124082808 = 0;
        var resultHEX60gensym359_1124082815 = newSeq_452985301(chckRange((entries_1124082779).length, 0, 2147483647));
        Label6: do {
          var it_1124082819 = [];
          var i_486540067 = 0;
          var L_486540068 = (entries_1124082779).length;
          Label7: do {
              Label8: while (true) {
              if (!(i_486540067 < L_486540068)) break Label8;
                it_1124082819 = entries_1124082779[chckIndx(i_486540067, 0, (entries_1124082779).length - 1)];
                resultHEX60gensym359_1124082815[chckIndx(iHEX60gensym359_1124082808, 0, (resultHEX60gensym359_1124082815).length - 1)] = nimCopy(null, (makeNimstrLit("<td>") || []).concat(it_1124082819 || [],makeNimstrLit("</td>") || []), NTI33554439);
                iHEX60gensym359_1124082808 = addInt(iHEX60gensym359_1124082808, 1);
                i_486540067 = addInt(i_486540067, 1);
                if (!(((entries_1124082779).length == L_486540068))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
      } while (false);
      Temporary4 = (makeNimstrLit("<tr>") || []).concat(nsuJoinSep(resultHEX60gensym359_1124082815, []) || [],makeNimstrLit("</tr>") || []);
      break;
    case 1:
      Temporary4 = nsuFormatSingleElem(makeNimstrLit("$1\\\\"), nsuJoinSep(entries_1124082779, makeNimstrLit("&")));
      break;
    case 2:
      raiseException({message: makeNimstrLit("Tables are currently not supported in the Gemtext backend"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    }
    result_1124082780 = nimCopy(null, Temporary4, NTI33554439);

  return result_1124082780;

}
    
function HEX3Aanonymous_1124082829(arg_1124082830) {
      var result_1124082831 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124082777 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("row"), arg_1124082830, [HEX2A_1207959696(1)]);
        result_1124082831 = nimCopy(result_1124082831, {typ: 1, str: rowCmd_1124082778(to_1124078354(vals_1124082777[chckIndx(0, 0, (vals_1124082777).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124082831;

    }

function sectionCmd_1124082888(name_1124082890, content_1124082891) {
    var Temporary4;
      var Temporary5;
      var Temporary6;
      var Temporary7;
      var Temporary8;
      var Temporary9;
      var Temporary10;

  var result_1124082892 = [];

    var resultHEX60gensym367_1124082894 = 0;
    Label1: do {
      var it_1124082898 = ({args: ({data: [], counter: 0}), cmdArg: [], cmdName: [], commands: ({data: [], counter: 0}), lang: ({val: 0, has: false}), path: ({val: [], has: false})});
      var i_486540071 = 0;
      var L_486540072 = (doc_1124073504.stack).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_486540071 < L_486540072)) break Label3;
            it_1124082898 = doc_1124073504.stack[chckIndx(i_486540071, 0, (doc_1124073504.stack).length - 1)];
            if (eqStrings(it_1124082898.cmdName, makeNimstrLit("section"))) {
            resultHEX60gensym367_1124082894 = addInt(resultHEX60gensym367_1124082894, 1);
            }
            
            i_486540071 = addInt(i_486540071, 1);
            if (!(((doc_1124073504.stack).length == L_486540072))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    var depth_1124082903 = resultHEX60gensym367_1124082894;
    switch (doc_1124073504.target) {
    case 0:
      if (isSome_1912602931(name_1124082890)) {
      switch (depth_1124082903) {
      case 1:
        Temporary6 = makeNimstrLit("h2");
        break;
      case 2:
        Temporary6 = makeNimstrLit("h3");
        break;
      case 3:
        Temporary6 = makeNimstrLit("h4");
        break;
      case 4:
        Temporary6 = makeNimstrLit("h5");
        break;
      default: 
        Temporary6 = makeNimstrLit("h6");
        break;
      }
      var headingTag_1124082911 = nimCopy(null, Temporary6, NTI33554439);
      Temporary5 = (makeNimstrLit("<section>") || []).concat(nsuFormatOpenArray(makeNimstrLit("<$1 class=\"xd-section-heading\">$2</$1>$3"), [nimCopy(null, headingTag_1124082911, NTI33554439), nimCopy(null, get_1912602965(name_1124082890), NTI33554439), nimCopy(null, content_1124082891, NTI33554439)]) || [],makeNimstrLit("</section>") || []);
      }
      else {
      Temporary5 = (makeNimstrLit("<section>") || []).concat(content_1124082891 || [],makeNimstrLit("</section>") || []);
      }
      
      Temporary4 = Temporary5;
      break;
    case 1:
      switch (depth_1124082903) {
      case 1:
        Temporary7 = makeNimstrLit("section");
        break;
      case 2:
        Temporary7 = makeNimstrLit("subsection");
        break;
      case 3:
        Temporary7 = makeNimstrLit("subsubsection");
        break;
      default: 
        raiseException({message: makeNimstrLit("Sections can only be nested 3 levels deep in LaTeX"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        break;
      }
      var cmd_1124082927 = nimCopy(null, Temporary7, NTI33554439);
      if (isSome_1912602931(name_1124082890)) {
      Temporary8 = nsuFormatOpenArray(makeNimstrLit("\\$1*{$2}$3"), [nimCopy(null, cmd_1124082927, NTI33554439), nimCopy(null, get_1912602965(name_1124082890), NTI33554439), nimCopy(null, content_1124082891, NTI33554439)]);
      }
      else {
      Temporary8 = nsuFormatOpenArray(makeNimstrLit("\\$1*{}$2"), [nimCopy(null, cmd_1124082927, NTI33554439), nimCopy(null, content_1124082891, NTI33554439)]);
      }
      
      Temporary4 = Temporary8;
      break;
    case 2:
      if (isSome_1912602931(name_1124082890)) {
      switch (depth_1124082903) {
      case 1:
        Temporary10 = makeNimstrLit("## ");
        break;
      case 2:
        Temporary10 = makeNimstrLit("### ");
        break;
      default: 
        Temporary10 = [];
        break;
      }
      var prefix_1124082957 = nimCopy(null, Temporary10, NTI33554439);
      Temporary9 = nsuFormatOpenArray(makeNimstrLit("\x0A\x0A$1$2\x0A\x0A$3"), [nimCopy(null, prefix_1124082957, NTI33554439), nimCopy(null, get_1912602965(name_1124082890), NTI33554439), nimCopy(null, content_1124082891, NTI33554439)]);
      }
      else {
      Temporary9 = nsuFormatOpenArray(makeNimstrLit("\x0A\x0A$1"), [nimCopy(null, content_1124082891, NTI33554439)]);
      }
      
      Temporary4 = Temporary9;
      break;
    }
    result_1124082892 = nimCopy(null, Temporary4, NTI33554439);

  return result_1124082892;

}
    
function HEX3Aanonymous_1124082978(arg_1124082979) {
      var result_1124082980 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124082887 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("section"), arg_1124082979, [HEX3F_1207959693(1), HEX21_1207959672(1)]);
        result_1124082980 = nimCopy(result_1124082980, {typ: 1, str: sectionCmd_1124082888(to_1912603022(vals_1124082887[chckIndx(0, 0, (vals_1124082887).length - 1)]), to_1862271050(vals_1124082887[chckIndx(1, 0, (vals_1124082887).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124082980;

    }

function setCmd_1124083046(key_1124083047, val_1124083048) {
  var result_1124083049 = [];

    HEX5BHEX5DHEX3D_1493172312(doc_1124073504.settings, key_1124083047, val_1124083048);
    result_1124083049 = nimCopy(null, [], NTI33554439);

  return result_1124083049;

}
    
function HEX3Aanonymous_1124083101(arg_1124083102) {
      var result_1124083103 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("set")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124083045 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("set"), arg_1124083102, [HEX21_1207959672(0), HEX21_1207959672(0)]);
        result_1124083103 = nimCopy(result_1124083103, {typ: 1, str: setCmd_1124083046(to_1862271050(vals_1124083045[chckIndx(0, 0, (vals_1124083045).length - 1)]), to_1862271050(vals_1124083045[chckIndx(1, 0, (vals_1124083045).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124083103;

    }

function setDocLangCmd_1124083163(arg_1124083164) {
    var Temporary1;

  var result_1124083165 = [];

    switch (toJSStr(nsuToLowerAsciiStr(arg_1124083164))) {
    case "en":
    case "english":
      Temporary1 = 0;
      break;
    case "cs":
    case "cz":
    case "czech":
      Temporary1 = 1;
      break;
    default: 
      raiseException({message: nsuFormatSingleElem(makeNimstrLit("Unknown language: $1"), arg_1124083164), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    }
    doc_1124073504.stack[chckIndx(0, 0, (doc_1124073504.stack).length - 1)].lang = nimCopy(doc_1124073504.stack[chckIndx(0, 0, (doc_1124073504.stack).length - 1)].lang, some_1124078893(Temporary1), NTI1207959616);
    result_1124083165 = nimCopy(null, [], NTI33554439);

  return result_1124083165;

}
    
function HEX3Aanonymous_1124083174(arg_1124083175) {
      var result_1124083176 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124083162 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("set-doc-lang"), arg_1124083175, [HEX21_1207959672(0)]);
        result_1124083176 = nimCopy(result_1124083176, {typ: 1, str: setDocLangCmd_1124083163(to_1862271050(vals_1124083162[chckIndx(0, 0, (vals_1124083162).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124083176;

    }

function setSyntaxHighlightingThemeCmd_1124083232(theme_1124083233) {
  var result_1124083234 = [];

    xidocWarning_1191182346(makeNimstrLit("[set-syntax-highlighting-theme] is deprecated. Use [set syntax-highlighting-theme] instead."));
    result_1124083234 = nimCopy(null, setCmd_1124083046(makeNimstrLit("syntax-highlighting-theme"), theme_1124083233), NTI33554439);

  return result_1124083234;

}
    
function HEX3Aanonymous_1124083240(arg_1124083241) {
      var result_1124083242 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124083231 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("set-syntax-highlighting-theme"), arg_1124083241, [HEX21_1207959672(0)]);
        result_1124083242 = nimCopy(result_1124083242, {typ: 1, str: setSyntaxHighlightingThemeCmd_1124083232(to_1862271050(vals_1124083231[chckIndx(0, 0, (vals_1124083231).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124083242;

    }

function setTitleCmd_1124083298(arg_1124083299) {
  var result_1124083300 = [];

    switch (doc_1124073504.target) {
    case 0:
      incl_1946159723(doc_1124073504.addToHead, (makeNimstrLit("<title>") || []).concat(arg_1124083299 || [],makeNimstrLit("</title>") || []));
      break;
    case 1:
      incl_1946159723(doc_1124073504.addToHead, HEX7BHEX7D_1879049227(makeNimstrLit("title"), arg_1124083299));
      break;
    default: 
      break;
    }
    result_1124083300 = nimCopy(null, [], NTI33554439);

  return result_1124083300;

}
    
function HEX3Aanonymous_1124083352(arg_1124083353) {
      var result_1124083354 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124083297 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("set-title"), arg_1124083353, [HEX21_1207959672(0)]);
        result_1124083354 = nimCopy(result_1124083354, {typ: 1, str: setTitleCmd_1124083298(to_1862271050(vals_1124083297[chckIndx(0, 0, (vals_1124083297).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124083354;

    }

function showTitleCmd_1124083410(arg_1124083411) {
    var Temporary1;

  var result_1124083412 = [];

    switch (doc_1124073504.target) {
    case 0:
      Temporary1 = (makeNimstrLit("<h1>") || []).concat(arg_1124083411 || [],makeNimstrLit("</h1>") || []);
      break;
    case 1:
      Temporary1 = makeNimstrLit("\\maketitle");
      break;
    case 2:
      Temporary1 = nsuFormatSingleElem(makeNimstrLit("\x0A# $1\x0A\x0A"), arg_1124083411);
      break;
    }
    result_1124083412 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124083412;

}
    
function HEX3Aanonymous_1124083418(arg_1124083419) {
      var result_1124083420 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124083409 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("show-title"), arg_1124083419, [HEX21_1207959672(0)]);
        result_1124083420 = nimCopy(result_1124083420, {typ: 1, str: showTitleCmd_1124083410(to_1862271050(vals_1124083409[chckIndx(0, 0, (vals_1124083409).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124083420;

    }

function solutionCmd_1124083484(thNameHEX60gensym383_1124083486, contentHEX60gensym383_1124083487) {
    
function HEX3Aanonymous_1124083492() {
      var result_1124083493 = 0;

      BeforeRet: do {
        Label1: do {
          var iHEX60gensym388_1124083502 = 0;
          var colontmp__486540415 = 0;
          colontmp__486540415 = subInt((doc_1124073504.stack).length, 1);
          var res_486540416 = colontmp__486540415;
          Label2: do {
              Label3: while (true) {
              if (!(0 <= res_486540416)) break Label3;
                iHEX60gensym388_1124083502 = res_486540416;
                var frameHEX60gensym388_1124083503 = nimCopy(null, doc_1124073504.stack[chckIndx(iHEX60gensym388_1124083502, 0, (doc_1124073504.stack).length - 1)], NTI1207959561);
                if (isSome_1124074069(frameHEX60gensym388_1124083503.lang)) {
                result_1124083493 = get_1124074086(frameHEX60gensym388_1124083503.lang);
                break BeforeRet;
                }
                
                res_486540416 = subInt(res_486540416, 1);
              }
          } while (false);
        } while (false);
      } while (false);

      return result_1124083493;

    }
    var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;

  var result_1124083488 = [];

    var contentHEX60gensym383_1124083489 = renderStr_1308623254(doc_1124073504, contentHEX60gensym383_1124083487);
    var wordHEX60gensym383_1124083526 = translate_1224736808(8, HEX3Aanonymous_1124083492());
    switch (doc_1124073504.target) {
    case 0:
      var Temporary2 = doc_1124073504;
      if (ConstSet381[Temporary2.target]===undefined) { raiseFieldError2(makeNimstrLit("field \'addToStyle\' is not accessible for type \'Document\' using \'target = "), reprDiscriminant(Temporary2.target, NTI1207959555)); }
      incl_1946159723(Temporary2.addToStyle, makeNimstrLit(".xd-theorem-like{margin:1rem 0}.xd-theorem-like>p{margin:0.5rem 0}"));
      var fmtRes_1124083550 = mnewString(0);
      fmtRes_1124083550.push.apply(fmtRes_1124083550, makeNimstrLit("xd-theorem-like xd-$1"));;
      if (isSome_1912602931(thNameHEX60gensym383_1124083486)) {
      Temporary3 = nsuFormatOpenArray(makeNimstrLit("$1 ($2)."), [nimCopy(null, wordHEX60gensym383_1124083526, NTI33554439), nimCopy(null, get_1912602965(thNameHEX60gensym383_1124083486), NTI33554439)]);
      }
      else {
      Temporary3 = nsuFormatOpenArray(makeNimstrLit("$1."), [nimCopy(null, wordHEX60gensym383_1124083526, NTI33554439)]);
      }
      
      Temporary1 = (makeNimstrLit("<div class=\"") || []).concat(nsuFormatSingleElem(fmtRes_1124083550, makeNimstrLit("solution")) || [],makeNimstrLit("\"><strong>") || [],Temporary3 || [],makeNimstrLit("</strong> ") || [],nsuFormatSingleElem(makeNimstrLit("$1"), contentHEX60gensym383_1124083489) || [],makeNimstrLit("</div>") || []);
      break;
    case 1:
      incl_1946159723(doc_1124073504.addToHead, HEX7BHEX7D_1879049227(makeNimstrLit("usepackage"), makeNimstrLit("amsthm")));
      incl_1946159723(doc_1124073504.addToHead, (HEX7BHEX7D_1879049227(makeNimstrLit("theoremstyle"), makeNimstrLit("definition")) || []).concat(HEX7BHEX7D_1879049227(HEX7BHEX7D_1879049227(makeNimstrLit("newtheorem*"), makeNimstrLit("XDsolution")), wordHEX60gensym383_1124083526) || []));
      Temporary1 = env_1879049235(makeNimstrLit("XDsolution"), nsuFormatSingleElem(makeNimstrLit("$1"), contentHEX60gensym383_1124083489));
      break;
    case 2:
      if (isSome_1912602931(thNameHEX60gensym383_1124083486)) {
      Temporary4 = nsuFormatOpenArray(makeNimstrLit("$1 ($2)"), [nimCopy(null, wordHEX60gensym383_1124083526, NTI33554439), nimCopy(null, get_1912602965(thNameHEX60gensym383_1124083486), NTI33554439)]);
      }
      else {
      Temporary4 = nsuFormatOpenArray(makeNimstrLit("$1"), [nimCopy(null, wordHEX60gensym383_1124083526, NTI33554439)]);
      }
      
      Temporary1 = nsuFormatOpenArray(makeNimstrLit("\x0A\x0A$1. $2"), [nimCopy(null, Temporary4, NTI33554439), nimCopy(null, contentHEX60gensym383_1124083489, NTI33554439)]);
      break;
    }
    result_1124083488 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124083488;

}
    
function HEX3Aanonymous_1124083646(arg_1124083647) {
      var result_1124083648 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124083483 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("solution"), arg_1124083647, [HEX3F_1207959693(1), nimCopy(null, Raw_1207959699, NTI1207959559)]);
        result_1124083648 = nimCopy(result_1124083648, {typ: 1, str: solutionCmd_1124083484(to_1912603022(vals_1124083483[chckIndx(0, 0, (vals_1124083483).length - 1)]), to_1862271050(vals_1124083483[chckIndx(1, 0, (vals_1124083483).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124083648;

    }

function spaceCmd_1124083714() {
  var result_1124083715 = [];

    result_1124083715 = nimCopy(null, makeNimstrLit(" "), NTI33554439);

  return result_1124083715;

}
    
function HEX3Aanonymous_1124083721(arg_1124083722) {
      var result_1124083723 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124083713 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("space"), arg_1124083722, []);
        result_1124083723 = nimCopy(result_1124083723, {typ: 0, str: spaceCmd_1124083714(), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124083723;

    }

function spoilerCmd_1124083775(title_1124083776, content_1124083777) {
    var Temporary1;

  var result_1124083778 = [];

    switch (doc_1124073504.target) {
    case 0:
      Temporary1 = (makeNimstrLit("<details class=\"xd-spoiler\"><summary>") || []).concat(title_1124083776 || [],makeNimstrLit("</summary>") || [],content_1124083777 || [],makeNimstrLit("</details>") || []);
      break;
    case 1:
      raiseException({message: makeNimstrLit("The spoiler command is not supported in the LaTeX backend"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    case 2:
      raiseException({message: makeNimstrLit("The spoiler command is not supported in the Gemtext backend"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    }
    result_1124083778 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124083778;

}
    
function HEX3Aanonymous_1124083784(arg_1124083785) {
      var result_1124083786 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124083774 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("spoiler"), arg_1124083785, [HEX21_1207959672(1), HEX21_1207959672(1)]);
        result_1124083786 = nimCopy(result_1124083786, {typ: 1, str: spoilerCmd_1124083775(to_1862271050(vals_1124083774[chckIndx(0, 0, (vals_1124083774).length - 1)]), to_1862271050(vals_1124083774[chckIndx(1, 0, (vals_1124083774).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124083786;

    }

function spoilerSolutionCmd_1124083846(name_1124083848, content_1124083849) {
    
function HEX3Aanonymous_1124083853() {
      var result_1124083854 = 0;

      BeforeRet: do {
        Label1: do {
          var iHEX60gensym399_1124083863 = 0;
          var colontmp__486540419 = 0;
          colontmp__486540419 = subInt((doc_1124073504.stack).length, 1);
          var res_486540420 = colontmp__486540419;
          Label2: do {
              Label3: while (true) {
              if (!(0 <= res_486540420)) break Label3;
                iHEX60gensym399_1124083863 = res_486540420;
                var frameHEX60gensym399_1124083864 = nimCopy(null, doc_1124073504.stack[chckIndx(iHEX60gensym399_1124083863, 0, (doc_1124073504.stack).length - 1)], NTI1207959561);
                if (isSome_1124074069(frameHEX60gensym399_1124083864.lang)) {
                result_1124083854 = get_1124074086(frameHEX60gensym399_1124083864.lang);
                break BeforeRet;
                }
                
                res_486540420 = subInt(res_486540420, 1);
              }
          } while (false);
        } while (false);
      } while (false);

      return result_1124083854;

    }
    var Temporary1;
      var Temporary2;

  var result_1124083850 = [];

    var word_1124083887 = translate_1224736808(8, HEX3Aanonymous_1124083853());
    switch (doc_1124073504.target) {
    case 0:
      if (isSome_1912602931(name_1124083848)) {
      Temporary2 = nsuFormatOpenArray(makeNimstrLit("$1 ($2)"), [nimCopy(null, word_1124083887, NTI33554439), nimCopy(null, get_1912602965(name_1124083848), NTI33554439)]);
      }
      else {
      Temporary2 = nsuFormatOpenArray(makeNimstrLit("$1"), [nimCopy(null, word_1124083887, NTI33554439)]);
      }
      
      Temporary1 = (makeNimstrLit("<details class=\"xd-spoiler xd-theorem-like xd-solution\"><summary><strong>") || []).concat(Temporary2 || [],makeNimstrLit("</strong></summary>") || [],content_1124083849 || [],makeNimstrLit("</details>") || []);
      break;
    case 1:
      incl_1946159723(doc_1124073504.addToHead, HEX7BHEX7D_1879049227(makeNimstrLit("usepackage"), makeNimstrLit("amsthm")));
      incl_1946159723(doc_1124073504.addToHead, HEX7BHEX7D_1879049227(HEX7BHEX7D_1879049227(makeNimstrLit("newtheorem"), makeNimstrLit("XDspoilersolution")), word_1124083887));
      Temporary1 = env_1879049235(makeNimstrLit("XDspoilersolution"), content_1124083849);
      break;
    case 2:
      raiseException({message: makeNimstrLit("The spoiler-solution command is not supported in the Gemtext backend"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    }
    result_1124083850 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124083850;

}
    
function HEX3Aanonymous_1124083961(arg_1124083962) {
      var result_1124083963 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124083845 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("spoiler-solution"), arg_1124083962, [HEX3F_1207959693(1), HEX21_1207959672(1)]);
        result_1124083963 = nimCopy(result_1124083963, {typ: 1, str: spoilerSolutionCmd_1124083846(to_1912603022(vals_1124083845[chckIndx(0, 0, (vals_1124083845).length - 1)]), to_1862271050(vals_1124083845[chckIndx(1, 0, (vals_1124083845).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124083963;

    }

function styleCmd_1124084029(arg_1124084030) {
      var Temporary1;

  var result_1124084031 = [];

    switch (doc_1124073504.target) {
    case 0:
      HEX5BHEX5D_1912602936(doc_1124073504.stack, 1).commands = nimCopy(HEX5BHEX5D_1912602936(doc_1124073504.stack, 1).commands, cssCommands_1912602630(doc_1124073504), NTI1207959603);
      var Temporary1 = doc_1124073504;
      if (ConstSet382[Temporary1.target]===undefined) { raiseFieldError2(makeNimstrLit("field \'addToStyle\' is not accessible for type \'Document\' using \'target = "), reprDiscriminant(Temporary1.target, NTI1207959555)); }
      incl_1946159723(Temporary1.addToStyle, expandStr_1308623250(doc_1124073504, arg_1124084030));
      break;
    default: 
      break;
    }
    result_1124084031 = nimCopy(null, [], NTI33554439);

  return result_1124084031;

}
    
function HEX3Aanonymous_1124084064(arg_1124084065) {
      var result_1124084066 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        if (doc_1124073504.safeMode) {
        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("style")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
        }
        
        var vals_1124084028 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("style"), arg_1124084065, [{kind: 3, base: 0}]);
        result_1124084066 = nimCopy(result_1124084066, {typ: 1, str: styleCmd_1124084029(to_1862271050(vals_1124084028[chckIndx(0, 0, (vals_1124084028).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124084066;

    }

function tableCmd_1124084122(spec_1124084124, content_1124084125) {
    var Temporary1;

  var result_1124084126 = [];

    switch (doc_1124073504.target) {
    case 0:
      Temporary1 = (makeNimstrLit("<table>") || []).concat(content_1124084125 || [],makeNimstrLit("</table>") || []);
      break;
    case 1:
      if (isNone_1191182386(spec_1124084124)) {
      raiseException({message: makeNimstrLit("Tables in LaTeX currently require a spec"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      }
      
      incl_1946159723(doc_1124073504.addToHead, HEX7BHEX7D_1879049227(makeNimstrLit("usepackage"), makeNimstrLit("booktabs")));
      Temporary1 = env_1879049235(makeNimstrLit("table"), (makeNimstrLit("{") || []).concat(get_1912602965(spec_1124084124) || [],makeNimstrLit("}\\toprule ") || [],content_1124084125 || [],makeNimstrLit("\\bottomrule") || []));
      break;
    case 2:
      raiseException({message: makeNimstrLit("Tables are currently not supported in the Gemtext backend"), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
      break;
    }
    result_1124084126 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124084126;

}
    
function HEX3Aanonymous_1124084177(arg_1124084178) {
      var result_1124084179 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124084121 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("table"), arg_1124084178, [HEX3F_1207959693(0), HEX21_1207959672(1)]);
        result_1124084179 = nimCopy(result_1124084179, {typ: 1, str: tableCmd_1124084122(to_1912603022(vals_1124084121[chckIndx(0, 0, (vals_1124084121).length - 1)]), to_1862271050(vals_1124084121[chckIndx(1, 0, (vals_1124084121).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124084179;

    }

function templateArgCmd_1124084245(arg_1124084246) {
    var Temporary1;
    var Temporary3;
    var Temporary4;

  var result_1124084247 = [];

++excHandler;
    Temporary3 = framePtr;
    try {
    Temporary1 = (Temporary4 = HEX5BHEX5D_1845494184(doc_1124073504.templateArgs, arg_1124084246), Temporary4)[0][Temporary4[1]];
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
    framePtr = Temporary3;
    if (lastJSError && (isObj(lastJSError.m_type, NTI33555126))) {
    var fmtRes_1124084310 = [mnewString(0)];
    fmtRes_1124084310[0].push.apply(fmtRes_1124084310[0], makeNimstrLit("Template argument not found: "));;
    formatValue_1275068578(fmtRes_1124084310, 0, arg_1124084246, []);
    raiseException({message: nimCopy(null, fmtRes_1124084310[0], NTI33554439), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    }
    else {
    	reraiseException();
    }
    lastJSError = prevJSError;
    } finally {
    framePtr = Temporary3;
    }
    result_1124084247 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124084247;

}
    
function HEX3Aanonymous_1124084316(arg_1124084317) {
      var result_1124084318 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124084244 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("template-arg"), arg_1124084317, [HEX21_1207959672(1)]);
        result_1124084318 = nimCopy(result_1124084318, {typ: 1, str: templateArgCmd_1124084245(to_1862271050(vals_1124084244[chckIndx(0, 0, (vals_1124084244).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124084318;

    }

function termCmd_1124084374(arg_1124084375) {
    var Temporary1;

  var result_1124084376 = [];

    switch (doc_1124073504.target) {
    case 0:
      Temporary1 = (makeNimstrLit("<dfn>") || []).concat(arg_1124084375 || [],makeNimstrLit("</dfn>") || []);
      break;
    case 1:
      Temporary1 = HEX7BHEX7D_1879049227(makeNimstrLit("textit"), arg_1124084375);
      break;
    case 2:
      Temporary1 = arg_1124084375;
      break;
    }
    result_1124084376 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124084376;

}
    
function HEX3Aanonymous_1124084382(arg_1124084383) {
      var result_1124084384 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124084373 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("term"), arg_1124084383, [HEX21_1207959672(1)]);
        result_1124084384 = nimCopy(result_1124084384, {typ: 1, str: termCmd_1124084374(to_1862271050(vals_1124084373[chckIndx(0, 0, (vals_1124084373).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124084384;

    }

function theoremCmd_1124084448(thNameHEX60gensym417_1124084450, contentHEX60gensym417_1124084451) {
    
function HEX3Aanonymous_1124084456() {
      var result_1124084457 = 0;

      BeforeRet: do {
        Label1: do {
          var iHEX60gensym422_1124084466 = 0;
          var colontmp__486540423 = 0;
          colontmp__486540423 = subInt((doc_1124073504.stack).length, 1);
          var res_486540424 = colontmp__486540423;
          Label2: do {
              Label3: while (true) {
              if (!(0 <= res_486540424)) break Label3;
                iHEX60gensym422_1124084466 = res_486540424;
                var frameHEX60gensym422_1124084467 = nimCopy(null, doc_1124073504.stack[chckIndx(iHEX60gensym422_1124084466, 0, (doc_1124073504.stack).length - 1)], NTI1207959561);
                if (isSome_1124074069(frameHEX60gensym422_1124084467.lang)) {
                result_1124084457 = get_1124074086(frameHEX60gensym422_1124084467.lang);
                break BeforeRet;
                }
                
                res_486540424 = subInt(res_486540424, 1);
              }
          } while (false);
        } while (false);
      } while (false);

      return result_1124084457;

    }
    var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;

  var result_1124084452 = [];

    var contentHEX60gensym417_1124084453 = renderStr_1308623254(doc_1124073504, contentHEX60gensym417_1124084451);
    var wordHEX60gensym417_1124084490 = translate_1224736808(9, HEX3Aanonymous_1124084456());
    switch (doc_1124073504.target) {
    case 0:
      var Temporary2 = doc_1124073504;
      if (ConstSet383[Temporary2.target]===undefined) { raiseFieldError2(makeNimstrLit("field \'addToStyle\' is not accessible for type \'Document\' using \'target = "), reprDiscriminant(Temporary2.target, NTI1207959555)); }
      incl_1946159723(Temporary2.addToStyle, makeNimstrLit(".xd-theorem-like{margin:1rem 0}.xd-theorem-like>p{margin:0.5rem 0}"));
      var fmtRes_1124084514 = mnewString(0);
      fmtRes_1124084514.push.apply(fmtRes_1124084514, makeNimstrLit("xd-theorem-like xd-$1"));;
      if (isSome_1912602931(thNameHEX60gensym417_1124084450)) {
      Temporary3 = nsuFormatOpenArray(makeNimstrLit("$1 ($2)."), [nimCopy(null, wordHEX60gensym417_1124084490, NTI33554439), nimCopy(null, get_1912602965(thNameHEX60gensym417_1124084450), NTI33554439)]);
      }
      else {
      Temporary3 = nsuFormatOpenArray(makeNimstrLit("$1."), [nimCopy(null, wordHEX60gensym417_1124084490, NTI33554439)]);
      }
      
      Temporary1 = (makeNimstrLit("<div class=\"") || []).concat(nsuFormatSingleElem(fmtRes_1124084514, makeNimstrLit("theorem")) || [],makeNimstrLit("\"><strong>") || [],Temporary3 || [],makeNimstrLit("</strong> ") || [],nsuFormatSingleElem(makeNimstrLit("$1"), contentHEX60gensym417_1124084453) || [],makeNimstrLit("</div>") || []);
      break;
    case 1:
      incl_1946159723(doc_1124073504.addToHead, HEX7BHEX7D_1879049227(makeNimstrLit("usepackage"), makeNimstrLit("amsthm")));
      incl_1946159723(doc_1124073504.addToHead, (HEX7BHEX7D_1879049227(makeNimstrLit("theoremstyle"), makeNimstrLit("definition")) || []).concat(HEX7BHEX7D_1879049227(HEX7BHEX7D_1879049227(makeNimstrLit("newtheorem*"), makeNimstrLit("XDtheorem")), wordHEX60gensym417_1124084490) || []));
      Temporary1 = env_1879049235(makeNimstrLit("XDtheorem"), nsuFormatSingleElem(makeNimstrLit("$1"), contentHEX60gensym417_1124084453));
      break;
    case 2:
      if (isSome_1912602931(thNameHEX60gensym417_1124084450)) {
      Temporary4 = nsuFormatOpenArray(makeNimstrLit("$1 ($2)"), [nimCopy(null, wordHEX60gensym417_1124084490, NTI33554439), nimCopy(null, get_1912602965(thNameHEX60gensym417_1124084450), NTI33554439)]);
      }
      else {
      Temporary4 = nsuFormatOpenArray(makeNimstrLit("$1"), [nimCopy(null, wordHEX60gensym417_1124084490, NTI33554439)]);
      }
      
      Temporary1 = nsuFormatOpenArray(makeNimstrLit("\x0A\x0A$1. $2"), [nimCopy(null, Temporary4, NTI33554439), nimCopy(null, contentHEX60gensym417_1124084453, NTI33554439)]);
      break;
    }
    result_1124084452 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124084452;

}
    
function HEX3Aanonymous_1124084610(arg_1124084611) {
      var result_1124084612 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124084447 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("theorem"), arg_1124084611, [HEX3F_1207959693(1), nimCopy(null, Raw_1207959699, NTI1207959559)]);
        result_1124084612 = nimCopy(result_1124084612, {typ: 1, str: theoremCmd_1124084448(to_1912603022(vals_1124084447[chckIndx(0, 0, (vals_1124084447).length - 1)]), to_1862271050(vals_1124084447[chckIndx(1, 0, (vals_1124084447).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124084612;

    }

function titleCmd_1124084678(title_1124084679, author_1124084681) {
    var Temporary1;
      
function HEX3Aanonymous_1124084710(author_1124084721) {
        var result_1124084724 = [];

          result_1124084724 = nimCopy(null, (makeNimstrLit("<address>") || []).concat(author_1124084721 || [],makeNimstrLit("</address>") || []), NTI33554439);

        return result_1124084724;

      }

  var result_1124084682 = [];

    switch (doc_1124073504.target) {
    case 0:
      incl_1946159723(doc_1124073504.addToHead, (makeNimstrLit("<title>") || []).concat(title_1124084679 || [],makeNimstrLit("</title>") || []));
      Temporary1 = (makeNimstrLit("<h1>") || []).concat(title_1124084679 || [],makeNimstrLit("</h1>") || [],get_1929380058(map_1124076007(author_1124084681, HEX3Aanonymous_1124084710), []) || []);
      break;
    case 1:
      incl_1946159723(doc_1124073504.addToHead, HEX7BHEX7D_1879049227(makeNimstrLit("title"), title_1124084679));
      if (isSome_1912602931(author_1124084681)) {
      incl_1946159723(doc_1124073504.addToHead, HEX7BHEX7D_1879049227(makeNimstrLit("author"), get_1912602965(author_1124084681)));
      }
      
      Temporary1 = makeNimstrLit("\\maketitle");
      break;
    case 2:
      Temporary1 = nsuFormatSingleElem(makeNimstrLit("# $1\x0A\x0A"), title_1124084679);
      break;
    }
    result_1124084682 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124084682;

}
    
function HEX3Aanonymous_1124084825(arg_1124084826) {
      var result_1124084827 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124084677 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("title"), arg_1124084826, [HEX21_1207959672(1), HEX3F_1207959693(1)]);
        result_1124084827 = nimCopy(result_1124084827, {typ: 1, str: titleCmd_1124084678(to_1862271050(vals_1124084677[chckIndx(0, 0, (vals_1124084677).length - 1)]), to_1912603022(vals_1124084677[chckIndx(1, 0, (vals_1124084677).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124084827;

    }

function unitCmd_1124084893(number_1124084895, unit_1124084896) {
    var Temporary1;

  var result_1124084897 = [];

    if (isSome_1912602931(number_1124084895)) {
    Temporary1 = (get_1912602965(number_1124084895) || []).concat(makeNimstrLit("\xE2\x80\x89") || [],unit_1124084896 || []);
    }
    else {
    Temporary1 = unit_1124084896;
    }
    
    result_1124084897 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124084897;

}
    
function HEX3Aanonymous_1124084925(arg_1124084926) {
      var result_1124084927 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124084892 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("unit"), arg_1124084926, [HEX3F_1207959693(1), HEX21_1207959672(1)]);
        result_1124084927 = nimCopy(result_1124084927, {typ: 1, str: unitCmd_1124084893(to_1912603022(vals_1124084892[chckIndx(0, 0, (vals_1124084892).length - 1)]), to_1862271050(vals_1124084892[chckIndx(1, 0, (vals_1124084892).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124084927;

    }

function xidocCmd_1124084993() {
    var Temporary1;
      var Temporary2;

  var result_1124084994 = [];

    switch (doc_1124073504.target) {
    case 0:
      var Temporary2 = doc_1124073504;
      if (ConstSet384[Temporary2.target]===undefined) { raiseFieldError2(makeNimstrLit("field \'addToStyle\' is not accessible for type \'Document\' using \'target = "), reprDiscriminant(Temporary2.target, NTI1207959555)); }
      incl_1946159723(Temporary2.addToStyle, makeNimstrLit(".xd-logo{color:#d0c;font-weight:bold}"));
      Temporary1 = makeNimstrLit("<span class=\"xd-logo\">\xCE\xBE</span>");
      break;
    case 1:
      incl_1946159723(doc_1124073504.addToHead, HEX7BHEX7D_1879049227(HEX5BHEX5D_1879049231(makeNimstrLit("usepackage"), makeNimstrLit("svgnames")), makeNimstrLit("xcolor")));
      Temporary1 = HEX7BHEX7D_1879049227(HEX7BHEX7D_1879049227(makeNimstrLit("textcolor"), makeNimstrLit("#d0c")), makeNimstrLit("\\(\\xi\\)"));
      break;
    case 2:
      Temporary1 = makeNimstrLit("[\xCE\xBE]");
      break;
    }
    result_1124084994 = nimCopy(null, Temporary1, NTI33554439);

  return result_1124084994;

}
    
function HEX3Aanonymous_1124085046(arg_1124085047) {
      var result_1124085048 = ({typ: 0, str: [], list: [], opt: ({val: null})});

      BeforeRet: do {
        var vals_1124084992 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("xidoc"), arg_1124085047, []);
        result_1124085048 = nimCopy(result_1124085048, {typ: 1, str: xidocCmd_1124084993(), list: [], opt: ({val: null})}, NTI1207959557);
        break BeforeRet;
      } while (false);

      return result_1124085048;

    }

function generateHtmlTag_1124085099(tag_1124085100, args_1124085101, body_1124085102, paired_1124085103) {
    var Temporary5;

  var result_1124085104 = [];

    var attrs_1124085112 = newSeq_452985301(0);
    var classes_1124085120 = newSeq_452985301(0);
    Label1: do {
      var arg_1124085124 = [];
      var i_486540427 = 0;
      var L_486540428 = (args_1124085101).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_486540427 < L_486540428)) break Label3;
            arg_1124085124 = args_1124085101[chckIndx(i_486540427, 0, (args_1124085101).length - 1)];
            if (nsuStartsWith(arg_1124085124, makeNimstrLit("#"))) {
            attrs_1124085112.push(nsuFormatSingleElem(makeNimstrLit("id=\"$1\""), HEX5BHEX5D_939527322(arg_1124085124, HEX2EHEX2E_872415312(1, 1))));;
            }
            else {
            if (nsuStartsWith(arg_1124085124, makeNimstrLit("."))) {
            classes_1124085120.push(HEX5BHEX5D_939527322(arg_1124085124, HEX2EHEX2E_872415312(1, 1)));;
            }
            else {
              var Temporary4 = nimCopy(null, arg_1124085124, NTI33554439);
            attrs_1124085112.push(Temporary4);;
            }
            }
            i_486540427 = addInt(i_486540427, 1);
            if (!(((args_1124085101).length == L_486540428))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    if (!(((classes_1124085120).length == 0))) {
    attrs_1124085112.push(nsuFormatSingleElem(makeNimstrLit("class=\"$1\""), nsuJoinSep(classes_1124085120, makeNimstrLit(" "))));;
    }
    
    if (paired_1124085103) {
    Temporary5 = nsuFormatOpenArray(makeNimstrLit("<$1>$2</$3>"), [nsuJoinSep(HEX26_2013266015([nimCopy(null, tag_1124085100, NTI33554439)], attrs_1124085112), makeNimstrLit(" ")), nimCopy(null, body_1124085102, NTI33554439), nimCopy(null, tag_1124085100, NTI33554439)]);
    }
    else {
    Temporary5 = nsuFormatOpenArray(makeNimstrLit("<$1 />"), [nsuJoinSep(HEX26_2013266015([nimCopy(null, tag_1124085100, NTI33554439)], attrs_1124085112), makeNimstrLit(" "))]);
    }
    
    result_1124085104 = nimCopy(null, Temporary5, NTI33554439);

  return result_1124085104;

}

function tagCmd_1124085197(tag_1124085198, args_1124085199, body_1124085200) {
  var result_1124085201 = [];

    result_1124085201 = nimCopy(null, generateHtmlTag_1124085099(tag_1124085198, args_1124085199, body_1124085200, true), NTI33554439);

  return result_1124085201;

}
      
function HEX3Aanonymous_1124085207(arg_1124085208) {
        var result_1124085209 = ({typ: 0, str: [], list: [], opt: ({val: null})});

        BeforeRet: do {
          if (doc_1124073504.safeMode) {
          raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("<>")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
          }
          
          var vals_1124085196 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("<>"), arg_1124085208, [HEX21_1207959672(0), HEX2A_1207959696(0), HEX21_1207959672(1)]);
          result_1124085209 = nimCopy(result_1124085209, {typ: 1, str: tagCmd_1124085197(to_1862271050(vals_1124085196[chckIndx(0, 0, (vals_1124085196).length - 1)]), to_1124078354(vals_1124085196[chckIndx(1, 0, (vals_1124085196).length - 1)]), to_1862271050(vals_1124085196[chckIndx(2, 0, (vals_1124085196).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
          break BeforeRet;
        } while (false);

        return result_1124085209;

      }
              
function HEX3Aanonymous_1124085277(tag_1124085278) {
                  tag_1124085278 = nimCopy(null, tag_1124085278, NTI33554439);

function theTagCmd_1124085285(args_1124085286) {
  var result_1124085287 = [];

    result_1124085287 = nimCopy(null, generateHtmlTag_1124085099(tag_1124085278, args_1124085286, [], false), NTI33554439);

  return result_1124085287;

}
                  
function HEX3Aanonymous_1124085293(arg_1124085294) {
                    var result_1124085295 = ({typ: 0, str: [], list: [], opt: ({val: null})});

                    BeforeRet: do {
                      if (doc_1124073504.safeMode) {
                      var fmtRes_1124085283 = [mnewString(0)];
                      fmtRes_1124085283[0].push.apply(fmtRes_1124085283[0], makeNimstrLit("<"));;
                      formatValue_1275068578(fmtRes_1124085283, 0, tag_1124085278, []);
                      fmtRes_1124085283[0].push.apply(fmtRes_1124085283[0], makeNimstrLit(">"));;
                      raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), fmtRes_1124085283[0]), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
                      }
                      
                      var fmtRes_1124085283 = [mnewString(0)];
                      fmtRes_1124085283[0].push.apply(fmtRes_1124085283[0], makeNimstrLit("<"));;
                      formatValue_1275068578(fmtRes_1124085283, 0, tag_1124085278, []);
                      fmtRes_1124085283[0].push.apply(fmtRes_1124085283[0], makeNimstrLit(">"));;
                      var vals_1124085284 = expandArguments_1879048205(doc_1124073504, fmtRes_1124085283[0], arg_1124085294, [HEX2A_1207959696(0)]);
                      result_1124085295 = nimCopy(result_1124085295, {typ: 1, str: theTagCmd_1124085285(to_1124078354(vals_1124085284[chckIndx(0, 0, (vals_1124085284).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
                      break BeforeRet;
                    } while (false);

                    return result_1124085295;

                  }

function theTagCmd_1124085353(args_1124085354, body_1124085355) {
  var result_1124085356 = [];

    result_1124085356 = nimCopy(null, generateHtmlTag_1124085099(tag_1124085278, args_1124085354, body_1124085355, true), NTI33554439);

  return result_1124085356;

}
                    
function HEX3Aanonymous_1124085362(arg_1124085363) {
                      var result_1124085364 = ({typ: 0, str: [], list: [], opt: ({val: null})});

                      BeforeRet: do {
                        if (doc_1124073504.safeMode) {
                        var fmtRes_1124085351 = [mnewString(0)];
                        fmtRes_1124085351[0].push.apply(fmtRes_1124085351[0], makeNimstrLit("<"));;
                        formatValue_1275068578(fmtRes_1124085351, 0, tag_1124085278, []);
                        fmtRes_1124085351[0].push.apply(fmtRes_1124085351[0], makeNimstrLit(">"));;
                        raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), fmtRes_1124085351[0]), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
                        }
                        
                        var fmtRes_1124085351 = [mnewString(0)];
                        fmtRes_1124085351[0].push.apply(fmtRes_1124085351[0], makeNimstrLit("<"));;
                        formatValue_1275068578(fmtRes_1124085351, 0, tag_1124085278, []);
                        fmtRes_1124085351[0].push.apply(fmtRes_1124085351[0], makeNimstrLit(">"));;
                        var vals_1124085352 = expandArguments_1879048205(doc_1124073504, fmtRes_1124085351[0], arg_1124085363, [HEX2A_1207959696(0), HEX21_1207959672(1)]);
                        result_1124085364 = nimCopy(result_1124085364, {typ: 1, str: theTagCmd_1124085353(to_1124078354(vals_1124085352[chckIndx(0, 0, (vals_1124085352).length - 1)]), to_1862271050(vals_1124085352[chckIndx(1, 0, (vals_1124085352).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
                        break BeforeRet;
                      } while (false);

                      return result_1124085364;

                    }

                  if (contains_872415275(htmlSelfClosingTags_1124073497, tag_1124085278)) {
                  var fmtRes_1124085283 = [mnewString(0)];
                  fmtRes_1124085283[0].push.apply(fmtRes_1124085283[0], makeNimstrLit("<"));;
                  formatValue_1275068578(fmtRes_1124085283, 0, tag_1124085278, []);
                  fmtRes_1124085283[0].push.apply(fmtRes_1124085283[0], makeNimstrLit(">"));;
                  HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], fmtRes_1124085283[0], HEX3Aanonymous_1124085293);
                  }
                  else {
                    var fmtRes_1124085351 = [mnewString(0)];
                    fmtRes_1124085351[0].push.apply(fmtRes_1124085351[0], makeNimstrLit("<"));;
                    formatValue_1275068578(fmtRes_1124085351, 0, tag_1124085278, []);
                    fmtRes_1124085351[0].push.apply(fmtRes_1124085351[0], makeNimstrLit(">"));;
                    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], fmtRes_1124085351[0], HEX3Aanonymous_1124085362);
                  }
                  

                
              }

function backslashCmd_1124085427(command_1124085428, args_1124085429) {
  var result_1124085430 = [];

    Label1: do {
      var iHEX60gensym461_1124085452 = 0;
      var resultHEX60gensym461_1124085459 = newSeq_452985301(chckRange((args_1124085429).length, 0, 2147483647));
      Label2: do {
        var it_1124085463 = [];
        var i_486540437 = 0;
        var L_486540438 = (args_1124085429).length;
        Label3: do {
            Label4: while (true) {
            if (!(i_486540437 < L_486540438)) break Label4;
              it_1124085463 = args_1124085429[chckIndx(i_486540437, 0, (args_1124085429).length - 1)];
              resultHEX60gensym461_1124085459[chckIndx(iHEX60gensym461_1124085452, 0, (resultHEX60gensym461_1124085459).length - 1)] = nimCopy(null, nsuFormatSingleElem(makeNimstrLit("{$1}"), it_1124085463), NTI33554439);
              iHEX60gensym461_1124085452 = addInt(iHEX60gensym461_1124085452, 1);
              i_486540437 = addInt(i_486540437, 1);
              if (!(((args_1124085429).length == L_486540438))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    } while (false);
    result_1124085430 = nimCopy(null, (makeNimstrLit("\\") || []).concat(nsuJoinSep(resultHEX60gensym461_1124085459, []) || []), NTI33554439);

  return result_1124085430;

}
      
function HEX3Aanonymous_1124085473(arg_1124085474) {
        var result_1124085475 = ({typ: 0, str: [], list: [], opt: ({val: null})});

        BeforeRet: do {
          if (doc_1124073504.safeMode) {
          raiseException({message: nsuFormatSingleElem(makeNimstrLit("The [$1] command is not allowed in safe mode"), makeNimstrLit("\\")), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
          }
          
          var vals_1124085426 = expandArguments_1879048205(doc_1124073504, makeNimstrLit("\\"), arg_1124085474, [HEX21_1207959672(0), HEX2A_1207959696(1)]);
          result_1124085475 = nimCopy(result_1124085475, {typ: 1, str: backslashCmd_1124085427(to_1862271050(vals_1124085426[chckIndx(0, 0, (vals_1124085426).length - 1)]), to_1124078354(vals_1124085426[chckIndx(1, 0, (vals_1124085426).length - 1)])), list: [], opt: ({val: null})}, NTI1207959557);
          break BeforeRet;
        } while (false);

        return result_1124085475;

      }

  var result_1124073507 = ({data: [], counter: 0});

    var commands_1124073510 = [({data: [], counter: 0})];
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("#"), HEX3Aanonymous_1124073535);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit(";"), HEX3Aanonymous_1124073600);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("()"), HEX3Aanonymous_1124073662);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("("), HEX3Aanonymous_1124073727);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit(")"), HEX3Aanonymous_1124073788);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("--"), HEX3Aanonymous_1124073849);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("---"), HEX3Aanonymous_1124073910);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("..."), HEX3Aanonymous_1124073971);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("\""), HEX3Aanonymous_1124074114);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("$"), HEX3Aanonymous_1124074184);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("$$"), HEX3Aanonymous_1124074254);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("$$&"), HEX3Aanonymous_1124074324);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("LaTeX"), HEX3Aanonymous_1124074412);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("add-to-head"), HEX3Aanonymous_1124074497);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("arg"), HEX3Aanonymous_1124074684);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("arg-expand"), HEX3Aanonymous_1124074871);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("arg-raw"), HEX3Aanonymous_1124075058);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("arg-raw-escape"), HEX3Aanonymous_1124075245);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("bf"), HEX3Aanonymous_1124075311);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("block-quote"), HEX3Aanonymous_1124075401);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("checkboxes"), HEX3Aanonymous_1124075504);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("code"), HEX3Aanonymous_1124075833);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("code-block"), HEX3Aanonymous_1124076052);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("color"), HEX3Aanonymous_1124076153);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("def"), HEX3Aanonymous_1124076432);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("def-global"), HEX3Aanonymous_1124076653);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("dfn"), HEX3Aanonymous_1124076895);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("draw"), HEX3Aanonymous_1124077012);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("example"), HEX3Aanonymous_1124077260);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("exercise"), HEX3Aanonymous_1124077498);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("expand"), HEX3Aanonymous_1124077574);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("figure"), HEX3Aanonymous_1124077756);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("for-each"), HEX3Aanonymous_1124077936);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("get-doc-path-absolute"), HEX3Aanonymous_1124078110);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("get-doc-path-relative-to-containing"), HEX3Aanonymous_1124078172);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("hide"), HEX3Aanonymous_1124078238);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("header-row"), HEX3Aanonymous_1124078347);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("html-add-attrs"), HEX3Aanonymous_1124078541);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("if-html"), HEX3Aanonymous_1124078615);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("if-latex"), HEX3Aanonymous_1124078685);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("if-gemtext"), HEX3Aanonymous_1124078755);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("include"), HEX3Aanonymous_1124079014);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("inject"), HEX3Aanonymous_1124079130);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("it"), HEX3Aanonymous_1124079196);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("janet-call"), HEX3Aanonymous_1124079299);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("janet-eval"), HEX3Aanonymous_1124079430);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("join"), HEX3Aanonymous_1124079539);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("js-call"), HEX3Aanonymous_1124079611);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("js-eval"), HEX3Aanonymous_1124079705);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("js-module"), HEX3Aanonymous_1124079803);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("js-module-raw"), HEX3Aanonymous_1124079896);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("lang"), HEX3Aanonymous_1124079971);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("lemma"), HEX3Aanonymous_1124080203);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("link"), HEX3Aanonymous_1124080335);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("link-image"), HEX3Aanonymous_1124080443);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("link-stylesheet"), HEX3Aanonymous_1124080550);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("list"), HEX3Aanonymous_1124080727);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("list-dirs"), HEX3Aanonymous_1124080798);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("list-files"), HEX3Aanonymous_1124080868);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("matext"), HEX3Aanonymous_1124080935);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("ms"), HEX3Aanonymous_1124081001);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("ordered-list"), HEX3Aanonymous_1124081178);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("p"), HEX3Aanonymous_1124081245);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("pass"), HEX3Aanonymous_1124081311);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("pass-raw"), HEX3Aanonymous_1124081377);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("proof"), HEX3Aanonymous_1124081613);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("props"), HEX3Aanonymous_1124081800);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("raw"), HEX3Aanonymous_1124081867);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("raw<"), HEX3Aanonymous_1124081934);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("render"), HEX3Aanonymous_1124082000);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("replace-suffix"), HEX3Aanonymous_1124082069);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("reset"), HEX3Aanonymous_1124082720);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("row"), HEX3Aanonymous_1124082829);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("section"), HEX3Aanonymous_1124082978);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("set"), HEX3Aanonymous_1124083101);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("set-doc-lang"), HEX3Aanonymous_1124083174);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("set-syntax-highlighting-theme"), HEX3Aanonymous_1124083240);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("set-title"), HEX3Aanonymous_1124083352);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("show-title"), HEX3Aanonymous_1124083418);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("solution"), HEX3Aanonymous_1124083646);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("space"), HEX3Aanonymous_1124083721);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("spoiler"), HEX3Aanonymous_1124083784);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("spoiler-solution"), HEX3Aanonymous_1124083961);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("style"), HEX3Aanonymous_1124084064);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("table"), HEX3Aanonymous_1124084177);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("template-arg"), HEX3Aanonymous_1124084316);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("term"), HEX3Aanonymous_1124084382);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("theorem"), HEX3Aanonymous_1124084610);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("title"), HEX3Aanonymous_1124084825);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("unit"), HEX3Aanonymous_1124084925);
    HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("xidoc"), HEX3Aanonymous_1124085046);
    switch (doc_1124073504.target) {
    case 0:
      HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("<>"), HEX3Aanonymous_1124085207);
      Label1: do {
        var tag_1124085276 = [];
        var i_486540075 = 0;
        var L_486540076 = 130;
        Label2: do {
            Label3: while (true) {
            if (!(i_486540075 < L_486540076)) break Label3;
              tag_1124085276 = htmlTags_1124073496[chckIndx(i_486540075, 0, (htmlTags_1124073496).length - 1)];
              HEX3Aanonymous_1124085277(tag_1124085276);
              i_486540075 = addInt(i_486540075, 1);
              if (!((130 == L_486540076))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
      break;
    case 1:
      HEX5BHEX5DHEX3D_1862271113(commands_1124073510[0], makeNimstrLit("\\"), HEX3Aanonymous_1124085473);
      break;
    default: 
      break;
    }
    result_1124073507 = nimCopy(result_1124073507, commands_1124073510[0], NTI1207959603);

  return result_1124073507;

}

function get_1191182378(self_1191182380) {
  var result_1191182381 = null;
  var result_1191182381_Idx = 0;

  BeforeRet: do {
    if (isNone_1191182386(self_1191182380)) {
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI1006632980, name: null, trace: [], up: null}, "UnpackDefect");
    }
    
    result_1191182381 = self_1191182380; result_1191182381_Idx = "val";
    break BeforeRet;
  } while (false);

  return [result_1191182381, result_1191182381_Idx];

}

function HEX5BHEX5D_1191182428(s_1191182432, x_1191182433) {
  var result_1191182434 = [];

    var a_1191182436 = x_1191182433.a;
    var L_1191182442 = addInt(subInt(subInt((s_1191182432).length, x_1191182433.b), a_1191182436), 1);
    result_1191182434 = new Array(chckRange(L_1191182442, 0, 2147483647)); for (var i = 0 ; i < chckRange(L_1191182442, 0, 2147483647) ; ++i) { result_1191182434[i] = ({args: ({data: [], counter: 0}), cmdArg: [], cmdName: [], commands: ({data: [], counter: 0}), lang: ({val: 0, has: false}), path: ({val: [], has: false})}); }    Label1: do {
      var i_1191182451 = 0;
      var i_486540446 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486540446 < L_1191182442)) break Label3;
            i_1191182451 = i_486540446;
            result_1191182434[chckIndx(i_1191182451, 0, (result_1191182434).length - 1)] = nimCopy(result_1191182434[chckIndx(i_1191182451, 0, (result_1191182434).length - 1)], s_1191182432[chckIndx(addInt(i_1191182451, a_1191182436), 0, (s_1191182432).length - 1)], NTI1207959561);
            i_486540446 = addInt(i_486540446, 1);
          }
      } while (false);
    } while (false);

  return result_1191182434;

}

function npegsreplace(s_1140853735, sub_1140853736, by_1140853737) {
  var result_1140853738 = [];

    result_1140853738 = nimCopy(null, [], NTI33554439);
    var i_1140853739 = 0;
    var c_1140853740 = [({matches: [{Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}], ml: 0, origStart: 0})];
    Label1: do {
        Label2: while (true) {
        if (!(i_1140853739 < (s_1140853735).length)) break Label2;
          var x_1140853741 = npegsrawMatch(s_1140853735, sub_1140853736, i_1140853739, c_1140853740[0]);
          if ((x_1140853741 <= 0)) {
          addChar(result_1140853738, s_1140853735[chckIndx(i_1140853739, 0, (s_1140853735).length - 1)]);;
          i_1140853739 = addInt(i_1140853739, 1);
          }
          else {
            result_1140853738.push.apply(result_1140853738, by_1140853737);;
            i_1140853739 = addInt(i_1140853739, x_1140853741);
          }
          
        }
    } while (false);
    result_1140853738.push.apply(result_1140853738, substr_33557918(s_1140853735, i_1140853739));;

  return result_1140853738;

}

function nsuCountChar(s_654313038, sub_654313039) {
  var result_654313040 = 0;

    result_654313040 = 0;
    Label1: do {
      var c_654313041 = 0;
      var i_1191182363 = 0;
      var L_1191182364 = (s_654313038).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_1191182363 < L_1191182364)) break Label3;
            c_654313041 = s_654313038[chckIndx(i_1191182363, 0, (s_654313038).length - 1)];
            if ((c_654313041 == sub_654313039)) {
            result_654313040 = addInt(result_654313040, 1);
            }
            
            i_1191182363 = addInt(i_1191182363, 1);
            if (!(((s_654313038).length == L_1191182364))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(258, 11) `len(a) == L` the length of the string changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);

  return result_654313040;

}

function format_1191182348(err_1191182349, doc_1191182350, termColors_1191182351) {
    var Temporary1;

  var result_1191182352 = [];

    if (termColors_1191182351) {
    result_1191182352.push.apply(result_1191182352, makeNimstrLit("\x1B[91m"));;
    }
    
    var fmtRes_1191182360 = [mnewString(0)];
    fmtRes_1191182360[0].push.apply(fmtRes_1191182360[0], makeNimstrLit("Error while rendering file "));;
    formatValue_1275068578(fmtRes_1191182360, 0, (Temporary1 = get_1191182378(doc_1191182350.stack[chckIndx(0, 0, (doc_1191182350.stack).length - 1)].path), Temporary1)[0][Temporary1[1]], []);
    fmtRes_1191182360[0].push.apply(fmtRes_1191182360[0], makeNimstrLit("\x0A"));;
    result_1191182352.push.apply(result_1191182352, fmtRes_1191182360[0]);;
    if (termColors_1191182351) {
    result_1191182352.push.apply(result_1191182352, makeNimstrLit("\x1B[93m"));;
    }
    
    Label2: do {
      var frame_1191182491 = ({args: ({data: [], counter: 0}), cmdArg: [], cmdName: [], commands: ({data: [], counter: 0}), lang: ({val: 0, has: false}), path: ({val: [], has: false})});
      var colontmp__486540441 = [];
      colontmp__486540441 = HEX5BHEX5D_1191182428(doc_1191182350.stack, HEX2EHEX2E_872415312(1, 1));
      var i_486540442 = 0;
      var L_486540443 = (colontmp__486540441).length;
      Label3: do {
          Label4: while (true) {
          if (!(i_486540442 < L_486540443)) break Label4;
            frame_1191182491 = colontmp__486540441[chckIndx(i_486540442, 0, (colontmp__486540441).length - 1)];
            var truncatedArg_1191182493 = npegsreplace(frame_1191182491.cmdArg, peg_1140854591(makeNimstrLit("\\s+")), makeNimstrLit(" "));
            if ((48 < (truncatedArg_1191182493).length)) {
            truncatedArg_1191182493 = nimCopy(null, HEX5BHEX5D_939524972(truncatedArg_1191182493, HEX2EHEX2E_939524947(0, 47)), NTI33554439);
            truncatedArg_1191182493.push.apply(truncatedArg_1191182493, makeNimstrLit("\xE2\x80\xA6"));;
            var numOpeningBrackets_1191182517 = nsuCountChar(truncatedArg_1191182493, 91);
            var numClosingBrackets_1191182518 = nsuCountChar(truncatedArg_1191182493, 93);
            truncatedArg_1191182493.push.apply(truncatedArg_1191182493, nsuRepeatStr(makeNimstrLit("]\xE2\x80\xA6"), chckRange(subInt(numOpeningBrackets_1191182517, numClosingBrackets_1191182518), 0, 2147483647)));;
            }
            
            var fmtRes_1191182519 = [mnewString(0)];
            fmtRes_1191182519[0].push.apply(fmtRes_1191182519[0], makeNimstrLit("in ["));;
            formatValue_1275068578(fmtRes_1191182519, 0, frame_1191182491.cmdName, []);
            formatValue_1275068578(fmtRes_1191182519, 0, truncatedArg_1191182493, []);
            fmtRes_1191182519[0].push.apply(fmtRes_1191182519[0], makeNimstrLit("]\x0A"));;
            result_1191182352.push.apply(result_1191182352, fmtRes_1191182519[0]);;
            i_486540442 = addInt(i_486540442, 1);
            if (!(((colontmp__486540441).length == L_486540443))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    if (termColors_1191182351) {
    result_1191182352.push.apply(result_1191182352, makeNimstrLit("\x1B[0m"));;
    }
    
    result_1191182352.push.apply(result_1191182352, (err_1191182349.message || []).concat(makeNimstrLit("\x0A") || []));;

  return result_1191182352;

}

function getCurrentException() {
  var result_33556522 = null;

    if (isNimException_33556519()) {
    result_33556522 = lastJSError;
    }
    

  return result_33556522;

}

function len_486539323(s_486539325) {
  var result_486539326 = 0;

    result_486539326 = s_486539325.counter;

  return result_486539326;

}

function renderXidoc_486539286(body_486539287, path_486539288, target_486539289, snippet_486539290, safeMode_486539291, verbose_486539292, colorfulError_486539293) {
    var Temporary1;
    var Temporary3;
        var Temporary4;
          var Temporary5;
        var Temporary7;
      var Temporary11;
        
function HEX3Aanonymous_486539671() {
          var result_486539672 = 0;

          BeforeRet: do {
            Label1: do {
              var iHEX60gensym13_486539681 = 0;
              var colontmp__486540450 = 0;
              colontmp__486540450 = subInt((doc_486539302.stack).length, 1);
              var res_486540451 = colontmp__486540450;
              Label2: do {
                  Label3: while (true) {
                  if (!(0 <= res_486540451)) break Label3;
                    iHEX60gensym13_486539681 = res_486540451;
                    var frameHEX60gensym13_486539682 = nimCopy(null, doc_486539302.stack[chckIndx(iHEX60gensym13_486539681, 0, (doc_486539302.stack).length - 1)], NTI1207959561);
                    if (isSome_1124074069(frameHEX60gensym13_486539682.lang)) {
                    result_486539672 = get_1124074086(frameHEX60gensym13_486539682.lang);
                    break BeforeRet;
                    }
                    
                    res_486540451 = subInt(res_486540451, 1);
                  }
              } while (false);
            } while (false);
          } while (false);

          return result_486539672;

        }
        
function HEX3Aanonymous_486539707() {
          var result_486539708 = 0;

          BeforeRet: do {
            Label1: do {
              var iHEX60gensym14_486539717 = 0;
              var colontmp__486540454 = 0;
              colontmp__486540454 = subInt((doc_486539302.stack).length, 1);
              var res_486540455 = colontmp__486540454;
              Label2: do {
                  Label3: while (true) {
                  if (!(0 <= res_486540455)) break Label3;
                    iHEX60gensym14_486539717 = res_486540455;
                    var frameHEX60gensym14_486539718 = nimCopy(null, doc_486539302.stack[chckIndx(iHEX60gensym14_486539717, 0, (doc_486539302.stack).length - 1)], NTI1207959561);
                    if (isSome_1124074069(frameHEX60gensym14_486539718.lang)) {
                    result_486539708 = get_1124074086(frameHEX60gensym14_486539718.lang);
                    break BeforeRet;
                    }
                    
                    res_486540455 = subInt(res_486540455, 1);
                  }
              } while (false);
            } while (false);
          } while (false);

          return result_486539708;

        }

  var result_486539294 = [];

  BeforeRet: do {
    var doc_486539302 = {body: nimCopy(null, body_486539287, NTI33554439), target: target_486539289, snippet: snippet_486539290, safeMode: safeMode_486539291, verbose: verbose_486539292, stack: [{cmdName: makeNimstrLit("[top]"), path: some_1912603075(path_486539288), args: ({data: [], counter: 0}), cmdArg: [], commands: ({data: [], counter: 0}), lang: ({val: 0, has: false})}], addToHead: ({data: [], counter: 0, first: 0, last: 0}), settings: ({data: [], counter: 0}), templateArgs: ({data: [], counter: 0}), addToStyle: ({data: [], counter: 0, first: 0, last: 0})};
    doc_486539302.stack[chckIndx(0, 0, (doc_486539302.stack).length - 1)].commands = nimCopy(doc_486539302.stack[chckIndx(0, 0, (doc_486539302.stack).length - 1)].commands, defaultCommands_1124073503(doc_486539302), NTI1207959603);
++excHandler;
    Temporary3 = framePtr;
    try {
    Temporary1 = renderStr_1308623254(doc_486539302, doc_486539302.body);
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
    framePtr = Temporary3;
    if (lastJSError && (isObj(lastJSError.m_type, NTI1191182340))) {
    raiseException({message: format_1191182348(getCurrentException(), doc_486539302, colorfulError_486539293), m_type: NTI1191182340, parent: null, name: null, trace: [], up: null}, "XidocError:ObjectType");
    }
    else {
    	reraiseException();
    }
    lastJSError = prevJSError;
    } finally {
    framePtr = Temporary3;
    }
    var rendered_486539303 = nimCopy(null, Temporary1, NTI33554439);
    if (snippet_486539290) {
    result_486539294 = nimCopy(null, rendered_486539303, NTI33554439);
    break BeforeRet;
    }
    else {
        if (!(doc_486539302.target == 0)) Temporary4 = false; else {          var Temporary5 = doc_486539302;
          if (ConstSet385[Temporary5.target]===undefined) { raiseFieldError2(makeNimstrLit("field \'addToStyle\' is not accessible for type \'Document\' using \'target = "), reprDiscriminant(Temporary5.target, NTI1207959555)); }
          Temporary4 = !((len_486539323(Temporary5.addToStyle) == 0));        }      if (Temporary4) {
      Label6: do {
        var Temporary7 = doc_486539302;
        if (ConstSet386[Temporary7.target]===undefined) { raiseFieldError2(makeNimstrLit("field \'addToStyle\' is not accessible for type \'Document\' using \'target = "), reprDiscriminant(Temporary7.target, NTI1207959555)); }
        var HEX3Atmp_486539612 = nimCopy(null, Temporary7.addToStyle, NTI1207959643);
        var iHEX60gensym8_486539615 = 0;
        var resultHEX60gensym8_486539637 = newSeq_452985301(chckRange(len_486539323(HEX3Atmp_486539612), 0, 2147483647));
        Label8: do {
          var itHEX60gensym8_486539641 = [];
          var length_486539949 = len_486539323(HEX3Atmp_486539612);
          if ((0 < (HEX3Atmp_486539612.data).length)) {
          var h_486539950 = HEX3Atmp_486539612.first;
          var idx_486539951 = 0;
          Label9: do {
              Label10: while (true) {
              if (!(0 <= h_486539950)) break Label10;
                var nxt_486539953 = HEX3Atmp_486539612.data[chckIndx(h_486539950, 0, (HEX3Atmp_486539612.data).length - 1)].Field1;
                if (isFilled_1040187430(HEX3Atmp_486539612.data[chckIndx(h_486539950, 0, (HEX3Atmp_486539612.data).length - 1)].Field0)) {
                itHEX60gensym8_486539641 = HEX3Atmp_486539612.data[chckIndx(h_486539950, 0, (HEX3Atmp_486539612.data).length - 1)].Field2;
                resultHEX60gensym8_486539637[chckIndx(iHEX60gensym8_486539615, 0, (resultHEX60gensym8_486539637).length - 1)] = nimCopy(null, itHEX60gensym8_486539641, NTI33554439);
                iHEX60gensym8_486539615 = addInt(iHEX60gensym8_486539615, 1);
                if (!((len_486539323(HEX3Atmp_486539612) == length_486539949))) {
                failedAssertImpl_218103864(makeNimstrLit("sets.nim(905, 11) `len(s) == length` the length of the OrderedSet changed while iterating over it"));
                }
                
                idx_486539951 = addInt(idx_486539951, 1);
                }
                
                h_486539950 = nxt_486539953;
              }
          } while (false);
          }
          
        } while (false);
      } while (false);
      incl_1946159723(doc_486539302.addToHead, (makeNimstrLit("<style>") || []).concat(nsuJoinSep(resultHEX60gensym8_486539637, []) || [],makeNimstrLit("</style>") || []));
      }
      
      switch (target_486539289) {
      case 0:
        Temporary11 = translate_1224736808(3, HEX3Aanonymous_486539671());
        break;
      case 1:
        Temporary11 = translate_1224736808(4, HEX3Aanonymous_486539707());
        break;
      default: 
        Temporary11 = [];
        break;
      }
      var languageString_486539741 = nimCopy(null, Temporary11, NTI33554439);
      Label12: do {
        var HEX3Atmp_486539845 = nimCopy(null, doc_486539302.addToHead, NTI1207959643);
        var iHEX60gensym19_486539848 = 0;
        var resultHEX60gensym19_486539870 = newSeq_452985301(chckRange(len_486539323(HEX3Atmp_486539845), 0, 2147483647));
        Label13: do {
          var itHEX60gensym19_486539874 = [];
          var length_486539956 = len_486539323(HEX3Atmp_486539845);
          if ((0 < (HEX3Atmp_486539845.data).length)) {
          var h_486539957 = HEX3Atmp_486539845.first;
          var idx_486539958 = 0;
          Label14: do {
              Label15: while (true) {
              if (!(0 <= h_486539957)) break Label15;
                var nxt_486539960 = HEX3Atmp_486539845.data[chckIndx(h_486539957, 0, (HEX3Atmp_486539845.data).length - 1)].Field1;
                if (isFilled_1040187430(HEX3Atmp_486539845.data[chckIndx(h_486539957, 0, (HEX3Atmp_486539845.data).length - 1)].Field0)) {
                itHEX60gensym19_486539874 = HEX3Atmp_486539845.data[chckIndx(h_486539957, 0, (HEX3Atmp_486539845.data).length - 1)].Field2;
                resultHEX60gensym19_486539870[chckIndx(iHEX60gensym19_486539848, 0, (resultHEX60gensym19_486539870).length - 1)] = nimCopy(null, itHEX60gensym19_486539874, NTI33554439);
                iHEX60gensym19_486539848 = addInt(iHEX60gensym19_486539848, 1);
                if (!((len_486539323(HEX3Atmp_486539845) == length_486539956))) {
                failedAssertImpl_218103864(makeNimstrLit("sets.nim(905, 11) `len(s) == length` the length of the OrderedSet changed while iterating over it"));
                }
                
                idx_486539958 = addInt(idx_486539958, 1);
                }
                
                h_486539957 = nxt_486539960;
              }
          } while (false);
          }
          
        } while (false);
      } while (false);
      result_486539294 = nimCopy(null, nsuFormatOpenArray(templates_486539276[chckIndx(target_486539289, 0, (templates_486539276).length - 1)], [nsuJoinSep(resultHEX60gensym19_486539870, []), nimCopy(null, rendered_486539303, NTI33554439), nimCopy(null, languageString_486539741, NTI33554439)]), NTI33554439);
      break BeforeRet;
    }
    
  } while (false);

  return result_486539294;

}

function renderXidoc(body_486539894, config_486539895) {
    var Temporary1;
    var Temporary3;

  var result_486539896 = ({success: false, markup: null, err: null});

  BeforeRet: do {
    if ((config_486539895 == undefined)) {
    Temporary1 = {};
    }
    else {
    Temporary1 = config_486539895;
    }
    
    var config_486539901 = Temporary1;
++excHandler;
    Temporary3 = framePtr;
    try {
    var rendered_486539926 = renderXidoc_486539286(cstrToNimstr(body_486539894), [], 0, (config_486539901.snippet), (config_486539901.safeMode), (config_486539901.verbose), false);
    result_486539896 = nimCopy(result_486539896, {success: true, markup: toJSStr(rendered_486539926), err: null}, NTI486539647);
    break BeforeRet;
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
    framePtr = Temporary3;
    if (lastJSError && (isObj(lastJSError.m_type, NTI1191182340))) {
    result_486539896 = nimCopy(result_486539896, {success: false, err: toJSStr(getCurrentException().message), markup: null}, NTI486539647);
    break BeforeRet;
    }
    else {
    	reraiseException();
    }
    lastJSError = prevJSError;
    } finally {
    framePtr = Temporary3;
    }
  } while (false);

  return result_486539896;

}
export {renderXidoc};
